
NN_miniproject_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015440  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000420  080156d8  080156d8  000256d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015af8  08015af8  000302c0  2**0
                  CONTENTS
  4 .ARM          00000008  08015af8  08015af8  00025af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015b00  08015b00  000302c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015b00  08015b00  00025b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015b04  08015b04  00025b04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  24000000  08015b08  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000200  08015d08  00030200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000260  08015d68  00030260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00003250  240002c0  08015dc8  000302c0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  24003510  08015dc8  00033510  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000302c0  2**0
                  CONTENTS, READONLY
 14 .debug_info   000378f6  00000000  00000000  000302ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 000058f9  00000000  00000000  00067be4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001610  00000000  00000000  0006d4e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000013f8  00000000  00000000  0006eaf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0003bf3c  00000000  00000000  0006fee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   00019a11  00000000  00000000  000abe24  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    001619e5  00000000  00000000  000c5835  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  0022721a  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000062e0  00000000  00000000  00227298  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240002c0 	.word	0x240002c0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080156c0 	.word	0x080156c0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240002c4 	.word	0x240002c4
 80002d4:	080156c0 	.word	0x080156c0

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_uldivmod>:
 80002e8:	b953      	cbnz	r3, 8000300 <__aeabi_uldivmod+0x18>
 80002ea:	b94a      	cbnz	r2, 8000300 <__aeabi_uldivmod+0x18>
 80002ec:	2900      	cmp	r1, #0
 80002ee:	bf08      	it	eq
 80002f0:	2800      	cmpeq	r0, #0
 80002f2:	bf1c      	itt	ne
 80002f4:	f04f 31ff 	movne.w	r1, #4294967295
 80002f8:	f04f 30ff 	movne.w	r0, #4294967295
 80002fc:	f000 b972 	b.w	80005e4 <__aeabi_idiv0>
 8000300:	f1ad 0c08 	sub.w	ip, sp, #8
 8000304:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000308:	f000 f806 	bl	8000318 <__udivmoddi4>
 800030c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000314:	b004      	add	sp, #16
 8000316:	4770      	bx	lr

08000318 <__udivmoddi4>:
 8000318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800031c:	9e08      	ldr	r6, [sp, #32]
 800031e:	4604      	mov	r4, r0
 8000320:	4688      	mov	r8, r1
 8000322:	2b00      	cmp	r3, #0
 8000324:	d14b      	bne.n	80003be <__udivmoddi4+0xa6>
 8000326:	428a      	cmp	r2, r1
 8000328:	4615      	mov	r5, r2
 800032a:	d967      	bls.n	80003fc <__udivmoddi4+0xe4>
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	b14a      	cbz	r2, 8000346 <__udivmoddi4+0x2e>
 8000332:	f1c2 0720 	rsb	r7, r2, #32
 8000336:	fa01 f302 	lsl.w	r3, r1, r2
 800033a:	fa20 f707 	lsr.w	r7, r0, r7
 800033e:	4095      	lsls	r5, r2
 8000340:	ea47 0803 	orr.w	r8, r7, r3
 8000344:	4094      	lsls	r4, r2
 8000346:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000350:	fa1f fc85 	uxth.w	ip, r5
 8000354:	fb0e 8817 	mls	r8, lr, r7, r8
 8000358:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800035c:	fb07 f10c 	mul.w	r1, r7, ip
 8000360:	4299      	cmp	r1, r3
 8000362:	d909      	bls.n	8000378 <__udivmoddi4+0x60>
 8000364:	18eb      	adds	r3, r5, r3
 8000366:	f107 30ff 	add.w	r0, r7, #4294967295
 800036a:	f080 811b 	bcs.w	80005a4 <__udivmoddi4+0x28c>
 800036e:	4299      	cmp	r1, r3
 8000370:	f240 8118 	bls.w	80005a4 <__udivmoddi4+0x28c>
 8000374:	3f02      	subs	r7, #2
 8000376:	442b      	add	r3, r5
 8000378:	1a5b      	subs	r3, r3, r1
 800037a:	b2a4      	uxth	r4, r4
 800037c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000380:	fb0e 3310 	mls	r3, lr, r0, r3
 8000384:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000388:	fb00 fc0c 	mul.w	ip, r0, ip
 800038c:	45a4      	cmp	ip, r4
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x8c>
 8000390:	192c      	adds	r4, r5, r4
 8000392:	f100 33ff 	add.w	r3, r0, #4294967295
 8000396:	f080 8107 	bcs.w	80005a8 <__udivmoddi4+0x290>
 800039a:	45a4      	cmp	ip, r4
 800039c:	f240 8104 	bls.w	80005a8 <__udivmoddi4+0x290>
 80003a0:	3802      	subs	r0, #2
 80003a2:	442c      	add	r4, r5
 80003a4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a8:	eba4 040c 	sub.w	r4, r4, ip
 80003ac:	2700      	movs	r7, #0
 80003ae:	b11e      	cbz	r6, 80003b8 <__udivmoddi4+0xa0>
 80003b0:	40d4      	lsrs	r4, r2
 80003b2:	2300      	movs	r3, #0
 80003b4:	e9c6 4300 	strd	r4, r3, [r6]
 80003b8:	4639      	mov	r1, r7
 80003ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003be:	428b      	cmp	r3, r1
 80003c0:	d909      	bls.n	80003d6 <__udivmoddi4+0xbe>
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	f000 80eb 	beq.w	800059e <__udivmoddi4+0x286>
 80003c8:	2700      	movs	r7, #0
 80003ca:	e9c6 0100 	strd	r0, r1, [r6]
 80003ce:	4638      	mov	r0, r7
 80003d0:	4639      	mov	r1, r7
 80003d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d6:	fab3 f783 	clz	r7, r3
 80003da:	2f00      	cmp	r7, #0
 80003dc:	d147      	bne.n	800046e <__udivmoddi4+0x156>
 80003de:	428b      	cmp	r3, r1
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xd0>
 80003e2:	4282      	cmp	r2, r0
 80003e4:	f200 80fa 	bhi.w	80005dc <__udivmoddi4+0x2c4>
 80003e8:	1a84      	subs	r4, r0, r2
 80003ea:	eb61 0303 	sbc.w	r3, r1, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	4698      	mov	r8, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d0e0      	beq.n	80003b8 <__udivmoddi4+0xa0>
 80003f6:	e9c6 4800 	strd	r4, r8, [r6]
 80003fa:	e7dd      	b.n	80003b8 <__udivmoddi4+0xa0>
 80003fc:	b902      	cbnz	r2, 8000400 <__udivmoddi4+0xe8>
 80003fe:	deff      	udf	#255	; 0xff
 8000400:	fab2 f282 	clz	r2, r2
 8000404:	2a00      	cmp	r2, #0
 8000406:	f040 808f 	bne.w	8000528 <__udivmoddi4+0x210>
 800040a:	1b49      	subs	r1, r1, r5
 800040c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000410:	fa1f f885 	uxth.w	r8, r5
 8000414:	2701      	movs	r7, #1
 8000416:	fbb1 fcfe 	udiv	ip, r1, lr
 800041a:	0c23      	lsrs	r3, r4, #16
 800041c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000420:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000424:	fb08 f10c 	mul.w	r1, r8, ip
 8000428:	4299      	cmp	r1, r3
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x124>
 800042c:	18eb      	adds	r3, r5, r3
 800042e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x122>
 8000434:	4299      	cmp	r1, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2bc>
 800043a:	4684      	mov	ip, r0
 800043c:	1a59      	subs	r1, r3, r1
 800043e:	b2a3      	uxth	r3, r4
 8000440:	fbb1 f0fe 	udiv	r0, r1, lr
 8000444:	fb0e 1410 	mls	r4, lr, r0, r1
 8000448:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800044c:	fb08 f800 	mul.w	r8, r8, r0
 8000450:	45a0      	cmp	r8, r4
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x14c>
 8000454:	192c      	adds	r4, r5, r4
 8000456:	f100 33ff 	add.w	r3, r0, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x14a>
 800045c:	45a0      	cmp	r8, r4
 800045e:	f200 80b6 	bhi.w	80005ce <__udivmoddi4+0x2b6>
 8000462:	4618      	mov	r0, r3
 8000464:	eba4 0408 	sub.w	r4, r4, r8
 8000468:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800046c:	e79f      	b.n	80003ae <__udivmoddi4+0x96>
 800046e:	f1c7 0c20 	rsb	ip, r7, #32
 8000472:	40bb      	lsls	r3, r7
 8000474:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000478:	ea4e 0e03 	orr.w	lr, lr, r3
 800047c:	fa01 f407 	lsl.w	r4, r1, r7
 8000480:	fa20 f50c 	lsr.w	r5, r0, ip
 8000484:	fa21 f30c 	lsr.w	r3, r1, ip
 8000488:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800048c:	4325      	orrs	r5, r4
 800048e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000492:	0c2c      	lsrs	r4, r5, #16
 8000494:	fb08 3319 	mls	r3, r8, r9, r3
 8000498:	fa1f fa8e 	uxth.w	sl, lr
 800049c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a0:	fb09 f40a 	mul.w	r4, r9, sl
 80004a4:	429c      	cmp	r4, r3
 80004a6:	fa02 f207 	lsl.w	r2, r2, r7
 80004aa:	fa00 f107 	lsl.w	r1, r0, r7
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b0>
 80004b0:	eb1e 0303 	adds.w	r3, lr, r3
 80004b4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b8:	f080 8087 	bcs.w	80005ca <__udivmoddi4+0x2b2>
 80004bc:	429c      	cmp	r4, r3
 80004be:	f240 8084 	bls.w	80005ca <__udivmoddi4+0x2b2>
 80004c2:	f1a9 0902 	sub.w	r9, r9, #2
 80004c6:	4473      	add	r3, lr
 80004c8:	1b1b      	subs	r3, r3, r4
 80004ca:	b2ad      	uxth	r5, r5
 80004cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d0:	fb08 3310 	mls	r3, r8, r0, r3
 80004d4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004dc:	45a2      	cmp	sl, r4
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1da>
 80004e0:	eb1e 0404 	adds.w	r4, lr, r4
 80004e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e8:	d26b      	bcs.n	80005c2 <__udivmoddi4+0x2aa>
 80004ea:	45a2      	cmp	sl, r4
 80004ec:	d969      	bls.n	80005c2 <__udivmoddi4+0x2aa>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4474      	add	r4, lr
 80004f2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004f6:	fba0 8902 	umull	r8, r9, r0, r2
 80004fa:	eba4 040a 	sub.w	r4, r4, sl
 80004fe:	454c      	cmp	r4, r9
 8000500:	46c2      	mov	sl, r8
 8000502:	464b      	mov	r3, r9
 8000504:	d354      	bcc.n	80005b0 <__udivmoddi4+0x298>
 8000506:	d051      	beq.n	80005ac <__udivmoddi4+0x294>
 8000508:	2e00      	cmp	r6, #0
 800050a:	d069      	beq.n	80005e0 <__udivmoddi4+0x2c8>
 800050c:	ebb1 050a 	subs.w	r5, r1, sl
 8000510:	eb64 0403 	sbc.w	r4, r4, r3
 8000514:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000518:	40fd      	lsrs	r5, r7
 800051a:	40fc      	lsrs	r4, r7
 800051c:	ea4c 0505 	orr.w	r5, ip, r5
 8000520:	e9c6 5400 	strd	r5, r4, [r6]
 8000524:	2700      	movs	r7, #0
 8000526:	e747      	b.n	80003b8 <__udivmoddi4+0xa0>
 8000528:	f1c2 0320 	rsb	r3, r2, #32
 800052c:	fa20 f703 	lsr.w	r7, r0, r3
 8000530:	4095      	lsls	r5, r2
 8000532:	fa01 f002 	lsl.w	r0, r1, r2
 8000536:	fa21 f303 	lsr.w	r3, r1, r3
 800053a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800053e:	4338      	orrs	r0, r7
 8000540:	0c01      	lsrs	r1, r0, #16
 8000542:	fbb3 f7fe 	udiv	r7, r3, lr
 8000546:	fa1f f885 	uxth.w	r8, r5
 800054a:	fb0e 3317 	mls	r3, lr, r7, r3
 800054e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000552:	fb07 f308 	mul.w	r3, r7, r8
 8000556:	428b      	cmp	r3, r1
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x256>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f107 3cff 	add.w	ip, r7, #4294967295
 8000564:	d22f      	bcs.n	80005c6 <__udivmoddi4+0x2ae>
 8000566:	428b      	cmp	r3, r1
 8000568:	d92d      	bls.n	80005c6 <__udivmoddi4+0x2ae>
 800056a:	3f02      	subs	r7, #2
 800056c:	4429      	add	r1, r5
 800056e:	1acb      	subs	r3, r1, r3
 8000570:	b281      	uxth	r1, r0
 8000572:	fbb3 f0fe 	udiv	r0, r3, lr
 8000576:	fb0e 3310 	mls	r3, lr, r0, r3
 800057a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057e:	fb00 f308 	mul.w	r3, r0, r8
 8000582:	428b      	cmp	r3, r1
 8000584:	d907      	bls.n	8000596 <__udivmoddi4+0x27e>
 8000586:	1869      	adds	r1, r5, r1
 8000588:	f100 3cff 	add.w	ip, r0, #4294967295
 800058c:	d217      	bcs.n	80005be <__udivmoddi4+0x2a6>
 800058e:	428b      	cmp	r3, r1
 8000590:	d915      	bls.n	80005be <__udivmoddi4+0x2a6>
 8000592:	3802      	subs	r0, #2
 8000594:	4429      	add	r1, r5
 8000596:	1ac9      	subs	r1, r1, r3
 8000598:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800059c:	e73b      	b.n	8000416 <__udivmoddi4+0xfe>
 800059e:	4637      	mov	r7, r6
 80005a0:	4630      	mov	r0, r6
 80005a2:	e709      	b.n	80003b8 <__udivmoddi4+0xa0>
 80005a4:	4607      	mov	r7, r0
 80005a6:	e6e7      	b.n	8000378 <__udivmoddi4+0x60>
 80005a8:	4618      	mov	r0, r3
 80005aa:	e6fb      	b.n	80003a4 <__udivmoddi4+0x8c>
 80005ac:	4541      	cmp	r1, r8
 80005ae:	d2ab      	bcs.n	8000508 <__udivmoddi4+0x1f0>
 80005b0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005b4:	eb69 020e 	sbc.w	r2, r9, lr
 80005b8:	3801      	subs	r0, #1
 80005ba:	4613      	mov	r3, r2
 80005bc:	e7a4      	b.n	8000508 <__udivmoddi4+0x1f0>
 80005be:	4660      	mov	r0, ip
 80005c0:	e7e9      	b.n	8000596 <__udivmoddi4+0x27e>
 80005c2:	4618      	mov	r0, r3
 80005c4:	e795      	b.n	80004f2 <__udivmoddi4+0x1da>
 80005c6:	4667      	mov	r7, ip
 80005c8:	e7d1      	b.n	800056e <__udivmoddi4+0x256>
 80005ca:	4681      	mov	r9, r0
 80005cc:	e77c      	b.n	80004c8 <__udivmoddi4+0x1b0>
 80005ce:	3802      	subs	r0, #2
 80005d0:	442c      	add	r4, r5
 80005d2:	e747      	b.n	8000464 <__udivmoddi4+0x14c>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	442b      	add	r3, r5
 80005da:	e72f      	b.n	800043c <__udivmoddi4+0x124>
 80005dc:	4638      	mov	r0, r7
 80005de:	e708      	b.n	80003f2 <__udivmoddi4+0xda>
 80005e0:	4637      	mov	r7, r6
 80005e2:	e6e9      	b.n	80003b8 <__udivmoddi4+0xa0>

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <conv>:
 *      Author: user
 */

#include "cnn.h"

void conv(float** input[], float*** kernel[], float bias[], float** result[], int iHeight, int iWidth, int kDim, int iDim, int oDim, int pSize) {
 80005e8:	b590      	push	{r4, r7, lr}
 80005ea:	b09f      	sub	sp, #124	; 0x7c
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	60f8      	str	r0, [r7, #12]
 80005f0:	60b9      	str	r1, [r7, #8]
 80005f2:	607a      	str	r2, [r7, #4]
 80005f4:	603b      	str	r3, [r7, #0]


	if (pSize != 0) {
 80005f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	f000 8198 	beq.w	8000930 <conv+0x348>
		/////////////////////////// zero-pad
		int padiHeight = iHeight + (2*pSize);
 8000600:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000604:	005b      	lsls	r3, r3, #1
 8000606:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800060a:	4413      	add	r3, r2
 800060c:	623b      	str	r3, [r7, #32]
		int padiWidth = iWidth + (2*pSize);
 800060e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000612:	005b      	lsls	r3, r3, #1
 8000614:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8000618:	4413      	add	r3, r2
 800061a:	61fb      	str	r3, [r7, #28]

		// allocate 3d padInput
		float*** padInput = (float***)malloc(padiHeight * sizeof(float**));
 800061c:	6a3b      	ldr	r3, [r7, #32]
 800061e:	009b      	lsls	r3, r3, #2
 8000620:	4618      	mov	r0, r3
 8000622:	f012 f903 	bl	801282c <malloc>
 8000626:	4603      	mov	r3, r0
 8000628:	61bb      	str	r3, [r7, #24]
		for (int i = 0; i < padiHeight; i++) {
 800062a:	2300      	movs	r3, #0
 800062c:	677b      	str	r3, [r7, #116]	; 0x74
 800062e:	e00d      	b.n	800064c <conv+0x64>
			padInput[i] = (float**)malloc(padiWidth * sizeof(float*));
 8000630:	69fb      	ldr	r3, [r7, #28]
 8000632:	0099      	lsls	r1, r3, #2
 8000634:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000636:	009b      	lsls	r3, r3, #2
 8000638:	69ba      	ldr	r2, [r7, #24]
 800063a:	18d4      	adds	r4, r2, r3
 800063c:	4608      	mov	r0, r1
 800063e:	f012 f8f5 	bl	801282c <malloc>
 8000642:	4603      	mov	r3, r0
 8000644:	6023      	str	r3, [r4, #0]
		for (int i = 0; i < padiHeight; i++) {
 8000646:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000648:	3301      	adds	r3, #1
 800064a:	677b      	str	r3, [r7, #116]	; 0x74
 800064c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800064e:	6a3b      	ldr	r3, [r7, #32]
 8000650:	429a      	cmp	r2, r3
 8000652:	dbed      	blt.n	8000630 <conv+0x48>
		}
		for (int i = 0; i < padiHeight; i++) {
 8000654:	2300      	movs	r3, #0
 8000656:	673b      	str	r3, [r7, #112]	; 0x70
 8000658:	e01c      	b.n	8000694 <conv+0xac>
			for (int j = 0; j < padiWidth; j++) {
 800065a:	2300      	movs	r3, #0
 800065c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800065e:	e012      	b.n	8000686 <conv+0x9e>
				padInput[i][j] = (float*)malloc(iDim * sizeof(float));
 8000660:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000664:	0099      	lsls	r1, r3, #2
 8000666:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000668:	009b      	lsls	r3, r3, #2
 800066a:	69ba      	ldr	r2, [r7, #24]
 800066c:	4413      	add	r3, r2
 800066e:	681a      	ldr	r2, [r3, #0]
 8000670:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000672:	009b      	lsls	r3, r3, #2
 8000674:	18d4      	adds	r4, r2, r3
 8000676:	4608      	mov	r0, r1
 8000678:	f012 f8d8 	bl	801282c <malloc>
 800067c:	4603      	mov	r3, r0
 800067e:	6023      	str	r3, [r4, #0]
			for (int j = 0; j < padiWidth; j++) {
 8000680:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000682:	3301      	adds	r3, #1
 8000684:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000686:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000688:	69fb      	ldr	r3, [r7, #28]
 800068a:	429a      	cmp	r2, r3
 800068c:	dbe8      	blt.n	8000660 <conv+0x78>
		for (int i = 0; i < padiHeight; i++) {
 800068e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000690:	3301      	adds	r3, #1
 8000692:	673b      	str	r3, [r7, #112]	; 0x70
 8000694:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000696:	6a3b      	ldr	r3, [r7, #32]
 8000698:	429a      	cmp	r2, r3
 800069a:	dbde      	blt.n	800065a <conv+0x72>
			}
		}

		for(int k=0; k<iDim; k++) {
 800069c:	2300      	movs	r3, #0
 800069e:	66bb      	str	r3, [r7, #104]	; 0x68
 80006a0:	e066      	b.n	8000770 <conv+0x188>
			for (int i=0; i<padiHeight; i++) {
 80006a2:	2300      	movs	r3, #0
 80006a4:	667b      	str	r3, [r7, #100]	; 0x64
 80006a6:	e05c      	b.n	8000762 <conv+0x17a>
				for(int j=0; j<padiWidth; j++) {
 80006a8:	2300      	movs	r3, #0
 80006aa:	663b      	str	r3, [r7, #96]	; 0x60
 80006ac:	e052      	b.n	8000754 <conv+0x16c>

					if( i<pSize || i>(iHeight + pSize - 1) || j<pSize || j>(iWidth + pSize - 1) ) {
 80006ae:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80006b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80006b4:	429a      	cmp	r2, r3
 80006b6:	db16      	blt.n	80006e6 <conv+0xfe>
 80006b8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80006bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80006c0:	4413      	add	r3, r2
 80006c2:	3b01      	subs	r3, #1
 80006c4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80006c6:	429a      	cmp	r2, r3
 80006c8:	dc0d      	bgt.n	80006e6 <conv+0xfe>
 80006ca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80006cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80006d0:	429a      	cmp	r2, r3
 80006d2:	db08      	blt.n	80006e6 <conv+0xfe>
 80006d4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80006d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80006dc:	4413      	add	r3, r2
 80006de:	3b01      	subs	r3, #1
 80006e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80006e2:	429a      	cmp	r2, r3
 80006e4:	dd0f      	ble.n	8000706 <conv+0x11e>
						padInput[i][j][k] = 0.0;
 80006e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80006e8:	009b      	lsls	r3, r3, #2
 80006ea:	69ba      	ldr	r2, [r7, #24]
 80006ec:	4413      	add	r3, r2
 80006ee:	681a      	ldr	r2, [r3, #0]
 80006f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80006f2:	009b      	lsls	r3, r3, #2
 80006f4:	4413      	add	r3, r2
 80006f6:	681a      	ldr	r2, [r3, #0]
 80006f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80006fa:	009b      	lsls	r3, r3, #2
 80006fc:	4413      	add	r3, r2
 80006fe:	f04f 0200 	mov.w	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	e023      	b.n	800074e <conv+0x166>
					}
					else {
						int iIdx = i - pSize;
 8000706:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000708:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800070c:	1ad3      	subs	r3, r2, r3
 800070e:	617b      	str	r3, [r7, #20]
						int jIdx = j - pSize;
 8000710:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000712:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000716:	1ad3      	subs	r3, r2, r3
 8000718:	613b      	str	r3, [r7, #16]

						padInput[i][j][k] = input[iIdx][jIdx][k];
 800071a:	697b      	ldr	r3, [r7, #20]
 800071c:	009b      	lsls	r3, r3, #2
 800071e:	68fa      	ldr	r2, [r7, #12]
 8000720:	4413      	add	r3, r2
 8000722:	681a      	ldr	r2, [r3, #0]
 8000724:	693b      	ldr	r3, [r7, #16]
 8000726:	009b      	lsls	r3, r3, #2
 8000728:	4413      	add	r3, r2
 800072a:	681a      	ldr	r2, [r3, #0]
 800072c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800072e:	009b      	lsls	r3, r3, #2
 8000730:	441a      	add	r2, r3
 8000732:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000734:	009b      	lsls	r3, r3, #2
 8000736:	69b9      	ldr	r1, [r7, #24]
 8000738:	440b      	add	r3, r1
 800073a:	6819      	ldr	r1, [r3, #0]
 800073c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800073e:	009b      	lsls	r3, r3, #2
 8000740:	440b      	add	r3, r1
 8000742:	6819      	ldr	r1, [r3, #0]
 8000744:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000746:	009b      	lsls	r3, r3, #2
 8000748:	440b      	add	r3, r1
 800074a:	6812      	ldr	r2, [r2, #0]
 800074c:	601a      	str	r2, [r3, #0]
				for(int j=0; j<padiWidth; j++) {
 800074e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000750:	3301      	adds	r3, #1
 8000752:	663b      	str	r3, [r7, #96]	; 0x60
 8000754:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000756:	69fb      	ldr	r3, [r7, #28]
 8000758:	429a      	cmp	r2, r3
 800075a:	dba8      	blt.n	80006ae <conv+0xc6>
			for (int i=0; i<padiHeight; i++) {
 800075c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800075e:	3301      	adds	r3, #1
 8000760:	667b      	str	r3, [r7, #100]	; 0x64
 8000762:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000764:	6a3b      	ldr	r3, [r7, #32]
 8000766:	429a      	cmp	r2, r3
 8000768:	db9e      	blt.n	80006a8 <conv+0xc0>
		for(int k=0; k<iDim; k++) {
 800076a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800076c:	3301      	adds	r3, #1
 800076e:	66bb      	str	r3, [r7, #104]	; 0x68
 8000770:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000772:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000776:	429a      	cmp	r2, r3
 8000778:	db93      	blt.n	80006a2 <conv+0xba>
				}
			}
		}

		/////////////////////////// convolution & relu
		for(int v=0; v<oDim; v++) {
 800077a:	2300      	movs	r3, #0
 800077c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800077e:	e09b      	b.n	80008b8 <conv+0x2d0>
			for(int i=0; i<iHeight; i++) {
 8000780:	2300      	movs	r3, #0
 8000782:	65bb      	str	r3, [r7, #88]	; 0x58
 8000784:	e08f      	b.n	80008a6 <conv+0x2be>
				for(int j=0; j<iWidth; j++) {
 8000786:	2300      	movs	r3, #0
 8000788:	657b      	str	r3, [r7, #84]	; 0x54
 800078a:	e083      	b.n	8000894 <conv+0x2ac>

					float sum = 0.0;
 800078c:	f04f 0300 	mov.w	r3, #0
 8000790:	653b      	str	r3, [r7, #80]	; 0x50
					for (int u=0; u<iDim; u++) {
 8000792:	2300      	movs	r3, #0
 8000794:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000796:	e044      	b.n	8000822 <conv+0x23a>
						for(int a=0; a<kDim; a++) {
 8000798:	2300      	movs	r3, #0
 800079a:	64bb      	str	r3, [r7, #72]	; 0x48
 800079c:	e039      	b.n	8000812 <conv+0x22a>
							for(int b=0; b<kDim; b++) {
 800079e:	2300      	movs	r3, #0
 80007a0:	647b      	str	r3, [r7, #68]	; 0x44
 80007a2:	e02e      	b.n	8000802 <conv+0x21a>
								sum += (padInput[i+a][j+b][u]*kernel[a][b][u][v]);
 80007a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80007a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80007a8:	4413      	add	r3, r2
 80007aa:	009b      	lsls	r3, r3, #2
 80007ac:	69ba      	ldr	r2, [r7, #24]
 80007ae:	4413      	add	r3, r2
 80007b0:	681a      	ldr	r2, [r3, #0]
 80007b2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80007b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80007b6:	440b      	add	r3, r1
 80007b8:	009b      	lsls	r3, r3, #2
 80007ba:	4413      	add	r3, r2
 80007bc:	681a      	ldr	r2, [r3, #0]
 80007be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80007c0:	009b      	lsls	r3, r3, #2
 80007c2:	4413      	add	r3, r2
 80007c4:	ed93 7a00 	vldr	s14, [r3]
 80007c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80007ca:	009b      	lsls	r3, r3, #2
 80007cc:	68ba      	ldr	r2, [r7, #8]
 80007ce:	4413      	add	r3, r2
 80007d0:	681a      	ldr	r2, [r3, #0]
 80007d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80007d4:	009b      	lsls	r3, r3, #2
 80007d6:	4413      	add	r3, r2
 80007d8:	681a      	ldr	r2, [r3, #0]
 80007da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80007dc:	009b      	lsls	r3, r3, #2
 80007de:	4413      	add	r3, r2
 80007e0:	681a      	ldr	r2, [r3, #0]
 80007e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80007e4:	009b      	lsls	r3, r3, #2
 80007e6:	4413      	add	r3, r2
 80007e8:	edd3 7a00 	vldr	s15, [r3]
 80007ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007f0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80007f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007f8:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
							for(int b=0; b<kDim; b++) {
 80007fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80007fe:	3301      	adds	r3, #1
 8000800:	647b      	str	r3, [r7, #68]	; 0x44
 8000802:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000804:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000808:	429a      	cmp	r2, r3
 800080a:	dbcb      	blt.n	80007a4 <conv+0x1bc>
						for(int a=0; a<kDim; a++) {
 800080c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800080e:	3301      	adds	r3, #1
 8000810:	64bb      	str	r3, [r7, #72]	; 0x48
 8000812:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000814:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000818:	429a      	cmp	r2, r3
 800081a:	dbc0      	blt.n	800079e <conv+0x1b6>
					for (int u=0; u<iDim; u++) {
 800081c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800081e:	3301      	adds	r3, #1
 8000820:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000822:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000824:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000828:	429a      	cmp	r2, r3
 800082a:	dbb5      	blt.n	8000798 <conv+0x1b0>
							}
						}
					}
					sum += bias[v];
 800082c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800082e:	009b      	lsls	r3, r3, #2
 8000830:	687a      	ldr	r2, [r7, #4]
 8000832:	4413      	add	r3, r2
 8000834:	edd3 7a00 	vldr	s15, [r3]
 8000838:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800083c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000840:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

					//relu
					if (sum < 0) {
 8000844:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8000848:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800084c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000850:	d50f      	bpl.n	8000872 <conv+0x28a>
						result[i][j][v] = 0.0;
 8000852:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000854:	009b      	lsls	r3, r3, #2
 8000856:	683a      	ldr	r2, [r7, #0]
 8000858:	4413      	add	r3, r2
 800085a:	681a      	ldr	r2, [r3, #0]
 800085c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800085e:	009b      	lsls	r3, r3, #2
 8000860:	4413      	add	r3, r2
 8000862:	681a      	ldr	r2, [r3, #0]
 8000864:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000866:	009b      	lsls	r3, r3, #2
 8000868:	4413      	add	r3, r2
 800086a:	f04f 0200 	mov.w	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	e00d      	b.n	800088e <conv+0x2a6>
					}
					else {
						result[i][j][v] = sum;
 8000872:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000874:	009b      	lsls	r3, r3, #2
 8000876:	683a      	ldr	r2, [r7, #0]
 8000878:	4413      	add	r3, r2
 800087a:	681a      	ldr	r2, [r3, #0]
 800087c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800087e:	009b      	lsls	r3, r3, #2
 8000880:	4413      	add	r3, r2
 8000882:	681a      	ldr	r2, [r3, #0]
 8000884:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000886:	009b      	lsls	r3, r3, #2
 8000888:	4413      	add	r3, r2
 800088a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800088c:	601a      	str	r2, [r3, #0]
				for(int j=0; j<iWidth; j++) {
 800088e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000890:	3301      	adds	r3, #1
 8000892:	657b      	str	r3, [r7, #84]	; 0x54
 8000894:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000896:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800089a:	429a      	cmp	r2, r3
 800089c:	f6ff af76 	blt.w	800078c <conv+0x1a4>
			for(int i=0; i<iHeight; i++) {
 80008a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80008a2:	3301      	adds	r3, #1
 80008a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80008a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80008a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80008ac:	429a      	cmp	r2, r3
 80008ae:	f6ff af6a 	blt.w	8000786 <conv+0x19e>
		for(int v=0; v<oDim; v++) {
 80008b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80008b4:	3301      	adds	r3, #1
 80008b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80008b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80008ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80008be:	429a      	cmp	r2, r3
 80008c0:	f6ff af5e 	blt.w	8000780 <conv+0x198>
				}
			}
		}

		// free(padInput);
		for (int i = 0; i < padiHeight; i++) {
 80008c4:	2300      	movs	r3, #0
 80008c6:	643b      	str	r3, [r7, #64]	; 0x40
 80008c8:	e018      	b.n	80008fc <conv+0x314>
			for (int j = 0; j < padiWidth; j++) {
 80008ca:	2300      	movs	r3, #0
 80008cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80008ce:	e00e      	b.n	80008ee <conv+0x306>
				free(padInput[i][j]);
 80008d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80008d2:	009b      	lsls	r3, r3, #2
 80008d4:	69ba      	ldr	r2, [r7, #24]
 80008d6:	4413      	add	r3, r2
 80008d8:	681a      	ldr	r2, [r3, #0]
 80008da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008dc:	009b      	lsls	r3, r3, #2
 80008de:	4413      	add	r3, r2
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4618      	mov	r0, r3
 80008e4:	f011 ffaa 	bl	801283c <free>
			for (int j = 0; j < padiWidth; j++) {
 80008e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008ea:	3301      	adds	r3, #1
 80008ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80008ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80008f0:	69fb      	ldr	r3, [r7, #28]
 80008f2:	429a      	cmp	r2, r3
 80008f4:	dbec      	blt.n	80008d0 <conv+0x2e8>
		for (int i = 0; i < padiHeight; i++) {
 80008f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80008f8:	3301      	adds	r3, #1
 80008fa:	643b      	str	r3, [r7, #64]	; 0x40
 80008fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80008fe:	6a3b      	ldr	r3, [r7, #32]
 8000900:	429a      	cmp	r2, r3
 8000902:	dbe2      	blt.n	80008ca <conv+0x2e2>
			}
		}
		for (int i = 0; i < padiHeight; i++) {
 8000904:	2300      	movs	r3, #0
 8000906:	63bb      	str	r3, [r7, #56]	; 0x38
 8000908:	e00a      	b.n	8000920 <conv+0x338>
			free(padInput[i]);
 800090a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800090c:	009b      	lsls	r3, r3, #2
 800090e:	69ba      	ldr	r2, [r7, #24]
 8000910:	4413      	add	r3, r2
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4618      	mov	r0, r3
 8000916:	f011 ff91 	bl	801283c <free>
		for (int i = 0; i < padiHeight; i++) {
 800091a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800091c:	3301      	adds	r3, #1
 800091e:	63bb      	str	r3, [r7, #56]	; 0x38
 8000920:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000922:	6a3b      	ldr	r3, [r7, #32]
 8000924:	429a      	cmp	r2, r3
 8000926:	dbf0      	blt.n	800090a <conv+0x322>
		}
		free(padInput);
 8000928:	69b8      	ldr	r0, [r7, #24]
 800092a:	f011 ff87 	bl	801283c <free>
				}
			}
		}
	}

}
 800092e:	e081      	b.n	8000a34 <conv+0x44c>
		for(int v=0; v<oDim; v++) {
 8000930:	2300      	movs	r3, #0
 8000932:	637b      	str	r3, [r7, #52]	; 0x34
 8000934:	e079      	b.n	8000a2a <conv+0x442>
			for(int i=0; i<iHeight; i++) {
 8000936:	2300      	movs	r3, #0
 8000938:	633b      	str	r3, [r7, #48]	; 0x30
 800093a:	e06e      	b.n	8000a1a <conv+0x432>
				for(int j=0; j<iWidth; j++) {
 800093c:	2300      	movs	r3, #0
 800093e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000940:	e063      	b.n	8000a0a <conv+0x422>
					float sum = 0.0;
 8000942:	f04f 0300 	mov.w	r3, #0
 8000946:	62bb      	str	r3, [r7, #40]	; 0x28
					for (int u=0; u<iDim; u++) {
 8000948:	2300      	movs	r3, #0
 800094a:	627b      	str	r3, [r7, #36]	; 0x24
 800094c:	e024      	b.n	8000998 <conv+0x3b0>
						sum += (input[i][j][u]*kernel[0][0][u][v]);
 800094e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	68fa      	ldr	r2, [r7, #12]
 8000954:	4413      	add	r3, r2
 8000956:	681a      	ldr	r2, [r3, #0]
 8000958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800095a:	009b      	lsls	r3, r3, #2
 800095c:	4413      	add	r3, r2
 800095e:	681a      	ldr	r2, [r3, #0]
 8000960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000962:	009b      	lsls	r3, r3, #2
 8000964:	4413      	add	r3, r2
 8000966:	ed93 7a00 	vldr	s14, [r3]
 800096a:	68bb      	ldr	r3, [r7, #8]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	681a      	ldr	r2, [r3, #0]
 8000970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000972:	009b      	lsls	r3, r3, #2
 8000974:	4413      	add	r3, r2
 8000976:	681a      	ldr	r2, [r3, #0]
 8000978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800097a:	009b      	lsls	r3, r3, #2
 800097c:	4413      	add	r3, r2
 800097e:	edd3 7a00 	vldr	s15, [r3]
 8000982:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000986:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800098a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800098e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
					for (int u=0; u<iDim; u++) {
 8000992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000994:	3301      	adds	r3, #1
 8000996:	627b      	str	r3, [r7, #36]	; 0x24
 8000998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800099a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800099e:	429a      	cmp	r2, r3
 80009a0:	dbd5      	blt.n	800094e <conv+0x366>
					sum += bias[v];
 80009a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	687a      	ldr	r2, [r7, #4]
 80009a8:	4413      	add	r3, r2
 80009aa:	edd3 7a00 	vldr	s15, [r3]
 80009ae:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80009b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009b6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
					if (sum < 0) {
 80009ba:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80009be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80009c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009c6:	d50f      	bpl.n	80009e8 <conv+0x400>
						result[i][j][v] = 0.0;
 80009c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	683a      	ldr	r2, [r7, #0]
 80009ce:	4413      	add	r3, r2
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009d4:	009b      	lsls	r3, r3, #2
 80009d6:	4413      	add	r3, r2
 80009d8:	681a      	ldr	r2, [r3, #0]
 80009da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009dc:	009b      	lsls	r3, r3, #2
 80009de:	4413      	add	r3, r2
 80009e0:	f04f 0200 	mov.w	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	e00d      	b.n	8000a04 <conv+0x41c>
						result[i][j][v] = sum;
 80009e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009ea:	009b      	lsls	r3, r3, #2
 80009ec:	683a      	ldr	r2, [r7, #0]
 80009ee:	4413      	add	r3, r2
 80009f0:	681a      	ldr	r2, [r3, #0]
 80009f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009f4:	009b      	lsls	r3, r3, #2
 80009f6:	4413      	add	r3, r2
 80009f8:	681a      	ldr	r2, [r3, #0]
 80009fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009fc:	009b      	lsls	r3, r3, #2
 80009fe:	4413      	add	r3, r2
 8000a00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a02:	601a      	str	r2, [r3, #0]
				for(int j=0; j<iWidth; j++) {
 8000a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a06:	3301      	adds	r3, #1
 8000a08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000a10:	429a      	cmp	r2, r3
 8000a12:	db96      	blt.n	8000942 <conv+0x35a>
			for(int i=0; i<iHeight; i++) {
 8000a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a16:	3301      	adds	r3, #1
 8000a18:	633b      	str	r3, [r7, #48]	; 0x30
 8000a1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000a1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000a20:	429a      	cmp	r2, r3
 8000a22:	db8b      	blt.n	800093c <conv+0x354>
		for(int v=0; v<oDim; v++) {
 8000a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a26:	3301      	adds	r3, #1
 8000a28:	637b      	str	r3, [r7, #52]	; 0x34
 8000a2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000a30:	429a      	cmp	r2, r3
 8000a32:	db80      	blt.n	8000936 <conv+0x34e>
}
 8000a34:	bf00      	nop
 8000a36:	377c      	adds	r7, #124	; 0x7c
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd90      	pop	{r4, r7, pc}

08000a3c <convInPlace>:

void convInPlace(float** input[], float*** kernel[], int iHeight, int iWidth, int kDim, int iDim, int oDim, int pSize) {
 8000a3c:	b590      	push	{r4, r7, lr}
 8000a3e:	b09b      	sub	sp, #108	; 0x6c
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	60b9      	str	r1, [r7, #8]
 8000a46:	607a      	str	r2, [r7, #4]
 8000a48:	603b      	str	r3, [r7, #0]
	/////////////////////////// zero-pad
		int padiHeight = iHeight + (2*pSize);
 8000a4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000a4e:	005b      	lsls	r3, r3, #1
 8000a50:	687a      	ldr	r2, [r7, #4]
 8000a52:	4413      	add	r3, r2
 8000a54:	627b      	str	r3, [r7, #36]	; 0x24
		int padiWidth = iWidth + (2*pSize);
 8000a56:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000a5a:	005b      	lsls	r3, r3, #1
 8000a5c:	683a      	ldr	r2, [r7, #0]
 8000a5e:	4413      	add	r3, r2
 8000a60:	623b      	str	r3, [r7, #32]

		// allocate 3d padInput
		float*** padInput = (float***)malloc(padiHeight * sizeof(float**));
 8000a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a64:	009b      	lsls	r3, r3, #2
 8000a66:	4618      	mov	r0, r3
 8000a68:	f011 fee0 	bl	801282c <malloc>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	61fb      	str	r3, [r7, #28]
		for (int i = 0; i < padiHeight; i++) {
 8000a70:	2300      	movs	r3, #0
 8000a72:	667b      	str	r3, [r7, #100]	; 0x64
 8000a74:	e00d      	b.n	8000a92 <convInPlace+0x56>
			padInput[i] = (float**)malloc(padiWidth * sizeof(float*));
 8000a76:	6a3b      	ldr	r3, [r7, #32]
 8000a78:	0099      	lsls	r1, r3, #2
 8000a7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000a7c:	009b      	lsls	r3, r3, #2
 8000a7e:	69fa      	ldr	r2, [r7, #28]
 8000a80:	18d4      	adds	r4, r2, r3
 8000a82:	4608      	mov	r0, r1
 8000a84:	f011 fed2 	bl	801282c <malloc>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	6023      	str	r3, [r4, #0]
		for (int i = 0; i < padiHeight; i++) {
 8000a8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000a8e:	3301      	adds	r3, #1
 8000a90:	667b      	str	r3, [r7, #100]	; 0x64
 8000a92:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a96:	429a      	cmp	r2, r3
 8000a98:	dbed      	blt.n	8000a76 <convInPlace+0x3a>
		}
		for (int i = 0; i < padiHeight; i++) {
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	663b      	str	r3, [r7, #96]	; 0x60
 8000a9e:	e01b      	b.n	8000ad8 <convInPlace+0x9c>
			for (int j = 0; j < padiWidth; j++) {
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000aa4:	e011      	b.n	8000aca <convInPlace+0x8e>
				padInput[i][j] = (float*)malloc(iDim * sizeof(float));
 8000aa6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000aa8:	0099      	lsls	r1, r3, #2
 8000aaa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000aac:	009b      	lsls	r3, r3, #2
 8000aae:	69fa      	ldr	r2, [r7, #28]
 8000ab0:	4413      	add	r3, r2
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ab6:	009b      	lsls	r3, r3, #2
 8000ab8:	18d4      	adds	r4, r2, r3
 8000aba:	4608      	mov	r0, r1
 8000abc:	f011 feb6 	bl	801282c <malloc>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	6023      	str	r3, [r4, #0]
			for (int j = 0; j < padiWidth; j++) {
 8000ac4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000aca:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000acc:	6a3b      	ldr	r3, [r7, #32]
 8000ace:	429a      	cmp	r2, r3
 8000ad0:	dbe9      	blt.n	8000aa6 <convInPlace+0x6a>
		for (int i = 0; i < padiHeight; i++) {
 8000ad2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	663b      	str	r3, [r7, #96]	; 0x60
 8000ad8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000adc:	429a      	cmp	r2, r3
 8000ade:	dbdf      	blt.n	8000aa0 <convInPlace+0x64>
			}
		}

		for(int k=0; k<iDim; k++) {
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	65bb      	str	r3, [r7, #88]	; 0x58
 8000ae4:	e064      	b.n	8000bb0 <convInPlace+0x174>
			for (int i=0; i<padiHeight; i++) {
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	657b      	str	r3, [r7, #84]	; 0x54
 8000aea:	e05a      	b.n	8000ba2 <convInPlace+0x166>
				for(int j=0; j<padiWidth; j++) {
 8000aec:	2300      	movs	r3, #0
 8000aee:	653b      	str	r3, [r7, #80]	; 0x50
 8000af0:	e050      	b.n	8000b94 <convInPlace+0x158>

					if( i<pSize || i>(iHeight + pSize - 1) || j<pSize || j>(iWidth + pSize - 1) ) {
 8000af2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000af4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000af8:	429a      	cmp	r2, r3
 8000afa:	db14      	blt.n	8000b26 <convInPlace+0xea>
 8000afc:	687a      	ldr	r2, [r7, #4]
 8000afe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000b02:	4413      	add	r3, r2
 8000b04:	3b01      	subs	r3, #1
 8000b06:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	dc0c      	bgt.n	8000b26 <convInPlace+0xea>
 8000b0c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000b0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000b12:	429a      	cmp	r2, r3
 8000b14:	db07      	blt.n	8000b26 <convInPlace+0xea>
 8000b16:	683a      	ldr	r2, [r7, #0]
 8000b18:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000b1c:	4413      	add	r3, r2
 8000b1e:	3b01      	subs	r3, #1
 8000b20:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000b22:	429a      	cmp	r2, r3
 8000b24:	dd0f      	ble.n	8000b46 <convInPlace+0x10a>
						padInput[i][j][k] = 0.0;
 8000b26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000b28:	009b      	lsls	r3, r3, #2
 8000b2a:	69fa      	ldr	r2, [r7, #28]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000b32:	009b      	lsls	r3, r3, #2
 8000b34:	4413      	add	r3, r2
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000b3a:	009b      	lsls	r3, r3, #2
 8000b3c:	4413      	add	r3, r2
 8000b3e:	f04f 0200 	mov.w	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	e023      	b.n	8000b8e <convInPlace+0x152>
					}
					else {
						int iIdx = i - pSize;
 8000b46:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000b48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000b4c:	1ad3      	subs	r3, r2, r3
 8000b4e:	61bb      	str	r3, [r7, #24]
						int jIdx = j - pSize;
 8000b50:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000b52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000b56:	1ad3      	subs	r3, r2, r3
 8000b58:	617b      	str	r3, [r7, #20]

						padInput[i][j][k] = input[iIdx][jIdx][k];
 8000b5a:	69bb      	ldr	r3, [r7, #24]
 8000b5c:	009b      	lsls	r3, r3, #2
 8000b5e:	68fa      	ldr	r2, [r7, #12]
 8000b60:	4413      	add	r3, r2
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	009b      	lsls	r3, r3, #2
 8000b68:	4413      	add	r3, r2
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000b6e:	009b      	lsls	r3, r3, #2
 8000b70:	441a      	add	r2, r3
 8000b72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000b74:	009b      	lsls	r3, r3, #2
 8000b76:	69f9      	ldr	r1, [r7, #28]
 8000b78:	440b      	add	r3, r1
 8000b7a:	6819      	ldr	r1, [r3, #0]
 8000b7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000b7e:	009b      	lsls	r3, r3, #2
 8000b80:	440b      	add	r3, r1
 8000b82:	6819      	ldr	r1, [r3, #0]
 8000b84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000b86:	009b      	lsls	r3, r3, #2
 8000b88:	440b      	add	r3, r1
 8000b8a:	6812      	ldr	r2, [r2, #0]
 8000b8c:	601a      	str	r2, [r3, #0]
				for(int j=0; j<padiWidth; j++) {
 8000b8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000b90:	3301      	adds	r3, #1
 8000b92:	653b      	str	r3, [r7, #80]	; 0x50
 8000b94:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000b96:	6a3b      	ldr	r3, [r7, #32]
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	dbaa      	blt.n	8000af2 <convInPlace+0xb6>
			for (int i=0; i<padiHeight; i++) {
 8000b9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	657b      	str	r3, [r7, #84]	; 0x54
 8000ba2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	dba0      	blt.n	8000aec <convInPlace+0xb0>
		for(int k=0; k<iDim; k++) {
 8000baa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000bac:	3301      	adds	r3, #1
 8000bae:	65bb      	str	r3, [r7, #88]	; 0x58
 8000bb0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000bb2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	db96      	blt.n	8000ae6 <convInPlace+0xaa>
				}
			}
		}

		/////////////////////////// convolution
		for(int v=0; v<oDim; v++) {
 8000bb8:	2300      	movs	r3, #0
 8000bba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000bbc:	e071      	b.n	8000ca2 <convInPlace+0x266>
			for(int i=0; i<iHeight; i++) {
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	64bb      	str	r3, [r7, #72]	; 0x48
 8000bc2:	e067      	b.n	8000c94 <convInPlace+0x258>
				for(int j=0; j<iWidth; j++) {
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	647b      	str	r3, [r7, #68]	; 0x44
 8000bc8:	e05d      	b.n	8000c86 <convInPlace+0x24a>

					float sum = 0.0;
 8000bca:	f04f 0300 	mov.w	r3, #0
 8000bce:	643b      	str	r3, [r7, #64]	; 0x40
					for (int u=0; u<iDim; u++) {
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000bd4:	e042      	b.n	8000c5c <convInPlace+0x220>
						for(int a=0; a<kDim; a++) {
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	63bb      	str	r3, [r7, #56]	; 0x38
 8000bda:	e038      	b.n	8000c4e <convInPlace+0x212>
							for(int b=0; b<kDim; b++) {
 8000bdc:	2300      	movs	r3, #0
 8000bde:	637b      	str	r3, [r7, #52]	; 0x34
 8000be0:	e02e      	b.n	8000c40 <convInPlace+0x204>
								sum += (padInput[i+a][j+b][u]*kernel[a][b][u][v]);
 8000be2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000be6:	4413      	add	r3, r2
 8000be8:	009b      	lsls	r3, r3, #2
 8000bea:	69fa      	ldr	r2, [r7, #28]
 8000bec:	4413      	add	r3, r2
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bf4:	440b      	add	r3, r1
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	4413      	add	r3, r2
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000bfe:	009b      	lsls	r3, r3, #2
 8000c00:	4413      	add	r3, r2
 8000c02:	ed93 7a00 	vldr	s14, [r3]
 8000c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c08:	009b      	lsls	r3, r3, #2
 8000c0a:	68ba      	ldr	r2, [r7, #8]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c12:	009b      	lsls	r3, r3, #2
 8000c14:	4413      	add	r3, r2
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	4413      	add	r3, r2
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c22:	009b      	lsls	r3, r3, #2
 8000c24:	4413      	add	r3, r2
 8000c26:	edd3 7a00 	vldr	s15, [r3]
 8000c2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c2e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000c32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c36:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
							for(int b=0; b<kDim; b++) {
 8000c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	637b      	str	r3, [r7, #52]	; 0x34
 8000c40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000c42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000c44:	429a      	cmp	r2, r3
 8000c46:	dbcc      	blt.n	8000be2 <convInPlace+0x1a6>
						for(int a=0; a<kDim; a++) {
 8000c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	63bb      	str	r3, [r7, #56]	; 0x38
 8000c4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000c50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000c52:	429a      	cmp	r2, r3
 8000c54:	dbc2      	blt.n	8000bdc <convInPlace+0x1a0>
					for (int u=0; u<iDim; u++) {
 8000c56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c58:	3301      	adds	r3, #1
 8000c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000c5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000c5e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000c60:	429a      	cmp	r2, r3
 8000c62:	dbb8      	blt.n	8000bd6 <convInPlace+0x19a>
							}
						}
					}
					input[i][j][v] = sum;
 8000c64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	68fa      	ldr	r2, [r7, #12]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	4413      	add	r3, r2
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c78:	009b      	lsls	r3, r3, #2
 8000c7a:	4413      	add	r3, r2
 8000c7c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000c7e:	601a      	str	r2, [r3, #0]
				for(int j=0; j<iWidth; j++) {
 8000c80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c82:	3301      	adds	r3, #1
 8000c84:	647b      	str	r3, [r7, #68]	; 0x44
 8000c86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	429a      	cmp	r2, r3
 8000c8c:	db9d      	blt.n	8000bca <convInPlace+0x18e>
			for(int i=0; i<iHeight; i++) {
 8000c8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c90:	3301      	adds	r3, #1
 8000c92:	64bb      	str	r3, [r7, #72]	; 0x48
 8000c94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	db93      	blt.n	8000bc4 <convInPlace+0x188>
		for(int v=0; v<oDim; v++) {
 8000c9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000ca2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000ca4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	db88      	blt.n	8000bbe <convInPlace+0x182>
			}
		}


		//free(padInput);
		for (int i = 0; i < padiHeight; i++) {
 8000cac:	2300      	movs	r3, #0
 8000cae:	633b      	str	r3, [r7, #48]	; 0x30
 8000cb0:	e018      	b.n	8000ce4 <convInPlace+0x2a8>
			for (int j = 0; j < padiWidth; j++) {
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000cb6:	e00e      	b.n	8000cd6 <convInPlace+0x29a>
				free(padInput[i][j]);
 8000cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	69fa      	ldr	r2, [r7, #28]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cc4:	009b      	lsls	r3, r3, #2
 8000cc6:	4413      	add	r3, r2
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f011 fdb6 	bl	801283c <free>
			for (int j = 0; j < padiWidth; j++) {
 8000cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000cd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000cd8:	6a3b      	ldr	r3, [r7, #32]
 8000cda:	429a      	cmp	r2, r3
 8000cdc:	dbec      	blt.n	8000cb8 <convInPlace+0x27c>
		for (int i = 0; i < padiHeight; i++) {
 8000cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	633b      	str	r3, [r7, #48]	; 0x30
 8000ce4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	dbe2      	blt.n	8000cb2 <convInPlace+0x276>
			}
		}
		for (int i = 0; i < padiHeight; i++) {
 8000cec:	2300      	movs	r3, #0
 8000cee:	62bb      	str	r3, [r7, #40]	; 0x28
 8000cf0:	e00a      	b.n	8000d08 <convInPlace+0x2cc>
			free(padInput[i]);
 8000cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cf4:	009b      	lsls	r3, r3, #2
 8000cf6:	69fa      	ldr	r2, [r7, #28]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f011 fd9d 	bl	801283c <free>
		for (int i = 0; i < padiHeight; i++) {
 8000d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d04:	3301      	adds	r3, #1
 8000d06:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	dbf0      	blt.n	8000cf2 <convInPlace+0x2b6>
		}
		free(padInput);
 8000d10:	69f8      	ldr	r0, [r7, #28]
 8000d12:	f011 fd93 	bl	801283c <free>
}
 8000d16:	bf00      	nop
 8000d18:	376c      	adds	r7, #108	; 0x6c
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd90      	pop	{r4, r7, pc}

08000d1e <reluInPlace>:


void reluInPlace(float** input[], float bias[], int iHeight, int iWidth, int oDim) {
 8000d1e:	b480      	push	{r7}
 8000d20:	b089      	sub	sp, #36	; 0x24
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	60f8      	str	r0, [r7, #12]
 8000d26:	60b9      	str	r1, [r7, #8]
 8000d28:	607a      	str	r2, [r7, #4]
 8000d2a:	603b      	str	r3, [r7, #0]
	for(int v=0; v<oDim; v++) {
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	61fb      	str	r3, [r7, #28]
 8000d30:	e055      	b.n	8000dde <reluInPlace+0xc0>
			for(int i=0; i<iHeight; i++) {
 8000d32:	2300      	movs	r3, #0
 8000d34:	61bb      	str	r3, [r7, #24]
 8000d36:	e04b      	b.n	8000dd0 <reluInPlace+0xb2>
					for(int j=0; j<iWidth; j++) {
 8000d38:	2300      	movs	r3, #0
 8000d3a:	617b      	str	r3, [r7, #20]
 8000d3c:	e041      	b.n	8000dc2 <reluInPlace+0xa4>

						float sum = bias[v];
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	68ba      	ldr	r2, [r7, #8]
 8000d44:	4413      	add	r3, r2
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	613b      	str	r3, [r7, #16]
						sum += input[i][j][v];
 8000d4a:	69bb      	ldr	r3, [r7, #24]
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	68fa      	ldr	r2, [r7, #12]
 8000d50:	4413      	add	r3, r2
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	4413      	add	r3, r2
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	4413      	add	r3, r2
 8000d62:	edd3 7a00 	vldr	s15, [r3]
 8000d66:	ed97 7a04 	vldr	s14, [r7, #16]
 8000d6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d6e:	edc7 7a04 	vstr	s15, [r7, #16]
						if(sum < 0.0) {
 8000d72:	edd7 7a04 	vldr	s15, [r7, #16]
 8000d76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d7e:	d50f      	bpl.n	8000da0 <reluInPlace+0x82>
							input[i][j][v] = 0.0;
 8000d80:	69bb      	ldr	r3, [r7, #24]
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	68fa      	ldr	r2, [r7, #12]
 8000d86:	4413      	add	r3, r2
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	4413      	add	r3, r2
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	009b      	lsls	r3, r3, #2
 8000d96:	4413      	add	r3, r2
 8000d98:	f04f 0200 	mov.w	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	e00d      	b.n	8000dbc <reluInPlace+0x9e>
						}
						else {
							input[i][j][v] = sum;
 8000da0:	69bb      	ldr	r3, [r7, #24]
 8000da2:	009b      	lsls	r3, r3, #2
 8000da4:	68fa      	ldr	r2, [r7, #12]
 8000da6:	4413      	add	r3, r2
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	4413      	add	r3, r2
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	4413      	add	r3, r2
 8000db8:	693a      	ldr	r2, [r7, #16]
 8000dba:	601a      	str	r2, [r3, #0]
					for(int j=0; j<iWidth; j++) {
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	617b      	str	r3, [r7, #20]
 8000dc2:	697a      	ldr	r2, [r7, #20]
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	429a      	cmp	r2, r3
 8000dc8:	dbb9      	blt.n	8000d3e <reluInPlace+0x20>
			for(int i=0; i<iHeight; i++) {
 8000dca:	69bb      	ldr	r3, [r7, #24]
 8000dcc:	3301      	adds	r3, #1
 8000dce:	61bb      	str	r3, [r7, #24]
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	dbaf      	blt.n	8000d38 <reluInPlace+0x1a>
	for(int v=0; v<oDim; v++) {
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	61fb      	str	r3, [r7, #28]
 8000dde:	69fa      	ldr	r2, [r7, #28]
 8000de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000de2:	429a      	cmp	r2, r3
 8000de4:	dba5      	blt.n	8000d32 <reluInPlace+0x14>
					}
			}
	}


}
 8000de6:	bf00      	nop
 8000de8:	3724      	adds	r7, #36	; 0x24
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr

08000df2 <convAdd>:

void convAdd(float** input[], float*** kernel[], float** result[], int iHeight, int iWidth, int kDim, int iDim, int oDim, int pSize) {
 8000df2:	b590      	push	{r4, r7, lr}
 8000df4:	b09b      	sub	sp, #108	; 0x6c
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	60f8      	str	r0, [r7, #12]
 8000dfa:	60b9      	str	r1, [r7, #8]
 8000dfc:	607a      	str	r2, [r7, #4]
 8000dfe:	603b      	str	r3, [r7, #0]
	/////////////////////////// zero-pad
		int padiHeight = iHeight + (2*pSize);
 8000e00:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	683a      	ldr	r2, [r7, #0]
 8000e08:	4413      	add	r3, r2
 8000e0a:	627b      	str	r3, [r7, #36]	; 0x24
		int padiWidth = iWidth + (2*pSize);
 8000e0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8000e14:	4413      	add	r3, r2
 8000e16:	623b      	str	r3, [r7, #32]

		// allocate 3d padInput
		float*** padInput = (float***)malloc(padiHeight * sizeof(float**));
 8000e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e1a:	009b      	lsls	r3, r3, #2
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f011 fd05 	bl	801282c <malloc>
 8000e22:	4603      	mov	r3, r0
 8000e24:	61fb      	str	r3, [r7, #28]
		for (int i = 0; i < padiHeight; i++) {
 8000e26:	2300      	movs	r3, #0
 8000e28:	667b      	str	r3, [r7, #100]	; 0x64
 8000e2a:	e00d      	b.n	8000e48 <convAdd+0x56>
			padInput[i] = (float**)malloc(padiWidth * sizeof(float*));
 8000e2c:	6a3b      	ldr	r3, [r7, #32]
 8000e2e:	0099      	lsls	r1, r3, #2
 8000e30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000e32:	009b      	lsls	r3, r3, #2
 8000e34:	69fa      	ldr	r2, [r7, #28]
 8000e36:	18d4      	adds	r4, r2, r3
 8000e38:	4608      	mov	r0, r1
 8000e3a:	f011 fcf7 	bl	801282c <malloc>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	6023      	str	r3, [r4, #0]
		for (int i = 0; i < padiHeight; i++) {
 8000e42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000e44:	3301      	adds	r3, #1
 8000e46:	667b      	str	r3, [r7, #100]	; 0x64
 8000e48:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	dbed      	blt.n	8000e2c <convAdd+0x3a>
		}
		for (int i = 0; i < padiHeight; i++) {
 8000e50:	2300      	movs	r3, #0
 8000e52:	663b      	str	r3, [r7, #96]	; 0x60
 8000e54:	e01c      	b.n	8000e90 <convAdd+0x9e>
			for (int j = 0; j < padiWidth; j++) {
 8000e56:	2300      	movs	r3, #0
 8000e58:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000e5a:	e012      	b.n	8000e82 <convAdd+0x90>
				padInput[i][j] = (float*)malloc(iDim * sizeof(float));
 8000e5c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000e60:	0099      	lsls	r1, r3, #2
 8000e62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	69fa      	ldr	r2, [r7, #28]
 8000e68:	4413      	add	r3, r2
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	18d4      	adds	r4, r2, r3
 8000e72:	4608      	mov	r0, r1
 8000e74:	f011 fcda 	bl	801282c <malloc>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	6023      	str	r3, [r4, #0]
			for (int j = 0; j < padiWidth; j++) {
 8000e7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e7e:	3301      	adds	r3, #1
 8000e80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000e82:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000e84:	6a3b      	ldr	r3, [r7, #32]
 8000e86:	429a      	cmp	r2, r3
 8000e88:	dbe8      	blt.n	8000e5c <convAdd+0x6a>
		for (int i = 0; i < padiHeight; i++) {
 8000e8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	663b      	str	r3, [r7, #96]	; 0x60
 8000e90:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e94:	429a      	cmp	r2, r3
 8000e96:	dbde      	blt.n	8000e56 <convAdd+0x64>
			}
		}

		for(int k=0; k<iDim; k++) {
 8000e98:	2300      	movs	r3, #0
 8000e9a:	65bb      	str	r3, [r7, #88]	; 0x58
 8000e9c:	e064      	b.n	8000f68 <convAdd+0x176>
			for (int i=0; i<padiHeight; i++) {
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	657b      	str	r3, [r7, #84]	; 0x54
 8000ea2:	e05a      	b.n	8000f5a <convAdd+0x168>
				for(int j=0; j<padiWidth; j++) {
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	653b      	str	r3, [r7, #80]	; 0x50
 8000ea8:	e050      	b.n	8000f4c <convAdd+0x15a>

					if( i<pSize || i>(iHeight + pSize - 1) || j<pSize || j>(iWidth + pSize - 1) ) {
 8000eaa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000eac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	db14      	blt.n	8000ede <convAdd+0xec>
 8000eb4:	683a      	ldr	r2, [r7, #0]
 8000eb6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000eba:	4413      	add	r3, r2
 8000ebc:	3b01      	subs	r3, #1
 8000ebe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	dc0c      	bgt.n	8000ede <convAdd+0xec>
 8000ec4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000ec6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	db07      	blt.n	8000ede <convAdd+0xec>
 8000ece:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8000ed0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000ed4:	4413      	add	r3, r2
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000eda:	429a      	cmp	r2, r3
 8000edc:	dd0f      	ble.n	8000efe <convAdd+0x10c>
						padInput[i][j][k] = 0.0;
 8000ede:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	69fa      	ldr	r2, [r7, #28]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	4413      	add	r3, r2
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	4413      	add	r3, r2
 8000ef6:	f04f 0200 	mov.w	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	e023      	b.n	8000f46 <convAdd+0x154>
					}
					else {
						int iIdx = i - pSize;
 8000efe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000f00:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	61bb      	str	r3, [r7, #24]
						int jIdx = j - pSize;
 8000f08:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000f0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000f0e:	1ad3      	subs	r3, r2, r3
 8000f10:	617b      	str	r3, [r7, #20]

						padInput[i][j][k] = input[iIdx][jIdx][k];
 8000f12:	69bb      	ldr	r3, [r7, #24]
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	68fa      	ldr	r2, [r7, #12]
 8000f18:	4413      	add	r3, r2
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	4413      	add	r3, r2
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	441a      	add	r2, r3
 8000f2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	69f9      	ldr	r1, [r7, #28]
 8000f30:	440b      	add	r3, r1
 8000f32:	6819      	ldr	r1, [r3, #0]
 8000f34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	440b      	add	r3, r1
 8000f3a:	6819      	ldr	r1, [r3, #0]
 8000f3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	440b      	add	r3, r1
 8000f42:	6812      	ldr	r2, [r2, #0]
 8000f44:	601a      	str	r2, [r3, #0]
				for(int j=0; j<padiWidth; j++) {
 8000f46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000f48:	3301      	adds	r3, #1
 8000f4a:	653b      	str	r3, [r7, #80]	; 0x50
 8000f4c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000f4e:	6a3b      	ldr	r3, [r7, #32]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	dbaa      	blt.n	8000eaa <convAdd+0xb8>
			for (int i=0; i<padiHeight; i++) {
 8000f54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f56:	3301      	adds	r3, #1
 8000f58:	657b      	str	r3, [r7, #84]	; 0x54
 8000f5a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5e:	429a      	cmp	r2, r3
 8000f60:	dba0      	blt.n	8000ea4 <convAdd+0xb2>
		for(int k=0; k<iDim; k++) {
 8000f62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000f64:	3301      	adds	r3, #1
 8000f66:	65bb      	str	r3, [r7, #88]	; 0x58
 8000f68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000f6a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	db95      	blt.n	8000e9e <convAdd+0xac>
				}
			}
		}

		/////////////////////////// convolution
		for(int v=0; v<oDim; v++) {
 8000f72:	2300      	movs	r3, #0
 8000f74:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000f76:	e084      	b.n	8001082 <convAdd+0x290>
			for(int i=0; i<iHeight; i++) {
 8000f78:	2300      	movs	r3, #0
 8000f7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8000f7c:	e07a      	b.n	8001074 <convAdd+0x282>
				for(int j=0; j<iWidth; j++) {
 8000f7e:	2300      	movs	r3, #0
 8000f80:	647b      	str	r3, [r7, #68]	; 0x44
 8000f82:	e070      	b.n	8001066 <convAdd+0x274>

					float sum = 0.0;
 8000f84:	f04f 0300 	mov.w	r3, #0
 8000f88:	643b      	str	r3, [r7, #64]	; 0x40
					for (int u=0; u<iDim; u++) {
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f8e:	e042      	b.n	8001016 <convAdd+0x224>
						for(int a=0; a<kDim; a++) {
 8000f90:	2300      	movs	r3, #0
 8000f92:	63bb      	str	r3, [r7, #56]	; 0x38
 8000f94:	e038      	b.n	8001008 <convAdd+0x216>
							for(int b=0; b<kDim; b++) {
 8000f96:	2300      	movs	r3, #0
 8000f98:	637b      	str	r3, [r7, #52]	; 0x34
 8000f9a:	e02e      	b.n	8000ffa <convAdd+0x208>
								sum += (padInput[i+a][j+b][u]*kernel[a][b][u][v]);
 8000f9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fa0:	4413      	add	r3, r2
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	69fa      	ldr	r2, [r7, #28]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fae:	440b      	add	r3, r1
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	4413      	add	r3, r2
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	4413      	add	r3, r2
 8000fbc:	ed93 7a00 	vldr	s14, [r3]
 8000fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	68ba      	ldr	r2, [r7, #8]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	4413      	add	r3, r2
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	4413      	add	r3, r2
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	4413      	add	r3, r2
 8000fe0:	edd3 7a00 	vldr	s15, [r3]
 8000fe4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fe8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000fec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ff0:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
							for(int b=0; b<kDim; b++) {
 8000ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	637b      	str	r3, [r7, #52]	; 0x34
 8000ffa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000ffc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000ffe:	429a      	cmp	r2, r3
 8001000:	dbcc      	blt.n	8000f9c <convAdd+0x1aa>
						for(int a=0; a<kDim; a++) {
 8001002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001004:	3301      	adds	r3, #1
 8001006:	63bb      	str	r3, [r7, #56]	; 0x38
 8001008:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800100a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800100c:	429a      	cmp	r2, r3
 800100e:	dbc2      	blt.n	8000f96 <convAdd+0x1a4>
					for (int u=0; u<iDim; u++) {
 8001010:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001012:	3301      	adds	r3, #1
 8001014:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001016:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001018:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800101c:	429a      	cmp	r2, r3
 800101e:	dbb7      	blt.n	8000f90 <convAdd+0x19e>
							}
						}
					}
					result[i][j][v] += sum;
 8001020:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	687a      	ldr	r2, [r7, #4]
 8001026:	4413      	add	r3, r2
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	4413      	add	r3, r2
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	4413      	add	r3, r2
 8001038:	ed93 7a00 	vldr	s14, [r3]
 800103c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	687a      	ldr	r2, [r7, #4]
 8001042:	4413      	add	r3, r2
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	4413      	add	r3, r2
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	4413      	add	r3, r2
 8001054:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001058:	ee77 7a27 	vadd.f32	s15, s14, s15
 800105c:	edc3 7a00 	vstr	s15, [r3]
				for(int j=0; j<iWidth; j++) {
 8001060:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001062:	3301      	adds	r3, #1
 8001064:	647b      	str	r3, [r7, #68]	; 0x44
 8001066:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001068:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800106a:	429a      	cmp	r2, r3
 800106c:	db8a      	blt.n	8000f84 <convAdd+0x192>
			for(int i=0; i<iHeight; i++) {
 800106e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001070:	3301      	adds	r3, #1
 8001072:	64bb      	str	r3, [r7, #72]	; 0x48
 8001074:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	429a      	cmp	r2, r3
 800107a:	db80      	blt.n	8000f7e <convAdd+0x18c>
		for(int v=0; v<oDim; v++) {
 800107c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800107e:	3301      	adds	r3, #1
 8001080:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001082:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001084:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001088:	429a      	cmp	r2, r3
 800108a:	f6ff af75 	blt.w	8000f78 <convAdd+0x186>
			}
		}


		//free(padInput);
		for (int i = 0; i < padiHeight; i++) {
 800108e:	2300      	movs	r3, #0
 8001090:	633b      	str	r3, [r7, #48]	; 0x30
 8001092:	e018      	b.n	80010c6 <convAdd+0x2d4>
			for (int j = 0; j < padiWidth; j++) {
 8001094:	2300      	movs	r3, #0
 8001096:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001098:	e00e      	b.n	80010b8 <convAdd+0x2c6>
				free(padInput[i][j]);
 800109a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	69fa      	ldr	r2, [r7, #28]
 80010a0:	4413      	add	r3, r2
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	4413      	add	r3, r2
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f011 fbc5 	bl	801283c <free>
			for (int j = 0; j < padiWidth; j++) {
 80010b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010b4:	3301      	adds	r3, #1
 80010b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010ba:	6a3b      	ldr	r3, [r7, #32]
 80010bc:	429a      	cmp	r2, r3
 80010be:	dbec      	blt.n	800109a <convAdd+0x2a8>
		for (int i = 0; i < padiHeight; i++) {
 80010c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010c2:	3301      	adds	r3, #1
 80010c4:	633b      	str	r3, [r7, #48]	; 0x30
 80010c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80010c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ca:	429a      	cmp	r2, r3
 80010cc:	dbe2      	blt.n	8001094 <convAdd+0x2a2>
			}
		}
		for (int i = 0; i < padiHeight; i++) {
 80010ce:	2300      	movs	r3, #0
 80010d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80010d2:	e00a      	b.n	80010ea <convAdd+0x2f8>
			free(padInput[i]);
 80010d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	69fa      	ldr	r2, [r7, #28]
 80010da:	4413      	add	r3, r2
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4618      	mov	r0, r3
 80010e0:	f011 fbac 	bl	801283c <free>
		for (int i = 0; i < padiHeight; i++) {
 80010e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010e6:	3301      	adds	r3, #1
 80010e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80010ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ee:	429a      	cmp	r2, r3
 80010f0:	dbf0      	blt.n	80010d4 <convAdd+0x2e2>
		}
		free(padInput);
 80010f2:	69f8      	ldr	r0, [r7, #28]
 80010f4:	f011 fba2 	bl	801283c <free>
}
 80010f8:	bf00      	nop
 80010fa:	376c      	adds	r7, #108	; 0x6c
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd90      	pop	{r4, r7, pc}

08001100 <estResult>:

void estResult(float** input[], float** x5[], int iHeight, int iWidth) { // To save memory, this is an in place function
 8001100:	b480      	push	{r7}
 8001102:	b089      	sub	sp, #36	; 0x24
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
 800110c:	603b      	str	r3, [r7, #0]
	// result is stored in x5

	for(int k=0; k<3; k++) {
 800110e:	2300      	movs	r3, #0
 8001110:	61fb      	str	r3, [r7, #28]
 8001112:	e06f      	b.n	80011f4 <estResult+0xf4>
		for(int i=0; i<iHeight; i++) {
 8001114:	2300      	movs	r3, #0
 8001116:	61bb      	str	r3, [r7, #24]
 8001118:	e065      	b.n	80011e6 <estResult+0xe6>
			for(int j=0; j<iWidth; j++) {
 800111a:	2300      	movs	r3, #0
 800111c:	617b      	str	r3, [r7, #20]
 800111e:	e05b      	b.n	80011d8 <estResult+0xd8>
				float sum = (x5[i][j][k]*input[i][j][k]) - x5[i][j][k] + 1;
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	68ba      	ldr	r2, [r7, #8]
 8001126:	4413      	add	r3, r2
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	4413      	add	r3, r2
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	4413      	add	r3, r2
 8001138:	ed93 7a00 	vldr	s14, [r3]
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	68fa      	ldr	r2, [r7, #12]
 8001142:	4413      	add	r3, r2
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	4413      	add	r3, r2
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	4413      	add	r3, r2
 8001154:	edd3 7a00 	vldr	s15, [r3]
 8001158:	ee27 7a27 	vmul.f32	s14, s14, s15
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	68ba      	ldr	r2, [r7, #8]
 8001162:	4413      	add	r3, r2
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	4413      	add	r3, r2
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	4413      	add	r3, r2
 8001174:	edd3 7a00 	vldr	s15, [r3]
 8001178:	ee77 7a67 	vsub.f32	s15, s14, s15
 800117c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001180:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001184:	edc7 7a04 	vstr	s15, [r7, #16]
				if (sum < 0) {
 8001188:	edd7 7a04 	vldr	s15, [r7, #16]
 800118c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001194:	d50f      	bpl.n	80011b6 <estResult+0xb6>
					x5[i][j][k] = 0.0; // result
 8001196:	69bb      	ldr	r3, [r7, #24]
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	68ba      	ldr	r2, [r7, #8]
 800119c:	4413      	add	r3, r2
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	4413      	add	r3, r2
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	4413      	add	r3, r2
 80011ae:	f04f 0200 	mov.w	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	e00d      	b.n	80011d2 <estResult+0xd2>
				}
				else {
					x5[i][j][k] = sum; //result
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	68ba      	ldr	r2, [r7, #8]
 80011bc:	4413      	add	r3, r2
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	4413      	add	r3, r2
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	4413      	add	r3, r2
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	601a      	str	r2, [r3, #0]
			for(int j=0; j<iWidth; j++) {
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	3301      	adds	r3, #1
 80011d6:	617b      	str	r3, [r7, #20]
 80011d8:	697a      	ldr	r2, [r7, #20]
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	429a      	cmp	r2, r3
 80011de:	db9f      	blt.n	8001120 <estResult+0x20>
		for(int i=0; i<iHeight; i++) {
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	3301      	adds	r3, #1
 80011e4:	61bb      	str	r3, [r7, #24]
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	429a      	cmp	r2, r3
 80011ec:	db95      	blt.n	800111a <estResult+0x1a>
	for(int k=0; k<3; k++) {
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	3301      	adds	r3, #1
 80011f2:	61fb      	str	r3, [r7, #28]
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	dd8c      	ble.n	8001114 <estResult+0x14>
				}
			}
		}
	}

}
 80011fa:	bf00      	nop
 80011fc:	3724      	adds	r7, #36	; 0x24
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr

08001206 <ProcessBmp>:
 */


#include <jwread.h>

float * ProcessBmp(char *textin){
 8001206:	b580      	push	{r7, lr}
 8001208:	b086      	sub	sp, #24
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
	int pixel_start = textin[10];
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	330a      	adds	r3, #10
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	613b      	str	r3, [r7, #16]
	int img_size = textin[18] * textin[22] * 3; // textin[18] * textin[22];
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	3312      	adds	r3, #18
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	461a      	mov	r2, r3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	3316      	adds	r3, #22
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	fb03 f202 	mul.w	r2, r3, r2
 8001228:	4613      	mov	r3, r2
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	4413      	add	r3, r2
 800122e:	60fb      	str	r3, [r7, #12]
	float * result_img;
	result_img = (float *) malloc(sizeof(float)*img_size);
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	4618      	mov	r0, r3
 8001236:	f011 faf9 	bl	801282c <malloc>
 800123a:	4603      	mov	r3, r0
 800123c:	60bb      	str	r3, [r7, #8]

	for(int i = 0; i < img_size;i++){
 800123e:	2300      	movs	r3, #0
 8001240:	617b      	str	r3, [r7, #20]
 8001242:	e013      	b.n	800126c <ProcessBmp+0x66>
		result_img[i] = textin[pixel_start + i]; // result_img[i] = 255.0 - textin[pixel_start + i*3];
 8001244:	693a      	ldr	r2, [r7, #16]
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	4413      	add	r3, r2
 800124a:	461a      	mov	r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4413      	add	r3, r2
 8001250:	7819      	ldrb	r1, [r3, #0]
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	68ba      	ldr	r2, [r7, #8]
 8001258:	4413      	add	r3, r2
 800125a:	ee07 1a90 	vmov	s15, r1
 800125e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001262:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < img_size;i++){
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	3301      	adds	r3, #1
 800126a:	617b      	str	r3, [r7, #20]
 800126c:	697a      	ldr	r2, [r7, #20]
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	429a      	cmp	r2, r3
 8001272:	dbe7      	blt.n	8001244 <ProcessBmp+0x3e>
	}
	return result_img;
 8001274:	68bb      	ldr	r3, [r7, #8]
}
 8001276:	4618      	mov	r0, r3
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
	...

08001280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001280:	b590      	push	{r4, r7, lr}
 8001282:	f2ad 4da4 	subw	sp, sp, #1188	; 0x4a4
 8001286:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001288:	f004 fbb4 	bl	80059f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800128c:	f003 ff08 	bl	80050a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001290:	f004 f85e 	bl	8005350 <MX_GPIO_Init>
  MX_ETH_Init();
 8001294:	f003 ffbe 	bl	8005214 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001298:	f004 f80e 	bl	80052b8 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 800129c:	f00b fb0a 	bl	800c8b4 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 80012a0:	f010 ff4a 	bl	8012138 <MX_USB_HOST_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80012a4:	f010 ff6e 	bl	8012184 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
	sprintf(name,"test4.bmp"); //test4.bmp
 80012a8:	4a4b      	ldr	r2, [pc, #300]	; (80013d8 <main+0x158>)
 80012aa:	4b4c      	ldr	r3, [pc, #304]	; (80013dc <main+0x15c>)
 80012ac:	cb03      	ldmia	r3!, {r0, r1}
 80012ae:	6010      	str	r0, [r2, #0]
 80012b0:	6051      	str	r1, [r2, #4]
 80012b2:	881b      	ldrh	r3, [r3, #0]
 80012b4:	8113      	strh	r3, [r2, #8]
    file_ready = 0;
 80012b6:	4b4a      	ldr	r3, [pc, #296]	; (80013e0 <main+0x160>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
    read_bmp(name);
 80012bc:	4846      	ldr	r0, [pc, #280]	; (80013d8 <main+0x158>)
 80012be:	f010 fe33 	bl	8011f28 <read_bmp>
    if(file_ready == 1){
 80012c2:	4b47      	ldr	r3, [pc, #284]	; (80013e0 <main+0x160>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d1ec      	bne.n	80012a4 <main+0x24>
		out_img = ProcessBmp(rtext);
 80012ca:	4846      	ldr	r0, [pc, #280]	; (80013e4 <main+0x164>)
 80012cc:	f7ff ff9b 	bl	8001206 <ProcessBmp>
 80012d0:	4603      	mov	r3, r0
 80012d2:	461a      	mov	r2, r3
 80012d4:	4b44      	ldr	r3, [pc, #272]	; (80013e8 <main+0x168>)
 80012d6:	601a      	str	r2, [r3, #0]
		file_ready = 0;
 80012d8:	4b41      	ldr	r3, [pc, #260]	; (80013e0 <main+0x160>)
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
	    break;
 80012de:	bf00      	nop
    }
  }

  int iHeight = rtext[22];
 80012e0:	4b40      	ldr	r3, [pc, #256]	; (80013e4 <main+0x164>)
 80012e2:	7d9a      	ldrb	r2, [r3, #22]
 80012e4:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 80012e8:	601a      	str	r2, [r3, #0]
    int iWidth = rtext[18];
 80012ea:	4b3e      	ldr	r3, [pc, #248]	; (80013e4 <main+0x164>)
 80012ec:	7c9a      	ldrb	r2, [r3, #18]
 80012ee:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80012f2:	601a      	str	r2, [r3, #0]
    int iChannel = 3;
 80012f4:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80012f8:	2203      	movs	r2, #3
 80012fa:	601a      	str	r2, [r3, #0]
    int pixelStart = rtext[10];
 80012fc:	4b39      	ldr	r3, [pc, #228]	; (80013e4 <main+0x164>)
 80012fe:	7a9a      	ldrb	r2, [r3, #10]
 8001300:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001304:	601a      	str	r2, [r3, #0]

  	// allocate 3d for input
  	float*** input = (float***)malloc(iHeight * sizeof(float**));
 8001306:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	f507 748e 	add.w	r4, r7, #284	; 0x11c
 8001312:	4618      	mov	r0, r3
 8001314:	f011 fa8a 	bl	801282c <malloc>
 8001318:	4603      	mov	r3, r0
 800131a:	6023      	str	r3, [r4, #0]
  	for (int i = 0; i < iHeight; i++) {
 800131c:	2300      	movs	r3, #0
 800131e:	f8c7 3484 	str.w	r3, [r7, #1156]	; 0x484
 8001322:	e014      	b.n	800134e <main+0xce>
  	  input[i] = (float**)malloc(iWidth * sizeof(float*));
 8001324:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	0099      	lsls	r1, r3, #2
 800132c:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 8001336:	6812      	ldr	r2, [r2, #0]
 8001338:	18d4      	adds	r4, r2, r3
 800133a:	4608      	mov	r0, r1
 800133c:	f011 fa76 	bl	801282c <malloc>
 8001340:	4603      	mov	r3, r0
 8001342:	6023      	str	r3, [r4, #0]
  	for (int i = 0; i < iHeight; i++) {
 8001344:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8001348:	3301      	adds	r3, #1
 800134a:	f8c7 3484 	str.w	r3, [r7, #1156]	; 0x484
 800134e:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8001352:	f8d7 2484 	ldr.w	r2, [r7, #1156]	; 0x484
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	429a      	cmp	r2, r3
 800135a:	dbe3      	blt.n	8001324 <main+0xa4>
  	}
  	for (int i = 0; i < iHeight; i++) {
 800135c:	2300      	movs	r3, #0
 800135e:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
 8001362:	e025      	b.n	80013b0 <main+0x130>
  	  for (int j = 0; j < iWidth; j++) {
 8001364:	2300      	movs	r3, #0
 8001366:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
 800136a:	e015      	b.n	8001398 <main+0x118>
  		  input[i][j] = (float*)malloc(3 * sizeof(float));
 800136c:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 8001376:	6812      	ldr	r2, [r2, #0]
 8001378:	4413      	add	r3, r2
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	18d4      	adds	r4, r2, r3
 8001384:	200c      	movs	r0, #12
 8001386:	f011 fa51 	bl	801282c <malloc>
 800138a:	4603      	mov	r3, r0
 800138c:	6023      	str	r3, [r4, #0]
  	  for (int j = 0; j < iWidth; j++) {
 800138e:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 8001392:	3301      	adds	r3, #1
 8001394:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
 8001398:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800139c:	f8d7 247c 	ldr.w	r2, [r7, #1148]	; 0x47c
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	429a      	cmp	r2, r3
 80013a4:	dbe2      	blt.n	800136c <main+0xec>
  	for (int i = 0; i < iHeight; i++) {
 80013a6:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 80013aa:	3301      	adds	r3, #1
 80013ac:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
 80013b0:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 80013b4:	f8d7 2480 	ldr.w	r2, [r7, #1152]	; 0x480
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	dbd2      	blt.n	8001364 <main+0xe4>
  	  }
  	}

  	// set input[][][] values based on out_img

  	for(int k=0; k<3; k++) {
 80013be:	2300      	movs	r3, #0
 80013c0:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 80013c4:	e074      	b.n	80014b0 <main+0x230>
  	  for (int i = 0; i < iHeight; i++) {
 80013c6:	2300      	movs	r3, #0
 80013c8:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
 80013cc:	e064      	b.n	8001498 <main+0x218>
  		  for (int j = 0; j < iWidth; j++) {
 80013ce:	2300      	movs	r3, #0
 80013d0:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470
 80013d4:	e054      	b.n	8001480 <main+0x200>
 80013d6:	bf00      	nop
 80013d8:	2400323c 	.word	0x2400323c
 80013dc:	080156d8 	.word	0x080156d8
 80013e0:	240002dc 	.word	0x240002dc
 80013e4:	24000ed4 	.word	0x24000ed4
 80013e8:	24000328 	.word	0x24000328
  			  int iIdx = (iHeight - 1) - i;
 80013ec:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	1e59      	subs	r1, r3, #1
 80013f4:	f107 0310 	add.w	r3, r7, #16
 80013f8:	f8d7 2474 	ldr.w	r2, [r7, #1140]	; 0x474
 80013fc:	1a8a      	subs	r2, r1, r2
 80013fe:	601a      	str	r2, [r3, #0]
  			  int kIdx = (iChannel - 1) - k;
 8001400:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	1e59      	subs	r1, r3, #1
 8001408:	f107 030c 	add.w	r3, r7, #12
 800140c:	f8d7 2478 	ldr.w	r2, [r7, #1144]	; 0x478
 8001410:	1a8a      	subs	r2, r1, r2
 8001412:	601a      	str	r2, [r3, #0]
  			  input[i][j][k] = out_img[(((iIdx*iWidth)+j)*iChannel)+kIdx]/255.0;// ((i*iWidth+j)*iChannel)+k]; // /255.0
 8001414:	4bbd      	ldr	r3, [pc, #756]	; (800170c <main+0x48c>)
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	f107 0310 	add.w	r3, r7, #16
 800141c:	f507 7194 	add.w	r1, r7, #296	; 0x128
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	6809      	ldr	r1, [r1, #0]
 8001424:	fb01 f103 	mul.w	r1, r1, r3
 8001428:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 800142c:	440b      	add	r3, r1
 800142e:	f507 7192 	add.w	r1, r7, #292	; 0x124
 8001432:	6809      	ldr	r1, [r1, #0]
 8001434:	fb01 f103 	mul.w	r1, r1, r3
 8001438:	f107 030c 	add.w	r3, r7, #12
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	440b      	add	r3, r1
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	4413      	add	r3, r2
 8001444:	ed93 7a00 	vldr	s14, [r3]
 8001448:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 8001452:	6812      	ldr	r2, [r2, #0]
 8001454:	4413      	add	r3, r2
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	4413      	add	r3, r2
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	4413      	add	r3, r2
 800146a:	eddf 6aa9 	vldr	s13, [pc, #676]	; 8001710 <main+0x490>
 800146e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001472:	edc3 7a00 	vstr	s15, [r3]
  		  for (int j = 0; j < iWidth; j++) {
 8001476:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 800147a:	3301      	adds	r3, #1
 800147c:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470
 8001480:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001484:	f8d7 2470 	ldr.w	r2, [r7, #1136]	; 0x470
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	429a      	cmp	r2, r3
 800148c:	dbae      	blt.n	80013ec <main+0x16c>
  	  for (int i = 0; i < iHeight; i++) {
 800148e:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8001492:	3301      	adds	r3, #1
 8001494:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
 8001498:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800149c:	f8d7 2474 	ldr.w	r2, [r7, #1140]	; 0x474
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	429a      	cmp	r2, r3
 80014a4:	db93      	blt.n	80013ce <main+0x14e>
  	for(int k=0; k<3; k++) {
 80014a6:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 80014aa:	3301      	adds	r3, #1
 80014ac:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 80014b0:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	dd86      	ble.n	80013c6 <main+0x146>
  	   }
  	}

//  	free(out_img);

	float var1 = input[0][0][0];
 80014b8:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80014c6:	6812      	ldr	r2, [r2, #0]
 80014c8:	601a      	str	r2, [r3, #0]
	float var2 = input[0][1][0];
 80014ca:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	3304      	adds	r3, #4
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80014da:	6812      	ldr	r2, [r2, #0]
 80014dc:	601a      	str	r2, [r3, #0]
	float var3 = input[0][2][0];
 80014de:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	3308      	adds	r3, #8
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80014ee:	6812      	ldr	r2, [r2, #0]
 80014f0:	601a      	str	r2, [r3, #0]
	float var4 = input[1][0][0];
 80014f2:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	3304      	adds	r3, #4
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001502:	6812      	ldr	r2, [r2, #0]
 8001504:	601a      	str	r2, [r3, #0]
	float var5 = input[1][1][0];
 8001506:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	3304      	adds	r3, #4
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	3304      	adds	r3, #4
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001518:	6812      	ldr	r2, [r2, #0]
 800151a:	601a      	str	r2, [r3, #0]
	float var6 = input[1][2][0];
 800151c:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	3304      	adds	r3, #4
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	3308      	adds	r3, #8
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800152e:	6812      	ldr	r2, [r2, #0]
 8001530:	601a      	str	r2, [r3, #0]
	float var7 = input[2][0][0];
 8001532:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	3308      	adds	r3, #8
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001542:	6812      	ldr	r2, [r2, #0]
 8001544:	601a      	str	r2, [r3, #0]
	float var8 = input[2][1][0];
 8001546:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	3308      	adds	r3, #8
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	3304      	adds	r3, #4
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001558:	6812      	ldr	r2, [r2, #0]
 800155a:	601a      	str	r2, [r3, #0]
	float var9 = input[2][2][0];
 800155c:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	3308      	adds	r3, #8
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	3308      	adds	r3, #8
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800156e:	6812      	ldr	r2, [r2, #0]
 8001570:	601a      	str	r2, [r3, #0]

	float var10 = out_img[0];
 8001572:	4b66      	ldr	r3, [pc, #408]	; (800170c <main+0x48c>)
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800157a:	6812      	ldr	r2, [r2, #0]
 800157c:	601a      	str	r2, [r3, #0]
	float var20 = out_img[1];
 800157e:	4b63      	ldr	r3, [pc, #396]	; (800170c <main+0x48c>)
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001586:	6852      	ldr	r2, [r2, #4]
 8001588:	601a      	str	r2, [r3, #0]
	float var30 = out_img[2];
 800158a:	4b60      	ldr	r3, [pc, #384]	; (800170c <main+0x48c>)
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001592:	6892      	ldr	r2, [r2, #8]
 8001594:	601a      	str	r2, [r3, #0]
	float var40 = out_img[57];
 8001596:	4b5d      	ldr	r3, [pc, #372]	; (800170c <main+0x48c>)
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800159e:	f8d2 20e4 	ldr.w	r2, [r2, #228]	; 0xe4
 80015a2:	601a      	str	r2, [r3, #0]
	float var50 = out_img[58];
 80015a4:	4b59      	ldr	r3, [pc, #356]	; (800170c <main+0x48c>)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80015ac:	f8d2 20e8 	ldr.w	r2, [r2, #232]	; 0xe8
 80015b0:	601a      	str	r2, [r3, #0]
	float var60 = out_img[59];
 80015b2:	4b56      	ldr	r3, [pc, #344]	; (800170c <main+0x48c>)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80015ba:	f8d2 20ec 	ldr.w	r2, [r2, #236]	; 0xec
 80015be:	601a      	str	r2, [r3, #0]
	float var70 = out_img[6];
 80015c0:	4b52      	ldr	r3, [pc, #328]	; (800170c <main+0x48c>)
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80015c8:	6992      	ldr	r2, [r2, #24]
 80015ca:	601a      	str	r2, [r3, #0]
	float var80 = out_img[7];
 80015cc:	4b4f      	ldr	r3, [pc, #316]	; (800170c <main+0x48c>)
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80015d4:	69d2      	ldr	r2, [r2, #28]
 80015d6:	601a      	str	r2, [r3, #0]
	float var90 = out_img[8];
 80015d8:	4b4c      	ldr	r3, [pc, #304]	; (800170c <main+0x48c>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80015e0:	6a12      	ldr	r2, [r2, #32]
 80015e2:	601a      	str	r2, [r3, #0]

      /////////////////////////////////////////////////////////// e_conv1
      // read in parameters
      sprintf(name,"b1.txt");
 80015e4:	4b4b      	ldr	r3, [pc, #300]	; (8001714 <main+0x494>)
 80015e6:	4a4c      	ldr	r2, [pc, #304]	; (8001718 <main+0x498>)
 80015e8:	6810      	ldr	r0, [r2, #0]
 80015ea:	6018      	str	r0, [r3, #0]
 80015ec:	8891      	ldrh	r1, [r2, #4]
 80015ee:	7992      	ldrb	r2, [r2, #6]
 80015f0:	8099      	strh	r1, [r3, #4]
 80015f2:	719a      	strb	r2, [r3, #6]
      float * b1 = read_txt(name, 3);
 80015f4:	2103      	movs	r1, #3
 80015f6:	4847      	ldr	r0, [pc, #284]	; (8001714 <main+0x494>)
 80015f8:	f010 fd4a 	bl	8012090 <read_txt>
 80015fc:	4602      	mov	r2, r0
 80015fe:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001602:	601a      	str	r2, [r3, #0]

      sprintf(name,"w1.txt");
 8001604:	4b43      	ldr	r3, [pc, #268]	; (8001714 <main+0x494>)
 8001606:	4a45      	ldr	r2, [pc, #276]	; (800171c <main+0x49c>)
 8001608:	6810      	ldr	r0, [r2, #0]
 800160a:	6018      	str	r0, [r3, #0]
 800160c:	8891      	ldrh	r1, [r2, #4]
 800160e:	7992      	ldrb	r2, [r2, #6]
 8001610:	8099      	strh	r1, [r3, #4]
 8001612:	719a      	strb	r2, [r3, #6]
      float * nw1 = read_txt(name, 9);
 8001614:	2109      	movs	r1, #9
 8001616:	483f      	ldr	r0, [pc, #252]	; (8001714 <main+0x494>)
 8001618:	f010 fd3a 	bl	8012090 <read_txt>
 800161c:	4602      	mov	r2, r0
 800161e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001622:	601a      	str	r2, [r3, #0]

      int kDim = 1;
 8001624:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001628:	2201      	movs	r2, #1
 800162a:	601a      	str	r2, [r3, #0]
      int iDim = 3;
 800162c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001630:	2203      	movs	r2, #3
 8001632:	601a      	str	r2, [r3, #0]
      int oDim = 3;
 8001634:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001638:	2203      	movs	r2, #3
 800163a:	601a      	str	r2, [r3, #0]
      int pSize = 0;
 800163c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]

      // allocate 4d w1
      float**** w1 = (float****)malloc(kDim * sizeof(float***));
 8001644:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	f107 04b8 	add.w	r4, r7, #184	; 0xb8
 8001650:	4618      	mov	r0, r3
 8001652:	f011 f8eb 	bl	801282c <malloc>
 8001656:	4603      	mov	r3, r0
 8001658:	6023      	str	r3, [r4, #0]
      for (int i = 0; i < kDim; i++) {
 800165a:	2300      	movs	r3, #0
 800165c:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
 8001660:	e014      	b.n	800168c <main+0x40c>
    	  w1[i] = (float***)malloc(kDim * sizeof(float**));
 8001662:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	0099      	lsls	r1, r3, #2
 800166a:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8001674:	6812      	ldr	r2, [r2, #0]
 8001676:	18d4      	adds	r4, r2, r3
 8001678:	4608      	mov	r0, r1
 800167a:	f011 f8d7 	bl	801282c <malloc>
 800167e:	4603      	mov	r3, r0
 8001680:	6023      	str	r3, [r4, #0]
      for (int i = 0; i < kDim; i++) {
 8001682:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 8001686:	3301      	adds	r3, #1
 8001688:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
 800168c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001690:	f8d7 246c 	ldr.w	r2, [r7, #1132]	; 0x46c
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	429a      	cmp	r2, r3
 8001698:	dbe3      	blt.n	8001662 <main+0x3e2>
      }
      for (int i = 0; i < kDim; i++) {
 800169a:	2300      	movs	r3, #0
 800169c:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
 80016a0:	e029      	b.n	80016f6 <main+0x476>
    	  for (int j = 0; j < kDim; j++) {
 80016a2:	2300      	movs	r3, #0
 80016a4:	f8c7 3464 	str.w	r3, [r7, #1124]	; 0x464
 80016a8:	e019      	b.n	80016de <main+0x45e>
    		  w1[i][j] = (float**)malloc(iDim * sizeof(float*));
 80016aa:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	0099      	lsls	r1, r3, #2
 80016b2:	f8d7 3468 	ldr.w	r3, [r7, #1128]	; 0x468
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80016bc:	6812      	ldr	r2, [r2, #0]
 80016be:	4413      	add	r3, r2
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	18d4      	adds	r4, r2, r3
 80016ca:	4608      	mov	r0, r1
 80016cc:	f011 f8ae 	bl	801282c <malloc>
 80016d0:	4603      	mov	r3, r0
 80016d2:	6023      	str	r3, [r4, #0]
    	  for (int j = 0; j < kDim; j++) {
 80016d4:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 80016d8:	3301      	adds	r3, #1
 80016da:	f8c7 3464 	str.w	r3, [r7, #1124]	; 0x464
 80016de:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80016e2:	f8d7 2464 	ldr.w	r2, [r7, #1124]	; 0x464
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	dbde      	blt.n	80016aa <main+0x42a>
      for (int i = 0; i < kDim; i++) {
 80016ec:	f8d7 3468 	ldr.w	r3, [r7, #1128]	; 0x468
 80016f0:	3301      	adds	r3, #1
 80016f2:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
 80016f6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80016fa:	f8d7 2468 	ldr.w	r2, [r7, #1128]	; 0x468
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	429a      	cmp	r2, r3
 8001702:	dbce      	blt.n	80016a2 <main+0x422>
    	  }
      }
      for (int i = 0; i < kDim; i++) {
 8001704:	2300      	movs	r3, #0
 8001706:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 800170a:	e048      	b.n	800179e <main+0x51e>
 800170c:	24000328 	.word	0x24000328
 8001710:	437f0000 	.word	0x437f0000
 8001714:	2400323c 	.word	0x2400323c
 8001718:	080156e4 	.word	0x080156e4
 800171c:	080156ec 	.word	0x080156ec
      	  for (int j = 0; j < kDim; j++) {
 8001720:	2300      	movs	r3, #0
 8001722:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
 8001726:	e02e      	b.n	8001786 <main+0x506>
      		  for(int k = 0; k < iDim; k++) {
 8001728:	2300      	movs	r3, #0
 800172a:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
 800172e:	e01e      	b.n	800176e <main+0x4ee>
      			  w1[i][j][k] = (float*)malloc(oDim * sizeof(float));
 8001730:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	0099      	lsls	r1, r3, #2
 8001738:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8001742:	6812      	ldr	r2, [r2, #0]
 8001744:	4413      	add	r3, r2
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	4413      	add	r3, r2
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	18d4      	adds	r4, r2, r3
 800175a:	4608      	mov	r0, r1
 800175c:	f011 f866 	bl	801282c <malloc>
 8001760:	4603      	mov	r3, r0
 8001762:	6023      	str	r3, [r4, #0]
      		  for(int k = 0; k < iDim; k++) {
 8001764:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 8001768:	3301      	adds	r3, #1
 800176a:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
 800176e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001772:	f8d7 2458 	ldr.w	r2, [r7, #1112]	; 0x458
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	429a      	cmp	r2, r3
 800177a:	dbd9      	blt.n	8001730 <main+0x4b0>
      	  for (int j = 0; j < kDim; j++) {
 800177c:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 8001780:	3301      	adds	r3, #1
 8001782:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
 8001786:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800178a:	f8d7 245c 	ldr.w	r2, [r7, #1116]	; 0x45c
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	429a      	cmp	r2, r3
 8001792:	dbc9      	blt.n	8001728 <main+0x4a8>
      for (int i = 0; i < kDim; i++) {
 8001794:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8001798:	3301      	adds	r3, #1
 800179a:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 800179e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80017a2:	f8d7 2460 	ldr.w	r2, [r7, #1120]	; 0x460
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	dbb9      	blt.n	8001720 <main+0x4a0>
      		  }
      	  }
      }

      for (int j = 0; j < oDim; j++) {
 80017ac:	2300      	movs	r3, #0
 80017ae:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
 80017b2:	e031      	b.n	8001818 <main+0x598>
    	  for (int i = 0; i < iDim; i++) {
 80017b4:	2300      	movs	r3, #0
 80017b6:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
 80017ba:	e021      	b.n	8001800 <main+0x580>
    		  w1[0][0][i][j] = nw1[(j*3)+i];
 80017bc:	f8d7 2454 	ldr.w	r2, [r7, #1108]	; 0x454
 80017c0:	4613      	mov	r3, r2
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	441a      	add	r2, r3
 80017c6:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 80017ca:	4413      	add	r3, r2
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 80017d2:	6812      	ldr	r2, [r2, #0]
 80017d4:	441a      	add	r2, r3
 80017d6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	6819      	ldr	r1, [r3, #0]
 80017e0:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	440b      	add	r3, r1
 80017e8:	6819      	ldr	r1, [r3, #0]
 80017ea:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	440b      	add	r3, r1
 80017f2:	6812      	ldr	r2, [r2, #0]
 80017f4:	601a      	str	r2, [r3, #0]
    	  for (int i = 0; i < iDim; i++) {
 80017f6:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 80017fa:	3301      	adds	r3, #1
 80017fc:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
 8001800:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001804:	f8d7 2450 	ldr.w	r2, [r7, #1104]	; 0x450
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	429a      	cmp	r2, r3
 800180c:	dbd6      	blt.n	80017bc <main+0x53c>
      for (int j = 0; j < oDim; j++) {
 800180e:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8001812:	3301      	adds	r3, #1
 8001814:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
 8001818:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800181c:	f8d7 2454 	ldr.w	r2, [r7, #1108]	; 0x454
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	429a      	cmp	r2, r3
 8001824:	dbc6      	blt.n	80017b4 <main+0x534>
    	  }
      }

      free(nw1);
 8001826:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800182a:	6818      	ldr	r0, [r3, #0]
 800182c:	f011 f806 	bl	801283c <free>


      // allocate 3d x1
      float*** x1 = (float***)malloc(iHeight * sizeof(float**));
 8001830:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	f107 04b4 	add.w	r4, r7, #180	; 0xb4
 800183c:	4618      	mov	r0, r3
 800183e:	f010 fff5 	bl	801282c <malloc>
 8001842:	4603      	mov	r3, r0
 8001844:	6023      	str	r3, [r4, #0]
      for (int i = 0; i < iHeight; i++) {
 8001846:	2300      	movs	r3, #0
 8001848:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
 800184c:	e014      	b.n	8001878 <main+0x5f8>
    	  x1[i] = (float**)malloc(iWidth * sizeof(float*));
 800184e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	0099      	lsls	r1, r3, #2
 8001856:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8001860:	6812      	ldr	r2, [r2, #0]
 8001862:	18d4      	adds	r4, r2, r3
 8001864:	4608      	mov	r0, r1
 8001866:	f010 ffe1 	bl	801282c <malloc>
 800186a:	4603      	mov	r3, r0
 800186c:	6023      	str	r3, [r4, #0]
      for (int i = 0; i < iHeight; i++) {
 800186e:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 8001872:	3301      	adds	r3, #1
 8001874:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
 8001878:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800187c:	f8d7 244c 	ldr.w	r2, [r7, #1100]	; 0x44c
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	429a      	cmp	r2, r3
 8001884:	dbe3      	blt.n	800184e <main+0x5ce>
      }
      for (int i = 0; i < iHeight; i++) {
 8001886:	2300      	movs	r3, #0
 8001888:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
 800188c:	e029      	b.n	80018e2 <main+0x662>
    	  for (int j = 0; j < iWidth; j++) {
 800188e:	2300      	movs	r3, #0
 8001890:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
 8001894:	e019      	b.n	80018ca <main+0x64a>
    		  x1[i][j] = (float*)malloc(oDim * sizeof(float));
 8001896:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	0099      	lsls	r1, r3, #2
 800189e:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 80018a8:	6812      	ldr	r2, [r2, #0]
 80018aa:	4413      	add	r3, r2
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	18d4      	adds	r4, r2, r3
 80018b6:	4608      	mov	r0, r1
 80018b8:	f010 ffb8 	bl	801282c <malloc>
 80018bc:	4603      	mov	r3, r0
 80018be:	6023      	str	r3, [r4, #0]
    	  for (int j = 0; j < iWidth; j++) {
 80018c0:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 80018c4:	3301      	adds	r3, #1
 80018c6:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
 80018ca:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80018ce:	f8d7 2444 	ldr.w	r2, [r7, #1092]	; 0x444
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	dbde      	blt.n	8001896 <main+0x616>
      for (int i = 0; i < iHeight; i++) {
 80018d8:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 80018dc:	3301      	adds	r3, #1
 80018de:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
 80018e2:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 80018e6:	f8d7 2448 	ldr.w	r2, [r7, #1096]	; 0x448
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	dbce      	blt.n	800188e <main+0x60e>
    	  }
      }

      conv(input, w1, b1, x1, iHeight, iWidth, kDim, iDim, oDim, pSize);
 80018f0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80018f4:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 80018f8:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 80018fc:	f507 708e 	add.w	r0, r7, #284	; 0x11c
 8001900:	f107 04bc 	add.w	r4, r7, #188	; 0xbc
 8001904:	6824      	ldr	r4, [r4, #0]
 8001906:	9405      	str	r4, [sp, #20]
 8001908:	f107 04c0 	add.w	r4, r7, #192	; 0xc0
 800190c:	6824      	ldr	r4, [r4, #0]
 800190e:	9404      	str	r4, [sp, #16]
 8001910:	f107 04c4 	add.w	r4, r7, #196	; 0xc4
 8001914:	6824      	ldr	r4, [r4, #0]
 8001916:	9403      	str	r4, [sp, #12]
 8001918:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 800191c:	6824      	ldr	r4, [r4, #0]
 800191e:	9402      	str	r4, [sp, #8]
 8001920:	f507 7494 	add.w	r4, r7, #296	; 0x128
 8001924:	6824      	ldr	r4, [r4, #0]
 8001926:	9401      	str	r4, [sp, #4]
 8001928:	f507 7496 	add.w	r4, r7, #300	; 0x12c
 800192c:	6824      	ldr	r4, [r4, #0]
 800192e:	9400      	str	r4, [sp, #0]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	6812      	ldr	r2, [r2, #0]
 8001934:	6809      	ldr	r1, [r1, #0]
 8001936:	6800      	ldr	r0, [r0, #0]
 8001938:	f7fe fe56 	bl	80005e8 <conv>

      // free(w1);
      for (int i = 0; i < kDim; i++) {
 800193c:	2300      	movs	r3, #0
 800193e:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
 8001942:	e039      	b.n	80019b8 <main+0x738>
      	for (int j = 0; j < kDim; j++) {
 8001944:	2300      	movs	r3, #0
 8001946:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c
 800194a:	e029      	b.n	80019a0 <main+0x720>
      		  for(int k = 0; k < iDim; k++) {
 800194c:	2300      	movs	r3, #0
 800194e:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
 8001952:	e019      	b.n	8001988 <main+0x708>
      			  free(w1[i][j][k]);
 8001954:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 800195e:	6812      	ldr	r2, [r2, #0]
 8001960:	4413      	add	r3, r2
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	4413      	add	r3, r2
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	4413      	add	r3, r2
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4618      	mov	r0, r3
 800197a:	f010 ff5f 	bl	801283c <free>
      		  for(int k = 0; k < iDim; k++) {
 800197e:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 8001982:	3301      	adds	r3, #1
 8001984:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
 8001988:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800198c:	f8d7 2438 	ldr.w	r2, [r7, #1080]	; 0x438
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	429a      	cmp	r2, r3
 8001994:	dbde      	blt.n	8001954 <main+0x6d4>
      	for (int j = 0; j < kDim; j++) {
 8001996:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 800199a:	3301      	adds	r3, #1
 800199c:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c
 80019a0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80019a4:	f8d7 243c 	ldr.w	r2, [r7, #1084]	; 0x43c
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	dbce      	blt.n	800194c <main+0x6cc>
      for (int i = 0; i < kDim; i++) {
 80019ae:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 80019b2:	3301      	adds	r3, #1
 80019b4:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
 80019b8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80019bc:	f8d7 2440 	ldr.w	r2, [r7, #1088]	; 0x440
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	dbbe      	blt.n	8001944 <main+0x6c4>
      		  }
  		}
      }
      for (int i = 0; i < kDim; i++) {
 80019c6:	2300      	movs	r3, #0
 80019c8:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 80019cc:	e024      	b.n	8001a18 <main+0x798>
    	  for (int j = 0; j < kDim; j++) {
 80019ce:	2300      	movs	r3, #0
 80019d0:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
 80019d4:	e014      	b.n	8001a00 <main+0x780>
    		  free(w1[i][j]);
 80019d6:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80019e0:	6812      	ldr	r2, [r2, #0]
 80019e2:	4413      	add	r3, r2
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	4413      	add	r3, r2
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f010 ff23 	bl	801283c <free>
    	  for (int j = 0; j < kDim; j++) {
 80019f6:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 80019fa:	3301      	adds	r3, #1
 80019fc:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
 8001a00:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001a04:	f8d7 2430 	ldr.w	r2, [r7, #1072]	; 0x430
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	dbe3      	blt.n	80019d6 <main+0x756>
      for (int i = 0; i < kDim; i++) {
 8001a0e:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8001a12:	3301      	adds	r3, #1
 8001a14:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 8001a18:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001a1c:	f8d7 2434 	ldr.w	r2, [r7, #1076]	; 0x434
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	dbd3      	blt.n	80019ce <main+0x74e>
    	  }
      }
      for (int i = 0; i < kDim; i++) {
 8001a26:	2300      	movs	r3, #0
 8001a28:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
 8001a2c:	e00f      	b.n	8001a4e <main+0x7ce>
      	free(w1[i]);
 8001a2e:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8001a38:	6812      	ldr	r2, [r2, #0]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f010 fefc 	bl	801283c <free>
      for (int i = 0; i < kDim; i++) {
 8001a44:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8001a48:	3301      	adds	r3, #1
 8001a4a:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
 8001a4e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001a52:	f8d7 242c 	ldr.w	r2, [r7, #1068]	; 0x42c
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	dbe8      	blt.n	8001a2e <main+0x7ae>
      }
      free(w1);
 8001a5c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001a60:	6818      	ldr	r0, [r3, #0]
 8001a62:	f010 feeb 	bl	801283c <free>

      free(b1);
 8001a66:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001a6a:	6818      	ldr	r0, [r3, #0]
 8001a6c:	f010 fee6 	bl	801283c <free>

      //free(input);
      for (int i = 0; i < iHeight; i++) {
 8001a70:	2300      	movs	r3, #0
 8001a72:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
 8001a76:	e024      	b.n	8001ac2 <main+0x842>
    	  for (int j = 0; j < iWidth; j++) {
 8001a78:	2300      	movs	r3, #0
 8001a7a:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
 8001a7e:	e014      	b.n	8001aaa <main+0x82a>
    		free(input[i][j]);
 8001a80:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 8001a8a:	6812      	ldr	r2, [r2, #0]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	4413      	add	r3, r2
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f010 fece 	bl	801283c <free>
    	  for (int j = 0; j < iWidth; j++) {
 8001aa0:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
 8001aaa:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001aae:	f8d7 2424 	ldr.w	r2, [r7, #1060]	; 0x424
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	dbe3      	blt.n	8001a80 <main+0x800>
      for (int i = 0; i < iHeight; i++) {
 8001ab8:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 8001abc:	3301      	adds	r3, #1
 8001abe:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
 8001ac2:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8001ac6:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	dbd3      	blt.n	8001a78 <main+0x7f8>
    	  }
      }
      for (int i = 0; i < iHeight; i++) {
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
 8001ad6:	e00f      	b.n	8001af8 <main+0x878>
      	free(input[i]);
 8001ad8:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 8001ae2:	6812      	ldr	r2, [r2, #0]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f010 fea7 	bl	801283c <free>
      for (int i = 0; i < iHeight; i++) {
 8001aee:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 8001af2:	3301      	adds	r3, #1
 8001af4:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
 8001af8:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8001afc:	f8d7 2420 	ldr.w	r2, [r7, #1056]	; 0x420
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	dbe8      	blt.n	8001ad8 <main+0x858>
      }
      free(input);
 8001b06:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8001b0a:	6818      	ldr	r0, [r3, #0]
 8001b0c:	f010 fe96 	bl	801283c <free>

      /////////////////////////////////////////////////////////// e_conv2
      sprintf(name,"b2.txt");
 8001b10:	4bc4      	ldr	r3, [pc, #784]	; (8001e24 <main+0xba4>)
 8001b12:	4ac5      	ldr	r2, [pc, #788]	; (8001e28 <main+0xba8>)
 8001b14:	6810      	ldr	r0, [r2, #0]
 8001b16:	6018      	str	r0, [r3, #0]
 8001b18:	8891      	ldrh	r1, [r2, #4]
 8001b1a:	7992      	ldrb	r2, [r2, #6]
 8001b1c:	8099      	strh	r1, [r3, #4]
 8001b1e:	719a      	strb	r2, [r3, #6]
      float * b2 = read_txt(name, 3);
 8001b20:	2103      	movs	r1, #3
 8001b22:	48c0      	ldr	r0, [pc, #768]	; (8001e24 <main+0xba4>)
 8001b24:	f010 fab4 	bl	8012090 <read_txt>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001b2e:	601a      	str	r2, [r3, #0]

      sprintf(name,"w2.txt");
 8001b30:	4bbc      	ldr	r3, [pc, #752]	; (8001e24 <main+0xba4>)
 8001b32:	4abe      	ldr	r2, [pc, #760]	; (8001e2c <main+0xbac>)
 8001b34:	6810      	ldr	r0, [r2, #0]
 8001b36:	6018      	str	r0, [r3, #0]
 8001b38:	8891      	ldrh	r1, [r2, #4]
 8001b3a:	7992      	ldrb	r2, [r2, #6]
 8001b3c:	8099      	strh	r1, [r3, #4]
 8001b3e:	719a      	strb	r2, [r3, #6]
      float * nw2 = read_txt(name, 81);
 8001b40:	2151      	movs	r1, #81	; 0x51
 8001b42:	48b8      	ldr	r0, [pc, #736]	; (8001e24 <main+0xba4>)
 8001b44:	f010 faa4 	bl	8012090 <read_txt>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001b4e:	601a      	str	r2, [r3, #0]

      kDim = 3;
 8001b50:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001b54:	2203      	movs	r2, #3
 8001b56:	601a      	str	r2, [r3, #0]
      iDim = 3;
 8001b58:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001b5c:	2203      	movs	r2, #3
 8001b5e:	601a      	str	r2, [r3, #0]
      oDim = 3;
 8001b60:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001b64:	2203      	movs	r2, #3
 8001b66:	601a      	str	r2, [r3, #0]
      pSize = 1;
 8001b68:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	601a      	str	r2, [r3, #0]

      // allocate 4d w2
      float**** w2 = (float****)malloc(kDim * sizeof(float***));
 8001b70:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f010 fe55 	bl	801282c <malloc>
 8001b82:	4603      	mov	r3, r0
 8001b84:	6023      	str	r3, [r4, #0]
      for (int i = 0; i < kDim; i++) {
 8001b86:	2300      	movs	r3, #0
 8001b88:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
 8001b8c:	e014      	b.n	8001bb8 <main+0x938>
    	  w2[i] = (float***)malloc(kDim * sizeof(float**));
 8001b8e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	0099      	lsls	r1, r3, #2
 8001b96:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001ba0:	6812      	ldr	r2, [r2, #0]
 8001ba2:	18d4      	adds	r4, r2, r3
 8001ba4:	4608      	mov	r0, r1
 8001ba6:	f010 fe41 	bl	801282c <malloc>
 8001baa:	4603      	mov	r3, r0
 8001bac:	6023      	str	r3, [r4, #0]
      for (int i = 0; i < kDim; i++) {
 8001bae:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
 8001bb8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001bbc:	f8d7 241c 	ldr.w	r2, [r7, #1052]	; 0x41c
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	dbe3      	blt.n	8001b8e <main+0x90e>
      }
      for (int i = 0; i < kDim; i++) {
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
 8001bcc:	e029      	b.n	8001c22 <main+0x9a2>
    	  for (int j = 0; j < kDim; j++) {
 8001bce:	2300      	movs	r3, #0
 8001bd0:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
 8001bd4:	e019      	b.n	8001c0a <main+0x98a>
    		  w2[i][j] = (float**)malloc(iDim * sizeof(float*));
 8001bd6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	0099      	lsls	r1, r3, #2
 8001bde:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001be8:	6812      	ldr	r2, [r2, #0]
 8001bea:	4413      	add	r3, r2
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	18d4      	adds	r4, r2, r3
 8001bf6:	4608      	mov	r0, r1
 8001bf8:	f010 fe18 	bl	801282c <malloc>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	6023      	str	r3, [r4, #0]
    	  for (int j = 0; j < kDim; j++) {
 8001c00:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8001c04:	3301      	adds	r3, #1
 8001c06:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
 8001c0a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001c0e:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	dbde      	blt.n	8001bd6 <main+0x956>
      for (int i = 0; i < kDim; i++) {
 8001c18:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
 8001c22:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001c26:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	dbce      	blt.n	8001bce <main+0x94e>
    	  }
      }
      for (int i = 0; i < kDim; i++) {
 8001c30:	2300      	movs	r3, #0
 8001c32:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
 8001c36:	e03e      	b.n	8001cb6 <main+0xa36>
      	  for (int j = 0; j < kDim; j++) {
 8001c38:	2300      	movs	r3, #0
 8001c3a:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 8001c3e:	e02e      	b.n	8001c9e <main+0xa1e>
      		  for(int k = 0; k < iDim; k++) {
 8001c40:	2300      	movs	r3, #0
 8001c42:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
 8001c46:	e01e      	b.n	8001c86 <main+0xa06>
      			  w2[i][j][k] = (float*)malloc(oDim * sizeof(float));
 8001c48:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	0099      	lsls	r1, r3, #2
 8001c50:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001c5a:	6812      	ldr	r2, [r2, #0]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	4413      	add	r3, r2
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	18d4      	adds	r4, r2, r3
 8001c72:	4608      	mov	r0, r1
 8001c74:	f010 fdda 	bl	801282c <malloc>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	6023      	str	r3, [r4, #0]
      		  for(int k = 0; k < iDim; k++) {
 8001c7c:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8001c80:	3301      	adds	r3, #1
 8001c82:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
 8001c86:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001c8a:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	dbd9      	blt.n	8001c48 <main+0x9c8>
      	  for (int j = 0; j < kDim; j++) {
 8001c94:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8001c98:	3301      	adds	r3, #1
 8001c9a:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 8001c9e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001ca2:	f8d7 240c 	ldr.w	r2, [r7, #1036]	; 0x40c
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	dbc9      	blt.n	8001c40 <main+0x9c0>
      for (int i = 0; i < kDim; i++) {
 8001cac:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
 8001cb6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001cba:	f8d7 2410 	ldr.w	r2, [r7, #1040]	; 0x410
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	dbb9      	blt.n	8001c38 <main+0x9b8>
      		  }
      	  }
      }

      for(int i = 0; i < kDim; i++) {
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 8001cca:	e06b      	b.n	8001da4 <main+0xb24>
    	  for (int j = 0; j < kDim; j++) {
 8001ccc:	2300      	movs	r3, #0
 8001cce:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
 8001cd2:	e05b      	b.n	8001d8c <main+0xb0c>
    		  for (int v = 0; v < oDim; v++) {
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
 8001cda:	e04b      	b.n	8001d74 <main+0xaf4>
    			  for(int u = 0; u < iDim; u++) {
 8001cdc:	2300      	movs	r3, #0
 8001cde:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
 8001ce2:	e03b      	b.n	8001d5c <main+0xadc>
    				  w2[i][j][u][v] = nw2[(i*kDim*oDim*iDim)+(j*oDim*iDim)+(v*iDim)+u];
 8001ce4:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8001ce8:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8001cec:	6812      	ldr	r2, [r2, #0]
 8001cee:	fb02 f203 	mul.w	r2, r2, r3
 8001cf2:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 8001cf6:	4413      	add	r3, r2
 8001cf8:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8001cfc:	6812      	ldr	r2, [r2, #0]
 8001cfe:	fb02 f203 	mul.w	r2, r2, r3
 8001d02:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 8001d06:	4413      	add	r3, r2
 8001d08:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8001d0c:	6812      	ldr	r2, [r2, #0]
 8001d0e:	fb02 f203 	mul.w	r2, r2, r3
 8001d12:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 8001d16:	4413      	add	r3, r2
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001d1e:	6812      	ldr	r2, [r2, #0]
 8001d20:	441a      	add	r2, r3
 8001d22:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8001d2c:	6809      	ldr	r1, [r1, #0]
 8001d2e:	440b      	add	r3, r1
 8001d30:	6819      	ldr	r1, [r3, #0]
 8001d32:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	440b      	add	r3, r1
 8001d3a:	6819      	ldr	r1, [r3, #0]
 8001d3c:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	440b      	add	r3, r1
 8001d44:	6819      	ldr	r1, [r3, #0]
 8001d46:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	440b      	add	r3, r1
 8001d4e:	6812      	ldr	r2, [r2, #0]
 8001d50:	601a      	str	r2, [r3, #0]
    			  for(int u = 0; u < iDim; u++) {
 8001d52:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 8001d56:	3301      	adds	r3, #1
 8001d58:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
 8001d5c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001d60:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	; 0x3f8
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	dbbc      	blt.n	8001ce4 <main+0xa64>
    		  for (int v = 0; v < oDim; v++) {
 8001d6a:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 8001d6e:	3301      	adds	r3, #1
 8001d70:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
 8001d74:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001d78:	f8d7 23fc 	ldr.w	r2, [r7, #1020]	; 0x3fc
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	dbac      	blt.n	8001cdc <main+0xa5c>
    	  for (int j = 0; j < kDim; j++) {
 8001d82:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 8001d86:	3301      	adds	r3, #1
 8001d88:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
 8001d8c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001d90:	f8d7 2400 	ldr.w	r2, [r7, #1024]	; 0x400
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	429a      	cmp	r2, r3
 8001d98:	db9c      	blt.n	8001cd4 <main+0xa54>
      for(int i = 0; i < kDim; i++) {
 8001d9a:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8001d9e:	3301      	adds	r3, #1
 8001da0:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 8001da4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001da8:	f8d7 2404 	ldr.w	r2, [r7, #1028]	; 0x404
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	db8c      	blt.n	8001ccc <main+0xa4c>
    			  }
    		  }
    	  }
      }

      free(nw2);
 8001db2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001db6:	6818      	ldr	r0, [r3, #0]
 8001db8:	f010 fd40 	bl	801283c <free>

      // allocate 3d x2
      float*** x2 = (float***)malloc(iHeight * sizeof(float**));
 8001dbc:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	f107 04a4 	add.w	r4, r7, #164	; 0xa4
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f010 fd2f 	bl	801282c <malloc>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	6023      	str	r3, [r4, #0]
      for (int i = 0; i < iHeight; i++) {
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
 8001dd8:	e014      	b.n	8001e04 <main+0xb84>
    	  x2[i] = (float**)malloc(iWidth * sizeof(float*));
 8001dda:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	0099      	lsls	r1, r3, #2
 8001de2:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001dec:	6812      	ldr	r2, [r2, #0]
 8001dee:	18d4      	adds	r4, r2, r3
 8001df0:	4608      	mov	r0, r1
 8001df2:	f010 fd1b 	bl	801282c <malloc>
 8001df6:	4603      	mov	r3, r0
 8001df8:	6023      	str	r3, [r4, #0]
      for (int i = 0; i < iHeight; i++) {
 8001dfa:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 8001dfe:	3301      	adds	r3, #1
 8001e00:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
 8001e04:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8001e08:	f8d7 23f4 	ldr.w	r2, [r7, #1012]	; 0x3f4
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	dbe3      	blt.n	8001dda <main+0xb5a>
      }
      for (int i = 0; i < iHeight; i++) {
 8001e12:	2300      	movs	r3, #0
 8001e14:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
 8001e18:	e030      	b.n	8001e7c <main+0xbfc>
    	  for (int j = 0; j < iWidth; j++) {
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
 8001e20:	e020      	b.n	8001e64 <main+0xbe4>
 8001e22:	bf00      	nop
 8001e24:	2400323c 	.word	0x2400323c
 8001e28:	080156f4 	.word	0x080156f4
 8001e2c:	080156fc 	.word	0x080156fc
    		  x2[i][j] = (float*)malloc(oDim * sizeof(float));
 8001e30:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	0099      	lsls	r1, r3, #2
 8001e38:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	; 0x3f0
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001e42:	6812      	ldr	r2, [r2, #0]
 8001e44:	4413      	add	r3, r2
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	18d4      	adds	r4, r2, r3
 8001e50:	4608      	mov	r0, r1
 8001e52:	f010 fceb 	bl	801282c <malloc>
 8001e56:	4603      	mov	r3, r0
 8001e58:	6023      	str	r3, [r4, #0]
    	  for (int j = 0; j < iWidth; j++) {
 8001e5a:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8001e5e:	3301      	adds	r3, #1
 8001e60:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
 8001e64:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001e68:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	dbde      	blt.n	8001e30 <main+0xbb0>
      for (int i = 0; i < iHeight; i++) {
 8001e72:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	; 0x3f0
 8001e76:	3301      	adds	r3, #1
 8001e78:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
 8001e7c:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8001e80:	f8d7 23f0 	ldr.w	r2, [r7, #1008]	; 0x3f0
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	dbc7      	blt.n	8001e1a <main+0xb9a>
    	  }
      }

      conv(x1, w2, b2, x2, iHeight, iWidth, kDim, iDim, oDim, pSize);
 8001e8a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001e8e:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8001e92:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8001e96:	f107 00b4 	add.w	r0, r7, #180	; 0xb4
 8001e9a:	f107 04bc 	add.w	r4, r7, #188	; 0xbc
 8001e9e:	6824      	ldr	r4, [r4, #0]
 8001ea0:	9405      	str	r4, [sp, #20]
 8001ea2:	f107 04c0 	add.w	r4, r7, #192	; 0xc0
 8001ea6:	6824      	ldr	r4, [r4, #0]
 8001ea8:	9404      	str	r4, [sp, #16]
 8001eaa:	f107 04c4 	add.w	r4, r7, #196	; 0xc4
 8001eae:	6824      	ldr	r4, [r4, #0]
 8001eb0:	9403      	str	r4, [sp, #12]
 8001eb2:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 8001eb6:	6824      	ldr	r4, [r4, #0]
 8001eb8:	9402      	str	r4, [sp, #8]
 8001eba:	f507 7494 	add.w	r4, r7, #296	; 0x128
 8001ebe:	6824      	ldr	r4, [r4, #0]
 8001ec0:	9401      	str	r4, [sp, #4]
 8001ec2:	f507 7496 	add.w	r4, r7, #300	; 0x12c
 8001ec6:	6824      	ldr	r4, [r4, #0]
 8001ec8:	9400      	str	r4, [sp, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	6812      	ldr	r2, [r2, #0]
 8001ece:	6809      	ldr	r1, [r1, #0]
 8001ed0:	6800      	ldr	r0, [r0, #0]
 8001ed2:	f7fe fb89 	bl	80005e8 <conv>

      // free(w2);
      for (int i = 0; i < kDim; i++) {
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
 8001edc:	e039      	b.n	8001f52 <main+0xcd2>
      	for (int j = 0; j < kDim; j++) {
 8001ede:	2300      	movs	r3, #0
 8001ee0:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
 8001ee4:	e029      	b.n	8001f3a <main+0xcba>
      		  for(int k = 0; k < iDim; k++) {
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
 8001eec:	e019      	b.n	8001f22 <main+0xca2>
      			  free(w2[i][j][k]);
 8001eee:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001ef8:	6812      	ldr	r2, [r2, #0]
 8001efa:	4413      	add	r3, r2
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	4413      	add	r3, r2
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	4413      	add	r3, r2
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f010 fc92 	bl	801283c <free>
      		  for(int k = 0; k < iDim; k++) {
 8001f18:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
 8001f22:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001f26:	f8d7 23e0 	ldr.w	r2, [r7, #992]	; 0x3e0
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	dbde      	blt.n	8001eee <main+0xc6e>
      	for (int j = 0; j < kDim; j++) {
 8001f30:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8001f34:	3301      	adds	r3, #1
 8001f36:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
 8001f3a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001f3e:	f8d7 23e4 	ldr.w	r2, [r7, #996]	; 0x3e4
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	dbce      	blt.n	8001ee6 <main+0xc66>
      for (int i = 0; i < kDim; i++) {
 8001f48:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
 8001f52:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001f56:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	dbbe      	blt.n	8001ede <main+0xc5e>
      		  }
  		}
      }
      for (int i = 0; i < kDim; i++) {
 8001f60:	2300      	movs	r3, #0
 8001f62:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
 8001f66:	e024      	b.n	8001fb2 <main+0xd32>
    	  for (int j = 0; j < kDim; j++) {
 8001f68:	2300      	movs	r3, #0
 8001f6a:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
 8001f6e:	e014      	b.n	8001f9a <main+0xd1a>
    		  free(w2[i][j]);
 8001f70:	f8d7 33dc 	ldr.w	r3, [r7, #988]	; 0x3dc
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001f7a:	6812      	ldr	r2, [r2, #0]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	4413      	add	r3, r2
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f010 fc56 	bl	801283c <free>
    	  for (int j = 0; j < kDim; j++) {
 8001f90:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 8001f94:	3301      	adds	r3, #1
 8001f96:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
 8001f9a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001f9e:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	dbe3      	blt.n	8001f70 <main+0xcf0>
      for (int i = 0; i < kDim; i++) {
 8001fa8:	f8d7 33dc 	ldr.w	r3, [r7, #988]	; 0x3dc
 8001fac:	3301      	adds	r3, #1
 8001fae:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
 8001fb2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001fb6:	f8d7 23dc 	ldr.w	r2, [r7, #988]	; 0x3dc
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	dbd3      	blt.n	8001f68 <main+0xce8>
    	  }
      }
      for (int i = 0; i < kDim; i++) {
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
 8001fc6:	e00f      	b.n	8001fe8 <main+0xd68>
      	free(w2[i]);
 8001fc8:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001fd2:	6812      	ldr	r2, [r2, #0]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f010 fc2f 	bl	801283c <free>
      for (int i = 0; i < kDim; i++) {
 8001fde:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
 8001fe8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001fec:	f8d7 23d4 	ldr.w	r2, [r7, #980]	; 0x3d4
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	dbe8      	blt.n	8001fc8 <main+0xd48>
      }
      free(w2);
 8001ff6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001ffa:	6818      	ldr	r0, [r3, #0]
 8001ffc:	f010 fc1e 	bl	801283c <free>

      free(b2);
 8002000:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002004:	6818      	ldr	r0, [r3, #0]
 8002006:	f010 fc19 	bl	801283c <free>

      /////////////////////////////////////////////////////////// e_conv3
      sprintf(name,"b3.txt");
 800200a:	4bc5      	ldr	r3, [pc, #788]	; (8002320 <main+0x10a0>)
 800200c:	4ac5      	ldr	r2, [pc, #788]	; (8002324 <main+0x10a4>)
 800200e:	6810      	ldr	r0, [r2, #0]
 8002010:	6018      	str	r0, [r3, #0]
 8002012:	8891      	ldrh	r1, [r2, #4]
 8002014:	7992      	ldrb	r2, [r2, #6]
 8002016:	8099      	strh	r1, [r3, #4]
 8002018:	719a      	strb	r2, [r3, #6]
      float * b3 = read_txt(name, 3);
 800201a:	2103      	movs	r1, #3
 800201c:	48c0      	ldr	r0, [pc, #768]	; (8002320 <main+0x10a0>)
 800201e:	f010 f837 	bl	8012090 <read_txt>
 8002022:	4602      	mov	r2, r0
 8002024:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002028:	601a      	str	r2, [r3, #0]

      sprintf(name,"w3.txt");
 800202a:	4bbd      	ldr	r3, [pc, #756]	; (8002320 <main+0x10a0>)
 800202c:	4abe      	ldr	r2, [pc, #760]	; (8002328 <main+0x10a8>)
 800202e:	6810      	ldr	r0, [r2, #0]
 8002030:	6018      	str	r0, [r3, #0]
 8002032:	8891      	ldrh	r1, [r2, #4]
 8002034:	7992      	ldrb	r2, [r2, #6]
 8002036:	8099      	strh	r1, [r3, #4]
 8002038:	719a      	strb	r2, [r3, #6]
      float * nw3 = read_txt(name, 450);
 800203a:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 800203e:	48b8      	ldr	r0, [pc, #736]	; (8002320 <main+0x10a0>)
 8002040:	f010 f826 	bl	8012090 <read_txt>
 8002044:	4602      	mov	r2, r0
 8002046:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800204a:	601a      	str	r2, [r3, #0]

      // allocate 4d w3
      kDim = 5;
 800204c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002050:	2205      	movs	r2, #5
 8002052:	601a      	str	r2, [r3, #0]
      iDim = 6;
 8002054:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002058:	2206      	movs	r2, #6
 800205a:	601a      	str	r2, [r3, #0]
      oDim = 3;
 800205c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002060:	2203      	movs	r2, #3
 8002062:	601a      	str	r2, [r3, #0]
      pSize = 2;
 8002064:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002068:	2202      	movs	r2, #2
 800206a:	601a      	str	r2, [r3, #0]

      float**** w3 = (float****)malloc(kDim * sizeof(float***));
 800206c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	f107 0498 	add.w	r4, r7, #152	; 0x98
 8002078:	4618      	mov	r0, r3
 800207a:	f010 fbd7 	bl	801282c <malloc>
 800207e:	4603      	mov	r3, r0
 8002080:	6023      	str	r3, [r4, #0]
      for (int i = 0; i < kDim; i++) {
 8002082:	2300      	movs	r3, #0
 8002084:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
 8002088:	e014      	b.n	80020b4 <main+0xe34>
    	  w3[i] = (float***)malloc(kDim * sizeof(float**));
 800208a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	0099      	lsls	r1, r3, #2
 8002092:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800209c:	6812      	ldr	r2, [r2, #0]
 800209e:	18d4      	adds	r4, r2, r3
 80020a0:	4608      	mov	r0, r1
 80020a2:	f010 fbc3 	bl	801282c <malloc>
 80020a6:	4603      	mov	r3, r0
 80020a8:	6023      	str	r3, [r4, #0]
      for (int i = 0; i < kDim; i++) {
 80020aa:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 80020ae:	3301      	adds	r3, #1
 80020b0:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
 80020b4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80020b8:	f8d7 23d0 	ldr.w	r2, [r7, #976]	; 0x3d0
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	429a      	cmp	r2, r3
 80020c0:	dbe3      	blt.n	800208a <main+0xe0a>
      }
      for (int i = 0; i < kDim; i++) {
 80020c2:	2300      	movs	r3, #0
 80020c4:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 80020c8:	e029      	b.n	800211e <main+0xe9e>
    	  for (int j = 0; j < kDim; j++) {
 80020ca:	2300      	movs	r3, #0
 80020cc:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 80020d0:	e019      	b.n	8002106 <main+0xe86>
    		  w3[i][j] = (float**)malloc(iDim * sizeof(float*));
 80020d2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	0099      	lsls	r1, r3, #2
 80020da:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80020e4:	6812      	ldr	r2, [r2, #0]
 80020e6:	4413      	add	r3, r2
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	18d4      	adds	r4, r2, r3
 80020f2:	4608      	mov	r0, r1
 80020f4:	f010 fb9a 	bl	801282c <malloc>
 80020f8:	4603      	mov	r3, r0
 80020fa:	6023      	str	r3, [r4, #0]
    	  for (int j = 0; j < kDim; j++) {
 80020fc:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8002100:	3301      	adds	r3, #1
 8002102:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 8002106:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800210a:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	429a      	cmp	r2, r3
 8002112:	dbde      	blt.n	80020d2 <main+0xe52>
      for (int i = 0; i < kDim; i++) {
 8002114:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8002118:	3301      	adds	r3, #1
 800211a:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 800211e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002122:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	429a      	cmp	r2, r3
 800212a:	dbce      	blt.n	80020ca <main+0xe4a>
    	  }
      }
      for (int i = 0; i < kDim; i++) {
 800212c:	2300      	movs	r3, #0
 800212e:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
 8002132:	e03e      	b.n	80021b2 <main+0xf32>
      	  for (int j = 0; j < kDim; j++) {
 8002134:	2300      	movs	r3, #0
 8002136:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
 800213a:	e02e      	b.n	800219a <main+0xf1a>
      		  for(int k = 0; k < iDim; k++) {
 800213c:	2300      	movs	r3, #0
 800213e:	f8c7 33bc 	str.w	r3, [r7, #956]	; 0x3bc
 8002142:	e01e      	b.n	8002182 <main+0xf02>
      			  w3[i][j][k] = (float*)malloc(oDim * sizeof(float));
 8002144:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	0099      	lsls	r1, r3, #2
 800214c:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002156:	6812      	ldr	r2, [r2, #0]
 8002158:	4413      	add	r3, r2
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	f8d7 33c0 	ldr.w	r3, [r7, #960]	; 0x3c0
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	4413      	add	r3, r2
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	f8d7 33bc 	ldr.w	r3, [r7, #956]	; 0x3bc
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	18d4      	adds	r4, r2, r3
 800216e:	4608      	mov	r0, r1
 8002170:	f010 fb5c 	bl	801282c <malloc>
 8002174:	4603      	mov	r3, r0
 8002176:	6023      	str	r3, [r4, #0]
      		  for(int k = 0; k < iDim; k++) {
 8002178:	f8d7 33bc 	ldr.w	r3, [r7, #956]	; 0x3bc
 800217c:	3301      	adds	r3, #1
 800217e:	f8c7 33bc 	str.w	r3, [r7, #956]	; 0x3bc
 8002182:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002186:	f8d7 23bc 	ldr.w	r2, [r7, #956]	; 0x3bc
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	429a      	cmp	r2, r3
 800218e:	dbd9      	blt.n	8002144 <main+0xec4>
      	  for (int j = 0; j < kDim; j++) {
 8002190:	f8d7 33c0 	ldr.w	r3, [r7, #960]	; 0x3c0
 8002194:	3301      	adds	r3, #1
 8002196:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
 800219a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800219e:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	dbc9      	blt.n	800213c <main+0xebc>
      for (int i = 0; i < kDim; i++) {
 80021a8:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 80021ac:	3301      	adds	r3, #1
 80021ae:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
 80021b2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80021b6:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	429a      	cmp	r2, r3
 80021be:	dbb9      	blt.n	8002134 <main+0xeb4>
      		  }
      	  }
      }
      for(int i = 0; i < kDim; i++) {
 80021c0:	2300      	movs	r3, #0
 80021c2:	f8c7 33b8 	str.w	r3, [r7, #952]	; 0x3b8
 80021c6:	e06b      	b.n	80022a0 <main+0x1020>
    	  for (int j = 0; j < kDim; j++) {
 80021c8:	2300      	movs	r3, #0
 80021ca:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 80021ce:	e05b      	b.n	8002288 <main+0x1008>
    		  for (int v = 0; v < oDim; v++) {
 80021d0:	2300      	movs	r3, #0
 80021d2:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
 80021d6:	e04b      	b.n	8002270 <main+0xff0>
    			  for(int u = 0; u < iDim; u++) {
 80021d8:	2300      	movs	r3, #0
 80021da:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
 80021de:	e03b      	b.n	8002258 <main+0xfd8>
    				  w3[i][j][u][v] = nw3[(i*kDim*oDim*iDim)+(j*oDim*iDim)+(v*iDim)+u];
 80021e0:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 80021e4:	f8d7 33b8 	ldr.w	r3, [r7, #952]	; 0x3b8
 80021e8:	6812      	ldr	r2, [r2, #0]
 80021ea:	fb02 f203 	mul.w	r2, r2, r3
 80021ee:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 80021f2:	4413      	add	r3, r2
 80021f4:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 80021f8:	6812      	ldr	r2, [r2, #0]
 80021fa:	fb02 f203 	mul.w	r2, r2, r3
 80021fe:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8002202:	4413      	add	r3, r2
 8002204:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8002208:	6812      	ldr	r2, [r2, #0]
 800220a:	fb02 f203 	mul.w	r2, r2, r3
 800220e:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 8002212:	4413      	add	r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 800221a:	6812      	ldr	r2, [r2, #0]
 800221c:	441a      	add	r2, r3
 800221e:	f8d7 33b8 	ldr.w	r3, [r7, #952]	; 0x3b8
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8002228:	6809      	ldr	r1, [r1, #0]
 800222a:	440b      	add	r3, r1
 800222c:	6819      	ldr	r1, [r3, #0]
 800222e:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	440b      	add	r3, r1
 8002236:	6819      	ldr	r1, [r3, #0]
 8002238:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	440b      	add	r3, r1
 8002240:	6819      	ldr	r1, [r3, #0]
 8002242:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	440b      	add	r3, r1
 800224a:	6812      	ldr	r2, [r2, #0]
 800224c:	601a      	str	r2, [r3, #0]
    			  for(int u = 0; u < iDim; u++) {
 800224e:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 8002252:	3301      	adds	r3, #1
 8002254:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
 8002258:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800225c:	f8d7 23ac 	ldr.w	r2, [r7, #940]	; 0x3ac
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	429a      	cmp	r2, r3
 8002264:	dbbc      	blt.n	80021e0 <main+0xf60>
    		  for (int v = 0; v < oDim; v++) {
 8002266:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 800226a:	3301      	adds	r3, #1
 800226c:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
 8002270:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002274:	f8d7 23b0 	ldr.w	r2, [r7, #944]	; 0x3b0
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	429a      	cmp	r2, r3
 800227c:	dbac      	blt.n	80021d8 <main+0xf58>
    	  for (int j = 0; j < kDim; j++) {
 800227e:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 8002282:	3301      	adds	r3, #1
 8002284:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 8002288:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800228c:	f8d7 23b4 	ldr.w	r2, [r7, #948]	; 0x3b4
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	429a      	cmp	r2, r3
 8002294:	db9c      	blt.n	80021d0 <main+0xf50>
      for(int i = 0; i < kDim; i++) {
 8002296:	f8d7 33b8 	ldr.w	r3, [r7, #952]	; 0x3b8
 800229a:	3301      	adds	r3, #1
 800229c:	f8c7 33b8 	str.w	r3, [r7, #952]	; 0x3b8
 80022a0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80022a4:	f8d7 23b8 	ldr.w	r2, [r7, #952]	; 0x3b8
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	db8c      	blt.n	80021c8 <main+0xf48>
    			  }
    		  }
    	  }
      }
      free(nw3);
 80022ae:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80022b2:	6818      	ldr	r0, [r3, #0]
 80022b4:	f010 fac2 	bl	801283c <free>

      // allocate 3d x1x2
      float*** x1x2 = (float***)malloc(iHeight * sizeof(float**));
 80022b8:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	f107 0494 	add.w	r4, r7, #148	; 0x94
 80022c4:	4618      	mov	r0, r3
 80022c6:	f010 fab1 	bl	801282c <malloc>
 80022ca:	4603      	mov	r3, r0
 80022cc:	6023      	str	r3, [r4, #0]
      for (int i = 0; i < iHeight; i++) {
 80022ce:	2300      	movs	r3, #0
 80022d0:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
 80022d4:	e014      	b.n	8002300 <main+0x1080>
    	  x1x2[i] = (float**)malloc(iWidth * sizeof(float*));
 80022d6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	0099      	lsls	r1, r3, #2
 80022de:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	f107 0294 	add.w	r2, r7, #148	; 0x94
 80022e8:	6812      	ldr	r2, [r2, #0]
 80022ea:	18d4      	adds	r4, r2, r3
 80022ec:	4608      	mov	r0, r1
 80022ee:	f010 fa9d 	bl	801282c <malloc>
 80022f2:	4603      	mov	r3, r0
 80022f4:	6023      	str	r3, [r4, #0]
      for (int i = 0; i < iHeight; i++) {
 80022f6:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 80022fa:	3301      	adds	r3, #1
 80022fc:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
 8002300:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8002304:	f8d7 23a8 	ldr.w	r2, [r7, #936]	; 0x3a8
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	429a      	cmp	r2, r3
 800230c:	dbe3      	blt.n	80022d6 <main+0x1056>
      }
      for (int i = 0; i < iHeight; i++) {
 800230e:	2300      	movs	r3, #0
 8002310:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
 8002314:	e030      	b.n	8002378 <main+0x10f8>
    	  for (int j = 0; j < iWidth; j++) {
 8002316:	2300      	movs	r3, #0
 8002318:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0
 800231c:	e020      	b.n	8002360 <main+0x10e0>
 800231e:	bf00      	nop
 8002320:	2400323c 	.word	0x2400323c
 8002324:	08015704 	.word	0x08015704
 8002328:	0801570c 	.word	0x0801570c
    		  x1x2[i][j] = (float*)malloc(iDim * sizeof(float));
 800232c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	0099      	lsls	r1, r3, #2
 8002334:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	f107 0294 	add.w	r2, r7, #148	; 0x94
 800233e:	6812      	ldr	r2, [r2, #0]
 8002340:	4413      	add	r3, r2
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	18d4      	adds	r4, r2, r3
 800234c:	4608      	mov	r0, r1
 800234e:	f010 fa6d 	bl	801282c <malloc>
 8002352:	4603      	mov	r3, r0
 8002354:	6023      	str	r3, [r4, #0]
    	  for (int j = 0; j < iWidth; j++) {
 8002356:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 800235a:	3301      	adds	r3, #1
 800235c:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0
 8002360:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002364:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	429a      	cmp	r2, r3
 800236c:	dbde      	blt.n	800232c <main+0x10ac>
      for (int i = 0; i < iHeight; i++) {
 800236e:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 8002372:	3301      	adds	r3, #1
 8002374:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
 8002378:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800237c:	f8d7 23a4 	ldr.w	r2, [r7, #932]	; 0x3a4
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	429a      	cmp	r2, r3
 8002384:	dbc7      	blt.n	8002316 <main+0x1096>
    	  }
      }

      for(int k=0; k<3; k++) {
 8002386:	2300      	movs	r3, #0
 8002388:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
 800238c:	e048      	b.n	8002420 <main+0x11a0>
    	  for(int i=0; i<iHeight; i++) {
 800238e:	2300      	movs	r3, #0
 8002390:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398
 8002394:	e038      	b.n	8002408 <main+0x1188>
    		  for(int j=0; j<iWidth; j++) {
 8002396:	2300      	movs	r3, #0
 8002398:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
 800239c:	e028      	b.n	80023f0 <main+0x1170>
    			  x1x2[i][j][k] = x1[i][j][k];
 800239e:	f8d7 3398 	ldr.w	r3, [r7, #920]	; 0x398
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 80023a8:	6812      	ldr	r2, [r2, #0]
 80023aa:	4413      	add	r3, r2
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	f8d7 3394 	ldr.w	r3, [r7, #916]	; 0x394
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	4413      	add	r3, r2
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	f8d7 339c 	ldr.w	r3, [r7, #924]	; 0x39c
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	441a      	add	r2, r3
 80023c0:	f8d7 3398 	ldr.w	r3, [r7, #920]	; 0x398
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	f107 0194 	add.w	r1, r7, #148	; 0x94
 80023ca:	6809      	ldr	r1, [r1, #0]
 80023cc:	440b      	add	r3, r1
 80023ce:	6819      	ldr	r1, [r3, #0]
 80023d0:	f8d7 3394 	ldr.w	r3, [r7, #916]	; 0x394
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	440b      	add	r3, r1
 80023d8:	6819      	ldr	r1, [r3, #0]
 80023da:	f8d7 339c 	ldr.w	r3, [r7, #924]	; 0x39c
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	440b      	add	r3, r1
 80023e2:	6812      	ldr	r2, [r2, #0]
 80023e4:	601a      	str	r2, [r3, #0]
    		  for(int j=0; j<iWidth; j++) {
 80023e6:	f8d7 3394 	ldr.w	r3, [r7, #916]	; 0x394
 80023ea:	3301      	adds	r3, #1
 80023ec:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
 80023f0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80023f4:	f8d7 2394 	ldr.w	r2, [r7, #916]	; 0x394
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	dbcf      	blt.n	800239e <main+0x111e>
    	  for(int i=0; i<iHeight; i++) {
 80023fe:	f8d7 3398 	ldr.w	r3, [r7, #920]	; 0x398
 8002402:	3301      	adds	r3, #1
 8002404:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398
 8002408:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800240c:	f8d7 2398 	ldr.w	r2, [r7, #920]	; 0x398
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	429a      	cmp	r2, r3
 8002414:	dbbf      	blt.n	8002396 <main+0x1116>
      for(int k=0; k<3; k++) {
 8002416:	f8d7 339c 	ldr.w	r3, [r7, #924]	; 0x39c
 800241a:	3301      	adds	r3, #1
 800241c:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
 8002420:	f8d7 339c 	ldr.w	r3, [r7, #924]	; 0x39c
 8002424:	2b02      	cmp	r3, #2
 8002426:	ddb2      	ble.n	800238e <main+0x110e>
    		  }
    	  }
      }

      //free(x1);
  	for (int i = 0; i < iHeight; i++) {
 8002428:	2300      	movs	r3, #0
 800242a:	f8c7 3390 	str.w	r3, [r7, #912]	; 0x390
 800242e:	e024      	b.n	800247a <main+0x11fa>
  	  for (int j = 0; j < iWidth; j++) {
 8002430:	2300      	movs	r3, #0
 8002432:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
 8002436:	e014      	b.n	8002462 <main+0x11e2>
  		  free(x1[i][j]);
 8002438:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8002442:	6812      	ldr	r2, [r2, #0]
 8002444:	4413      	add	r3, r2
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	f8d7 338c 	ldr.w	r3, [r7, #908]	; 0x38c
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	4413      	add	r3, r2
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4618      	mov	r0, r3
 8002454:	f010 f9f2 	bl	801283c <free>
  	  for (int j = 0; j < iWidth; j++) {
 8002458:	f8d7 338c 	ldr.w	r3, [r7, #908]	; 0x38c
 800245c:	3301      	adds	r3, #1
 800245e:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
 8002462:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002466:	f8d7 238c 	ldr.w	r2, [r7, #908]	; 0x38c
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	429a      	cmp	r2, r3
 800246e:	dbe3      	blt.n	8002438 <main+0x11b8>
  	for (int i = 0; i < iHeight; i++) {
 8002470:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 8002474:	3301      	adds	r3, #1
 8002476:	f8c7 3390 	str.w	r3, [r7, #912]	; 0x390
 800247a:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800247e:	f8d7 2390 	ldr.w	r2, [r7, #912]	; 0x390
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	429a      	cmp	r2, r3
 8002486:	dbd3      	blt.n	8002430 <main+0x11b0>
  	  }
  	}
  	for (int i = 0; i < iHeight; i++) {
 8002488:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800248c:	2200      	movs	r2, #0
 800248e:	601a      	str	r2, [r3, #0]
 8002490:	e012      	b.n	80024b8 <main+0x1238>
  		free(x1[i]);
 8002492:	f507 7362 	add.w	r3, r7, #904	; 0x388
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 800249e:	6812      	ldr	r2, [r2, #0]
 80024a0:	4413      	add	r3, r2
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f010 f9c9 	bl	801283c <free>
  	for (int i = 0; i < iHeight; i++) {
 80024aa:	f507 7362 	add.w	r3, r7, #904	; 0x388
 80024ae:	f507 7262 	add.w	r2, r7, #904	; 0x388
 80024b2:	6812      	ldr	r2, [r2, #0]
 80024b4:	3201      	adds	r2, #1
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	f507 7262 	add.w	r2, r7, #904	; 0x388
 80024bc:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 80024c0:	6812      	ldr	r2, [r2, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	dbe4      	blt.n	8002492 <main+0x1212>
  	}
      free(x1);
 80024c8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80024cc:	6818      	ldr	r0, [r3, #0]
 80024ce:	f010 f9b5 	bl	801283c <free>

      for(int k=3; k<6; k++) {
 80024d2:	f507 7361 	add.w	r3, r7, #900	; 0x384
 80024d6:	2203      	movs	r2, #3
 80024d8:	601a      	str	r2, [r3, #0]
 80024da:	e05a      	b.n	8002592 <main+0x1312>
    	  for(int i=0; i<iHeight; i++) {
 80024dc:	f507 7360 	add.w	r3, r7, #896	; 0x380
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	e046      	b.n	8002574 <main+0x12f4>
    		  for(int j=0; j<iWidth; j++) {
 80024e6:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 80024ea:	2200      	movs	r2, #0
 80024ec:	601a      	str	r2, [r3, #0]
 80024ee:	e032      	b.n	8002556 <main+0x12d6>
    			  x1x2[i][j][k] = x2[i][j][k-3];
 80024f0:	f507 7360 	add.w	r3, r7, #896	; 0x380
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80024fc:	6812      	ldr	r2, [r2, #0]
 80024fe:	4413      	add	r3, r2
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	4413      	add	r3, r2
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	f507 7361 	add.w	r3, r7, #900	; 0x384
 8002512:	6819      	ldr	r1, [r3, #0]
 8002514:	4ba3      	ldr	r3, [pc, #652]	; (80027a4 <main+0x1524>)
 8002516:	440b      	add	r3, r1
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	441a      	add	r2, r3
 800251c:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8002528:	6809      	ldr	r1, [r1, #0]
 800252a:	440b      	add	r3, r1
 800252c:	6819      	ldr	r1, [r3, #0]
 800252e:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	440b      	add	r3, r1
 8002538:	6819      	ldr	r1, [r3, #0]
 800253a:	f507 7361 	add.w	r3, r7, #900	; 0x384
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	440b      	add	r3, r1
 8002544:	6812      	ldr	r2, [r2, #0]
 8002546:	601a      	str	r2, [r3, #0]
    		  for(int j=0; j<iWidth; j++) {
 8002548:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 800254c:	f507 725f 	add.w	r2, r7, #892	; 0x37c
 8002550:	6812      	ldr	r2, [r2, #0]
 8002552:	3201      	adds	r2, #1
 8002554:	601a      	str	r2, [r3, #0]
 8002556:	f507 725f 	add.w	r2, r7, #892	; 0x37c
 800255a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800255e:	6812      	ldr	r2, [r2, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	429a      	cmp	r2, r3
 8002564:	dbc4      	blt.n	80024f0 <main+0x1270>
    	  for(int i=0; i<iHeight; i++) {
 8002566:	f507 7360 	add.w	r3, r7, #896	; 0x380
 800256a:	f507 7260 	add.w	r2, r7, #896	; 0x380
 800256e:	6812      	ldr	r2, [r2, #0]
 8002570:	3201      	adds	r2, #1
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	f507 7260 	add.w	r2, r7, #896	; 0x380
 8002578:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800257c:	6812      	ldr	r2, [r2, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	429a      	cmp	r2, r3
 8002582:	dbb0      	blt.n	80024e6 <main+0x1266>
      for(int k=3; k<6; k++) {
 8002584:	f507 7361 	add.w	r3, r7, #900	; 0x384
 8002588:	f507 7261 	add.w	r2, r7, #900	; 0x384
 800258c:	6812      	ldr	r2, [r2, #0]
 800258e:	3201      	adds	r2, #1
 8002590:	601a      	str	r2, [r3, #0]
 8002592:	f507 7361 	add.w	r3, r7, #900	; 0x384
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2b05      	cmp	r3, #5
 800259a:	dd9f      	ble.n	80024dc <main+0x125c>
    		  }
    	  }
      }

      //free(x2);
  	for (int i = 0; i < iHeight; i++) {
 800259c:	f507 735e 	add.w	r3, r7, #888	; 0x378
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]
 80025a4:	e02c      	b.n	8002600 <main+0x1380>
  	  for (int j = 0; j < iWidth; j++) {
 80025a6:	f507 735d 	add.w	r3, r7, #884	; 0x374
 80025aa:	2200      	movs	r2, #0
 80025ac:	601a      	str	r2, [r3, #0]
 80025ae:	e018      	b.n	80025e2 <main+0x1362>
  		  free(x2[i][j]);
 80025b0:	f507 735e 	add.w	r3, r7, #888	; 0x378
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80025bc:	6812      	ldr	r2, [r2, #0]
 80025be:	4413      	add	r3, r2
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	f507 735d 	add.w	r3, r7, #884	; 0x374
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	4413      	add	r3, r2
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f010 f934 	bl	801283c <free>
  	  for (int j = 0; j < iWidth; j++) {
 80025d4:	f507 735d 	add.w	r3, r7, #884	; 0x374
 80025d8:	f507 725d 	add.w	r2, r7, #884	; 0x374
 80025dc:	6812      	ldr	r2, [r2, #0]
 80025de:	3201      	adds	r2, #1
 80025e0:	601a      	str	r2, [r3, #0]
 80025e2:	f507 725d 	add.w	r2, r7, #884	; 0x374
 80025e6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80025ea:	6812      	ldr	r2, [r2, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	dbde      	blt.n	80025b0 <main+0x1330>
  	for (int i = 0; i < iHeight; i++) {
 80025f2:	f507 735e 	add.w	r3, r7, #888	; 0x378
 80025f6:	f507 725e 	add.w	r2, r7, #888	; 0x378
 80025fa:	6812      	ldr	r2, [r2, #0]
 80025fc:	3201      	adds	r2, #1
 80025fe:	601a      	str	r2, [r3, #0]
 8002600:	f507 725e 	add.w	r2, r7, #888	; 0x378
 8002604:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8002608:	6812      	ldr	r2, [r2, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	429a      	cmp	r2, r3
 800260e:	dbca      	blt.n	80025a6 <main+0x1326>
  	  }
  	}
  	for (int i = 0; i < iHeight; i++) {
 8002610:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]
 8002618:	e012      	b.n	8002640 <main+0x13c0>
  		free(x2[i]);
 800261a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002626:	6812      	ldr	r2, [r2, #0]
 8002628:	4413      	add	r3, r2
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4618      	mov	r0, r3
 800262e:	f010 f905 	bl	801283c <free>
  	for (int i = 0; i < iHeight; i++) {
 8002632:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002636:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800263a:	6812      	ldr	r2, [r2, #0]
 800263c:	3201      	adds	r2, #1
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8002644:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8002648:	6812      	ldr	r2, [r2, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	429a      	cmp	r2, r3
 800264e:	dbe4      	blt.n	800261a <main+0x139a>
  	}
      free(x2);
 8002650:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002654:	6818      	ldr	r0, [r3, #0]
 8002656:	f010 f8f1 	bl	801283c <free>

      // allocate 3d x3
      float*** x3 = (float***)malloc(iHeight * sizeof(float**));
 800265a:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8002666:	4618      	mov	r0, r3
 8002668:	f010 f8e0 	bl	801282c <malloc>
 800266c:	4603      	mov	r3, r0
 800266e:	6023      	str	r3, [r4, #0]
      for (int i = 0; i < iHeight; i++) {
 8002670:	f507 735b 	add.w	r3, r7, #876	; 0x36c
 8002674:	2200      	movs	r2, #0
 8002676:	601a      	str	r2, [r3, #0]
 8002678:	e017      	b.n	80026aa <main+0x142a>
    	  x3[i] = (float**)malloc(iWidth * sizeof(float*));
 800267a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	0099      	lsls	r1, r3, #2
 8002682:	f507 735b 	add.w	r3, r7, #876	; 0x36c
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800268e:	6812      	ldr	r2, [r2, #0]
 8002690:	18d4      	adds	r4, r2, r3
 8002692:	4608      	mov	r0, r1
 8002694:	f010 f8ca 	bl	801282c <malloc>
 8002698:	4603      	mov	r3, r0
 800269a:	6023      	str	r3, [r4, #0]
      for (int i = 0; i < iHeight; i++) {
 800269c:	f507 735b 	add.w	r3, r7, #876	; 0x36c
 80026a0:	f507 725b 	add.w	r2, r7, #876	; 0x36c
 80026a4:	6812      	ldr	r2, [r2, #0]
 80026a6:	3201      	adds	r2, #1
 80026a8:	601a      	str	r2, [r3, #0]
 80026aa:	f507 725b 	add.w	r2, r7, #876	; 0x36c
 80026ae:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 80026b2:	6812      	ldr	r2, [r2, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	dbdf      	blt.n	800267a <main+0x13fa>
      }
      for (int i = 0; i < iHeight; i++) {
 80026ba:	f507 735a 	add.w	r3, r7, #872	; 0x368
 80026be:	2200      	movs	r2, #0
 80026c0:	601a      	str	r2, [r3, #0]
 80026c2:	e031      	b.n	8002728 <main+0x14a8>
    	  for (int j = 0; j < iWidth; j++) {
 80026c4:	f507 7359 	add.w	r3, r7, #868	; 0x364
 80026c8:	2200      	movs	r2, #0
 80026ca:	601a      	str	r2, [r3, #0]
 80026cc:	e01d      	b.n	800270a <main+0x148a>
    		  x3[i][j] = (float*)malloc(oDim * sizeof(float));
 80026ce:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	0099      	lsls	r1, r3, #2
 80026d6:	f507 735a 	add.w	r3, r7, #872	; 0x368
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80026e2:	6812      	ldr	r2, [r2, #0]
 80026e4:	4413      	add	r3, r2
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	f507 7359 	add.w	r3, r7, #868	; 0x364
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	18d4      	adds	r4, r2, r3
 80026f2:	4608      	mov	r0, r1
 80026f4:	f010 f89a 	bl	801282c <malloc>
 80026f8:	4603      	mov	r3, r0
 80026fa:	6023      	str	r3, [r4, #0]
    	  for (int j = 0; j < iWidth; j++) {
 80026fc:	f507 7359 	add.w	r3, r7, #868	; 0x364
 8002700:	f507 7259 	add.w	r2, r7, #868	; 0x364
 8002704:	6812      	ldr	r2, [r2, #0]
 8002706:	3201      	adds	r2, #1
 8002708:	601a      	str	r2, [r3, #0]
 800270a:	f507 7259 	add.w	r2, r7, #868	; 0x364
 800270e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002712:	6812      	ldr	r2, [r2, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	429a      	cmp	r2, r3
 8002718:	dbd9      	blt.n	80026ce <main+0x144e>
      for (int i = 0; i < iHeight; i++) {
 800271a:	f507 735a 	add.w	r3, r7, #872	; 0x368
 800271e:	f507 725a 	add.w	r2, r7, #872	; 0x368
 8002722:	6812      	ldr	r2, [r2, #0]
 8002724:	3201      	adds	r2, #1
 8002726:	601a      	str	r2, [r3, #0]
 8002728:	f507 725a 	add.w	r2, r7, #872	; 0x368
 800272c:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8002730:	6812      	ldr	r2, [r2, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	429a      	cmp	r2, r3
 8002736:	dbc5      	blt.n	80026c4 <main+0x1444>
    	  }
      }

      conv(x1x2, w3, b3, x3, iHeight, iWidth, kDim, iDim, oDim, pSize);
 8002738:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800273c:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002740:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8002744:	f107 0094 	add.w	r0, r7, #148	; 0x94
 8002748:	f107 04bc 	add.w	r4, r7, #188	; 0xbc
 800274c:	6824      	ldr	r4, [r4, #0]
 800274e:	9405      	str	r4, [sp, #20]
 8002750:	f107 04c0 	add.w	r4, r7, #192	; 0xc0
 8002754:	6824      	ldr	r4, [r4, #0]
 8002756:	9404      	str	r4, [sp, #16]
 8002758:	f107 04c4 	add.w	r4, r7, #196	; 0xc4
 800275c:	6824      	ldr	r4, [r4, #0]
 800275e:	9403      	str	r4, [sp, #12]
 8002760:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 8002764:	6824      	ldr	r4, [r4, #0]
 8002766:	9402      	str	r4, [sp, #8]
 8002768:	f507 7494 	add.w	r4, r7, #296	; 0x128
 800276c:	6824      	ldr	r4, [r4, #0]
 800276e:	9401      	str	r4, [sp, #4]
 8002770:	f507 7496 	add.w	r4, r7, #300	; 0x12c
 8002774:	6824      	ldr	r4, [r4, #0]
 8002776:	9400      	str	r4, [sp, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	6812      	ldr	r2, [r2, #0]
 800277c:	6809      	ldr	r1, [r1, #0]
 800277e:	6800      	ldr	r0, [r0, #0]
 8002780:	f7fd ff32 	bl	80005e8 <conv>

      //free(w3);
      for (int i = 0; i < kDim; i++) {
 8002784:	f507 7358 	add.w	r3, r7, #864	; 0x360
 8002788:	2200      	movs	r2, #0
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	e049      	b.n	8002822 <main+0x15a2>
      	for (int j = 0; j < kDim; j++) {
 800278e:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 8002792:	2200      	movs	r2, #0
 8002794:	601a      	str	r2, [r3, #0]
 8002796:	e035      	b.n	8002804 <main+0x1584>
      		  for(int k = 0; k < iDim; k++) {
 8002798:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	e021      	b.n	80027e6 <main+0x1566>
 80027a2:	bf00      	nop
 80027a4:	3ffffffd 	.word	0x3ffffffd
      			  free(w3[i][j][k]);
 80027a8:	f507 7358 	add.w	r3, r7, #864	; 0x360
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80027b4:	6812      	ldr	r2, [r2, #0]
 80027b6:	4413      	add	r3, r2
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	4413      	add	r3, r2
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	4413      	add	r3, r2
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f010 f832 	bl	801283c <free>
      		  for(int k = 0; k < iDim; k++) {
 80027d8:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80027dc:	f507 7256 	add.w	r2, r7, #856	; 0x358
 80027e0:	6812      	ldr	r2, [r2, #0]
 80027e2:	3201      	adds	r2, #1
 80027e4:	601a      	str	r2, [r3, #0]
 80027e6:	f507 7256 	add.w	r2, r7, #856	; 0x358
 80027ea:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80027ee:	6812      	ldr	r2, [r2, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	dbd8      	blt.n	80027a8 <main+0x1528>
      	for (int j = 0; j < kDim; j++) {
 80027f6:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 80027fa:	f507 7257 	add.w	r2, r7, #860	; 0x35c
 80027fe:	6812      	ldr	r2, [r2, #0]
 8002800:	3201      	adds	r2, #1
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	f507 7257 	add.w	r2, r7, #860	; 0x35c
 8002808:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800280c:	6812      	ldr	r2, [r2, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	429a      	cmp	r2, r3
 8002812:	dbc1      	blt.n	8002798 <main+0x1518>
      for (int i = 0; i < kDim; i++) {
 8002814:	f507 7358 	add.w	r3, r7, #864	; 0x360
 8002818:	f507 7258 	add.w	r2, r7, #864	; 0x360
 800281c:	6812      	ldr	r2, [r2, #0]
 800281e:	3201      	adds	r2, #1
 8002820:	601a      	str	r2, [r3, #0]
 8002822:	f507 7258 	add.w	r2, r7, #864	; 0x360
 8002826:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800282a:	6812      	ldr	r2, [r2, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	429a      	cmp	r2, r3
 8002830:	dbad      	blt.n	800278e <main+0x150e>
      		  }
  		}
      }
      for (int i = 0; i < kDim; i++) {
 8002832:	f507 7355 	add.w	r3, r7, #852	; 0x354
 8002836:	2200      	movs	r2, #0
 8002838:	601a      	str	r2, [r3, #0]
 800283a:	e02c      	b.n	8002896 <main+0x1616>
    	  for (int j = 0; j < kDim; j++) {
 800283c:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]
 8002844:	e018      	b.n	8002878 <main+0x15f8>
    		  free(w3[i][j]);
 8002846:	f507 7355 	add.w	r3, r7, #852	; 0x354
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002852:	6812      	ldr	r2, [r2, #0]
 8002854:	4413      	add	r3, r2
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	f507 7354 	add.w	r3, r7, #848	; 0x350
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	4413      	add	r3, r2
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4618      	mov	r0, r3
 8002866:	f00f ffe9 	bl	801283c <free>
    	  for (int j = 0; j < kDim; j++) {
 800286a:	f507 7354 	add.w	r3, r7, #848	; 0x350
 800286e:	f507 7254 	add.w	r2, r7, #848	; 0x350
 8002872:	6812      	ldr	r2, [r2, #0]
 8002874:	3201      	adds	r2, #1
 8002876:	601a      	str	r2, [r3, #0]
 8002878:	f507 7254 	add.w	r2, r7, #848	; 0x350
 800287c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002880:	6812      	ldr	r2, [r2, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	429a      	cmp	r2, r3
 8002886:	dbde      	blt.n	8002846 <main+0x15c6>
      for (int i = 0; i < kDim; i++) {
 8002888:	f507 7355 	add.w	r3, r7, #852	; 0x354
 800288c:	f507 7255 	add.w	r2, r7, #852	; 0x354
 8002890:	6812      	ldr	r2, [r2, #0]
 8002892:	3201      	adds	r2, #1
 8002894:	601a      	str	r2, [r3, #0]
 8002896:	f507 7255 	add.w	r2, r7, #852	; 0x354
 800289a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800289e:	6812      	ldr	r2, [r2, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	dbca      	blt.n	800283c <main+0x15bc>
    	  }
      }
      for (int i = 0; i < kDim; i++) {
 80028a6:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 80028aa:	2200      	movs	r2, #0
 80028ac:	601a      	str	r2, [r3, #0]
 80028ae:	e012      	b.n	80028d6 <main+0x1656>
      	free(w3[i]);
 80028b0:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80028bc:	6812      	ldr	r2, [r2, #0]
 80028be:	4413      	add	r3, r2
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f00f ffba 	bl	801283c <free>
      for (int i = 0; i < kDim; i++) {
 80028c8:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 80028cc:	f507 7253 	add.w	r2, r7, #844	; 0x34c
 80028d0:	6812      	ldr	r2, [r2, #0]
 80028d2:	3201      	adds	r2, #1
 80028d4:	601a      	str	r2, [r3, #0]
 80028d6:	f507 7253 	add.w	r2, r7, #844	; 0x34c
 80028da:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80028de:	6812      	ldr	r2, [r2, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	dbe4      	blt.n	80028b0 <main+0x1630>
      }
      free(w3);
 80028e6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80028ea:	6818      	ldr	r0, [r3, #0]
 80028ec:	f00f ffa6 	bl	801283c <free>

      free(b3);
 80028f0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80028f4:	6818      	ldr	r0, [r3, #0]
 80028f6:	f00f ffa1 	bl	801283c <free>

      /////////////////////////////////////////////////////////// e_conv4
      sprintf(name,"b4.txt");
 80028fa:	4b86      	ldr	r3, [pc, #536]	; (8002b14 <main+0x1894>)
 80028fc:	4a86      	ldr	r2, [pc, #536]	; (8002b18 <main+0x1898>)
 80028fe:	6810      	ldr	r0, [r2, #0]
 8002900:	6018      	str	r0, [r3, #0]
 8002902:	8891      	ldrh	r1, [r2, #4]
 8002904:	7992      	ldrb	r2, [r2, #6]
 8002906:	8099      	strh	r1, [r3, #4]
 8002908:	719a      	strb	r2, [r3, #6]
      float * b4 = read_txt(name, 3);
 800290a:	2103      	movs	r1, #3
 800290c:	4881      	ldr	r0, [pc, #516]	; (8002b14 <main+0x1894>)
 800290e:	f00f fbbf 	bl	8012090 <read_txt>
 8002912:	4602      	mov	r2, r0
 8002914:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002918:	601a      	str	r2, [r3, #0]

      sprintf(name,"w4.txt");
 800291a:	4b7e      	ldr	r3, [pc, #504]	; (8002b14 <main+0x1894>)
 800291c:	4a7f      	ldr	r2, [pc, #508]	; (8002b1c <main+0x189c>)
 800291e:	6810      	ldr	r0, [r2, #0]
 8002920:	6018      	str	r0, [r3, #0]
 8002922:	8891      	ldrh	r1, [r2, #4]
 8002924:	7992      	ldrb	r2, [r2, #6]
 8002926:	8099      	strh	r1, [r3, #4]
 8002928:	719a      	strb	r2, [r3, #6]
      float * nw4 = read_txt(name, 882);
 800292a:	f240 3172 	movw	r1, #882	; 0x372
 800292e:	4879      	ldr	r0, [pc, #484]	; (8002b14 <main+0x1894>)
 8002930:	f00f fbae 	bl	8012090 <read_txt>
 8002934:	4602      	mov	r2, r0
 8002936:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800293a:	601a      	str	r2, [r3, #0]

      // allocate 4d w4
      kDim = 7;
 800293c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002940:	2207      	movs	r2, #7
 8002942:	601a      	str	r2, [r3, #0]
      iDim = 6;
 8002944:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002948:	2206      	movs	r2, #6
 800294a:	601a      	str	r2, [r3, #0]
      oDim = 3;
 800294c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002950:	2203      	movs	r2, #3
 8002952:	601a      	str	r2, [r3, #0]
      pSize = 3;
 8002954:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002958:	2203      	movs	r2, #3
 800295a:	601a      	str	r2, [r3, #0]

      float**** w4 = (float****)malloc(kDim * sizeof(float***));
 800295c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	f107 0484 	add.w	r4, r7, #132	; 0x84
 8002968:	4618      	mov	r0, r3
 800296a:	f00f ff5f 	bl	801282c <malloc>
 800296e:	4603      	mov	r3, r0
 8002970:	6023      	str	r3, [r4, #0]
      for (int i = 0; i < kDim; i++) {
 8002972:	f507 7352 	add.w	r3, r7, #840	; 0x348
 8002976:	2200      	movs	r2, #0
 8002978:	601a      	str	r2, [r3, #0]
 800297a:	e017      	b.n	80029ac <main+0x172c>
    	  w4[i] = (float***)malloc(kDim * sizeof(float**));
 800297c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	0099      	lsls	r1, r3, #2
 8002984:	f507 7352 	add.w	r3, r7, #840	; 0x348
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002990:	6812      	ldr	r2, [r2, #0]
 8002992:	18d4      	adds	r4, r2, r3
 8002994:	4608      	mov	r0, r1
 8002996:	f00f ff49 	bl	801282c <malloc>
 800299a:	4603      	mov	r3, r0
 800299c:	6023      	str	r3, [r4, #0]
      for (int i = 0; i < kDim; i++) {
 800299e:	f507 7352 	add.w	r3, r7, #840	; 0x348
 80029a2:	f507 7252 	add.w	r2, r7, #840	; 0x348
 80029a6:	6812      	ldr	r2, [r2, #0]
 80029a8:	3201      	adds	r2, #1
 80029aa:	601a      	str	r2, [r3, #0]
 80029ac:	f507 7252 	add.w	r2, r7, #840	; 0x348
 80029b0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80029b4:	6812      	ldr	r2, [r2, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	dbdf      	blt.n	800297c <main+0x16fc>
      }
      for (int i = 0; i < kDim; i++) {
 80029bc:	f507 7351 	add.w	r3, r7, #836	; 0x344
 80029c0:	2200      	movs	r2, #0
 80029c2:	601a      	str	r2, [r3, #0]
 80029c4:	e031      	b.n	8002a2a <main+0x17aa>
    	  for (int j = 0; j < kDim; j++) {
 80029c6:	f507 7350 	add.w	r3, r7, #832	; 0x340
 80029ca:	2200      	movs	r2, #0
 80029cc:	601a      	str	r2, [r3, #0]
 80029ce:	e01d      	b.n	8002a0c <main+0x178c>
    		  w4[i][j] = (float**)malloc(iDim * sizeof(float*));
 80029d0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	0099      	lsls	r1, r3, #2
 80029d8:	f507 7351 	add.w	r3, r7, #836	; 0x344
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80029e4:	6812      	ldr	r2, [r2, #0]
 80029e6:	4413      	add	r3, r2
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	f507 7350 	add.w	r3, r7, #832	; 0x340
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	18d4      	adds	r4, r2, r3
 80029f4:	4608      	mov	r0, r1
 80029f6:	f00f ff19 	bl	801282c <malloc>
 80029fa:	4603      	mov	r3, r0
 80029fc:	6023      	str	r3, [r4, #0]
    	  for (int j = 0; j < kDim; j++) {
 80029fe:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8002a02:	f507 7250 	add.w	r2, r7, #832	; 0x340
 8002a06:	6812      	ldr	r2, [r2, #0]
 8002a08:	3201      	adds	r2, #1
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	f507 7250 	add.w	r2, r7, #832	; 0x340
 8002a10:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002a14:	6812      	ldr	r2, [r2, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	dbd9      	blt.n	80029d0 <main+0x1750>
      for (int i = 0; i < kDim; i++) {
 8002a1c:	f507 7351 	add.w	r3, r7, #836	; 0x344
 8002a20:	f507 7251 	add.w	r2, r7, #836	; 0x344
 8002a24:	6812      	ldr	r2, [r2, #0]
 8002a26:	3201      	adds	r2, #1
 8002a28:	601a      	str	r2, [r3, #0]
 8002a2a:	f507 7251 	add.w	r2, r7, #836	; 0x344
 8002a2e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002a32:	6812      	ldr	r2, [r2, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	dbc5      	blt.n	80029c6 <main+0x1746>
    	  }
      }
      for (int i = 0; i < kDim; i++) {
 8002a3a:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 8002a3e:	2200      	movs	r2, #0
 8002a40:	601a      	str	r2, [r3, #0]
 8002a42:	e04b      	b.n	8002adc <main+0x185c>
      	  for (int j = 0; j < kDim; j++) {
 8002a44:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8002a48:	2200      	movs	r2, #0
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	e037      	b.n	8002abe <main+0x183e>
      		  for(int k = 0; k < iDim; k++) {
 8002a4e:	f507 734d 	add.w	r3, r7, #820	; 0x334
 8002a52:	2200      	movs	r2, #0
 8002a54:	601a      	str	r2, [r3, #0]
 8002a56:	e023      	b.n	8002aa0 <main+0x1820>
      			  w4[i][j][k] = (float*)malloc(oDim * sizeof(float));
 8002a58:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	0099      	lsls	r1, r3, #2
 8002a60:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002a6c:	6812      	ldr	r2, [r2, #0]
 8002a6e:	4413      	add	r3, r2
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	4413      	add	r3, r2
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	f507 734d 	add.w	r3, r7, #820	; 0x334
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	18d4      	adds	r4, r2, r3
 8002a88:	4608      	mov	r0, r1
 8002a8a:	f00f fecf 	bl	801282c <malloc>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	6023      	str	r3, [r4, #0]
      		  for(int k = 0; k < iDim; k++) {
 8002a92:	f507 734d 	add.w	r3, r7, #820	; 0x334
 8002a96:	f507 724d 	add.w	r2, r7, #820	; 0x334
 8002a9a:	6812      	ldr	r2, [r2, #0]
 8002a9c:	3201      	adds	r2, #1
 8002a9e:	601a      	str	r2, [r3, #0]
 8002aa0:	f507 724d 	add.w	r2, r7, #820	; 0x334
 8002aa4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002aa8:	6812      	ldr	r2, [r2, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	dbd3      	blt.n	8002a58 <main+0x17d8>
      	  for (int j = 0; j < kDim; j++) {
 8002ab0:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8002ab4:	f507 724e 	add.w	r2, r7, #824	; 0x338
 8002ab8:	6812      	ldr	r2, [r2, #0]
 8002aba:	3201      	adds	r2, #1
 8002abc:	601a      	str	r2, [r3, #0]
 8002abe:	f507 724e 	add.w	r2, r7, #824	; 0x338
 8002ac2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002ac6:	6812      	ldr	r2, [r2, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	dbbf      	blt.n	8002a4e <main+0x17ce>
      for (int i = 0; i < kDim; i++) {
 8002ace:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 8002ad2:	f507 724f 	add.w	r2, r7, #828	; 0x33c
 8002ad6:	6812      	ldr	r2, [r2, #0]
 8002ad8:	3201      	adds	r2, #1
 8002ada:	601a      	str	r2, [r3, #0]
 8002adc:	f507 724f 	add.w	r2, r7, #828	; 0x33c
 8002ae0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002ae4:	6812      	ldr	r2, [r2, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	dbab      	blt.n	8002a44 <main+0x17c4>
      		  }
      	  }
      }

      for(int i = 0; i < kDim; i++) {
 8002aec:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8002af0:	2200      	movs	r2, #0
 8002af2:	601a      	str	r2, [r3, #0]
 8002af4:	e087      	b.n	8002c06 <main+0x1986>
    	  for (int j = 0; j < kDim; j++) {
 8002af6:	f507 734b 	add.w	r3, r7, #812	; 0x32c
 8002afa:	2200      	movs	r2, #0
 8002afc:	601a      	str	r2, [r3, #0]
 8002afe:	e073      	b.n	8002be8 <main+0x1968>
    		  for (int v = 0; v < oDim; v++) {
 8002b00:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8002b04:	2200      	movs	r2, #0
 8002b06:	601a      	str	r2, [r3, #0]
 8002b08:	e05f      	b.n	8002bca <main+0x194a>
    			  for(int u = 0; u < iDim; u++) {
 8002b0a:	f507 7349 	add.w	r3, r7, #804	; 0x324
 8002b0e:	2200      	movs	r2, #0
 8002b10:	601a      	str	r2, [r3, #0]
 8002b12:	e04b      	b.n	8002bac <main+0x192c>
 8002b14:	2400323c 	.word	0x2400323c
 8002b18:	08015714 	.word	0x08015714
 8002b1c:	0801571c 	.word	0x0801571c
    				  w4[i][j][u][v] = nw4[(i*kDim*oDim*iDim)+(j*oDim*iDim)+(v*iDim)+u];
 8002b20:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8002b24:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	6812      	ldr	r2, [r2, #0]
 8002b2c:	fb02 f203 	mul.w	r2, r2, r3
 8002b30:	f507 734b 	add.w	r3, r7, #812	; 0x32c
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4413      	add	r3, r2
 8002b38:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8002b3c:	6812      	ldr	r2, [r2, #0]
 8002b3e:	fb02 f203 	mul.w	r2, r2, r3
 8002b42:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4413      	add	r3, r2
 8002b4a:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8002b4e:	6812      	ldr	r2, [r2, #0]
 8002b50:	fb02 f203 	mul.w	r2, r2, r3
 8002b54:	f507 7349 	add.w	r3, r7, #804	; 0x324
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4413      	add	r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002b62:	6812      	ldr	r2, [r2, #0]
 8002b64:	441a      	add	r2, r3
 8002b66:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8002b72:	6809      	ldr	r1, [r1, #0]
 8002b74:	440b      	add	r3, r1
 8002b76:	6819      	ldr	r1, [r3, #0]
 8002b78:	f507 734b 	add.w	r3, r7, #812	; 0x32c
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	440b      	add	r3, r1
 8002b82:	6819      	ldr	r1, [r3, #0]
 8002b84:	f507 7349 	add.w	r3, r7, #804	; 0x324
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	440b      	add	r3, r1
 8002b8e:	6819      	ldr	r1, [r3, #0]
 8002b90:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	440b      	add	r3, r1
 8002b9a:	6812      	ldr	r2, [r2, #0]
 8002b9c:	601a      	str	r2, [r3, #0]
    			  for(int u = 0; u < iDim; u++) {
 8002b9e:	f507 7349 	add.w	r3, r7, #804	; 0x324
 8002ba2:	f507 7249 	add.w	r2, r7, #804	; 0x324
 8002ba6:	6812      	ldr	r2, [r2, #0]
 8002ba8:	3201      	adds	r2, #1
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	f507 7249 	add.w	r2, r7, #804	; 0x324
 8002bb0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002bb4:	6812      	ldr	r2, [r2, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	dbb1      	blt.n	8002b20 <main+0x18a0>
    		  for (int v = 0; v < oDim; v++) {
 8002bbc:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8002bc0:	f507 724a 	add.w	r2, r7, #808	; 0x328
 8002bc4:	6812      	ldr	r2, [r2, #0]
 8002bc6:	3201      	adds	r2, #1
 8002bc8:	601a      	str	r2, [r3, #0]
 8002bca:	f507 724a 	add.w	r2, r7, #808	; 0x328
 8002bce:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002bd2:	6812      	ldr	r2, [r2, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	db97      	blt.n	8002b0a <main+0x188a>
    	  for (int j = 0; j < kDim; j++) {
 8002bda:	f507 734b 	add.w	r3, r7, #812	; 0x32c
 8002bde:	f507 724b 	add.w	r2, r7, #812	; 0x32c
 8002be2:	6812      	ldr	r2, [r2, #0]
 8002be4:	3201      	adds	r2, #1
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	f507 724b 	add.w	r2, r7, #812	; 0x32c
 8002bec:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002bf0:	6812      	ldr	r2, [r2, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	db83      	blt.n	8002b00 <main+0x1880>
      for(int i = 0; i < kDim; i++) {
 8002bf8:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8002bfc:	f507 724c 	add.w	r2, r7, #816	; 0x330
 8002c00:	6812      	ldr	r2, [r2, #0]
 8002c02:	3201      	adds	r2, #1
 8002c04:	601a      	str	r2, [r3, #0]
 8002c06:	f507 724c 	add.w	r2, r7, #816	; 0x330
 8002c0a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002c0e:	6812      	ldr	r2, [r2, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	f6ff af6f 	blt.w	8002af6 <main+0x1876>
    			  }
    		  }
    	  }
      }

      free(nw4);
 8002c18:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002c1c:	6818      	ldr	r0, [r3, #0]
 8002c1e:	f00f fe0d 	bl	801283c <free>

      // allocate 3d x1
      float*** x1V2 = (float***)malloc(iHeight * sizeof(float**));
 8002c22:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	f107 0480 	add.w	r4, r7, #128	; 0x80
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f00f fdfc 	bl	801282c <malloc>
 8002c34:	4603      	mov	r3, r0
 8002c36:	6023      	str	r3, [r4, #0]
      for (int i = 0; i < iHeight; i++) {
 8002c38:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	601a      	str	r2, [r3, #0]
 8002c40:	e017      	b.n	8002c72 <main+0x19f2>
    	  x1V2[i] = (float**)malloc(iWidth * sizeof(float*));
 8002c42:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	0099      	lsls	r1, r3, #2
 8002c4a:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002c56:	6812      	ldr	r2, [r2, #0]
 8002c58:	18d4      	adds	r4, r2, r3
 8002c5a:	4608      	mov	r0, r1
 8002c5c:	f00f fde6 	bl	801282c <malloc>
 8002c60:	4603      	mov	r3, r0
 8002c62:	6023      	str	r3, [r4, #0]
      for (int i = 0; i < iHeight; i++) {
 8002c64:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8002c68:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8002c6c:	6812      	ldr	r2, [r2, #0]
 8002c6e:	3201      	adds	r2, #1
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8002c76:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8002c7a:	6812      	ldr	r2, [r2, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	dbdf      	blt.n	8002c42 <main+0x19c2>
      }
      for (int i = 0; i < iHeight; i++) {
 8002c82:	f507 7347 	add.w	r3, r7, #796	; 0x31c
 8002c86:	2200      	movs	r2, #0
 8002c88:	601a      	str	r2, [r3, #0]
 8002c8a:	e031      	b.n	8002cf0 <main+0x1a70>
    	  for (int j = 0; j < iWidth; j++) {
 8002c8c:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002c90:	2200      	movs	r2, #0
 8002c92:	601a      	str	r2, [r3, #0]
 8002c94:	e01d      	b.n	8002cd2 <main+0x1a52>
    		  x1V2[i][j] = (float*)malloc(iDim * sizeof(float));
 8002c96:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	0099      	lsls	r1, r3, #2
 8002c9e:	f507 7347 	add.w	r3, r7, #796	; 0x31c
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002caa:	6812      	ldr	r2, [r2, #0]
 8002cac:	4413      	add	r3, r2
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	18d4      	adds	r4, r2, r3
 8002cba:	4608      	mov	r0, r1
 8002cbc:	f00f fdb6 	bl	801282c <malloc>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	6023      	str	r3, [r4, #0]
    	  for (int j = 0; j < iWidth; j++) {
 8002cc4:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002cc8:	f507 7246 	add.w	r2, r7, #792	; 0x318
 8002ccc:	6812      	ldr	r2, [r2, #0]
 8002cce:	3201      	adds	r2, #1
 8002cd0:	601a      	str	r2, [r3, #0]
 8002cd2:	f507 7246 	add.w	r2, r7, #792	; 0x318
 8002cd6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002cda:	6812      	ldr	r2, [r2, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	dbd9      	blt.n	8002c96 <main+0x1a16>
      for (int i = 0; i < iHeight; i++) {
 8002ce2:	f507 7347 	add.w	r3, r7, #796	; 0x31c
 8002ce6:	f507 7247 	add.w	r2, r7, #796	; 0x31c
 8002cea:	6812      	ldr	r2, [r2, #0]
 8002cec:	3201      	adds	r2, #1
 8002cee:	601a      	str	r2, [r3, #0]
 8002cf0:	f507 7247 	add.w	r2, r7, #796	; 0x31c
 8002cf4:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8002cf8:	6812      	ldr	r2, [r2, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	dbc5      	blt.n	8002c8c <main+0x1a0c>
    	  }
      }

      for(int k=0; k<iDim; k++) {
 8002d00:	f507 7345 	add.w	r3, r7, #788	; 0x314
 8002d04:	2200      	movs	r2, #0
 8002d06:	601a      	str	r2, [r3, #0]
 8002d08:	e058      	b.n	8002dbc <main+0x1b3c>
    	  for(int i=0; i<iHeight; i++) {
 8002d0a:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8002d0e:	2200      	movs	r2, #0
 8002d10:	601a      	str	r2, [r3, #0]
 8002d12:	e044      	b.n	8002d9e <main+0x1b1e>
    		  for(int j=0; j<iWidth; j++) {
 8002d14:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8002d18:	2200      	movs	r2, #0
 8002d1a:	601a      	str	r2, [r3, #0]
 8002d1c:	e030      	b.n	8002d80 <main+0x1b00>
    			  x1V2[i][j][k] = x1x2[i][j][k];
 8002d1e:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8002d2a:	6812      	ldr	r2, [r2, #0]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	4413      	add	r3, r2
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	f507 7345 	add.w	r3, r7, #788	; 0x314
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	441a      	add	r2, r3
 8002d46:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002d52:	6809      	ldr	r1, [r1, #0]
 8002d54:	440b      	add	r3, r1
 8002d56:	6819      	ldr	r1, [r3, #0]
 8002d58:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	440b      	add	r3, r1
 8002d62:	6819      	ldr	r1, [r3, #0]
 8002d64:	f507 7345 	add.w	r3, r7, #788	; 0x314
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	440b      	add	r3, r1
 8002d6e:	6812      	ldr	r2, [r2, #0]
 8002d70:	601a      	str	r2, [r3, #0]
    		  for(int j=0; j<iWidth; j++) {
 8002d72:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8002d76:	f507 7243 	add.w	r2, r7, #780	; 0x30c
 8002d7a:	6812      	ldr	r2, [r2, #0]
 8002d7c:	3201      	adds	r2, #1
 8002d7e:	601a      	str	r2, [r3, #0]
 8002d80:	f507 7243 	add.w	r2, r7, #780	; 0x30c
 8002d84:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002d88:	6812      	ldr	r2, [r2, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	dbc6      	blt.n	8002d1e <main+0x1a9e>
    	  for(int i=0; i<iHeight; i++) {
 8002d90:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8002d94:	f507 7244 	add.w	r2, r7, #784	; 0x310
 8002d98:	6812      	ldr	r2, [r2, #0]
 8002d9a:	3201      	adds	r2, #1
 8002d9c:	601a      	str	r2, [r3, #0]
 8002d9e:	f507 7244 	add.w	r2, r7, #784	; 0x310
 8002da2:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8002da6:	6812      	ldr	r2, [r2, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	dbb2      	blt.n	8002d14 <main+0x1a94>
      for(int k=0; k<iDim; k++) {
 8002dae:	f507 7345 	add.w	r3, r7, #788	; 0x314
 8002db2:	f507 7245 	add.w	r2, r7, #788	; 0x314
 8002db6:	6812      	ldr	r2, [r2, #0]
 8002db8:	3201      	adds	r2, #1
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	f507 7245 	add.w	r2, r7, #788	; 0x314
 8002dc0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002dc4:	6812      	ldr	r2, [r2, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	db9e      	blt.n	8002d0a <main+0x1a8a>
    	  }
      }


      //////////////////////////////////////////////////////////////////////////////////////////////////////////// 5_1 in place operation
      int kDim_5 = 3;
 8002dcc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002dd0:	2203      	movs	r2, #3
 8002dd2:	601a      	str	r2, [r3, #0]
	  int iDim_5 = 12;
 8002dd4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002dd8:	220c      	movs	r2, #12
 8002dda:	601a      	str	r2, [r3, #0]
	  int oDim_5 = 3;
 8002ddc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002de0:	2203      	movs	r2, #3
 8002de2:	601a      	str	r2, [r3, #0]
	  int pSize_5 = 1;
 8002de4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002de8:	2201      	movs	r2, #1
 8002dea:	601a      	str	r2, [r3, #0]
	  int iDim_w_5 = 3;
 8002dec:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002df0:	2203      	movs	r2, #3
 8002df2:	601a      	str	r2, [r3, #0]

	  sprintf(name,"w5_1.txt");
 8002df4:	4a75      	ldr	r2, [pc, #468]	; (8002fcc <main+0x1d4c>)
 8002df6:	4b76      	ldr	r3, [pc, #472]	; (8002fd0 <main+0x1d50>)
 8002df8:	cb03      	ldmia	r3!, {r0, r1}
 8002dfa:	6010      	str	r0, [r2, #0]
 8002dfc:	6051      	str	r1, [r2, #4]
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	7213      	strb	r3, [r2, #8]
	  float * nw5_1 = read_txt(name, 81);
 8002e02:	2151      	movs	r1, #81	; 0x51
 8002e04:	4871      	ldr	r0, [pc, #452]	; (8002fcc <main+0x1d4c>)
 8002e06:	f00f f943 	bl	8012090 <read_txt>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002e10:	601a      	str	r2, [r3, #0]

	  // allocate 4d w5_1
	  float**** w5_1 = (float****)malloc(kDim_5 * sizeof(float***));
 8002e12:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f00f fd04 	bl	801282c <malloc>
 8002e24:	4603      	mov	r3, r0
 8002e26:	6023      	str	r3, [r4, #0]
	  for (int i = 0; i < kDim_5; i++) {
 8002e28:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	601a      	str	r2, [r3, #0]
 8002e30:	e017      	b.n	8002e62 <main+0x1be2>
		  w5_1[i] = (float***)malloc(kDim_5 * sizeof(float**));
 8002e32:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	0099      	lsls	r1, r3, #2
 8002e3a:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002e46:	6812      	ldr	r2, [r2, #0]
 8002e48:	18d4      	adds	r4, r2, r3
 8002e4a:	4608      	mov	r0, r1
 8002e4c:	f00f fcee 	bl	801282c <malloc>
 8002e50:	4603      	mov	r3, r0
 8002e52:	6023      	str	r3, [r4, #0]
	  for (int i = 0; i < kDim_5; i++) {
 8002e54:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8002e58:	f507 7242 	add.w	r2, r7, #776	; 0x308
 8002e5c:	6812      	ldr	r2, [r2, #0]
 8002e5e:	3201      	adds	r2, #1
 8002e60:	601a      	str	r2, [r3, #0]
 8002e62:	f507 7242 	add.w	r2, r7, #776	; 0x308
 8002e66:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002e6a:	6812      	ldr	r2, [r2, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	dbdf      	blt.n	8002e32 <main+0x1bb2>
	  }
	  for (int i = 0; i < kDim_5; i++) {
 8002e72:	f507 7341 	add.w	r3, r7, #772	; 0x304
 8002e76:	2200      	movs	r2, #0
 8002e78:	601a      	str	r2, [r3, #0]
 8002e7a:	e031      	b.n	8002ee0 <main+0x1c60>
		  for (int j = 0; j < kDim_5; j++) {
 8002e7c:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8002e80:	2200      	movs	r2, #0
 8002e82:	601a      	str	r2, [r3, #0]
 8002e84:	e01d      	b.n	8002ec2 <main+0x1c42>
			  w5_1[i][j] = (float**)malloc(iDim_w_5 * sizeof(float*));
 8002e86:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	0099      	lsls	r1, r3, #2
 8002e8e:	f507 7341 	add.w	r3, r7, #772	; 0x304
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002e9a:	6812      	ldr	r2, [r2, #0]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	18d4      	adds	r4, r2, r3
 8002eaa:	4608      	mov	r0, r1
 8002eac:	f00f fcbe 	bl	801282c <malloc>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	6023      	str	r3, [r4, #0]
		  for (int j = 0; j < kDim_5; j++) {
 8002eb4:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8002eb8:	f507 7240 	add.w	r2, r7, #768	; 0x300
 8002ebc:	6812      	ldr	r2, [r2, #0]
 8002ebe:	3201      	adds	r2, #1
 8002ec0:	601a      	str	r2, [r3, #0]
 8002ec2:	f507 7240 	add.w	r2, r7, #768	; 0x300
 8002ec6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002eca:	6812      	ldr	r2, [r2, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	dbd9      	blt.n	8002e86 <main+0x1c06>
	  for (int i = 0; i < kDim_5; i++) {
 8002ed2:	f507 7341 	add.w	r3, r7, #772	; 0x304
 8002ed6:	f507 7241 	add.w	r2, r7, #772	; 0x304
 8002eda:	6812      	ldr	r2, [r2, #0]
 8002edc:	3201      	adds	r2, #1
 8002ede:	601a      	str	r2, [r3, #0]
 8002ee0:	f507 7241 	add.w	r2, r7, #772	; 0x304
 8002ee4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002ee8:	6812      	ldr	r2, [r2, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	dbc5      	blt.n	8002e7c <main+0x1bfc>
		  }
	  }
	  for (int i = 0; i < kDim_5; i++) {
 8002ef0:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	e04b      	b.n	8002f92 <main+0x1d12>
		  for (int j = 0; j < kDim_5; j++) {
 8002efa:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8002efe:	2200      	movs	r2, #0
 8002f00:	601a      	str	r2, [r3, #0]
 8002f02:	e037      	b.n	8002f74 <main+0x1cf4>
			  for(int k = 0; k < iDim_w_5; k++) {
 8002f04:	f507 733d 	add.w	r3, r7, #756	; 0x2f4
 8002f08:	2200      	movs	r2, #0
 8002f0a:	601a      	str	r2, [r3, #0]
 8002f0c:	e023      	b.n	8002f56 <main+0x1cd6>
				  w5_1[i][j][k] = (float*)malloc(oDim_5 * sizeof(float));
 8002f0e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	0099      	lsls	r1, r3, #2
 8002f16:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002f22:	6812      	ldr	r2, [r2, #0]
 8002f24:	4413      	add	r3, r2
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	4413      	add	r3, r2
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	f507 733d 	add.w	r3, r7, #756	; 0x2f4
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	18d4      	adds	r4, r2, r3
 8002f3e:	4608      	mov	r0, r1
 8002f40:	f00f fc74 	bl	801282c <malloc>
 8002f44:	4603      	mov	r3, r0
 8002f46:	6023      	str	r3, [r4, #0]
			  for(int k = 0; k < iDim_w_5; k++) {
 8002f48:	f507 733d 	add.w	r3, r7, #756	; 0x2f4
 8002f4c:	f507 723d 	add.w	r2, r7, #756	; 0x2f4
 8002f50:	6812      	ldr	r2, [r2, #0]
 8002f52:	3201      	adds	r2, #1
 8002f54:	601a      	str	r2, [r3, #0]
 8002f56:	f507 723d 	add.w	r2, r7, #756	; 0x2f4
 8002f5a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002f5e:	6812      	ldr	r2, [r2, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	dbd3      	blt.n	8002f0e <main+0x1c8e>
		  for (int j = 0; j < kDim_5; j++) {
 8002f66:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8002f6a:	f507 723e 	add.w	r2, r7, #760	; 0x2f8
 8002f6e:	6812      	ldr	r2, [r2, #0]
 8002f70:	3201      	adds	r2, #1
 8002f72:	601a      	str	r2, [r3, #0]
 8002f74:	f507 723e 	add.w	r2, r7, #760	; 0x2f8
 8002f78:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002f7c:	6812      	ldr	r2, [r2, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	dbbf      	blt.n	8002f04 <main+0x1c84>
	  for (int i = 0; i < kDim_5; i++) {
 8002f84:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 8002f88:	f507 723f 	add.w	r2, r7, #764	; 0x2fc
 8002f8c:	6812      	ldr	r2, [r2, #0]
 8002f8e:	3201      	adds	r2, #1
 8002f90:	601a      	str	r2, [r3, #0]
 8002f92:	f507 723f 	add.w	r2, r7, #764	; 0x2fc
 8002f96:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002f9a:	6812      	ldr	r2, [r2, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	dbab      	blt.n	8002efa <main+0x1c7a>
			  }
		  }
	  }
	  for(int i = 0; i < kDim_5; i++) {
 8002fa2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	601a      	str	r2, [r3, #0]
 8002faa:	e086      	b.n	80030ba <main+0x1e3a>
		  for (int j = 0; j < kDim_5; j++) {
 8002fac:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	601a      	str	r2, [r3, #0]
 8002fb4:	e072      	b.n	800309c <main+0x1e1c>
			  for (int v = 0; v < oDim_5; v++) {
 8002fb6:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 8002fba:	2200      	movs	r2, #0
 8002fbc:	601a      	str	r2, [r3, #0]
 8002fbe:	e05e      	b.n	800307e <main+0x1dfe>
				  for(int u = 0; u < iDim_w_5; u++) {
 8002fc0:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	601a      	str	r2, [r3, #0]
 8002fc8:	e04a      	b.n	8003060 <main+0x1de0>
 8002fca:	bf00      	nop
 8002fcc:	2400323c 	.word	0x2400323c
 8002fd0:	08015724 	.word	0x08015724
					  w5_1[i][j][u][v] = nw5_1[(i*kDim_5*oDim_5*iDim_w_5)+(j*oDim_5*iDim_w_5)+(v*iDim_w_5)+u];
 8002fd4:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002fd8:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	6812      	ldr	r2, [r2, #0]
 8002fe0:	fb02 f203 	mul.w	r2, r2, r3
 8002fe4:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4413      	add	r3, r2
 8002fec:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8002ff0:	6812      	ldr	r2, [r2, #0]
 8002ff2:	fb02 f203 	mul.w	r2, r2, r3
 8002ff6:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8003002:	6812      	ldr	r2, [r2, #0]
 8003004:	fb02 f203 	mul.w	r2, r2, r3
 8003008:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4413      	add	r3, r2
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003016:	6812      	ldr	r2, [r2, #0]
 8003018:	441a      	add	r2, r3
 800301a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8003026:	6809      	ldr	r1, [r1, #0]
 8003028:	440b      	add	r3, r1
 800302a:	6819      	ldr	r1, [r3, #0]
 800302c:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	440b      	add	r3, r1
 8003036:	6819      	ldr	r1, [r3, #0]
 8003038:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	440b      	add	r3, r1
 8003042:	6819      	ldr	r1, [r3, #0]
 8003044:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	440b      	add	r3, r1
 800304e:	6812      	ldr	r2, [r2, #0]
 8003050:	601a      	str	r2, [r3, #0]
				  for(int u = 0; u < iDim_w_5; u++) {
 8003052:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8003056:	f507 7239 	add.w	r2, r7, #740	; 0x2e4
 800305a:	6812      	ldr	r2, [r2, #0]
 800305c:	3201      	adds	r2, #1
 800305e:	601a      	str	r2, [r3, #0]
 8003060:	f507 7239 	add.w	r2, r7, #740	; 0x2e4
 8003064:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003068:	6812      	ldr	r2, [r2, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	429a      	cmp	r2, r3
 800306e:	dbb1      	blt.n	8002fd4 <main+0x1d54>
			  for (int v = 0; v < oDim_5; v++) {
 8003070:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 8003074:	f507 723a 	add.w	r2, r7, #744	; 0x2e8
 8003078:	6812      	ldr	r2, [r2, #0]
 800307a:	3201      	adds	r2, #1
 800307c:	601a      	str	r2, [r3, #0]
 800307e:	f507 723a 	add.w	r2, r7, #744	; 0x2e8
 8003082:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003086:	6812      	ldr	r2, [r2, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	429a      	cmp	r2, r3
 800308c:	db98      	blt.n	8002fc0 <main+0x1d40>
		  for (int j = 0; j < kDim_5; j++) {
 800308e:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 8003092:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
 8003096:	6812      	ldr	r2, [r2, #0]
 8003098:	3201      	adds	r2, #1
 800309a:	601a      	str	r2, [r3, #0]
 800309c:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
 80030a0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80030a4:	6812      	ldr	r2, [r2, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	db84      	blt.n	8002fb6 <main+0x1d36>
	  for(int i = 0; i < kDim_5; i++) {
 80030ac:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80030b0:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 80030b4:	6812      	ldr	r2, [r2, #0]
 80030b6:	3201      	adds	r2, #1
 80030b8:	601a      	str	r2, [r3, #0]
 80030ba:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 80030be:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80030c2:	6812      	ldr	r2, [r2, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	f6ff af70 	blt.w	8002fac <main+0x1d2c>
				  }
			  }
		  }
	  }
	  free(nw5_1);
 80030cc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80030d0:	6818      	ldr	r0, [r3, #0]
 80030d2:	f00f fbb3 	bl	801283c <free>

	  convInPlace(x1V2, w5_1, iHeight, iWidth, kDim_5, iDim_w_5, oDim_5, pSize_5);
 80030d6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80030da:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 80030de:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80030e2:	f107 0080 	add.w	r0, r7, #128	; 0x80
 80030e6:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80030ea:	6824      	ldr	r4, [r4, #0]
 80030ec:	9403      	str	r4, [sp, #12]
 80030ee:	f107 0474 	add.w	r4, r7, #116	; 0x74
 80030f2:	6824      	ldr	r4, [r4, #0]
 80030f4:	9402      	str	r4, [sp, #8]
 80030f6:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 80030fa:	6824      	ldr	r4, [r4, #0]
 80030fc:	9401      	str	r4, [sp, #4]
 80030fe:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 8003102:	6824      	ldr	r4, [r4, #0]
 8003104:	9400      	str	r4, [sp, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	6812      	ldr	r2, [r2, #0]
 800310a:	6809      	ldr	r1, [r1, #0]
 800310c:	6800      	ldr	r0, [r0, #0]
 800310e:	f7fd fc95 	bl	8000a3c <convInPlace>

	  //free(w5_1);
	  for (int i = 0; i < kDim_5; i++) {
 8003112:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8003116:	2200      	movs	r2, #0
 8003118:	601a      	str	r2, [r3, #0]
 800311a:	e046      	b.n	80031aa <main+0x1f2a>
		  for (int j = 0; j < kDim_5; j++) {
 800311c:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 8003120:	2200      	movs	r2, #0
 8003122:	601a      	str	r2, [r3, #0]
 8003124:	e032      	b.n	800318c <main+0x1f0c>
			  	  for(int k = 0; k < iDim_w_5; k++) {
 8003126:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 800312a:	2200      	movs	r2, #0
 800312c:	601a      	str	r2, [r3, #0]
 800312e:	e01e      	b.n	800316e <main+0x1eee>
	    			  free(w5_1[i][j][k]);
 8003130:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800313c:	6812      	ldr	r2, [r2, #0]
 800313e:	4413      	add	r3, r2
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	4413      	add	r3, r2
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	4413      	add	r3, r2
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4618      	mov	r0, r3
 800315c:	f00f fb6e 	bl	801283c <free>
			  	  for(int k = 0; k < iDim_w_5; k++) {
 8003160:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8003164:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8003168:	6812      	ldr	r2, [r2, #0]
 800316a:	3201      	adds	r2, #1
 800316c:	601a      	str	r2, [r3, #0]
 800316e:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8003172:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003176:	6812      	ldr	r2, [r2, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	429a      	cmp	r2, r3
 800317c:	dbd8      	blt.n	8003130 <main+0x1eb0>
		  for (int j = 0; j < kDim_5; j++) {
 800317e:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 8003182:	f507 7237 	add.w	r2, r7, #732	; 0x2dc
 8003186:	6812      	ldr	r2, [r2, #0]
 8003188:	3201      	adds	r2, #1
 800318a:	601a      	str	r2, [r3, #0]
 800318c:	f507 7237 	add.w	r2, r7, #732	; 0x2dc
 8003190:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003194:	6812      	ldr	r2, [r2, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	429a      	cmp	r2, r3
 800319a:	dbc4      	blt.n	8003126 <main+0x1ea6>
	  for (int i = 0; i < kDim_5; i++) {
 800319c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80031a0:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 80031a4:	6812      	ldr	r2, [r2, #0]
 80031a6:	3201      	adds	r2, #1
 80031a8:	601a      	str	r2, [r3, #0]
 80031aa:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 80031ae:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80031b2:	6812      	ldr	r2, [r2, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	dbb0      	blt.n	800311c <main+0x1e9c>
	    		  }
			}
	  }
	  for (int i = 0; i < kDim_5; i++) {
 80031ba:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 80031be:	2200      	movs	r2, #0
 80031c0:	601a      	str	r2, [r3, #0]
 80031c2:	e02c      	b.n	800321e <main+0x1f9e>
	  	  for (int j = 0; j < kDim_5; j++) {
 80031c4:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80031c8:	2200      	movs	r2, #0
 80031ca:	601a      	str	r2, [r3, #0]
 80031cc:	e018      	b.n	8003200 <main+0x1f80>
	  		  free(w5_1[i][j]);
 80031ce:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80031da:	6812      	ldr	r2, [r2, #0]
 80031dc:	4413      	add	r3, r2
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	4413      	add	r3, r2
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f00f fb25 	bl	801283c <free>
	  	  for (int j = 0; j < kDim_5; j++) {
 80031f2:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80031f6:	f507 7234 	add.w	r2, r7, #720	; 0x2d0
 80031fa:	6812      	ldr	r2, [r2, #0]
 80031fc:	3201      	adds	r2, #1
 80031fe:	601a      	str	r2, [r3, #0]
 8003200:	f507 7234 	add.w	r2, r7, #720	; 0x2d0
 8003204:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003208:	6812      	ldr	r2, [r2, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	429a      	cmp	r2, r3
 800320e:	dbde      	blt.n	80031ce <main+0x1f4e>
	  for (int i = 0; i < kDim_5; i++) {
 8003210:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 8003214:	f507 7235 	add.w	r2, r7, #724	; 0x2d4
 8003218:	6812      	ldr	r2, [r2, #0]
 800321a:	3201      	adds	r2, #1
 800321c:	601a      	str	r2, [r3, #0]
 800321e:	f507 7235 	add.w	r2, r7, #724	; 0x2d4
 8003222:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003226:	6812      	ldr	r2, [r2, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	429a      	cmp	r2, r3
 800322c:	dbca      	blt.n	80031c4 <main+0x1f44>
	  	  }
	  }
	  for (int i = 0; i < kDim_5; i++) {
 800322e:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 8003232:	2200      	movs	r2, #0
 8003234:	601a      	str	r2, [r3, #0]
 8003236:	e012      	b.n	800325e <main+0x1fde>
		  free(w5_1[i]);
 8003238:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8003244:	6812      	ldr	r2, [r2, #0]
 8003246:	4413      	add	r3, r2
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4618      	mov	r0, r3
 800324c:	f00f faf6 	bl	801283c <free>
	  for (int i = 0; i < kDim_5; i++) {
 8003250:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 8003254:	f507 7233 	add.w	r2, r7, #716	; 0x2cc
 8003258:	6812      	ldr	r2, [r2, #0]
 800325a:	3201      	adds	r2, #1
 800325c:	601a      	str	r2, [r3, #0]
 800325e:	f507 7233 	add.w	r2, r7, #716	; 0x2cc
 8003262:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003266:	6812      	ldr	r2, [r2, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	429a      	cmp	r2, r3
 800326c:	dbe4      	blt.n	8003238 <main+0x1fb8>
	  }
	  free(w5_1);
 800326e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003272:	6818      	ldr	r0, [r3, #0]
 8003274:	f00f fae2 	bl	801283c <free>
	  ////////////////////////////////////////////////////////////////////////////////////////////////////////////

      // allocate 3d x2x3
      float*** x2x3 = (float***)malloc(iHeight * sizeof(float**));
 8003278:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8003284:	4618      	mov	r0, r3
 8003286:	f00f fad1 	bl	801282c <malloc>
 800328a:	4603      	mov	r3, r0
 800328c:	6023      	str	r3, [r4, #0]
      for (int i = 0; i < iHeight; i++) {
 800328e:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8003292:	2200      	movs	r2, #0
 8003294:	601a      	str	r2, [r3, #0]
 8003296:	e017      	b.n	80032c8 <main+0x2048>
    	  x2x3[i] = (float**)malloc(iWidth * sizeof(float*));
 8003298:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	0099      	lsls	r1, r3, #2
 80032a0:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80032ac:	6812      	ldr	r2, [r2, #0]
 80032ae:	18d4      	adds	r4, r2, r3
 80032b0:	4608      	mov	r0, r1
 80032b2:	f00f fabb 	bl	801282c <malloc>
 80032b6:	4603      	mov	r3, r0
 80032b8:	6023      	str	r3, [r4, #0]
      for (int i = 0; i < iHeight; i++) {
 80032ba:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 80032be:	f507 7232 	add.w	r2, r7, #712	; 0x2c8
 80032c2:	6812      	ldr	r2, [r2, #0]
 80032c4:	3201      	adds	r2, #1
 80032c6:	601a      	str	r2, [r3, #0]
 80032c8:	f507 7232 	add.w	r2, r7, #712	; 0x2c8
 80032cc:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 80032d0:	6812      	ldr	r2, [r2, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	dbdf      	blt.n	8003298 <main+0x2018>
      }
      for (int i = 0; i < iHeight; i++) {
 80032d8:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 80032dc:	2200      	movs	r2, #0
 80032de:	601a      	str	r2, [r3, #0]
 80032e0:	e031      	b.n	8003346 <main+0x20c6>
    	  for (int j = 0; j < iWidth; j++) {
 80032e2:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 80032e6:	2200      	movs	r2, #0
 80032e8:	601a      	str	r2, [r3, #0]
 80032ea:	e01d      	b.n	8003328 <main+0x20a8>
    		  x2x3[i][j] = (float*)malloc(iDim * sizeof(float));
 80032ec:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	0099      	lsls	r1, r3, #2
 80032f4:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003300:	6812      	ldr	r2, [r2, #0]
 8003302:	4413      	add	r3, r2
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	18d4      	adds	r4, r2, r3
 8003310:	4608      	mov	r0, r1
 8003312:	f00f fa8b 	bl	801282c <malloc>
 8003316:	4603      	mov	r3, r0
 8003318:	6023      	str	r3, [r4, #0]
    	  for (int j = 0; j < iWidth; j++) {
 800331a:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800331e:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
 8003322:	6812      	ldr	r2, [r2, #0]
 8003324:	3201      	adds	r2, #1
 8003326:	601a      	str	r2, [r3, #0]
 8003328:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
 800332c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8003330:	6812      	ldr	r2, [r2, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	429a      	cmp	r2, r3
 8003336:	dbd9      	blt.n	80032ec <main+0x206c>
      for (int i = 0; i < iHeight; i++) {
 8003338:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 800333c:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 8003340:	6812      	ldr	r2, [r2, #0]
 8003342:	3201      	adds	r2, #1
 8003344:	601a      	str	r2, [r3, #0]
 8003346:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 800334a:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800334e:	6812      	ldr	r2, [r2, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	429a      	cmp	r2, r3
 8003354:	dbc5      	blt.n	80032e2 <main+0x2062>
    	  }
      }

      for(int k=0; k<3; k++) {
 8003356:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 800335a:	2200      	movs	r2, #0
 800335c:	601a      	str	r2, [r3, #0]
 800335e:	e059      	b.n	8003414 <main+0x2194>
    	  for(int i=0; i<iHeight; i++) {
 8003360:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8003364:	2200      	movs	r2, #0
 8003366:	601a      	str	r2, [r3, #0]
 8003368:	e045      	b.n	80033f6 <main+0x2176>
    		  for(int j=0; j<iWidth; j++) {
 800336a:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 800336e:	2200      	movs	r2, #0
 8003370:	601a      	str	r2, [r3, #0]
 8003372:	e031      	b.n	80033d8 <main+0x2158>
    			  x2x3[i][j][k] = x1x2[i][j][k+3];
 8003374:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8003380:	6812      	ldr	r2, [r2, #0]
 8003382:	4413      	add	r3, r2
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	4413      	add	r3, r2
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	3303      	adds	r3, #3
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	441a      	add	r2, r3
 800339e:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80033aa:	6809      	ldr	r1, [r1, #0]
 80033ac:	440b      	add	r3, r1
 80033ae:	6819      	ldr	r1, [r3, #0]
 80033b0:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	440b      	add	r3, r1
 80033ba:	6819      	ldr	r1, [r3, #0]
 80033bc:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	440b      	add	r3, r1
 80033c6:	6812      	ldr	r2, [r2, #0]
 80033c8:	601a      	str	r2, [r3, #0]
    		  for(int j=0; j<iWidth; j++) {
 80033ca:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 80033ce:	f507 722d 	add.w	r2, r7, #692	; 0x2b4
 80033d2:	6812      	ldr	r2, [r2, #0]
 80033d4:	3201      	adds	r2, #1
 80033d6:	601a      	str	r2, [r3, #0]
 80033d8:	f507 722d 	add.w	r2, r7, #692	; 0x2b4
 80033dc:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80033e0:	6812      	ldr	r2, [r2, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	dbc5      	blt.n	8003374 <main+0x20f4>
    	  for(int i=0; i<iHeight; i++) {
 80033e8:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80033ec:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 80033f0:	6812      	ldr	r2, [r2, #0]
 80033f2:	3201      	adds	r2, #1
 80033f4:	601a      	str	r2, [r3, #0]
 80033f6:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 80033fa:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 80033fe:	6812      	ldr	r2, [r2, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	429a      	cmp	r2, r3
 8003404:	dbb1      	blt.n	800336a <main+0x20ea>
      for(int k=0; k<3; k++) {
 8003406:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 800340a:	f507 722f 	add.w	r2, r7, #700	; 0x2bc
 800340e:	6812      	ldr	r2, [r2, #0]
 8003410:	3201      	adds	r2, #1
 8003412:	601a      	str	r2, [r3, #0]
 8003414:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	2b02      	cmp	r3, #2
 800341c:	dda0      	ble.n	8003360 <main+0x20e0>
    		  }
    	  }
      }

      //free(x1x2);
      for (int i = 0; i < iHeight; i++) {
 800341e:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8003422:	2200      	movs	r2, #0
 8003424:	601a      	str	r2, [r3, #0]
 8003426:	e02c      	b.n	8003482 <main+0x2202>
    	  for (int j = 0; j < iWidth; j++) {
 8003428:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 800342c:	2200      	movs	r2, #0
 800342e:	601a      	str	r2, [r3, #0]
 8003430:	e018      	b.n	8003464 <main+0x21e4>
    		free(x1x2[i][j]);
 8003432:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	f107 0294 	add.w	r2, r7, #148	; 0x94
 800343e:	6812      	ldr	r2, [r2, #0]
 8003440:	4413      	add	r3, r2
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	4413      	add	r3, r2
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4618      	mov	r0, r3
 8003452:	f00f f9f3 	bl	801283c <free>
    	  for (int j = 0; j < iWidth; j++) {
 8003456:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 800345a:	f507 722b 	add.w	r2, r7, #684	; 0x2ac
 800345e:	6812      	ldr	r2, [r2, #0]
 8003460:	3201      	adds	r2, #1
 8003462:	601a      	str	r2, [r3, #0]
 8003464:	f507 722b 	add.w	r2, r7, #684	; 0x2ac
 8003468:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800346c:	6812      	ldr	r2, [r2, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	429a      	cmp	r2, r3
 8003472:	dbde      	blt.n	8003432 <main+0x21b2>
      for (int i = 0; i < iHeight; i++) {
 8003474:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8003478:	f507 722c 	add.w	r2, r7, #688	; 0x2b0
 800347c:	6812      	ldr	r2, [r2, #0]
 800347e:	3201      	adds	r2, #1
 8003480:	601a      	str	r2, [r3, #0]
 8003482:	f507 722c 	add.w	r2, r7, #688	; 0x2b0
 8003486:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800348a:	6812      	ldr	r2, [r2, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	429a      	cmp	r2, r3
 8003490:	dbca      	blt.n	8003428 <main+0x21a8>
    	  }
      }
      for (int i = 0; i < iHeight; i++) {
 8003492:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8003496:	2200      	movs	r2, #0
 8003498:	601a      	str	r2, [r3, #0]
 800349a:	e012      	b.n	80034c2 <main+0x2242>
      	free(x1x2[i]);
 800349c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	f107 0294 	add.w	r2, r7, #148	; 0x94
 80034a8:	6812      	ldr	r2, [r2, #0]
 80034aa:	4413      	add	r3, r2
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f00f f9c4 	bl	801283c <free>
      for (int i = 0; i < iHeight; i++) {
 80034b4:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80034b8:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 80034bc:	6812      	ldr	r2, [r2, #0]
 80034be:	3201      	adds	r2, #1
 80034c0:	601a      	str	r2, [r3, #0]
 80034c2:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 80034c6:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 80034ca:	6812      	ldr	r2, [r2, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	dbe4      	blt.n	800349c <main+0x221c>
      }
      free(x1x2);
 80034d2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80034d6:	6818      	ldr	r0, [r3, #0]
 80034d8:	f00f f9b0 	bl	801283c <free>

      for(int k=3; k<6; k++) {
 80034dc:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 80034e0:	2203      	movs	r2, #3
 80034e2:	601a      	str	r2, [r3, #0]
 80034e4:	e05a      	b.n	800359c <main+0x231c>
    	  for(int i=0; i<iHeight; i++) {
 80034e6:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80034ea:	2200      	movs	r2, #0
 80034ec:	601a      	str	r2, [r3, #0]
 80034ee:	e046      	b.n	800357e <main+0x22fe>
    		  for(int j=0; j<iWidth; j++) {
 80034f0:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 80034f4:	2200      	movs	r2, #0
 80034f6:	601a      	str	r2, [r3, #0]
 80034f8:	e032      	b.n	8003560 <main+0x22e0>
    			  x2x3[i][j][k] = x3[i][j][k-3];
 80034fa:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8003506:	6812      	ldr	r2, [r2, #0]
 8003508:	4413      	add	r3, r2
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	4413      	add	r3, r2
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 800351c:	6819      	ldr	r1, [r3, #0]
 800351e:	4b97      	ldr	r3, [pc, #604]	; (800377c <main+0x24fc>)
 8003520:	440b      	add	r3, r1
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	441a      	add	r2, r3
 8003526:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8003532:	6809      	ldr	r1, [r1, #0]
 8003534:	440b      	add	r3, r1
 8003536:	6819      	ldr	r1, [r3, #0]
 8003538:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	440b      	add	r3, r1
 8003542:	6819      	ldr	r1, [r3, #0]
 8003544:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	440b      	add	r3, r1
 800354e:	6812      	ldr	r2, [r2, #0]
 8003550:	601a      	str	r2, [r3, #0]
    		  for(int j=0; j<iWidth; j++) {
 8003552:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 8003556:	f507 7227 	add.w	r2, r7, #668	; 0x29c
 800355a:	6812      	ldr	r2, [r2, #0]
 800355c:	3201      	adds	r2, #1
 800355e:	601a      	str	r2, [r3, #0]
 8003560:	f507 7227 	add.w	r2, r7, #668	; 0x29c
 8003564:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8003568:	6812      	ldr	r2, [r2, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	429a      	cmp	r2, r3
 800356e:	dbc4      	blt.n	80034fa <main+0x227a>
    	  for(int i=0; i<iHeight; i++) {
 8003570:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003574:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 8003578:	6812      	ldr	r2, [r2, #0]
 800357a:	3201      	adds	r2, #1
 800357c:	601a      	str	r2, [r3, #0]
 800357e:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 8003582:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8003586:	6812      	ldr	r2, [r2, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	429a      	cmp	r2, r3
 800358c:	dbb0      	blt.n	80034f0 <main+0x2270>
      for(int k=3; k<6; k++) {
 800358e:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 8003592:	f507 7229 	add.w	r2, r7, #676	; 0x2a4
 8003596:	6812      	ldr	r2, [r2, #0]
 8003598:	3201      	adds	r2, #1
 800359a:	601a      	str	r2, [r3, #0]
 800359c:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2b05      	cmp	r3, #5
 80035a4:	dd9f      	ble.n	80034e6 <main+0x2266>
    	  }
      }

	  //////////////////////////////////////////////////////////////////////////////////////////////////////////// 5_3 "Add" operation

	 	  sprintf(name,"w5_3.txt");
 80035a6:	4a76      	ldr	r2, [pc, #472]	; (8003780 <main+0x2500>)
 80035a8:	4b76      	ldr	r3, [pc, #472]	; (8003784 <main+0x2504>)
 80035aa:	cb03      	ldmia	r3!, {r0, r1}
 80035ac:	6010      	str	r0, [r2, #0]
 80035ae:	6051      	str	r1, [r2, #4]
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	7213      	strb	r3, [r2, #8]
	 	  float * nw5_3 = read_txt(name, 81);
 80035b4:	2151      	movs	r1, #81	; 0x51
 80035b6:	4872      	ldr	r0, [pc, #456]	; (8003780 <main+0x2500>)
 80035b8:	f00e fd6a 	bl	8012090 <read_txt>
 80035bc:	4602      	mov	r2, r0
 80035be:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80035c2:	601a      	str	r2, [r3, #0]

	 	  // allocate 4d w5_2
	 	  float**** w5_3 = (float****)malloc(kDim_5 * sizeof(float***));
 80035c4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80035d0:	4618      	mov	r0, r3
 80035d2:	f00f f92b 	bl	801282c <malloc>
 80035d6:	4603      	mov	r3, r0
 80035d8:	6023      	str	r3, [r4, #0]
	 	  for (int i = 0; i < kDim_5; i++) {
 80035da:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80035de:	2200      	movs	r2, #0
 80035e0:	601a      	str	r2, [r3, #0]
 80035e2:	e017      	b.n	8003614 <main+0x2394>
	 		 w5_3[i] = (float***)malloc(kDim_5 * sizeof(float**));
 80035e4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	0099      	lsls	r1, r3, #2
 80035ec:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80035f8:	6812      	ldr	r2, [r2, #0]
 80035fa:	18d4      	adds	r4, r2, r3
 80035fc:	4608      	mov	r0, r1
 80035fe:	f00f f915 	bl	801282c <malloc>
 8003602:	4603      	mov	r3, r0
 8003604:	6023      	str	r3, [r4, #0]
	 	  for (int i = 0; i < kDim_5; i++) {
 8003606:	f507 7326 	add.w	r3, r7, #664	; 0x298
 800360a:	f507 7226 	add.w	r2, r7, #664	; 0x298
 800360e:	6812      	ldr	r2, [r2, #0]
 8003610:	3201      	adds	r2, #1
 8003612:	601a      	str	r2, [r3, #0]
 8003614:	f507 7226 	add.w	r2, r7, #664	; 0x298
 8003618:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800361c:	6812      	ldr	r2, [r2, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	429a      	cmp	r2, r3
 8003622:	dbdf      	blt.n	80035e4 <main+0x2364>
	 	  }
	 	  for (int i = 0; i < kDim_5; i++) {
 8003624:	f507 7325 	add.w	r3, r7, #660	; 0x294
 8003628:	2200      	movs	r2, #0
 800362a:	601a      	str	r2, [r3, #0]
 800362c:	e031      	b.n	8003692 <main+0x2412>
	 		  for (int j = 0; j < kDim_5; j++) {
 800362e:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8003632:	2200      	movs	r2, #0
 8003634:	601a      	str	r2, [r3, #0]
 8003636:	e01d      	b.n	8003674 <main+0x23f4>
	 			 w5_3[i][j] = (float**)malloc(iDim_w_5 * sizeof(float*));
 8003638:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	0099      	lsls	r1, r3, #2
 8003640:	f507 7325 	add.w	r3, r7, #660	; 0x294
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800364c:	6812      	ldr	r2, [r2, #0]
 800364e:	4413      	add	r3, r2
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	18d4      	adds	r4, r2, r3
 800365c:	4608      	mov	r0, r1
 800365e:	f00f f8e5 	bl	801282c <malloc>
 8003662:	4603      	mov	r3, r0
 8003664:	6023      	str	r3, [r4, #0]
	 		  for (int j = 0; j < kDim_5; j++) {
 8003666:	f507 7324 	add.w	r3, r7, #656	; 0x290
 800366a:	f507 7224 	add.w	r2, r7, #656	; 0x290
 800366e:	6812      	ldr	r2, [r2, #0]
 8003670:	3201      	adds	r2, #1
 8003672:	601a      	str	r2, [r3, #0]
 8003674:	f507 7224 	add.w	r2, r7, #656	; 0x290
 8003678:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800367c:	6812      	ldr	r2, [r2, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	429a      	cmp	r2, r3
 8003682:	dbd9      	blt.n	8003638 <main+0x23b8>
	 	  for (int i = 0; i < kDim_5; i++) {
 8003684:	f507 7325 	add.w	r3, r7, #660	; 0x294
 8003688:	f507 7225 	add.w	r2, r7, #660	; 0x294
 800368c:	6812      	ldr	r2, [r2, #0]
 800368e:	3201      	adds	r2, #1
 8003690:	601a      	str	r2, [r3, #0]
 8003692:	f507 7225 	add.w	r2, r7, #660	; 0x294
 8003696:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800369a:	6812      	ldr	r2, [r2, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	429a      	cmp	r2, r3
 80036a0:	dbc5      	blt.n	800362e <main+0x23ae>
	 		  }
	 	  }
	 	  for (int i = 0; i < kDim_5; i++) {
 80036a2:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 80036a6:	2200      	movs	r2, #0
 80036a8:	601a      	str	r2, [r3, #0]
 80036aa:	e04b      	b.n	8003744 <main+0x24c4>
	 		  for (int j = 0; j < kDim_5; j++) {
 80036ac:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80036b0:	2200      	movs	r2, #0
 80036b2:	601a      	str	r2, [r3, #0]
 80036b4:	e037      	b.n	8003726 <main+0x24a6>
	 			  for(int k = 0; k < iDim_w_5; k++) {
 80036b6:	f507 7321 	add.w	r3, r7, #644	; 0x284
 80036ba:	2200      	movs	r2, #0
 80036bc:	601a      	str	r2, [r3, #0]
 80036be:	e023      	b.n	8003708 <main+0x2488>
	 				 w5_3[i][j][k] = (float*)malloc(oDim_5 * sizeof(float));
 80036c0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	0099      	lsls	r1, r3, #2
 80036c8:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80036d4:	6812      	ldr	r2, [r2, #0]
 80036d6:	4413      	add	r3, r2
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	4413      	add	r3, r2
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	f507 7321 	add.w	r3, r7, #644	; 0x284
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	18d4      	adds	r4, r2, r3
 80036f0:	4608      	mov	r0, r1
 80036f2:	f00f f89b 	bl	801282c <malloc>
 80036f6:	4603      	mov	r3, r0
 80036f8:	6023      	str	r3, [r4, #0]
	 			  for(int k = 0; k < iDim_w_5; k++) {
 80036fa:	f507 7321 	add.w	r3, r7, #644	; 0x284
 80036fe:	f507 7221 	add.w	r2, r7, #644	; 0x284
 8003702:	6812      	ldr	r2, [r2, #0]
 8003704:	3201      	adds	r2, #1
 8003706:	601a      	str	r2, [r3, #0]
 8003708:	f507 7221 	add.w	r2, r7, #644	; 0x284
 800370c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003710:	6812      	ldr	r2, [r2, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	429a      	cmp	r2, r3
 8003716:	dbd3      	blt.n	80036c0 <main+0x2440>
	 		  for (int j = 0; j < kDim_5; j++) {
 8003718:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800371c:	f507 7222 	add.w	r2, r7, #648	; 0x288
 8003720:	6812      	ldr	r2, [r2, #0]
 8003722:	3201      	adds	r2, #1
 8003724:	601a      	str	r2, [r3, #0]
 8003726:	f507 7222 	add.w	r2, r7, #648	; 0x288
 800372a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800372e:	6812      	ldr	r2, [r2, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	429a      	cmp	r2, r3
 8003734:	dbbf      	blt.n	80036b6 <main+0x2436>
	 	  for (int i = 0; i < kDim_5; i++) {
 8003736:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 800373a:	f507 7223 	add.w	r2, r7, #652	; 0x28c
 800373e:	6812      	ldr	r2, [r2, #0]
 8003740:	3201      	adds	r2, #1
 8003742:	601a      	str	r2, [r3, #0]
 8003744:	f507 7223 	add.w	r2, r7, #652	; 0x28c
 8003748:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800374c:	6812      	ldr	r2, [r2, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	429a      	cmp	r2, r3
 8003752:	dbab      	blt.n	80036ac <main+0x242c>
	 			  }
	 		  }
	 	  }
	 	  for(int i = 0; i < kDim_5; i++) {
 8003754:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8003758:	2200      	movs	r2, #0
 800375a:	601a      	str	r2, [r3, #0]
 800375c:	e087      	b.n	800386e <main+0x25ee>
	 		  for (int j = 0; j < kDim_5; j++) {
 800375e:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 8003762:	2200      	movs	r2, #0
 8003764:	601a      	str	r2, [r3, #0]
 8003766:	e073      	b.n	8003850 <main+0x25d0>
	 			  for (int v = 0; v < oDim_5; v++) {
 8003768:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800376c:	2200      	movs	r2, #0
 800376e:	601a      	str	r2, [r3, #0]
 8003770:	e05f      	b.n	8003832 <main+0x25b2>
	 				  for(int u = 0; u < iDim_w_5; u++) {
 8003772:	f507 731d 	add.w	r3, r7, #628	; 0x274
 8003776:	2200      	movs	r2, #0
 8003778:	601a      	str	r2, [r3, #0]
 800377a:	e04b      	b.n	8003814 <main+0x2594>
 800377c:	3ffffffd 	.word	0x3ffffffd
 8003780:	2400323c 	.word	0x2400323c
 8003784:	08015730 	.word	0x08015730
	 					 w5_3[i][j][u][v] = nw5_3[(i*kDim_5*oDim_5*iDim_w_5)+(j*oDim_5*iDim_w_5)+(v*iDim_w_5)+u];
 8003788:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800378c:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	6812      	ldr	r2, [r2, #0]
 8003794:	fb02 f203 	mul.w	r2, r2, r3
 8003798:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4413      	add	r3, r2
 80037a0:	f107 0274 	add.w	r2, r7, #116	; 0x74
 80037a4:	6812      	ldr	r2, [r2, #0]
 80037a6:	fb02 f203 	mul.w	r2, r2, r3
 80037aa:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4413      	add	r3, r2
 80037b2:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80037b6:	6812      	ldr	r2, [r2, #0]
 80037b8:	fb02 f203 	mul.w	r2, r2, r3
 80037bc:	f507 731d 	add.w	r3, r7, #628	; 0x274
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4413      	add	r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80037ca:	6812      	ldr	r2, [r2, #0]
 80037cc:	441a      	add	r2, r3
 80037ce:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80037da:	6809      	ldr	r1, [r1, #0]
 80037dc:	440b      	add	r3, r1
 80037de:	6819      	ldr	r1, [r3, #0]
 80037e0:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	440b      	add	r3, r1
 80037ea:	6819      	ldr	r1, [r3, #0]
 80037ec:	f507 731d 	add.w	r3, r7, #628	; 0x274
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	440b      	add	r3, r1
 80037f6:	6819      	ldr	r1, [r3, #0]
 80037f8:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	440b      	add	r3, r1
 8003802:	6812      	ldr	r2, [r2, #0]
 8003804:	601a      	str	r2, [r3, #0]
	 				  for(int u = 0; u < iDim_w_5; u++) {
 8003806:	f507 731d 	add.w	r3, r7, #628	; 0x274
 800380a:	f507 721d 	add.w	r2, r7, #628	; 0x274
 800380e:	6812      	ldr	r2, [r2, #0]
 8003810:	3201      	adds	r2, #1
 8003812:	601a      	str	r2, [r3, #0]
 8003814:	f507 721d 	add.w	r2, r7, #628	; 0x274
 8003818:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800381c:	6812      	ldr	r2, [r2, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	429a      	cmp	r2, r3
 8003822:	dbb1      	blt.n	8003788 <main+0x2508>
	 			  for (int v = 0; v < oDim_5; v++) {
 8003824:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8003828:	f507 721e 	add.w	r2, r7, #632	; 0x278
 800382c:	6812      	ldr	r2, [r2, #0]
 800382e:	3201      	adds	r2, #1
 8003830:	601a      	str	r2, [r3, #0]
 8003832:	f507 721e 	add.w	r2, r7, #632	; 0x278
 8003836:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800383a:	6812      	ldr	r2, [r2, #0]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	429a      	cmp	r2, r3
 8003840:	db97      	blt.n	8003772 <main+0x24f2>
	 		  for (int j = 0; j < kDim_5; j++) {
 8003842:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 8003846:	f507 721f 	add.w	r2, r7, #636	; 0x27c
 800384a:	6812      	ldr	r2, [r2, #0]
 800384c:	3201      	adds	r2, #1
 800384e:	601a      	str	r2, [r3, #0]
 8003850:	f507 721f 	add.w	r2, r7, #636	; 0x27c
 8003854:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003858:	6812      	ldr	r2, [r2, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	429a      	cmp	r2, r3
 800385e:	db83      	blt.n	8003768 <main+0x24e8>
	 	  for(int i = 0; i < kDim_5; i++) {
 8003860:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8003864:	f507 7220 	add.w	r2, r7, #640	; 0x280
 8003868:	6812      	ldr	r2, [r2, #0]
 800386a:	3201      	adds	r2, #1
 800386c:	601a      	str	r2, [r3, #0]
 800386e:	f507 7220 	add.w	r2, r7, #640	; 0x280
 8003872:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003876:	6812      	ldr	r2, [r2, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	429a      	cmp	r2, r3
 800387c:	f6ff af6f 	blt.w	800375e <main+0x24de>
	 				  }
	 			  }
	 		  }
	 	  }
	 	  free(nw5_3);
 8003880:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003884:	6818      	ldr	r0, [r3, #0]
 8003886:	f00e ffd9 	bl	801283c <free>

	 	  convAdd(x3, w5_3, x1V2, iHeight, iWidth, kDim_5, iDim_w_5, oDim_5, pSize_5);
 800388a:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800388e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8003892:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8003896:	f107 0090 	add.w	r0, r7, #144	; 0x90
 800389a:	f107 0470 	add.w	r4, r7, #112	; 0x70
 800389e:	6824      	ldr	r4, [r4, #0]
 80038a0:	9404      	str	r4, [sp, #16]
 80038a2:	f107 0474 	add.w	r4, r7, #116	; 0x74
 80038a6:	6824      	ldr	r4, [r4, #0]
 80038a8:	9403      	str	r4, [sp, #12]
 80038aa:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 80038ae:	6824      	ldr	r4, [r4, #0]
 80038b0:	9402      	str	r4, [sp, #8]
 80038b2:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 80038b6:	6824      	ldr	r4, [r4, #0]
 80038b8:	9401      	str	r4, [sp, #4]
 80038ba:	f507 7494 	add.w	r4, r7, #296	; 0x128
 80038be:	6824      	ldr	r4, [r4, #0]
 80038c0:	9400      	str	r4, [sp, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	6812      	ldr	r2, [r2, #0]
 80038c6:	6809      	ldr	r1, [r1, #0]
 80038c8:	6800      	ldr	r0, [r0, #0]
 80038ca:	f7fd fa92 	bl	8000df2 <convAdd>

	      //free(x3);
	      for (int i = 0; i < iHeight; i++) {
 80038ce:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80038d2:	2200      	movs	r2, #0
 80038d4:	601a      	str	r2, [r3, #0]
 80038d6:	e02c      	b.n	8003932 <main+0x26b2>
	    	  for (int j = 0; j < iWidth; j++) {
 80038d8:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 80038dc:	2200      	movs	r2, #0
 80038de:	601a      	str	r2, [r3, #0]
 80038e0:	e018      	b.n	8003914 <main+0x2694>
	    		free(x3[i][j]);
 80038e2:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80038ee:	6812      	ldr	r2, [r2, #0]
 80038f0:	4413      	add	r3, r2
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	4413      	add	r3, r2
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4618      	mov	r0, r3
 8003902:	f00e ff9b 	bl	801283c <free>
	    	  for (int j = 0; j < iWidth; j++) {
 8003906:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 800390a:	f507 721b 	add.w	r2, r7, #620	; 0x26c
 800390e:	6812      	ldr	r2, [r2, #0]
 8003910:	3201      	adds	r2, #1
 8003912:	601a      	str	r2, [r3, #0]
 8003914:	f507 721b 	add.w	r2, r7, #620	; 0x26c
 8003918:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800391c:	6812      	ldr	r2, [r2, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	429a      	cmp	r2, r3
 8003922:	dbde      	blt.n	80038e2 <main+0x2662>
	      for (int i = 0; i < iHeight; i++) {
 8003924:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8003928:	f507 721c 	add.w	r2, r7, #624	; 0x270
 800392c:	6812      	ldr	r2, [r2, #0]
 800392e:	3201      	adds	r2, #1
 8003930:	601a      	str	r2, [r3, #0]
 8003932:	f507 721c 	add.w	r2, r7, #624	; 0x270
 8003936:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800393a:	6812      	ldr	r2, [r2, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	429a      	cmp	r2, r3
 8003940:	dbca      	blt.n	80038d8 <main+0x2658>
	    	  }
	      }
	      for (int i = 0; i < iHeight; i++) {
 8003942:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8003946:	2200      	movs	r2, #0
 8003948:	601a      	str	r2, [r3, #0]
 800394a:	e012      	b.n	8003972 <main+0x26f2>
	      	free(x3[i]);
 800394c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8003958:	6812      	ldr	r2, [r2, #0]
 800395a:	4413      	add	r3, r2
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4618      	mov	r0, r3
 8003960:	f00e ff6c 	bl	801283c <free>
	      for (int i = 0; i < iHeight; i++) {
 8003964:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8003968:	f507 721a 	add.w	r2, r7, #616	; 0x268
 800396c:	6812      	ldr	r2, [r2, #0]
 800396e:	3201      	adds	r2, #1
 8003970:	601a      	str	r2, [r3, #0]
 8003972:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8003976:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800397a:	6812      	ldr	r2, [r2, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	429a      	cmp	r2, r3
 8003980:	dbe4      	blt.n	800394c <main+0x26cc>
	      }
	      free(x3);
 8003982:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003986:	6818      	ldr	r0, [r3, #0]
 8003988:	f00e ff58 	bl	801283c <free>

	 	  //free(w5_3);
	 	  for (int i = 0; i < kDim_5; i++) {
 800398c:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8003990:	2200      	movs	r2, #0
 8003992:	601a      	str	r2, [r3, #0]
 8003994:	e046      	b.n	8003a24 <main+0x27a4>
	 		  for (int j = 0; j < kDim_5; j++) {
 8003996:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800399a:	2200      	movs	r2, #0
 800399c:	601a      	str	r2, [r3, #0]
 800399e:	e032      	b.n	8003a06 <main+0x2786>
	 			  	  for(int k = 0; k < iDim_w_5; k++) {
 80039a0:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 80039a4:	2200      	movs	r2, #0
 80039a6:	601a      	str	r2, [r3, #0]
 80039a8:	e01e      	b.n	80039e8 <main+0x2768>
	 	    			  free(w5_3[i][j][k]);
 80039aa:	f507 7319 	add.w	r3, r7, #612	; 0x264
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80039b6:	6812      	ldr	r2, [r2, #0]
 80039b8:	4413      	add	r3, r2
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	4413      	add	r3, r2
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	4413      	add	r3, r2
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4618      	mov	r0, r3
 80039d6:	f00e ff31 	bl	801283c <free>
	 			  	  for(int k = 0; k < iDim_w_5; k++) {
 80039da:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 80039de:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 80039e2:	6812      	ldr	r2, [r2, #0]
 80039e4:	3201      	adds	r2, #1
 80039e6:	601a      	str	r2, [r3, #0]
 80039e8:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 80039ec:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80039f0:	6812      	ldr	r2, [r2, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	dbd8      	blt.n	80039aa <main+0x272a>
	 		  for (int j = 0; j < kDim_5; j++) {
 80039f8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80039fc:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8003a00:	6812      	ldr	r2, [r2, #0]
 8003a02:	3201      	adds	r2, #1
 8003a04:	601a      	str	r2, [r3, #0]
 8003a06:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8003a0a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003a0e:	6812      	ldr	r2, [r2, #0]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	429a      	cmp	r2, r3
 8003a14:	dbc4      	blt.n	80039a0 <main+0x2720>
	 	  for (int i = 0; i < kDim_5; i++) {
 8003a16:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8003a1a:	f507 7219 	add.w	r2, r7, #612	; 0x264
 8003a1e:	6812      	ldr	r2, [r2, #0]
 8003a20:	3201      	adds	r2, #1
 8003a22:	601a      	str	r2, [r3, #0]
 8003a24:	f507 7219 	add.w	r2, r7, #612	; 0x264
 8003a28:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003a2c:	6812      	ldr	r2, [r2, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	dbb0      	blt.n	8003996 <main+0x2716>
	 	    		  }
	 			}
	 	  }
	 	  for (int i = 0; i < kDim_5; i++) {
 8003a34:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8003a38:	2200      	movs	r2, #0
 8003a3a:	601a      	str	r2, [r3, #0]
 8003a3c:	e02c      	b.n	8003a98 <main+0x2818>
	 	  	  for (int j = 0; j < kDim_5; j++) {
 8003a3e:	f507 7315 	add.w	r3, r7, #596	; 0x254
 8003a42:	2200      	movs	r2, #0
 8003a44:	601a      	str	r2, [r3, #0]
 8003a46:	e018      	b.n	8003a7a <main+0x27fa>
	 	  		  free(w5_3[i][j]);
 8003a48:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003a54:	6812      	ldr	r2, [r2, #0]
 8003a56:	4413      	add	r3, r2
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	f507 7315 	add.w	r3, r7, #596	; 0x254
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	4413      	add	r3, r2
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4618      	mov	r0, r3
 8003a68:	f00e fee8 	bl	801283c <free>
	 	  	  for (int j = 0; j < kDim_5; j++) {
 8003a6c:	f507 7315 	add.w	r3, r7, #596	; 0x254
 8003a70:	f507 7215 	add.w	r2, r7, #596	; 0x254
 8003a74:	6812      	ldr	r2, [r2, #0]
 8003a76:	3201      	adds	r2, #1
 8003a78:	601a      	str	r2, [r3, #0]
 8003a7a:	f507 7215 	add.w	r2, r7, #596	; 0x254
 8003a7e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003a82:	6812      	ldr	r2, [r2, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	dbde      	blt.n	8003a48 <main+0x27c8>
	 	  for (int i = 0; i < kDim_5; i++) {
 8003a8a:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8003a8e:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8003a92:	6812      	ldr	r2, [r2, #0]
 8003a94:	3201      	adds	r2, #1
 8003a96:	601a      	str	r2, [r3, #0]
 8003a98:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8003a9c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003aa0:	6812      	ldr	r2, [r2, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	dbca      	blt.n	8003a3e <main+0x27be>
	 	  	  }
	 	  }
	 	  for (int i = 0; i < kDim_5; i++) {
 8003aa8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8003aac:	2200      	movs	r2, #0
 8003aae:	601a      	str	r2, [r3, #0]
 8003ab0:	e012      	b.n	8003ad8 <main+0x2858>
	 		  free(w5_3[i]);
 8003ab2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003abe:	6812      	ldr	r2, [r2, #0]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f00e feb9 	bl	801283c <free>
	 	  for (int i = 0; i < kDim_5; i++) {
 8003aca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8003ace:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8003ad2:	6812      	ldr	r2, [r2, #0]
 8003ad4:	3201      	adds	r2, #1
 8003ad6:	601a      	str	r2, [r3, #0]
 8003ad8:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8003adc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003ae0:	6812      	ldr	r2, [r2, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	dbe4      	blt.n	8003ab2 <main+0x2832>
	 	  }
	 	  free(w5_3);
 8003ae8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003aec:	6818      	ldr	r0, [r3, #0]
 8003aee:	f00e fea5 	bl	801283c <free>

	 	  ////////////////////////////////////////////////////////////////////////////////////////////////////////////

      // allocate 3d x4
      float*** x4 = (float***)malloc(iHeight * sizeof(float**));
 8003af2:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8003afe:	4618      	mov	r0, r3
 8003b00:	f00e fe94 	bl	801282c <malloc>
 8003b04:	4603      	mov	r3, r0
 8003b06:	6023      	str	r3, [r4, #0]
      for (int i = 0; i < iHeight; i++) {
 8003b08:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	601a      	str	r2, [r3, #0]
 8003b10:	e017      	b.n	8003b42 <main+0x28c2>
    	  x4[i] = (float**)malloc(iWidth * sizeof(float*));
 8003b12:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	0099      	lsls	r1, r3, #2
 8003b1a:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8003b26:	6812      	ldr	r2, [r2, #0]
 8003b28:	18d4      	adds	r4, r2, r3
 8003b2a:	4608      	mov	r0, r1
 8003b2c:	f00e fe7e 	bl	801282c <malloc>
 8003b30:	4603      	mov	r3, r0
 8003b32:	6023      	str	r3, [r4, #0]
      for (int i = 0; i < iHeight; i++) {
 8003b34:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8003b38:	f507 7213 	add.w	r2, r7, #588	; 0x24c
 8003b3c:	6812      	ldr	r2, [r2, #0]
 8003b3e:	3201      	adds	r2, #1
 8003b40:	601a      	str	r2, [r3, #0]
 8003b42:	f507 7213 	add.w	r2, r7, #588	; 0x24c
 8003b46:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8003b4a:	6812      	ldr	r2, [r2, #0]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	dbdf      	blt.n	8003b12 <main+0x2892>
      }
      for (int i = 0; i < iHeight; i++) {
 8003b52:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8003b56:	2200      	movs	r2, #0
 8003b58:	601a      	str	r2, [r3, #0]
 8003b5a:	e031      	b.n	8003bc0 <main+0x2940>
    	  for (int j = 0; j < iWidth; j++) {
 8003b5c:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8003b60:	2200      	movs	r2, #0
 8003b62:	601a      	str	r2, [r3, #0]
 8003b64:	e01d      	b.n	8003ba2 <main+0x2922>
    		  x4[i][j] = (float*)malloc(oDim * sizeof(float));
 8003b66:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	0099      	lsls	r1, r3, #2
 8003b6e:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8003b7a:	6812      	ldr	r2, [r2, #0]
 8003b7c:	4413      	add	r3, r2
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	18d4      	adds	r4, r2, r3
 8003b8a:	4608      	mov	r0, r1
 8003b8c:	f00e fe4e 	bl	801282c <malloc>
 8003b90:	4603      	mov	r3, r0
 8003b92:	6023      	str	r3, [r4, #0]
    	  for (int j = 0; j < iWidth; j++) {
 8003b94:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8003b98:	f507 7211 	add.w	r2, r7, #580	; 0x244
 8003b9c:	6812      	ldr	r2, [r2, #0]
 8003b9e:	3201      	adds	r2, #1
 8003ba0:	601a      	str	r2, [r3, #0]
 8003ba2:	f507 7211 	add.w	r2, r7, #580	; 0x244
 8003ba6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8003baa:	6812      	ldr	r2, [r2, #0]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	dbd9      	blt.n	8003b66 <main+0x28e6>
      for (int i = 0; i < iHeight; i++) {
 8003bb2:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8003bb6:	f507 7212 	add.w	r2, r7, #584	; 0x248
 8003bba:	6812      	ldr	r2, [r2, #0]
 8003bbc:	3201      	adds	r2, #1
 8003bbe:	601a      	str	r2, [r3, #0]
 8003bc0:	f507 7212 	add.w	r2, r7, #584	; 0x248
 8003bc4:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8003bc8:	6812      	ldr	r2, [r2, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	dbc5      	blt.n	8003b5c <main+0x28dc>
    	  }
      }

      conv(x2x3, w4, b4, x4, iHeight, iWidth, kDim, iDim, oDim, pSize);
 8003bd0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003bd4:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8003bd8:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8003bdc:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8003be0:	f107 04bc 	add.w	r4, r7, #188	; 0xbc
 8003be4:	6824      	ldr	r4, [r4, #0]
 8003be6:	9405      	str	r4, [sp, #20]
 8003be8:	f107 04c0 	add.w	r4, r7, #192	; 0xc0
 8003bec:	6824      	ldr	r4, [r4, #0]
 8003bee:	9404      	str	r4, [sp, #16]
 8003bf0:	f107 04c4 	add.w	r4, r7, #196	; 0xc4
 8003bf4:	6824      	ldr	r4, [r4, #0]
 8003bf6:	9403      	str	r4, [sp, #12]
 8003bf8:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 8003bfc:	6824      	ldr	r4, [r4, #0]
 8003bfe:	9402      	str	r4, [sp, #8]
 8003c00:	f507 7494 	add.w	r4, r7, #296	; 0x128
 8003c04:	6824      	ldr	r4, [r4, #0]
 8003c06:	9401      	str	r4, [sp, #4]
 8003c08:	f507 7496 	add.w	r4, r7, #300	; 0x12c
 8003c0c:	6824      	ldr	r4, [r4, #0]
 8003c0e:	9400      	str	r4, [sp, #0]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	6812      	ldr	r2, [r2, #0]
 8003c14:	6809      	ldr	r1, [r1, #0]
 8003c16:	6800      	ldr	r0, [r0, #0]
 8003c18:	f7fc fce6 	bl	80005e8 <conv>

      // free(w4);
      for (int i = 0; i < kDim; i++) {
 8003c1c:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8003c20:	2200      	movs	r2, #0
 8003c22:	601a      	str	r2, [r3, #0]
 8003c24:	e046      	b.n	8003cb4 <main+0x2a34>
      	for (int j = 0; j < kDim; j++) {
 8003c26:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	601a      	str	r2, [r3, #0]
 8003c2e:	e032      	b.n	8003c96 <main+0x2a16>
      		  for(int k = 0; k < iDim; k++) {
 8003c30:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003c34:	2200      	movs	r2, #0
 8003c36:	601a      	str	r2, [r3, #0]
 8003c38:	e01e      	b.n	8003c78 <main+0x29f8>
      			  free(w4[i][j][k]);
 8003c3a:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003c46:	6812      	ldr	r2, [r2, #0]
 8003c48:	4413      	add	r3, r2
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	4413      	add	r3, r2
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	4413      	add	r3, r2
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4618      	mov	r0, r3
 8003c66:	f00e fde9 	bl	801283c <free>
      		  for(int k = 0; k < iDim; k++) {
 8003c6a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003c6e:	f507 720e 	add.w	r2, r7, #568	; 0x238
 8003c72:	6812      	ldr	r2, [r2, #0]
 8003c74:	3201      	adds	r2, #1
 8003c76:	601a      	str	r2, [r3, #0]
 8003c78:	f507 720e 	add.w	r2, r7, #568	; 0x238
 8003c7c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003c80:	6812      	ldr	r2, [r2, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	dbd8      	blt.n	8003c3a <main+0x29ba>
      	for (int j = 0; j < kDim; j++) {
 8003c88:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8003c8c:	f507 720f 	add.w	r2, r7, #572	; 0x23c
 8003c90:	6812      	ldr	r2, [r2, #0]
 8003c92:	3201      	adds	r2, #1
 8003c94:	601a      	str	r2, [r3, #0]
 8003c96:	f507 720f 	add.w	r2, r7, #572	; 0x23c
 8003c9a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003c9e:	6812      	ldr	r2, [r2, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	dbc4      	blt.n	8003c30 <main+0x29b0>
      for (int i = 0; i < kDim; i++) {
 8003ca6:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8003caa:	f507 7210 	add.w	r2, r7, #576	; 0x240
 8003cae:	6812      	ldr	r2, [r2, #0]
 8003cb0:	3201      	adds	r2, #1
 8003cb2:	601a      	str	r2, [r3, #0]
 8003cb4:	f507 7210 	add.w	r2, r7, #576	; 0x240
 8003cb8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003cbc:	6812      	ldr	r2, [r2, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	dbb0      	blt.n	8003c26 <main+0x29a6>
      		  }
  		}
      }
      for (int i = 0; i < kDim; i++) {
 8003cc4:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8003cc8:	2200      	movs	r2, #0
 8003cca:	601a      	str	r2, [r3, #0]
 8003ccc:	e02c      	b.n	8003d28 <main+0x2aa8>
    	  for (int j = 0; j < kDim; j++) {
 8003cce:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	601a      	str	r2, [r3, #0]
 8003cd6:	e018      	b.n	8003d0a <main+0x2a8a>
    		  free(w4[i][j]);
 8003cd8:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003ce4:	6812      	ldr	r2, [r2, #0]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	4413      	add	r3, r2
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f00e fda0 	bl	801283c <free>
    	  for (int j = 0; j < kDim; j++) {
 8003cfc:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8003d00:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8003d04:	6812      	ldr	r2, [r2, #0]
 8003d06:	3201      	adds	r2, #1
 8003d08:	601a      	str	r2, [r3, #0]
 8003d0a:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8003d0e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003d12:	6812      	ldr	r2, [r2, #0]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	dbde      	blt.n	8003cd8 <main+0x2a58>
      for (int i = 0; i < kDim; i++) {
 8003d1a:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8003d1e:	f507 720d 	add.w	r2, r7, #564	; 0x234
 8003d22:	6812      	ldr	r2, [r2, #0]
 8003d24:	3201      	adds	r2, #1
 8003d26:	601a      	str	r2, [r3, #0]
 8003d28:	f507 720d 	add.w	r2, r7, #564	; 0x234
 8003d2c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003d30:	6812      	ldr	r2, [r2, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	dbca      	blt.n	8003cce <main+0x2a4e>
    	  }
      }
      for (int i = 0; i < kDim; i++) {
 8003d38:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	601a      	str	r2, [r3, #0]
 8003d40:	e012      	b.n	8003d68 <main+0x2ae8>
      	free(w4[i]);
 8003d42:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003d4e:	6812      	ldr	r2, [r2, #0]
 8003d50:	4413      	add	r3, r2
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4618      	mov	r0, r3
 8003d56:	f00e fd71 	bl	801283c <free>
      for (int i = 0; i < kDim; i++) {
 8003d5a:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 8003d5e:	f507 720b 	add.w	r2, r7, #556	; 0x22c
 8003d62:	6812      	ldr	r2, [r2, #0]
 8003d64:	3201      	adds	r2, #1
 8003d66:	601a      	str	r2, [r3, #0]
 8003d68:	f507 720b 	add.w	r2, r7, #556	; 0x22c
 8003d6c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003d70:	6812      	ldr	r2, [r2, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	dbe4      	blt.n	8003d42 <main+0x2ac2>
      }
      free(w4);
 8003d78:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003d7c:	6818      	ldr	r0, [r3, #0]
 8003d7e:	f00e fd5d 	bl	801283c <free>

      free(b4);
 8003d82:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003d86:	6818      	ldr	r0, [r3, #0]
 8003d88:	f00e fd58 	bl	801283c <free>
      /////////////////////////////////////////////////////////// e_conv5

      //////////////////////////////////////////////////////////////////////////////////////////////////////////// 5_2 "Add" operation

      // allocate 3d x2V2
      float*** x2V2 = (float***)malloc(iHeight * sizeof(float**));
 8003d8c:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f00e fd47 	bl	801282c <malloc>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	6023      	str	r3, [r4, #0]
      for (int i = 0; i < iHeight; i++) {
 8003da2:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8003da6:	2200      	movs	r2, #0
 8003da8:	601a      	str	r2, [r3, #0]
 8003daa:	e017      	b.n	8003ddc <main+0x2b5c>
    	  x2V2[i] = (float**)malloc(iWidth * sizeof(float*));
 8003dac:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	0099      	lsls	r1, r3, #2
 8003db4:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003dc0:	6812      	ldr	r2, [r2, #0]
 8003dc2:	18d4      	adds	r4, r2, r3
 8003dc4:	4608      	mov	r0, r1
 8003dc6:	f00e fd31 	bl	801282c <malloc>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	6023      	str	r3, [r4, #0]
      for (int i = 0; i < iHeight; i++) {
 8003dce:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8003dd2:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8003dd6:	6812      	ldr	r2, [r2, #0]
 8003dd8:	3201      	adds	r2, #1
 8003dda:	601a      	str	r2, [r3, #0]
 8003ddc:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8003de0:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8003de4:	6812      	ldr	r2, [r2, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	dbdf      	blt.n	8003dac <main+0x2b2c>
      }
      for (int i = 0; i < iHeight; i++) {
 8003dec:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8003df0:	2200      	movs	r2, #0
 8003df2:	601a      	str	r2, [r3, #0]
 8003df4:	e031      	b.n	8003e5a <main+0x2bda>
    	  for (int j = 0; j < iWidth; j++) {
 8003df6:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	601a      	str	r2, [r3, #0]
 8003dfe:	e01d      	b.n	8003e3c <main+0x2bbc>
    		  x2V2[i][j] = (float*)malloc(oDim * sizeof(float));
 8003e00:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	0099      	lsls	r1, r3, #2
 8003e08:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003e14:	6812      	ldr	r2, [r2, #0]
 8003e16:	4413      	add	r3, r2
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	18d4      	adds	r4, r2, r3
 8003e24:	4608      	mov	r0, r1
 8003e26:	f00e fd01 	bl	801282c <malloc>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	6023      	str	r3, [r4, #0]
    	  for (int j = 0; j < iWidth; j++) {
 8003e2e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8003e32:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8003e36:	6812      	ldr	r2, [r2, #0]
 8003e38:	3201      	adds	r2, #1
 8003e3a:	601a      	str	r2, [r3, #0]
 8003e3c:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8003e40:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8003e44:	6812      	ldr	r2, [r2, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	dbd9      	blt.n	8003e00 <main+0x2b80>
      for (int i = 0; i < iHeight; i++) {
 8003e4c:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8003e50:	f507 7209 	add.w	r2, r7, #548	; 0x224
 8003e54:	6812      	ldr	r2, [r2, #0]
 8003e56:	3201      	adds	r2, #1
 8003e58:	601a      	str	r2, [r3, #0]
 8003e5a:	f507 7209 	add.w	r2, r7, #548	; 0x224
 8003e5e:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8003e62:	6812      	ldr	r2, [r2, #0]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	dbc5      	blt.n	8003df6 <main+0x2b76>
    	  }
      }

      for(int k=0; k<oDim; k++) {
 8003e6a:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8003e6e:	2200      	movs	r2, #0
 8003e70:	601a      	str	r2, [r3, #0]
 8003e72:	e058      	b.n	8003f26 <main+0x2ca6>
    	  for(int i=0; i<iHeight; i++) {
 8003e74:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003e78:	2200      	movs	r2, #0
 8003e7a:	601a      	str	r2, [r3, #0]
 8003e7c:	e044      	b.n	8003f08 <main+0x2c88>
    		  for(int j=0; j<iWidth; j++) {
 8003e7e:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8003e82:	2200      	movs	r2, #0
 8003e84:	601a      	str	r2, [r3, #0]
 8003e86:	e030      	b.n	8003eea <main+0x2c6a>
    			  x2V2[i][j][k] = x2x3[i][j][k];
 8003e88:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003e94:	6812      	ldr	r2, [r2, #0]
 8003e96:	4413      	add	r3, r2
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	4413      	add	r3, r2
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	441a      	add	r2, r3
 8003eb0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8003ebc:	6809      	ldr	r1, [r1, #0]
 8003ebe:	440b      	add	r3, r1
 8003ec0:	6819      	ldr	r1, [r3, #0]
 8003ec2:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	440b      	add	r3, r1
 8003ecc:	6819      	ldr	r1, [r3, #0]
 8003ece:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	440b      	add	r3, r1
 8003ed8:	6812      	ldr	r2, [r2, #0]
 8003eda:	601a      	str	r2, [r3, #0]
    		  for(int j=0; j<iWidth; j++) {
 8003edc:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8003ee0:	f507 7205 	add.w	r2, r7, #532	; 0x214
 8003ee4:	6812      	ldr	r2, [r2, #0]
 8003ee6:	3201      	adds	r2, #1
 8003ee8:	601a      	str	r2, [r3, #0]
 8003eea:	f507 7205 	add.w	r2, r7, #532	; 0x214
 8003eee:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8003ef2:	6812      	ldr	r2, [r2, #0]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	dbc6      	blt.n	8003e88 <main+0x2c08>
    	  for(int i=0; i<iHeight; i++) {
 8003efa:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003efe:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8003f02:	6812      	ldr	r2, [r2, #0]
 8003f04:	3201      	adds	r2, #1
 8003f06:	601a      	str	r2, [r3, #0]
 8003f08:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8003f0c:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8003f10:	6812      	ldr	r2, [r2, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	429a      	cmp	r2, r3
 8003f16:	dbb2      	blt.n	8003e7e <main+0x2bfe>
      for(int k=0; k<oDim; k++) {
 8003f18:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8003f1c:	f507 7207 	add.w	r2, r7, #540	; 0x21c
 8003f20:	6812      	ldr	r2, [r2, #0]
 8003f22:	3201      	adds	r2, #1
 8003f24:	601a      	str	r2, [r3, #0]
 8003f26:	f507 7207 	add.w	r2, r7, #540	; 0x21c
 8003f2a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003f2e:	6812      	ldr	r2, [r2, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	db9e      	blt.n	8003e74 <main+0x2bf4>
    		  }
    	  }
      }

      //free x2x3
      for (int i = 0; i < iHeight; i++) {
 8003f36:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	601a      	str	r2, [r3, #0]
 8003f3e:	e02c      	b.n	8003f9a <main+0x2d1a>
    	  for (int j = 0; j < iWidth; j++) {
 8003f40:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8003f44:	2200      	movs	r2, #0
 8003f46:	601a      	str	r2, [r3, #0]
 8003f48:	e018      	b.n	8003f7c <main+0x2cfc>
    		free(x2x3[i][j]);
 8003f4a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003f56:	6812      	ldr	r2, [r2, #0]
 8003f58:	4413      	add	r3, r2
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	4413      	add	r3, r2
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f00e fc67 	bl	801283c <free>
    	  for (int j = 0; j < iWidth; j++) {
 8003f6e:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8003f72:	f507 7203 	add.w	r2, r7, #524	; 0x20c
 8003f76:	6812      	ldr	r2, [r2, #0]
 8003f78:	3201      	adds	r2, #1
 8003f7a:	601a      	str	r2, [r3, #0]
 8003f7c:	f507 7203 	add.w	r2, r7, #524	; 0x20c
 8003f80:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8003f84:	6812      	ldr	r2, [r2, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	dbde      	blt.n	8003f4a <main+0x2cca>
      for (int i = 0; i < iHeight; i++) {
 8003f8c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8003f90:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8003f94:	6812      	ldr	r2, [r2, #0]
 8003f96:	3201      	adds	r2, #1
 8003f98:	601a      	str	r2, [r3, #0]
 8003f9a:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8003f9e:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8003fa2:	6812      	ldr	r2, [r2, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	dbca      	blt.n	8003f40 <main+0x2cc0>
    	  }
      }
      for (int i = 0; i < iHeight; i++) {
 8003faa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fae:	2200      	movs	r2, #0
 8003fb0:	601a      	str	r2, [r3, #0]
 8003fb2:	e012      	b.n	8003fda <main+0x2d5a>
      	free(x2x3[i]);
 8003fb4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003fc0:	6812      	ldr	r2, [r2, #0]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f00e fc38 	bl	801283c <free>
      for (int i = 0; i < iHeight; i++) {
 8003fcc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fd0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003fd4:	6812      	ldr	r2, [r2, #0]
 8003fd6:	3201      	adds	r2, #1
 8003fd8:	601a      	str	r2, [r3, #0]
 8003fda:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003fde:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8003fe2:	6812      	ldr	r2, [r2, #0]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	dbe4      	blt.n	8003fb4 <main+0x2d34>
      }
      free(x2x3);
 8003fea:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003fee:	6818      	ldr	r0, [r3, #0]
 8003ff0:	f00e fc24 	bl	801283c <free>


      sprintf(name,"w5_2.txt");
 8003ff4:	4a75      	ldr	r2, [pc, #468]	; (80041cc <main+0x2f4c>)
 8003ff6:	4b76      	ldr	r3, [pc, #472]	; (80041d0 <main+0x2f50>)
 8003ff8:	cb03      	ldmia	r3!, {r0, r1}
 8003ffa:	6010      	str	r0, [r2, #0]
 8003ffc:	6051      	str	r1, [r2, #4]
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	7213      	strb	r3, [r2, #8]
	  float * nw5_2 = read_txt(name, 81);
 8004002:	2151      	movs	r1, #81	; 0x51
 8004004:	4871      	ldr	r0, [pc, #452]	; (80041cc <main+0x2f4c>)
 8004006:	f00e f843 	bl	8012090 <read_txt>
 800400a:	4602      	mov	r2, r0
 800400c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004010:	601a      	str	r2, [r3, #0]

	  // allocate 4d w5_2
	  float**** w5_2 = (float****)malloc(kDim_5 * sizeof(float***));
 8004012:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	f107 0448 	add.w	r4, r7, #72	; 0x48
 800401e:	4618      	mov	r0, r3
 8004020:	f00e fc04 	bl	801282c <malloc>
 8004024:	4603      	mov	r3, r0
 8004026:	6023      	str	r3, [r4, #0]
	  for (int i = 0; i < kDim_5; i++) {
 8004028:	f507 7301 	add.w	r3, r7, #516	; 0x204
 800402c:	2200      	movs	r2, #0
 800402e:	601a      	str	r2, [r3, #0]
 8004030:	e017      	b.n	8004062 <main+0x2de2>
		  w5_2[i] = (float***)malloc(kDim_5 * sizeof(float**));
 8004032:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	0099      	lsls	r1, r3, #2
 800403a:	f507 7301 	add.w	r3, r7, #516	; 0x204
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004046:	6812      	ldr	r2, [r2, #0]
 8004048:	18d4      	adds	r4, r2, r3
 800404a:	4608      	mov	r0, r1
 800404c:	f00e fbee 	bl	801282c <malloc>
 8004050:	4603      	mov	r3, r0
 8004052:	6023      	str	r3, [r4, #0]
	  for (int i = 0; i < kDim_5; i++) {
 8004054:	f507 7301 	add.w	r3, r7, #516	; 0x204
 8004058:	f507 7201 	add.w	r2, r7, #516	; 0x204
 800405c:	6812      	ldr	r2, [r2, #0]
 800405e:	3201      	adds	r2, #1
 8004060:	601a      	str	r2, [r3, #0]
 8004062:	f507 7201 	add.w	r2, r7, #516	; 0x204
 8004066:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800406a:	6812      	ldr	r2, [r2, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	429a      	cmp	r2, r3
 8004070:	dbdf      	blt.n	8004032 <main+0x2db2>
	  }
	  for (int i = 0; i < kDim_5; i++) {
 8004072:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004076:	2200      	movs	r2, #0
 8004078:	601a      	str	r2, [r3, #0]
 800407a:	e031      	b.n	80040e0 <main+0x2e60>
		  for (int j = 0; j < kDim_5; j++) {
 800407c:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8004080:	2200      	movs	r2, #0
 8004082:	601a      	str	r2, [r3, #0]
 8004084:	e01d      	b.n	80040c2 <main+0x2e42>
			  w5_2[i][j] = (float**)malloc(iDim_w_5 * sizeof(float*));
 8004086:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	0099      	lsls	r1, r3, #2
 800408e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800409a:	6812      	ldr	r2, [r2, #0]
 800409c:	4413      	add	r3, r2
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	18d4      	adds	r4, r2, r3
 80040aa:	4608      	mov	r0, r1
 80040ac:	f00e fbbe 	bl	801282c <malloc>
 80040b0:	4603      	mov	r3, r0
 80040b2:	6023      	str	r3, [r4, #0]
		  for (int j = 0; j < kDim_5; j++) {
 80040b4:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 80040b8:	f507 72fe 	add.w	r2, r7, #508	; 0x1fc
 80040bc:	6812      	ldr	r2, [r2, #0]
 80040be:	3201      	adds	r2, #1
 80040c0:	601a      	str	r2, [r3, #0]
 80040c2:	f507 72fe 	add.w	r2, r7, #508	; 0x1fc
 80040c6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80040ca:	6812      	ldr	r2, [r2, #0]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	dbd9      	blt.n	8004086 <main+0x2e06>
	  for (int i = 0; i < kDim_5; i++) {
 80040d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040d6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80040da:	6812      	ldr	r2, [r2, #0]
 80040dc:	3201      	adds	r2, #1
 80040de:	601a      	str	r2, [r3, #0]
 80040e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80040e4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80040e8:	6812      	ldr	r2, [r2, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	dbc5      	blt.n	800407c <main+0x2dfc>
		  }
	  }
	  for (int i = 0; i < kDim_5; i++) {
 80040f0:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80040f4:	2200      	movs	r2, #0
 80040f6:	601a      	str	r2, [r3, #0]
 80040f8:	e04b      	b.n	8004192 <main+0x2f12>
		  for (int j = 0; j < kDim_5; j++) {
 80040fa:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 80040fe:	2200      	movs	r2, #0
 8004100:	601a      	str	r2, [r3, #0]
 8004102:	e037      	b.n	8004174 <main+0x2ef4>
			  for(int k = 0; k < iDim_w_5; k++) {
 8004104:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8004108:	2200      	movs	r2, #0
 800410a:	601a      	str	r2, [r3, #0]
 800410c:	e023      	b.n	8004156 <main+0x2ed6>
				  w5_2[i][j][k] = (float*)malloc(oDim_5 * sizeof(float));
 800410e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	0099      	lsls	r1, r3, #2
 8004116:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004122:	6812      	ldr	r2, [r2, #0]
 8004124:	4413      	add	r3, r2
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	4413      	add	r3, r2
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	18d4      	adds	r4, r2, r3
 800413e:	4608      	mov	r0, r1
 8004140:	f00e fb74 	bl	801282c <malloc>
 8004144:	4603      	mov	r3, r0
 8004146:	6023      	str	r3, [r4, #0]
			  for(int k = 0; k < iDim_w_5; k++) {
 8004148:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800414c:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 8004150:	6812      	ldr	r2, [r2, #0]
 8004152:	3201      	adds	r2, #1
 8004154:	601a      	str	r2, [r3, #0]
 8004156:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 800415a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800415e:	6812      	ldr	r2, [r2, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	429a      	cmp	r2, r3
 8004164:	dbd3      	blt.n	800410e <main+0x2e8e>
		  for (int j = 0; j < kDim_5; j++) {
 8004166:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 800416a:	f507 72fa 	add.w	r2, r7, #500	; 0x1f4
 800416e:	6812      	ldr	r2, [r2, #0]
 8004170:	3201      	adds	r2, #1
 8004172:	601a      	str	r2, [r3, #0]
 8004174:	f507 72fa 	add.w	r2, r7, #500	; 0x1f4
 8004178:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800417c:	6812      	ldr	r2, [r2, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	429a      	cmp	r2, r3
 8004182:	dbbf      	blt.n	8004104 <main+0x2e84>
	  for (int i = 0; i < kDim_5; i++) {
 8004184:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8004188:	f507 72fc 	add.w	r2, r7, #504	; 0x1f8
 800418c:	6812      	ldr	r2, [r2, #0]
 800418e:	3201      	adds	r2, #1
 8004190:	601a      	str	r2, [r3, #0]
 8004192:	f507 72fc 	add.w	r2, r7, #504	; 0x1f8
 8004196:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800419a:	6812      	ldr	r2, [r2, #0]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	429a      	cmp	r2, r3
 80041a0:	dbab      	blt.n	80040fa <main+0x2e7a>
			  }
		  }
	  }
	  for(int i = 0; i < kDim_5; i++) {
 80041a2:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 80041a6:	2200      	movs	r2, #0
 80041a8:	601a      	str	r2, [r3, #0]
 80041aa:	e086      	b.n	80042ba <main+0x303a>
		  for (int j = 0; j < kDim_5; j++) {
 80041ac:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80041b0:	2200      	movs	r2, #0
 80041b2:	601a      	str	r2, [r3, #0]
 80041b4:	e072      	b.n	800429c <main+0x301c>
			  for (int v = 0; v < oDim_5; v++) {
 80041b6:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 80041ba:	2200      	movs	r2, #0
 80041bc:	601a      	str	r2, [r3, #0]
 80041be:	e05e      	b.n	800427e <main+0x2ffe>
				  for(int u = 0; u < iDim_w_5; u++) {
 80041c0:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80041c4:	2200      	movs	r2, #0
 80041c6:	601a      	str	r2, [r3, #0]
 80041c8:	e04a      	b.n	8004260 <main+0x2fe0>
 80041ca:	bf00      	nop
 80041cc:	2400323c 	.word	0x2400323c
 80041d0:	0801573c 	.word	0x0801573c
					  w5_2[i][j][u][v] = nw5_2[(i*kDim_5*oDim_5*iDim_w_5)+(j*oDim_5*iDim_w_5)+(v*iDim_w_5)+u];
 80041d4:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 80041d8:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	6812      	ldr	r2, [r2, #0]
 80041e0:	fb02 f203 	mul.w	r2, r2, r3
 80041e4:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4413      	add	r3, r2
 80041ec:	f107 0274 	add.w	r2, r7, #116	; 0x74
 80041f0:	6812      	ldr	r2, [r2, #0]
 80041f2:	fb02 f203 	mul.w	r2, r2, r3
 80041f6:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4413      	add	r3, r2
 80041fe:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8004202:	6812      	ldr	r2, [r2, #0]
 8004204:	fb02 f203 	mul.w	r2, r2, r3
 8004208:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4413      	add	r3, r2
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8004216:	6812      	ldr	r2, [r2, #0]
 8004218:	441a      	add	r2, r3
 800421a:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8004226:	6809      	ldr	r1, [r1, #0]
 8004228:	440b      	add	r3, r1
 800422a:	6819      	ldr	r1, [r3, #0]
 800422c:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	440b      	add	r3, r1
 8004236:	6819      	ldr	r1, [r3, #0]
 8004238:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	440b      	add	r3, r1
 8004242:	6819      	ldr	r1, [r3, #0]
 8004244:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	440b      	add	r3, r1
 800424e:	6812      	ldr	r2, [r2, #0]
 8004250:	601a      	str	r2, [r3, #0]
				  for(int u = 0; u < iDim_w_5; u++) {
 8004252:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8004256:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 800425a:	6812      	ldr	r2, [r2, #0]
 800425c:	3201      	adds	r2, #1
 800425e:	601a      	str	r2, [r3, #0]
 8004260:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 8004264:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004268:	6812      	ldr	r2, [r2, #0]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	429a      	cmp	r2, r3
 800426e:	dbb1      	blt.n	80041d4 <main+0x2f54>
			  for (int v = 0; v < oDim_5; v++) {
 8004270:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 8004274:	f507 72f2 	add.w	r2, r7, #484	; 0x1e4
 8004278:	6812      	ldr	r2, [r2, #0]
 800427a:	3201      	adds	r2, #1
 800427c:	601a      	str	r2, [r3, #0]
 800427e:	f507 72f2 	add.w	r2, r7, #484	; 0x1e4
 8004282:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004286:	6812      	ldr	r2, [r2, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	429a      	cmp	r2, r3
 800428c:	db98      	blt.n	80041c0 <main+0x2f40>
		  for (int j = 0; j < kDim_5; j++) {
 800428e:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8004292:	f507 72f4 	add.w	r2, r7, #488	; 0x1e8
 8004296:	6812      	ldr	r2, [r2, #0]
 8004298:	3201      	adds	r2, #1
 800429a:	601a      	str	r2, [r3, #0]
 800429c:	f507 72f4 	add.w	r2, r7, #488	; 0x1e8
 80042a0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80042a4:	6812      	ldr	r2, [r2, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	db84      	blt.n	80041b6 <main+0x2f36>
	  for(int i = 0; i < kDim_5; i++) {
 80042ac:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 80042b0:	f507 72f6 	add.w	r2, r7, #492	; 0x1ec
 80042b4:	6812      	ldr	r2, [r2, #0]
 80042b6:	3201      	adds	r2, #1
 80042b8:	601a      	str	r2, [r3, #0]
 80042ba:	f507 72f6 	add.w	r2, r7, #492	; 0x1ec
 80042be:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80042c2:	6812      	ldr	r2, [r2, #0]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	f6ff af70 	blt.w	80041ac <main+0x2f2c>
				  }
			  }
		  }
	  }
	  free(nw5_2);
 80042cc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80042d0:	6818      	ldr	r0, [r3, #0]
 80042d2:	f00e fab3 	bl	801283c <free>

	  convAdd(x2V2, w5_2, x1V2, iHeight, iWidth, kDim_5, iDim_w_5, oDim_5, pSize_5);
 80042d6:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 80042da:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80042de:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80042e2:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80042e6:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80042ea:	6824      	ldr	r4, [r4, #0]
 80042ec:	9404      	str	r4, [sp, #16]
 80042ee:	f107 0474 	add.w	r4, r7, #116	; 0x74
 80042f2:	6824      	ldr	r4, [r4, #0]
 80042f4:	9403      	str	r4, [sp, #12]
 80042f6:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 80042fa:	6824      	ldr	r4, [r4, #0]
 80042fc:	9402      	str	r4, [sp, #8]
 80042fe:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 8004302:	6824      	ldr	r4, [r4, #0]
 8004304:	9401      	str	r4, [sp, #4]
 8004306:	f507 7494 	add.w	r4, r7, #296	; 0x128
 800430a:	6824      	ldr	r4, [r4, #0]
 800430c:	9400      	str	r4, [sp, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	6812      	ldr	r2, [r2, #0]
 8004312:	6809      	ldr	r1, [r1, #0]
 8004314:	6800      	ldr	r0, [r0, #0]
 8004316:	f7fc fd6c 	bl	8000df2 <convAdd>

	  //free(x2V2);
	  for (int i = 0; i < iHeight; i++) {
 800431a:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 800431e:	2200      	movs	r2, #0
 8004320:	601a      	str	r2, [r3, #0]
 8004322:	e02c      	b.n	800437e <main+0x30fe>
		  for (int j = 0; j < iWidth; j++) {
 8004324:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8004328:	2200      	movs	r2, #0
 800432a:	601a      	str	r2, [r3, #0]
 800432c:	e018      	b.n	8004360 <main+0x30e0>
			free(x2V2[i][j]);
 800432e:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800433a:	6812      	ldr	r2, [r2, #0]
 800433c:	4413      	add	r3, r2
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	4413      	add	r3, r2
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4618      	mov	r0, r3
 800434e:	f00e fa75 	bl	801283c <free>
		  for (int j = 0; j < iWidth; j++) {
 8004352:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8004356:	f507 72ec 	add.w	r2, r7, #472	; 0x1d8
 800435a:	6812      	ldr	r2, [r2, #0]
 800435c:	3201      	adds	r2, #1
 800435e:	601a      	str	r2, [r3, #0]
 8004360:	f507 72ec 	add.w	r2, r7, #472	; 0x1d8
 8004364:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8004368:	6812      	ldr	r2, [r2, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	429a      	cmp	r2, r3
 800436e:	dbde      	blt.n	800432e <main+0x30ae>
	  for (int i = 0; i < iHeight; i++) {
 8004370:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8004374:	f507 72ee 	add.w	r2, r7, #476	; 0x1dc
 8004378:	6812      	ldr	r2, [r2, #0]
 800437a:	3201      	adds	r2, #1
 800437c:	601a      	str	r2, [r3, #0]
 800437e:	f507 72ee 	add.w	r2, r7, #476	; 0x1dc
 8004382:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8004386:	6812      	ldr	r2, [r2, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	429a      	cmp	r2, r3
 800438c:	dbca      	blt.n	8004324 <main+0x30a4>
		  }
	  }
	  for (int i = 0; i < iHeight; i++) {
 800438e:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 8004392:	2200      	movs	r2, #0
 8004394:	601a      	str	r2, [r3, #0]
 8004396:	e012      	b.n	80043be <main+0x313e>
		free(x2V2[i]);
 8004398:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80043a4:	6812      	ldr	r2, [r2, #0]
 80043a6:	4413      	add	r3, r2
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4618      	mov	r0, r3
 80043ac:	f00e fa46 	bl	801283c <free>
	  for (int i = 0; i < iHeight; i++) {
 80043b0:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 80043b4:	f507 72ea 	add.w	r2, r7, #468	; 0x1d4
 80043b8:	6812      	ldr	r2, [r2, #0]
 80043ba:	3201      	adds	r2, #1
 80043bc:	601a      	str	r2, [r3, #0]
 80043be:	f507 72ea 	add.w	r2, r7, #468	; 0x1d4
 80043c2:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 80043c6:	6812      	ldr	r2, [r2, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	dbe4      	blt.n	8004398 <main+0x3118>
	  }
	  free(x2V2);
 80043ce:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80043d2:	6818      	ldr	r0, [r3, #0]
 80043d4:	f00e fa32 	bl	801283c <free>

	  //free(w5_2);
	  for (int i = 0; i < kDim_5; i++) {
 80043d8:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80043dc:	2200      	movs	r2, #0
 80043de:	601a      	str	r2, [r3, #0]
 80043e0:	e046      	b.n	8004470 <main+0x31f0>
		  for (int j = 0; j < kDim_5; j++) {
 80043e2:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 80043e6:	2200      	movs	r2, #0
 80043e8:	601a      	str	r2, [r3, #0]
 80043ea:	e032      	b.n	8004452 <main+0x31d2>
				  for(int k = 0; k < iDim_w_5; k++) {
 80043ec:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80043f0:	2200      	movs	r2, #0
 80043f2:	601a      	str	r2, [r3, #0]
 80043f4:	e01e      	b.n	8004434 <main+0x31b4>
					  free(w5_2[i][j][k]);
 80043f6:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004402:	6812      	ldr	r2, [r2, #0]
 8004404:	4413      	add	r3, r2
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	4413      	add	r3, r2
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	4413      	add	r3, r2
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4618      	mov	r0, r3
 8004422:	f00e fa0b 	bl	801283c <free>
				  for(int k = 0; k < iDim_w_5; k++) {
 8004426:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800442a:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 800442e:	6812      	ldr	r2, [r2, #0]
 8004430:	3201      	adds	r2, #1
 8004432:	601a      	str	r2, [r3, #0]
 8004434:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 8004438:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800443c:	6812      	ldr	r2, [r2, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	429a      	cmp	r2, r3
 8004442:	dbd8      	blt.n	80043f6 <main+0x3176>
		  for (int j = 0; j < kDim_5; j++) {
 8004444:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8004448:	f507 72e6 	add.w	r2, r7, #460	; 0x1cc
 800444c:	6812      	ldr	r2, [r2, #0]
 800444e:	3201      	adds	r2, #1
 8004450:	601a      	str	r2, [r3, #0]
 8004452:	f507 72e6 	add.w	r2, r7, #460	; 0x1cc
 8004456:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800445a:	6812      	ldr	r2, [r2, #0]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	429a      	cmp	r2, r3
 8004460:	dbc4      	blt.n	80043ec <main+0x316c>
	  for (int i = 0; i < kDim_5; i++) {
 8004462:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8004466:	f507 72e8 	add.w	r2, r7, #464	; 0x1d0
 800446a:	6812      	ldr	r2, [r2, #0]
 800446c:	3201      	adds	r2, #1
 800446e:	601a      	str	r2, [r3, #0]
 8004470:	f507 72e8 	add.w	r2, r7, #464	; 0x1d0
 8004474:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004478:	6812      	ldr	r2, [r2, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	429a      	cmp	r2, r3
 800447e:	dbb0      	blt.n	80043e2 <main+0x3162>
				  }
			}
	  }
	  for (int i = 0; i < kDim_5; i++) {
 8004480:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 8004484:	2200      	movs	r2, #0
 8004486:	601a      	str	r2, [r3, #0]
 8004488:	e02c      	b.n	80044e4 <main+0x3264>
		  for (int j = 0; j < kDim_5; j++) {
 800448a:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 800448e:	2200      	movs	r2, #0
 8004490:	601a      	str	r2, [r3, #0]
 8004492:	e018      	b.n	80044c6 <main+0x3246>
			  free(w5_2[i][j]);
 8004494:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80044a0:	6812      	ldr	r2, [r2, #0]
 80044a2:	4413      	add	r3, r2
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	4413      	add	r3, r2
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4618      	mov	r0, r3
 80044b4:	f00e f9c2 	bl	801283c <free>
		  for (int j = 0; j < kDim_5; j++) {
 80044b8:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80044bc:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
 80044c0:	6812      	ldr	r2, [r2, #0]
 80044c2:	3201      	adds	r2, #1
 80044c4:	601a      	str	r2, [r3, #0]
 80044c6:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
 80044ca:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80044ce:	6812      	ldr	r2, [r2, #0]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	dbde      	blt.n	8004494 <main+0x3214>
	  for (int i = 0; i < kDim_5; i++) {
 80044d6:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 80044da:	f507 72e2 	add.w	r2, r7, #452	; 0x1c4
 80044de:	6812      	ldr	r2, [r2, #0]
 80044e0:	3201      	adds	r2, #1
 80044e2:	601a      	str	r2, [r3, #0]
 80044e4:	f507 72e2 	add.w	r2, r7, #452	; 0x1c4
 80044e8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80044ec:	6812      	ldr	r2, [r2, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	429a      	cmp	r2, r3
 80044f2:	dbca      	blt.n	800448a <main+0x320a>
		  }
	  }
	  for (int i = 0; i < kDim_5; i++) {
 80044f4:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 80044f8:	2200      	movs	r2, #0
 80044fa:	601a      	str	r2, [r3, #0]
 80044fc:	e012      	b.n	8004524 <main+0x32a4>
		  free(w5_2[i]);
 80044fe:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800450a:	6812      	ldr	r2, [r2, #0]
 800450c:	4413      	add	r3, r2
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4618      	mov	r0, r3
 8004512:	f00e f993 	bl	801283c <free>
	  for (int i = 0; i < kDim_5; i++) {
 8004516:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 800451a:	f507 72de 	add.w	r2, r7, #444	; 0x1bc
 800451e:	6812      	ldr	r2, [r2, #0]
 8004520:	3201      	adds	r2, #1
 8004522:	601a      	str	r2, [r3, #0]
 8004524:	f507 72de 	add.w	r2, r7, #444	; 0x1bc
 8004528:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800452c:	6812      	ldr	r2, [r2, #0]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	429a      	cmp	r2, r3
 8004532:	dbe4      	blt.n	80044fe <main+0x327e>
	  }
	  free(w5_2);
 8004534:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004538:	6818      	ldr	r0, [r3, #0]
 800453a:	f00e f97f 	bl	801283c <free>
	  ////////////////////////////////////////////////////////////////////////////////////////////////////////////

	  //////////////////////////////////////////////////////////////////////////////////////////////////////////// 5_4 "Add" operation


	  sprintf(name,"w5_4.txt");
 800453e:	4a75      	ldr	r2, [pc, #468]	; (8004714 <main+0x3494>)
 8004540:	4b75      	ldr	r3, [pc, #468]	; (8004718 <main+0x3498>)
 8004542:	cb03      	ldmia	r3!, {r0, r1}
 8004544:	6010      	str	r0, [r2, #0]
 8004546:	6051      	str	r1, [r2, #4]
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	7213      	strb	r3, [r2, #8]
	  float * nw5_4 = read_txt(name, 81);
 800454c:	2151      	movs	r1, #81	; 0x51
 800454e:	4871      	ldr	r0, [pc, #452]	; (8004714 <main+0x3494>)
 8004550:	f00d fd9e 	bl	8012090 <read_txt>
 8004554:	4602      	mov	r2, r0
 8004556:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800455a:	601a      	str	r2, [r3, #0]

	  // allocate 4d w5_4
	  float**** w5_4 = (float****)malloc(kDim_5 * sizeof(float***));
 800455c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8004568:	4618      	mov	r0, r3
 800456a:	f00e f95f 	bl	801282c <malloc>
 800456e:	4603      	mov	r3, r0
 8004570:	6023      	str	r3, [r4, #0]
	  for (int i = 0; i < kDim_5; i++) {
 8004572:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8004576:	2200      	movs	r2, #0
 8004578:	601a      	str	r2, [r3, #0]
 800457a:	e017      	b.n	80045ac <main+0x332c>
		  w5_4[i] = (float***)malloc(kDim_5 * sizeof(float**));
 800457c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	0099      	lsls	r1, r3, #2
 8004584:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8004590:	6812      	ldr	r2, [r2, #0]
 8004592:	18d4      	adds	r4, r2, r3
 8004594:	4608      	mov	r0, r1
 8004596:	f00e f949 	bl	801282c <malloc>
 800459a:	4603      	mov	r3, r0
 800459c:	6023      	str	r3, [r4, #0]
	  for (int i = 0; i < kDim_5; i++) {
 800459e:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80045a2:	f507 72dc 	add.w	r2, r7, #440	; 0x1b8
 80045a6:	6812      	ldr	r2, [r2, #0]
 80045a8:	3201      	adds	r2, #1
 80045aa:	601a      	str	r2, [r3, #0]
 80045ac:	f507 72dc 	add.w	r2, r7, #440	; 0x1b8
 80045b0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80045b4:	6812      	ldr	r2, [r2, #0]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	dbdf      	blt.n	800457c <main+0x32fc>
	  }
	  for (int i = 0; i < kDim_5; i++) {
 80045bc:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 80045c0:	2200      	movs	r2, #0
 80045c2:	601a      	str	r2, [r3, #0]
 80045c4:	e031      	b.n	800462a <main+0x33aa>
		  for (int j = 0; j < kDim_5; j++) {
 80045c6:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80045ca:	2200      	movs	r2, #0
 80045cc:	601a      	str	r2, [r3, #0]
 80045ce:	e01d      	b.n	800460c <main+0x338c>
			  w5_4[i][j] = (float**)malloc(iDim_w_5 * sizeof(float*));
 80045d0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	0099      	lsls	r1, r3, #2
 80045d8:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80045e4:	6812      	ldr	r2, [r2, #0]
 80045e6:	4413      	add	r3, r2
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	18d4      	adds	r4, r2, r3
 80045f4:	4608      	mov	r0, r1
 80045f6:	f00e f919 	bl	801282c <malloc>
 80045fa:	4603      	mov	r3, r0
 80045fc:	6023      	str	r3, [r4, #0]
		  for (int j = 0; j < kDim_5; j++) {
 80045fe:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004602:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 8004606:	6812      	ldr	r2, [r2, #0]
 8004608:	3201      	adds	r2, #1
 800460a:	601a      	str	r2, [r3, #0]
 800460c:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 8004610:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004614:	6812      	ldr	r2, [r2, #0]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	429a      	cmp	r2, r3
 800461a:	dbd9      	blt.n	80045d0 <main+0x3350>
	  for (int i = 0; i < kDim_5; i++) {
 800461c:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8004620:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
 8004624:	6812      	ldr	r2, [r2, #0]
 8004626:	3201      	adds	r2, #1
 8004628:	601a      	str	r2, [r3, #0]
 800462a:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
 800462e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004632:	6812      	ldr	r2, [r2, #0]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	429a      	cmp	r2, r3
 8004638:	dbc5      	blt.n	80045c6 <main+0x3346>
		  }
	  }
	  for (int i = 0; i < kDim_5; i++) {
 800463a:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 800463e:	2200      	movs	r2, #0
 8004640:	601a      	str	r2, [r3, #0]
 8004642:	e04b      	b.n	80046dc <main+0x345c>
		  for (int j = 0; j < kDim_5; j++) {
 8004644:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8004648:	2200      	movs	r2, #0
 800464a:	601a      	str	r2, [r3, #0]
 800464c:	e037      	b.n	80046be <main+0x343e>
			  for(int k = 0; k < iDim_w_5; k++) {
 800464e:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8004652:	2200      	movs	r2, #0
 8004654:	601a      	str	r2, [r3, #0]
 8004656:	e023      	b.n	80046a0 <main+0x3420>
				  w5_4[i][j][k] = (float*)malloc(oDim_5 * sizeof(float));
 8004658:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	0099      	lsls	r1, r3, #2
 8004660:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800466c:	6812      	ldr	r2, [r2, #0]
 800466e:	4413      	add	r3, r2
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	4413      	add	r3, r2
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	18d4      	adds	r4, r2, r3
 8004688:	4608      	mov	r0, r1
 800468a:	f00e f8cf 	bl	801282c <malloc>
 800468e:	4603      	mov	r3, r0
 8004690:	6023      	str	r3, [r4, #0]
			  for(int k = 0; k < iDim_w_5; k++) {
 8004692:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8004696:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800469a:	6812      	ldr	r2, [r2, #0]
 800469c:	3201      	adds	r2, #1
 800469e:	601a      	str	r2, [r3, #0]
 80046a0:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 80046a4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80046a8:	6812      	ldr	r2, [r2, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	dbd3      	blt.n	8004658 <main+0x33d8>
		  for (int j = 0; j < kDim_5; j++) {
 80046b0:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80046b4:	f507 72d4 	add.w	r2, r7, #424	; 0x1a8
 80046b8:	6812      	ldr	r2, [r2, #0]
 80046ba:	3201      	adds	r2, #1
 80046bc:	601a      	str	r2, [r3, #0]
 80046be:	f507 72d4 	add.w	r2, r7, #424	; 0x1a8
 80046c2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80046c6:	6812      	ldr	r2, [r2, #0]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	dbbf      	blt.n	800464e <main+0x33ce>
	  for (int i = 0; i < kDim_5; i++) {
 80046ce:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 80046d2:	f507 72d6 	add.w	r2, r7, #428	; 0x1ac
 80046d6:	6812      	ldr	r2, [r2, #0]
 80046d8:	3201      	adds	r2, #1
 80046da:	601a      	str	r2, [r3, #0]
 80046dc:	f507 72d6 	add.w	r2, r7, #428	; 0x1ac
 80046e0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80046e4:	6812      	ldr	r2, [r2, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	dbab      	blt.n	8004644 <main+0x33c4>
			  }
		  }
	  }
	  for(int i = 0; i < kDim_5; i++) {
 80046ec:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80046f0:	2200      	movs	r2, #0
 80046f2:	601a      	str	r2, [r3, #0]
 80046f4:	e085      	b.n	8004802 <main+0x3582>
		  for (int j = 0; j < kDim_5; j++) {
 80046f6:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 80046fa:	2200      	movs	r2, #0
 80046fc:	601a      	str	r2, [r3, #0]
 80046fe:	e071      	b.n	80047e4 <main+0x3564>
			  for (int v = 0; v < oDim_5; v++) {
 8004700:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8004704:	2200      	movs	r2, #0
 8004706:	601a      	str	r2, [r3, #0]
 8004708:	e05d      	b.n	80047c6 <main+0x3546>
				  for(int u = 0; u < iDim_w_5; u++) {
 800470a:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 800470e:	2200      	movs	r2, #0
 8004710:	601a      	str	r2, [r3, #0]
 8004712:	e049      	b.n	80047a8 <main+0x3528>
 8004714:	2400323c 	.word	0x2400323c
 8004718:	08015748 	.word	0x08015748
					  w5_4[i][j][u][v] = nw5_4[(i*kDim_5*oDim_5*iDim_w_5)+(j*oDim_5*iDim_w_5)+(v*iDim_w_5)+u];
 800471c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8004720:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	6812      	ldr	r2, [r2, #0]
 8004728:	fb02 f203 	mul.w	r2, r2, r3
 800472c:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4413      	add	r3, r2
 8004734:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8004738:	6812      	ldr	r2, [r2, #0]
 800473a:	fb02 f203 	mul.w	r2, r2, r3
 800473e:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4413      	add	r3, r2
 8004746:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800474a:	6812      	ldr	r2, [r2, #0]
 800474c:	fb02 f203 	mul.w	r2, r2, r3
 8004750:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4413      	add	r3, r2
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800475e:	6812      	ldr	r2, [r2, #0]
 8004760:	441a      	add	r2, r3
 8004762:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800476e:	6809      	ldr	r1, [r1, #0]
 8004770:	440b      	add	r3, r1
 8004772:	6819      	ldr	r1, [r3, #0]
 8004774:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	440b      	add	r3, r1
 800477e:	6819      	ldr	r1, [r3, #0]
 8004780:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	440b      	add	r3, r1
 800478a:	6819      	ldr	r1, [r3, #0]
 800478c:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	440b      	add	r3, r1
 8004796:	6812      	ldr	r2, [r2, #0]
 8004798:	601a      	str	r2, [r3, #0]
				  for(int u = 0; u < iDim_w_5; u++) {
 800479a:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 800479e:	f507 72ca 	add.w	r2, r7, #404	; 0x194
 80047a2:	6812      	ldr	r2, [r2, #0]
 80047a4:	3201      	adds	r2, #1
 80047a6:	601a      	str	r2, [r3, #0]
 80047a8:	f507 72ca 	add.w	r2, r7, #404	; 0x194
 80047ac:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80047b0:	6812      	ldr	r2, [r2, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	dbb1      	blt.n	800471c <main+0x349c>
			  for (int v = 0; v < oDim_5; v++) {
 80047b8:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80047bc:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 80047c0:	6812      	ldr	r2, [r2, #0]
 80047c2:	3201      	adds	r2, #1
 80047c4:	601a      	str	r2, [r3, #0]
 80047c6:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 80047ca:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80047ce:	6812      	ldr	r2, [r2, #0]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	db99      	blt.n	800470a <main+0x348a>
		  for (int j = 0; j < kDim_5; j++) {
 80047d6:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 80047da:	f507 72ce 	add.w	r2, r7, #412	; 0x19c
 80047de:	6812      	ldr	r2, [r2, #0]
 80047e0:	3201      	adds	r2, #1
 80047e2:	601a      	str	r2, [r3, #0]
 80047e4:	f507 72ce 	add.w	r2, r7, #412	; 0x19c
 80047e8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80047ec:	6812      	ldr	r2, [r2, #0]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	db85      	blt.n	8004700 <main+0x3480>
	  for(int i = 0; i < kDim_5; i++) {
 80047f4:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80047f8:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 80047fc:	6812      	ldr	r2, [r2, #0]
 80047fe:	3201      	adds	r2, #1
 8004800:	601a      	str	r2, [r3, #0]
 8004802:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8004806:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800480a:	6812      	ldr	r2, [r2, #0]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	429a      	cmp	r2, r3
 8004810:	f6ff af71 	blt.w	80046f6 <main+0x3476>
				  }
			  }
		  }
	  }
	  free(nw5_4);
 8004814:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004818:	6818      	ldr	r0, [r3, #0]
 800481a:	f00e f80f 	bl	801283c <free>

	  convAdd(x4, w5_4, x1V2, iHeight, iWidth, kDim_5, iDim_w_5, oDim_5, pSize_5);
 800481e:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8004822:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8004826:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800482a:	f107 0054 	add.w	r0, r7, #84	; 0x54
 800482e:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8004832:	6824      	ldr	r4, [r4, #0]
 8004834:	9404      	str	r4, [sp, #16]
 8004836:	f107 0474 	add.w	r4, r7, #116	; 0x74
 800483a:	6824      	ldr	r4, [r4, #0]
 800483c:	9403      	str	r4, [sp, #12]
 800483e:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 8004842:	6824      	ldr	r4, [r4, #0]
 8004844:	9402      	str	r4, [sp, #8]
 8004846:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 800484a:	6824      	ldr	r4, [r4, #0]
 800484c:	9401      	str	r4, [sp, #4]
 800484e:	f507 7494 	add.w	r4, r7, #296	; 0x128
 8004852:	6824      	ldr	r4, [r4, #0]
 8004854:	9400      	str	r4, [sp, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	6812      	ldr	r2, [r2, #0]
 800485a:	6809      	ldr	r1, [r1, #0]
 800485c:	6800      	ldr	r0, [r0, #0]
 800485e:	f7fc fac8 	bl	8000df2 <convAdd>

      //free(x4);
      for (int i = 0; i < iHeight; i++) {
 8004862:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004866:	2200      	movs	r2, #0
 8004868:	601a      	str	r2, [r3, #0]
 800486a:	e02c      	b.n	80048c6 <main+0x3646>
    	  for (int j = 0; j < iWidth; j++) {
 800486c:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8004870:	2200      	movs	r2, #0
 8004872:	601a      	str	r2, [r3, #0]
 8004874:	e018      	b.n	80048a8 <main+0x3628>
    		free(x4[i][j]);
 8004876:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8004882:	6812      	ldr	r2, [r2, #0]
 8004884:	4413      	add	r3, r2
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	4413      	add	r3, r2
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4618      	mov	r0, r3
 8004896:	f00d ffd1 	bl	801283c <free>
    	  for (int j = 0; j < iWidth; j++) {
 800489a:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800489e:	f507 72c6 	add.w	r2, r7, #396	; 0x18c
 80048a2:	6812      	ldr	r2, [r2, #0]
 80048a4:	3201      	adds	r2, #1
 80048a6:	601a      	str	r2, [r3, #0]
 80048a8:	f507 72c6 	add.w	r2, r7, #396	; 0x18c
 80048ac:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80048b0:	6812      	ldr	r2, [r2, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	dbde      	blt.n	8004876 <main+0x35f6>
      for (int i = 0; i < iHeight; i++) {
 80048b8:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80048bc:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 80048c0:	6812      	ldr	r2, [r2, #0]
 80048c2:	3201      	adds	r2, #1
 80048c4:	601a      	str	r2, [r3, #0]
 80048c6:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 80048ca:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 80048ce:	6812      	ldr	r2, [r2, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	429a      	cmp	r2, r3
 80048d4:	dbca      	blt.n	800486c <main+0x35ec>
    	  }
      }
      for (int i = 0; i < iHeight; i++) {
 80048d6:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80048da:	2200      	movs	r2, #0
 80048dc:	601a      	str	r2, [r3, #0]
 80048de:	e012      	b.n	8004906 <main+0x3686>
      	free(x4[i]);
 80048e0:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80048ec:	6812      	ldr	r2, [r2, #0]
 80048ee:	4413      	add	r3, r2
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4618      	mov	r0, r3
 80048f4:	f00d ffa2 	bl	801283c <free>
      for (int i = 0; i < iHeight; i++) {
 80048f8:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80048fc:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8004900:	6812      	ldr	r2, [r2, #0]
 8004902:	3201      	adds	r2, #1
 8004904:	601a      	str	r2, [r3, #0]
 8004906:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 800490a:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800490e:	6812      	ldr	r2, [r2, #0]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	429a      	cmp	r2, r3
 8004914:	dbe4      	blt.n	80048e0 <main+0x3660>
      }
      free(x4);
 8004916:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800491a:	6818      	ldr	r0, [r3, #0]
 800491c:	f00d ff8e 	bl	801283c <free>

	  //free(w5_4);
	  for (int i = 0; i < kDim_5; i++) {
 8004920:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8004924:	2200      	movs	r2, #0
 8004926:	601a      	str	r2, [r3, #0]
 8004928:	e046      	b.n	80049b8 <main+0x3738>
		  for (int j = 0; j < kDim_5; j++) {
 800492a:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800492e:	2200      	movs	r2, #0
 8004930:	601a      	str	r2, [r3, #0]
 8004932:	e032      	b.n	800499a <main+0x371a>
			  	  for(int k = 0; k < iDim_w_5; k++) {
 8004934:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8004938:	2200      	movs	r2, #0
 800493a:	601a      	str	r2, [r3, #0]
 800493c:	e01e      	b.n	800497c <main+0x36fc>
	    			  free(w5_4[i][j][k]);
 800493e:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800494a:	6812      	ldr	r2, [r2, #0]
 800494c:	4413      	add	r3, r2
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	4413      	add	r3, r2
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	4413      	add	r3, r2
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4618      	mov	r0, r3
 800496a:	f00d ff67 	bl	801283c <free>
			  	  for(int k = 0; k < iDim_w_5; k++) {
 800496e:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8004972:	f507 72be 	add.w	r2, r7, #380	; 0x17c
 8004976:	6812      	ldr	r2, [r2, #0]
 8004978:	3201      	adds	r2, #1
 800497a:	601a      	str	r2, [r3, #0]
 800497c:	f507 72be 	add.w	r2, r7, #380	; 0x17c
 8004980:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004984:	6812      	ldr	r2, [r2, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	429a      	cmp	r2, r3
 800498a:	dbd8      	blt.n	800493e <main+0x36be>
		  for (int j = 0; j < kDim_5; j++) {
 800498c:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8004990:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8004994:	6812      	ldr	r2, [r2, #0]
 8004996:	3201      	adds	r2, #1
 8004998:	601a      	str	r2, [r3, #0]
 800499a:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 800499e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80049a2:	6812      	ldr	r2, [r2, #0]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	dbc4      	blt.n	8004934 <main+0x36b4>
	  for (int i = 0; i < kDim_5; i++) {
 80049aa:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 80049ae:	f507 72c2 	add.w	r2, r7, #388	; 0x184
 80049b2:	6812      	ldr	r2, [r2, #0]
 80049b4:	3201      	adds	r2, #1
 80049b6:	601a      	str	r2, [r3, #0]
 80049b8:	f507 72c2 	add.w	r2, r7, #388	; 0x184
 80049bc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80049c0:	6812      	ldr	r2, [r2, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	dbb0      	blt.n	800492a <main+0x36aa>
	    		  }
			}
	  }
	  for (int i = 0; i < kDim_5; i++) {
 80049c8:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80049cc:	2200      	movs	r2, #0
 80049ce:	601a      	str	r2, [r3, #0]
 80049d0:	e02c      	b.n	8004a2c <main+0x37ac>
	  	  for (int j = 0; j < kDim_5; j++) {
 80049d2:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 80049d6:	2200      	movs	r2, #0
 80049d8:	601a      	str	r2, [r3, #0]
 80049da:	e018      	b.n	8004a0e <main+0x378e>
	  		  free(w5_4[i][j]);
 80049dc:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80049e8:	6812      	ldr	r2, [r2, #0]
 80049ea:	4413      	add	r3, r2
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	4413      	add	r3, r2
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4618      	mov	r0, r3
 80049fc:	f00d ff1e 	bl	801283c <free>
	  	  for (int j = 0; j < kDim_5; j++) {
 8004a00:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8004a04:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 8004a08:	6812      	ldr	r2, [r2, #0]
 8004a0a:	3201      	adds	r2, #1
 8004a0c:	601a      	str	r2, [r3, #0]
 8004a0e:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 8004a12:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004a16:	6812      	ldr	r2, [r2, #0]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	dbde      	blt.n	80049dc <main+0x375c>
	  for (int i = 0; i < kDim_5; i++) {
 8004a1e:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8004a22:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 8004a26:	6812      	ldr	r2, [r2, #0]
 8004a28:	3201      	adds	r2, #1
 8004a2a:	601a      	str	r2, [r3, #0]
 8004a2c:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 8004a30:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004a34:	6812      	ldr	r2, [r2, #0]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	dbca      	blt.n	80049d2 <main+0x3752>
	  	  }
	  }
	  for (int i = 0; i < kDim_5; i++) {
 8004a3c:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8004a40:	2200      	movs	r2, #0
 8004a42:	601a      	str	r2, [r3, #0]
 8004a44:	e012      	b.n	8004a6c <main+0x37ec>
		  free(w5_4[i]);
 8004a46:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8004a52:	6812      	ldr	r2, [r2, #0]
 8004a54:	4413      	add	r3, r2
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f00d feef 	bl	801283c <free>
	  for (int i = 0; i < kDim_5; i++) {
 8004a5e:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8004a62:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8004a66:	6812      	ldr	r2, [r2, #0]
 8004a68:	3201      	adds	r2, #1
 8004a6a:	601a      	str	r2, [r3, #0]
 8004a6c:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8004a70:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004a74:	6812      	ldr	r2, [r2, #0]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	dbe4      	blt.n	8004a46 <main+0x37c6>
	  }
	  free(w5_4);
 8004a7c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004a80:	6818      	ldr	r0, [r3, #0]
 8004a82:	f00d fedb 	bl	801283c <free>

      sprintf(name,"b5.txt");
 8004a86:	4ba9      	ldr	r3, [pc, #676]	; (8004d2c <main+0x3aac>)
 8004a88:	4aa9      	ldr	r2, [pc, #676]	; (8004d30 <main+0x3ab0>)
 8004a8a:	6810      	ldr	r0, [r2, #0]
 8004a8c:	6018      	str	r0, [r3, #0]
 8004a8e:	8891      	ldrh	r1, [r2, #4]
 8004a90:	7992      	ldrb	r2, [r2, #6]
 8004a92:	8099      	strh	r1, [r3, #4]
 8004a94:	719a      	strb	r2, [r3, #6]
      float * b5 = read_txt(name, 3);
 8004a96:	2103      	movs	r1, #3
 8004a98:	48a4      	ldr	r0, [pc, #656]	; (8004d2c <main+0x3aac>)
 8004a9a:	f00d faf9 	bl	8012090 <read_txt>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004aa4:	601a      	str	r2, [r3, #0]

      reluInPlace(x1V2, b5, iHeight, iWidth, oDim);
 8004aa6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8004aaa:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 8004aae:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8004ab2:	f107 0080 	add.w	r0, r7, #128	; 0x80
 8004ab6:	f107 04c0 	add.w	r4, r7, #192	; 0xc0
 8004aba:	6824      	ldr	r4, [r4, #0]
 8004abc:	9400      	str	r4, [sp, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	6812      	ldr	r2, [r2, #0]
 8004ac2:	6809      	ldr	r1, [r1, #0]
 8004ac4:	6800      	ldr	r0, [r0, #0]
 8004ac6:	f7fc f92a 	bl	8000d1e <reluInPlace>

      free(b5);
 8004aca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004ace:	6818      	ldr	r0, [r3, #0]
 8004ad0:	f00d feb4 	bl	801283c <free>
	float * out_img2;

	while (1)
	  {
	    /* USER CODE END WHILE */
	    MX_USB_HOST_Process();
 8004ad4:	f00d fb56 	bl	8012184 <MX_USB_HOST_Process>

	    /* USER CODE BEGIN 3 */
		sprintf(name,"test4.bmp"); //test4.bmp
 8004ad8:	4a94      	ldr	r2, [pc, #592]	; (8004d2c <main+0x3aac>)
 8004ada:	4b96      	ldr	r3, [pc, #600]	; (8004d34 <main+0x3ab4>)
 8004adc:	cb03      	ldmia	r3!, {r0, r1}
 8004ade:	6010      	str	r0, [r2, #0]
 8004ae0:	6051      	str	r1, [r2, #4]
 8004ae2:	881b      	ldrh	r3, [r3, #0]
 8004ae4:	8113      	strh	r3, [r2, #8]
	    file_ready = 0;
 8004ae6:	4b94      	ldr	r3, [pc, #592]	; (8004d38 <main+0x3ab8>)
 8004ae8:	2200      	movs	r2, #0
 8004aea:	601a      	str	r2, [r3, #0]
	    read_bmp(name);
 8004aec:	488f      	ldr	r0, [pc, #572]	; (8004d2c <main+0x3aac>)
 8004aee:	f00d fa1b 	bl	8011f28 <read_bmp>
	    if(file_ready == 1){
 8004af2:	4b91      	ldr	r3, [pc, #580]	; (8004d38 <main+0x3ab8>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d1ec      	bne.n	8004ad4 <main+0x3854>
			out_img2 = ProcessBmp(rtext);
 8004afa:	4890      	ldr	r0, [pc, #576]	; (8004d3c <main+0x3abc>)
 8004afc:	f7fc fb83 	bl	8001206 <ProcessBmp>
 8004b00:	4602      	mov	r2, r0
 8004b02:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004b06:	601a      	str	r2, [r3, #0]
			file_ready = 0;
 8004b08:	4b8b      	ldr	r3, [pc, #556]	; (8004d38 <main+0x3ab8>)
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	601a      	str	r2, [r3, #0]
		    break;
 8004b0e:	bf00      	nop
	    }
	  }

  	// allocate 3d for input2
  	float*** input2 = (float***)malloc(iHeight * sizeof(float**));
 8004b10:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f00d fe85 	bl	801282c <malloc>
 8004b22:	4603      	mov	r3, r0
 8004b24:	6023      	str	r3, [r4, #0]
  	for (int i = 0; i < iHeight; i++) {
 8004b26:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	601a      	str	r2, [r3, #0]
 8004b2e:	e017      	b.n	8004b60 <main+0x38e0>
  		input2[i] = (float**)malloc(iWidth * sizeof(float*));
 8004b30:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	0099      	lsls	r1, r3, #2
 8004b38:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004b44:	6812      	ldr	r2, [r2, #0]
 8004b46:	18d4      	adds	r4, r2, r3
 8004b48:	4608      	mov	r0, r1
 8004b4a:	f00d fe6f 	bl	801282c <malloc>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	6023      	str	r3, [r4, #0]
  	for (int i = 0; i < iHeight; i++) {
 8004b52:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8004b56:	f507 72b6 	add.w	r2, r7, #364	; 0x16c
 8004b5a:	6812      	ldr	r2, [r2, #0]
 8004b5c:	3201      	adds	r2, #1
 8004b5e:	601a      	str	r2, [r3, #0]
 8004b60:	f507 72b6 	add.w	r2, r7, #364	; 0x16c
 8004b64:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8004b68:	6812      	ldr	r2, [r2, #0]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	dbdf      	blt.n	8004b30 <main+0x38b0>
  	}
  	for (int i = 0; i < iHeight; i++) {
 8004b70:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004b74:	2200      	movs	r2, #0
 8004b76:	601a      	str	r2, [r3, #0]
 8004b78:	e02d      	b.n	8004bd6 <main+0x3956>
  	  for (int j = 0; j < iWidth; j++) {
 8004b7a:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8004b7e:	2200      	movs	r2, #0
 8004b80:	601a      	str	r2, [r3, #0]
 8004b82:	e019      	b.n	8004bb8 <main+0x3938>
  		  input2[i][j] = (float*)malloc(3 * sizeof(float));
 8004b84:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004b90:	6812      	ldr	r2, [r2, #0]
 8004b92:	4413      	add	r3, r2
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	18d4      	adds	r4, r2, r3
 8004ba0:	200c      	movs	r0, #12
 8004ba2:	f00d fe43 	bl	801282c <malloc>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	6023      	str	r3, [r4, #0]
  	  for (int j = 0; j < iWidth; j++) {
 8004baa:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8004bae:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8004bb2:	6812      	ldr	r2, [r2, #0]
 8004bb4:	3201      	adds	r2, #1
 8004bb6:	601a      	str	r2, [r3, #0]
 8004bb8:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8004bbc:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8004bc0:	6812      	ldr	r2, [r2, #0]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	dbdd      	blt.n	8004b84 <main+0x3904>
  	for (int i = 0; i < iHeight; i++) {
 8004bc8:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004bcc:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8004bd0:	6812      	ldr	r2, [r2, #0]
 8004bd2:	3201      	adds	r2, #1
 8004bd4:	601a      	str	r2, [r3, #0]
 8004bd6:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8004bda:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8004bde:	6812      	ldr	r2, [r2, #0]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	429a      	cmp	r2, r3
 8004be4:	dbc9      	blt.n	8004b7a <main+0x38fa>
  	  }
  	}

  	// set input2[][][] values based on out_img2
  	for(int k=0; k<3; k++) {
 8004be6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004bea:	2200      	movs	r2, #0
 8004bec:	601a      	str	r2, [r3, #0]
 8004bee:	e07a      	b.n	8004ce6 <main+0x3a66>
  	  for (int i = 0; i < iHeight; i++) {
 8004bf0:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	601a      	str	r2, [r3, #0]
 8004bf8:	e066      	b.n	8004cc8 <main+0x3a48>
  		  for (int j = 0; j < iWidth; j++) {
 8004bfa:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004bfe:	2200      	movs	r2, #0
 8004c00:	601a      	str	r2, [r3, #0]
 8004c02:	e052      	b.n	8004caa <main+0x3a2a>
  			  int iIdx = (iHeight - 1) - i;
 8004c04:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	1e59      	subs	r1, r3, #1
 8004c0c:	f107 0318 	add.w	r3, r7, #24
 8004c10:	f507 72ae 	add.w	r2, r7, #348	; 0x15c
 8004c14:	6812      	ldr	r2, [r2, #0]
 8004c16:	1a8a      	subs	r2, r1, r2
 8004c18:	601a      	str	r2, [r3, #0]
  			  int kIdx = (iChannel - 1) - k;
 8004c1a:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	1e59      	subs	r1, r3, #1
 8004c22:	f107 0314 	add.w	r3, r7, #20
 8004c26:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8004c2a:	6812      	ldr	r2, [r2, #0]
 8004c2c:	1a8a      	subs	r2, r1, r2
 8004c2e:	601a      	str	r2, [r3, #0]
  			  input2[i][j][k] = out_img2[(((iIdx*iWidth)+j)*iChannel)+kIdx]/255.0;// ((i*iWidth+j)*iChannel)+k]; // /255.0
 8004c30:	f107 0318 	add.w	r3, r7, #24
 8004c34:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	6812      	ldr	r2, [r2, #0]
 8004c3c:	fb02 f203 	mul.w	r2, r2, r3
 8004c40:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4413      	add	r3, r2
 8004c48:	f507 7292 	add.w	r2, r7, #292	; 0x124
 8004c4c:	6812      	ldr	r2, [r2, #0]
 8004c4e:	fb02 f203 	mul.w	r2, r2, r3
 8004c52:	f107 0314 	add.w	r3, r7, #20
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4413      	add	r3, r2
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004c60:	6812      	ldr	r2, [r2, #0]
 8004c62:	4413      	add	r3, r2
 8004c64:	ed93 7a00 	vldr	s14, [r3]
 8004c68:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004c74:	6812      	ldr	r2, [r2, #0]
 8004c76:	4413      	add	r3, r2
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	4413      	add	r3, r2
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	4413      	add	r3, r2
 8004c90:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8004d40 <main+0x3ac0>
 8004c94:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004c98:	edc3 7a00 	vstr	s15, [r3]
  		  for (int j = 0; j < iWidth; j++) {
 8004c9c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004ca0:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8004ca4:	6812      	ldr	r2, [r2, #0]
 8004ca6:	3201      	adds	r2, #1
 8004ca8:	601a      	str	r2, [r3, #0]
 8004caa:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8004cae:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8004cb2:	6812      	ldr	r2, [r2, #0]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	dba4      	blt.n	8004c04 <main+0x3984>
  	  for (int i = 0; i < iHeight; i++) {
 8004cba:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8004cbe:	f507 72ae 	add.w	r2, r7, #348	; 0x15c
 8004cc2:	6812      	ldr	r2, [r2, #0]
 8004cc4:	3201      	adds	r2, #1
 8004cc6:	601a      	str	r2, [r3, #0]
 8004cc8:	f507 72ae 	add.w	r2, r7, #348	; 0x15c
 8004ccc:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8004cd0:	6812      	ldr	r2, [r2, #0]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	db90      	blt.n	8004bfa <main+0x397a>
  	for(int k=0; k<3; k++) {
 8004cd8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004cdc:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8004ce0:	6812      	ldr	r2, [r2, #0]
 8004ce2:	3201      	adds	r2, #1
 8004ce4:	601a      	str	r2, [r3, #0]
 8004ce6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	f77f af7f 	ble.w	8004bf0 <main+0x3970>
  		  }
  	   }
  	}

  	free(out_img2);
 8004cf2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004cf6:	6818      	ldr	r0, [r3, #0]
 8004cf8:	f00d fda0 	bl	801283c <free>
//	float var6 = input2[1][2][0];
//	float var7 = input2[2][0][0];
//	float var8 = input2[2][1][0];
//	float var9 = input2[2][2][0];

      estResult(input2, x1V2, iHeight, iWidth);
 8004cfc:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8004d00:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 8004d04:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8004d08:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	6812      	ldr	r2, [r2, #0]
 8004d10:	6809      	ldr	r1, [r1, #0]
 8004d12:	6800      	ldr	r0, [r0, #0]
 8004d14:	f7fc f9f4 	bl	8001100 <estResult>

      //free(input2);
      for (int i = 0; i < iHeight; i++) {
 8004d18:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	601a      	str	r2, [r3, #0]
 8004d20:	e038      	b.n	8004d94 <main+0x3b14>
    	  for (int j = 0; j < iWidth; j++) {
 8004d22:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8004d26:	2200      	movs	r2, #0
 8004d28:	601a      	str	r2, [r3, #0]
 8004d2a:	e024      	b.n	8004d76 <main+0x3af6>
 8004d2c:	2400323c 	.word	0x2400323c
 8004d30:	08015754 	.word	0x08015754
 8004d34:	080156d8 	.word	0x080156d8
 8004d38:	240002dc 	.word	0x240002dc
 8004d3c:	24000ed4 	.word	0x24000ed4
 8004d40:	437f0000 	.word	0x437f0000
    		free(input2[i][j]);
 8004d44:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004d50:	6812      	ldr	r2, [r2, #0]
 8004d52:	4413      	add	r3, r2
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	4413      	add	r3, r2
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4618      	mov	r0, r3
 8004d64:	f00d fd6a 	bl	801283c <free>
    	  for (int j = 0; j < iWidth; j++) {
 8004d68:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8004d6c:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8004d70:	6812      	ldr	r2, [r2, #0]
 8004d72:	3201      	adds	r2, #1
 8004d74:	601a      	str	r2, [r3, #0]
 8004d76:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8004d7a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8004d7e:	6812      	ldr	r2, [r2, #0]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	dbde      	blt.n	8004d44 <main+0x3ac4>
      for (int i = 0; i < iHeight; i++) {
 8004d86:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8004d8a:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 8004d8e:	6812      	ldr	r2, [r2, #0]
 8004d90:	3201      	adds	r2, #1
 8004d92:	601a      	str	r2, [r3, #0]
 8004d94:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 8004d98:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8004d9c:	6812      	ldr	r2, [r2, #0]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	dbbe      	blt.n	8004d22 <main+0x3aa2>
    	  }
      }
      for (int i = 0; i < iHeight; i++) {
 8004da4:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8004da8:	2200      	movs	r2, #0
 8004daa:	601a      	str	r2, [r3, #0]
 8004dac:	e012      	b.n	8004dd4 <main+0x3b54>
      	free(input2[i]);
 8004dae:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004dba:	6812      	ldr	r2, [r2, #0]
 8004dbc:	4413      	add	r3, r2
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f00d fd3b 	bl	801283c <free>
      for (int i = 0; i < iHeight; i++) {
 8004dc6:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8004dca:	f507 72a6 	add.w	r2, r7, #332	; 0x14c
 8004dce:	6812      	ldr	r2, [r2, #0]
 8004dd0:	3201      	adds	r2, #1
 8004dd2:	601a      	str	r2, [r3, #0]
 8004dd4:	f507 72a6 	add.w	r2, r7, #332	; 0x14c
 8004dd8:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8004ddc:	6812      	ldr	r2, [r2, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	dbe4      	blt.n	8004dae <main+0x3b2e>
      }
      free(input2);
 8004de4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004de8:	6818      	ldr	r0, [r3, #0]
 8004dea:	f00d fd27 	bl	801283c <free>
//	float var6 = x1V2[1][2][0];
//	float var7 = x1V2[2][0][0];
//	float var8 = x1V2[2][1][0];
//	float var9 = x1V2[2][2][0];

	int length = iHeight * iWidth * iChannel;
 8004dee:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8004df2:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	6812      	ldr	r2, [r2, #0]
 8004dfa:	fb02 f103 	mul.w	r1, r2, r3
 8004dfe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004e02:	f507 7292 	add.w	r2, r7, #292	; 0x124
 8004e06:	6812      	ldr	r2, [r2, #0]
 8004e08:	fb01 f202 	mul.w	r2, r1, r2
 8004e0c:	601a      	str	r2, [r3, #0]

	uint8_t * in_img = (uint8_t*)malloc(length * sizeof(uint8_t));
 8004e0e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f00d fd07 	bl	801282c <malloc>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	6023      	str	r3, [r4, #0]

	for(int k=0; k<3; k++) {
 8004e22:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8004e26:	2200      	movs	r2, #0
 8004e28:	601a      	str	r2, [r3, #0]
 8004e2a:	e087      	b.n	8004f3c <main+0x3cbc>
		for (int i = 0; i < iHeight; i++) {
 8004e2c:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8004e30:	2200      	movs	r2, #0
 8004e32:	601a      	str	r2, [r3, #0]
 8004e34:	e073      	b.n	8004f1e <main+0x3c9e>
			for (int j = 0; j < iWidth; j++) {
 8004e36:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	601a      	str	r2, [r3, #0]
 8004e3e:	e05f      	b.n	8004f00 <main+0x3c80>
				int iIdx = (iHeight - 1) - i;
 8004e40:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	1e59      	subs	r1, r3, #1
 8004e48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e4c:	f507 72a2 	add.w	r2, r7, #324	; 0x144
 8004e50:	6812      	ldr	r2, [r2, #0]
 8004e52:	1a8a      	subs	r2, r1, r2
 8004e54:	601a      	str	r2, [r3, #0]
				int kIdx = (iChannel - 1) - k;
 8004e56:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	1e59      	subs	r1, r3, #1
 8004e5e:	f107 0320 	add.w	r3, r7, #32
 8004e62:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8004e66:	6812      	ldr	r2, [r2, #0]
 8004e68:	1a8a      	subs	r2, r1, r2
 8004e6a:	601a      	str	r2, [r3, #0]
				float temp = (x1V2[i][j][k] * 255.0);
 8004e6c:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8004e78:	6812      	ldr	r2, [r2, #0]
 8004e7a:	4413      	add	r3, r2
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	4413      	add	r3, r2
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	4413      	add	r3, r2
 8004e94:	edd3 7a00 	vldr	s15, [r3]
 8004e98:	f107 031c 	add.w	r3, r7, #28
 8004e9c:	ed1f 7a58 	vldr	s14, [pc, #-352]	; 8004d40 <main+0x3ac0>
 8004ea0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ea4:	edc3 7a00 	vstr	s15, [r3]
				in_img[(((iIdx*iWidth)+j)*iChannel)+kIdx] = (uint8_t) temp;// ((i*iWidth+j)*iChannel)+k]; // /255.0
 8004ea8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004eac:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	6812      	ldr	r2, [r2, #0]
 8004eb4:	fb02 f203 	mul.w	r2, r2, r3
 8004eb8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	f507 7292 	add.w	r2, r7, #292	; 0x124
 8004ec4:	6812      	ldr	r2, [r2, #0]
 8004ec6:	fb02 f203 	mul.w	r2, r2, r3
 8004eca:	f107 0320 	add.w	r3, r7, #32
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4413      	add	r3, r2
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4413      	add	r3, r2
 8004edc:	f107 021c 	add.w	r2, r7, #28
 8004ee0:	edd2 7a00 	vldr	s15, [r2]
 8004ee4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ee8:	edc7 7a01 	vstr	s15, [r7, #4]
 8004eec:	793a      	ldrb	r2, [r7, #4]
 8004eee:	b2d2      	uxtb	r2, r2
 8004ef0:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < iWidth; j++) {
 8004ef2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8004ef6:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8004efa:	6812      	ldr	r2, [r2, #0]
 8004efc:	3201      	adds	r2, #1
 8004efe:	601a      	str	r2, [r3, #0]
 8004f00:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8004f04:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8004f08:	6812      	ldr	r2, [r2, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	db97      	blt.n	8004e40 <main+0x3bc0>
		for (int i = 0; i < iHeight; i++) {
 8004f10:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8004f14:	f507 72a2 	add.w	r2, r7, #324	; 0x144
 8004f18:	6812      	ldr	r2, [r2, #0]
 8004f1a:	3201      	adds	r2, #1
 8004f1c:	601a      	str	r2, [r3, #0]
 8004f1e:	f507 72a2 	add.w	r2, r7, #324	; 0x144
 8004f22:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8004f26:	6812      	ldr	r2, [r2, #0]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	db83      	blt.n	8004e36 <main+0x3bb6>
	for(int k=0; k<3; k++) {
 8004f2e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8004f32:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8004f36:	6812      	ldr	r2, [r2, #0]
 8004f38:	3201      	adds	r2, #1
 8004f3a:	601a      	str	r2, [r3, #0]
 8004f3c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	f77f af72 	ble.w	8004e2c <main+0x3bac>
			}
		}
	}

	//free(x1V2);
	for (int i = 0; i < iHeight; i++) {
 8004f48:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	601a      	str	r2, [r3, #0]
 8004f50:	e02c      	b.n	8004fac <main+0x3d2c>
		  for (int j = 0; j < iWidth; j++) {
 8004f52:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004f56:	2200      	movs	r2, #0
 8004f58:	601a      	str	r2, [r3, #0]
 8004f5a:	e018      	b.n	8004f8e <main+0x3d0e>
			free(x1V2[i][j]);
 8004f5c:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8004f68:	6812      	ldr	r2, [r2, #0]
 8004f6a:	4413      	add	r3, r2
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	4413      	add	r3, r2
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f00d fc5e 	bl	801283c <free>
		  for (int j = 0; j < iWidth; j++) {
 8004f80:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004f84:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8004f88:	6812      	ldr	r2, [r2, #0]
 8004f8a:	3201      	adds	r2, #1
 8004f8c:	601a      	str	r2, [r3, #0]
 8004f8e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8004f92:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8004f96:	6812      	ldr	r2, [r2, #0]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	dbde      	blt.n	8004f5c <main+0x3cdc>
	for (int i = 0; i < iHeight; i++) {
 8004f9e:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8004fa2:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 8004fa6:	6812      	ldr	r2, [r2, #0]
 8004fa8:	3201      	adds	r2, #1
 8004faa:	601a      	str	r2, [r3, #0]
 8004fac:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 8004fb0:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8004fb4:	6812      	ldr	r2, [r2, #0]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	dbca      	blt.n	8004f52 <main+0x3cd2>
		  }
	}
	for (int i = 0; i < iHeight; i++) {
 8004fbc:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	601a      	str	r2, [r3, #0]
 8004fc4:	e012      	b.n	8004fec <main+0x3d6c>
			free(x1V2[i]);
 8004fc6:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8004fd2:	6812      	ldr	r2, [r2, #0]
 8004fd4:	4413      	add	r3, r2
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f00d fc2f 	bl	801283c <free>
	for (int i = 0; i < iHeight; i++) {
 8004fde:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8004fe2:	f507 729a 	add.w	r2, r7, #308	; 0x134
 8004fe6:	6812      	ldr	r2, [r2, #0]
 8004fe8:	3201      	adds	r2, #1
 8004fea:	601a      	str	r2, [r3, #0]
 8004fec:	f507 729a 	add.w	r2, r7, #308	; 0x134
 8004ff0:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8004ff4:	6812      	ldr	r2, [r2, #0]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	dbe4      	blt.n	8004fc6 <main+0x3d46>
	}
	free(x1V2);
 8004ffc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005000:	6818      	ldr	r0, [r3, #0]
 8005002:	f00d fc1b 	bl	801283c <free>

	for(int i=0; i<length; i++) {
 8005006:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800500a:	2200      	movs	r2, #0
 800500c:	601a      	str	r2, [r3, #0]
 800500e:	e01f      	b.n	8005050 <main+0x3dd0>
		int idx = i + pixelStart;
 8005010:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005014:	f507 7198 	add.w	r1, r7, #304	; 0x130
 8005018:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800501c:	6809      	ldr	r1, [r1, #0]
 800501e:	6812      	ldr	r2, [r2, #0]
 8005020:	440a      	add	r2, r1
 8005022:	601a      	str	r2, [r3, #0]
		rtext[idx] = in_img[i];
 8005024:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800502e:	6812      	ldr	r2, [r2, #0]
 8005030:	4413      	add	r3, r2
 8005032:	7819      	ldrb	r1, [r3, #0]
 8005034:	4a16      	ldr	r2, [pc, #88]	; (8005090 <main+0x3e10>)
 8005036:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4413      	add	r3, r2
 800503e:	460a      	mov	r2, r1
 8005040:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++) {
 8005042:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005046:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800504a:	6812      	ldr	r2, [r2, #0]
 800504c:	3201      	adds	r2, #1
 800504e:	601a      	str	r2, [r3, #0]
 8005050:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005054:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005058:	6812      	ldr	r2, [r2, #0]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	429a      	cmp	r2, r3
 800505e:	dbd7      	blt.n	8005010 <main+0x3d90>
	}

	free(in_img);
 8005060:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005064:	6818      	ldr	r0, [r3, #0]
 8005066:	f00d fbe9 	bl	801283c <free>

	while (1)
	{

		MX_USB_HOST_Process();
 800506a:	f00d f88b 	bl	8012184 <MX_USB_HOST_Process>

		sprintf(name,"De4.bmp"); //test4.bmp
 800506e:	4a09      	ldr	r2, [pc, #36]	; (8005094 <main+0x3e14>)
 8005070:	4b09      	ldr	r3, [pc, #36]	; (8005098 <main+0x3e18>)
 8005072:	cb03      	ldmia	r3!, {r0, r1}
 8005074:	6010      	str	r0, [r2, #0]
 8005076:	6051      	str	r1, [r2, #4]
		file_ready = 0;
 8005078:	4b08      	ldr	r3, [pc, #32]	; (800509c <main+0x3e1c>)
 800507a:	2200      	movs	r2, #0
 800507c:	601a      	str	r2, [r3, #0]
		write_bmp(name);
 800507e:	4805      	ldr	r0, [pc, #20]	; (8005094 <main+0x3e14>)
 8005080:	f00c ff98 	bl	8011fb4 <write_bmp>
		if(file_ready == 1){
 8005084:	4b05      	ldr	r3, [pc, #20]	; (800509c <main+0x3e1c>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2b01      	cmp	r3, #1
 800508a:	d1ee      	bne.n	800506a <main+0x3dea>
			break;
		}
	}

    while(1);
 800508c:	e7fe      	b.n	800508c <main+0x3e0c>
 800508e:	bf00      	nop
 8005090:	24000ed4 	.word	0x24000ed4
 8005094:	2400323c 	.word	0x2400323c
 8005098:	0801575c 	.word	0x0801575c
 800509c:	240002dc 	.word	0x240002dc

080050a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b0cc      	sub	sp, #304	; 0x130
 80050a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80050a6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80050aa:	224c      	movs	r2, #76	; 0x4c
 80050ac:	2100      	movs	r1, #0
 80050ae:	4618      	mov	r0, r3
 80050b0:	f00d fbd7 	bl	8012862 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80050b4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80050b8:	2220      	movs	r2, #32
 80050ba:	2100      	movs	r1, #0
 80050bc:	4618      	mov	r0, r3
 80050be:	f00d fbd0 	bl	8012862 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80050c2:	f107 0308 	add.w	r3, r7, #8
 80050c6:	4618      	mov	r0, r3
 80050c8:	23bc      	movs	r3, #188	; 0xbc
 80050ca:	461a      	mov	r2, r3
 80050cc:	2100      	movs	r1, #0
 80050ce:	f00d fbc8 	bl	8012862 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80050d2:	2002      	movs	r0, #2
 80050d4:	f003 f942 	bl	800835c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80050d8:	1d3b      	adds	r3, r7, #4
 80050da:	2200      	movs	r2, #0
 80050dc:	601a      	str	r2, [r3, #0]
 80050de:	4b4a      	ldr	r3, [pc, #296]	; (8005208 <SystemClock_Config+0x168>)
 80050e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e2:	4a49      	ldr	r2, [pc, #292]	; (8005208 <SystemClock_Config+0x168>)
 80050e4:	f023 0301 	bic.w	r3, r3, #1
 80050e8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80050ea:	4b47      	ldr	r3, [pc, #284]	; (8005208 <SystemClock_Config+0x168>)
 80050ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ee:	f003 0201 	and.w	r2, r3, #1
 80050f2:	1d3b      	adds	r3, r7, #4
 80050f4:	601a      	str	r2, [r3, #0]
 80050f6:	4b45      	ldr	r3, [pc, #276]	; (800520c <SystemClock_Config+0x16c>)
 80050f8:	699b      	ldr	r3, [r3, #24]
 80050fa:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80050fe:	4a43      	ldr	r2, [pc, #268]	; (800520c <SystemClock_Config+0x16c>)
 8005100:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005104:	6193      	str	r3, [r2, #24]
 8005106:	4b41      	ldr	r3, [pc, #260]	; (800520c <SystemClock_Config+0x16c>)
 8005108:	699b      	ldr	r3, [r3, #24]
 800510a:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800510e:	1d3b      	adds	r3, r7, #4
 8005110:	601a      	str	r2, [r3, #0]
 8005112:	1d3b      	adds	r3, r7, #4
 8005114:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8005116:	bf00      	nop
 8005118:	4b3c      	ldr	r3, [pc, #240]	; (800520c <SystemClock_Config+0x16c>)
 800511a:	699b      	ldr	r3, [r3, #24]
 800511c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005120:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005124:	d1f8      	bne.n	8005118 <SystemClock_Config+0x78>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005126:	2301      	movs	r3, #1
 8005128:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800512c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8005130:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005134:	2302      	movs	r3, #2
 8005136:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800513a:	2302      	movs	r3, #2
 800513c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8005140:	2301      	movs	r3, #1
 8005142:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 24;
 8005146:	2318      	movs	r3, #24
 8005148:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 800514c:	2302      	movs	r3, #2
 800514e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8005152:	2304      	movs	r3, #4
 8005154:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005158:	2302      	movs	r3, #2
 800515a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800515e:	230c      	movs	r3, #12
 8005160:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8005164:	2300      	movs	r3, #0
 8005166:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800516a:	2300      	movs	r3, #0
 800516c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005170:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005174:	4618      	mov	r0, r3
 8005176:	f003 f93b 	bl	80083f0 <HAL_RCC_OscConfig>
 800517a:	4603      	mov	r3, r0
 800517c:	2b00      	cmp	r3, #0
 800517e:	d001      	beq.n	8005184 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8005180:	f000 f9d6 	bl	8005530 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005184:	233f      	movs	r3, #63	; 0x3f
 8005186:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800518a:	2303      	movs	r3, #3
 800518c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8005190:	2300      	movs	r3, #0
 8005192:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8005196:	2300      	movs	r3, #0
 8005198:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800519c:	2300      	movs	r3, #0
 800519e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80051a2:	2300      	movs	r3, #0
 80051a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80051a8:	2300      	movs	r3, #0
 80051aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80051ae:	2300      	movs	r3, #0
 80051b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80051b4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80051b8:	2101      	movs	r1, #1
 80051ba:	4618      	mov	r0, r3
 80051bc:	f003 fd28 	bl	8008c10 <HAL_RCC_ClockConfig>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d001      	beq.n	80051ca <SystemClock_Config+0x12a>
  {
    Error_Handler();
 80051c6:	f000 f9b3 	bl	8005530 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USB;
 80051ca:	f107 0308 	add.w	r3, r7, #8
 80051ce:	4a10      	ldr	r2, [pc, #64]	; (8005210 <SystemClock_Config+0x170>)
 80051d0:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80051d2:	f107 0308 	add.w	r3, r7, #8
 80051d6:	2200      	movs	r2, #0
 80051d8:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80051da:	f107 0308 	add.w	r3, r7, #8
 80051de:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80051e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80051e6:	f107 0308 	add.w	r3, r7, #8
 80051ea:	4618      	mov	r0, r3
 80051ec:	f004 f894 	bl	8009318 <HAL_RCCEx_PeriphCLKConfig>
 80051f0:	4603      	mov	r3, r0
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d001      	beq.n	80051fa <SystemClock_Config+0x15a>
  {
    Error_Handler();
 80051f6:	f000 f99b 	bl	8005530 <Error_Handler>
  }
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 80051fa:	f003 f8e9 	bl	80083d0 <HAL_PWREx_EnableUSBVoltageDetector>
}
 80051fe:	bf00      	nop
 8005200:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}
 8005208:	58000400 	.word	0x58000400
 800520c:	58024800 	.word	0x58024800
 8005210:	00040002 	.word	0x00040002

08005214 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8005218:	4b22      	ldr	r3, [pc, #136]	; (80052a4 <MX_ETH_Init+0x90>)
 800521a:	4a23      	ldr	r2, [pc, #140]	; (80052a8 <MX_ETH_Init+0x94>)
 800521c:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 800521e:	4b21      	ldr	r3, [pc, #132]	; (80052a4 <MX_ETH_Init+0x90>)
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8005226:	4b1f      	ldr	r3, [pc, #124]	; (80052a4 <MX_ETH_Init+0x90>)
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	3301      	adds	r3, #1
 800522c:	2280      	movs	r2, #128	; 0x80
 800522e:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8005230:	4b1c      	ldr	r3, [pc, #112]	; (80052a4 <MX_ETH_Init+0x90>)
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	3302      	adds	r3, #2
 8005236:	22e1      	movs	r2, #225	; 0xe1
 8005238:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 800523a:	4b1a      	ldr	r3, [pc, #104]	; (80052a4 <MX_ETH_Init+0x90>)
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	3303      	adds	r3, #3
 8005240:	2200      	movs	r2, #0
 8005242:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8005244:	4b17      	ldr	r3, [pc, #92]	; (80052a4 <MX_ETH_Init+0x90>)
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	3304      	adds	r3, #4
 800524a:	2200      	movs	r2, #0
 800524c:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 800524e:	4b15      	ldr	r3, [pc, #84]	; (80052a4 <MX_ETH_Init+0x90>)
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	3305      	adds	r3, #5
 8005254:	2200      	movs	r2, #0
 8005256:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8005258:	4b12      	ldr	r3, [pc, #72]	; (80052a4 <MX_ETH_Init+0x90>)
 800525a:	2201      	movs	r2, #1
 800525c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800525e:	4b11      	ldr	r3, [pc, #68]	; (80052a4 <MX_ETH_Init+0x90>)
 8005260:	4a12      	ldr	r2, [pc, #72]	; (80052ac <MX_ETH_Init+0x98>)
 8005262:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8005264:	4b0f      	ldr	r3, [pc, #60]	; (80052a4 <MX_ETH_Init+0x90>)
 8005266:	4a12      	ldr	r2, [pc, #72]	; (80052b0 <MX_ETH_Init+0x9c>)
 8005268:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800526a:	4b0e      	ldr	r3, [pc, #56]	; (80052a4 <MX_ETH_Init+0x90>)
 800526c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005270:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8005272:	480c      	ldr	r0, [pc, #48]	; (80052a4 <MX_ETH_Init+0x90>)
 8005274:	f000 fda2 	bl	8005dbc <HAL_ETH_Init>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d001      	beq.n	8005282 <MX_ETH_Init+0x6e>
  {
    Error_Handler();
 800527e:	f000 f957 	bl	8005530 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8005282:	2234      	movs	r2, #52	; 0x34
 8005284:	2100      	movs	r1, #0
 8005286:	480b      	ldr	r0, [pc, #44]	; (80052b4 <MX_ETH_Init+0xa0>)
 8005288:	f00d faeb 	bl	8012862 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800528c:	4b09      	ldr	r3, [pc, #36]	; (80052b4 <MX_ETH_Init+0xa0>)
 800528e:	2221      	movs	r2, #33	; 0x21
 8005290:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8005292:	4b08      	ldr	r3, [pc, #32]	; (80052b4 <MX_ETH_Init+0xa0>)
 8005294:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005298:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800529a:	4b06      	ldr	r3, [pc, #24]	; (80052b4 <MX_ETH_Init+0xa0>)
 800529c:	2200      	movs	r2, #0
 800529e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80052a0:	bf00      	nop
 80052a2:	bd80      	pop	{r7, pc}
 80052a4:	240003b8 	.word	0x240003b8
 80052a8:	40028000 	.word	0x40028000
 80052ac:	24000260 	.word	0x24000260
 80052b0:	24000200 	.word	0x24000200
 80052b4:	24000428 	.word	0x24000428

080052b8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80052bc:	4b22      	ldr	r3, [pc, #136]	; (8005348 <MX_USART3_UART_Init+0x90>)
 80052be:	4a23      	ldr	r2, [pc, #140]	; (800534c <MX_USART3_UART_Init+0x94>)
 80052c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80052c2:	4b21      	ldr	r3, [pc, #132]	; (8005348 <MX_USART3_UART_Init+0x90>)
 80052c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80052c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80052ca:	4b1f      	ldr	r3, [pc, #124]	; (8005348 <MX_USART3_UART_Init+0x90>)
 80052cc:	2200      	movs	r2, #0
 80052ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80052d0:	4b1d      	ldr	r3, [pc, #116]	; (8005348 <MX_USART3_UART_Init+0x90>)
 80052d2:	2200      	movs	r2, #0
 80052d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80052d6:	4b1c      	ldr	r3, [pc, #112]	; (8005348 <MX_USART3_UART_Init+0x90>)
 80052d8:	2200      	movs	r2, #0
 80052da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80052dc:	4b1a      	ldr	r3, [pc, #104]	; (8005348 <MX_USART3_UART_Init+0x90>)
 80052de:	220c      	movs	r2, #12
 80052e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80052e2:	4b19      	ldr	r3, [pc, #100]	; (8005348 <MX_USART3_UART_Init+0x90>)
 80052e4:	2200      	movs	r2, #0
 80052e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80052e8:	4b17      	ldr	r3, [pc, #92]	; (8005348 <MX_USART3_UART_Init+0x90>)
 80052ea:	2200      	movs	r2, #0
 80052ec:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80052ee:	4b16      	ldr	r3, [pc, #88]	; (8005348 <MX_USART3_UART_Init+0x90>)
 80052f0:	2200      	movs	r2, #0
 80052f2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80052f4:	4b14      	ldr	r3, [pc, #80]	; (8005348 <MX_USART3_UART_Init+0x90>)
 80052f6:	2200      	movs	r2, #0
 80052f8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80052fa:	4b13      	ldr	r3, [pc, #76]	; (8005348 <MX_USART3_UART_Init+0x90>)
 80052fc:	2200      	movs	r2, #0
 80052fe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005300:	4811      	ldr	r0, [pc, #68]	; (8005348 <MX_USART3_UART_Init+0x90>)
 8005302:	f005 fb09 	bl	800a918 <HAL_UART_Init>
 8005306:	4603      	mov	r3, r0
 8005308:	2b00      	cmp	r3, #0
 800530a:	d001      	beq.n	8005310 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800530c:	f000 f910 	bl	8005530 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005310:	2100      	movs	r1, #0
 8005312:	480d      	ldr	r0, [pc, #52]	; (8005348 <MX_USART3_UART_Init+0x90>)
 8005314:	f006 faa3 	bl	800b85e <HAL_UARTEx_SetTxFifoThreshold>
 8005318:	4603      	mov	r3, r0
 800531a:	2b00      	cmp	r3, #0
 800531c:	d001      	beq.n	8005322 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800531e:	f000 f907 	bl	8005530 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005322:	2100      	movs	r1, #0
 8005324:	4808      	ldr	r0, [pc, #32]	; (8005348 <MX_USART3_UART_Init+0x90>)
 8005326:	f006 fad8 	bl	800b8da <HAL_UARTEx_SetRxFifoThreshold>
 800532a:	4603      	mov	r3, r0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d001      	beq.n	8005334 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8005330:	f000 f8fe 	bl	8005530 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8005334:	4804      	ldr	r0, [pc, #16]	; (8005348 <MX_USART3_UART_Init+0x90>)
 8005336:	f006 fa59 	bl	800b7ec <HAL_UARTEx_DisableFifoMode>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d001      	beq.n	8005344 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8005340:	f000 f8f6 	bl	8005530 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005344:	bf00      	nop
 8005346:	bd80      	pop	{r7, pc}
 8005348:	2400032c 	.word	0x2400032c
 800534c:	40004800 	.word	0x40004800

08005350 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b08c      	sub	sp, #48	; 0x30
 8005354:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005356:	f107 031c 	add.w	r3, r7, #28
 800535a:	2200      	movs	r2, #0
 800535c:	601a      	str	r2, [r3, #0]
 800535e:	605a      	str	r2, [r3, #4]
 8005360:	609a      	str	r2, [r3, #8]
 8005362:	60da      	str	r2, [r3, #12]
 8005364:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005366:	4b6b      	ldr	r3, [pc, #428]	; (8005514 <MX_GPIO_Init+0x1c4>)
 8005368:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800536c:	4a69      	ldr	r2, [pc, #420]	; (8005514 <MX_GPIO_Init+0x1c4>)
 800536e:	f043 0304 	orr.w	r3, r3, #4
 8005372:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005376:	4b67      	ldr	r3, [pc, #412]	; (8005514 <MX_GPIO_Init+0x1c4>)
 8005378:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800537c:	f003 0304 	and.w	r3, r3, #4
 8005380:	61bb      	str	r3, [r7, #24]
 8005382:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005384:	4b63      	ldr	r3, [pc, #396]	; (8005514 <MX_GPIO_Init+0x1c4>)
 8005386:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800538a:	4a62      	ldr	r2, [pc, #392]	; (8005514 <MX_GPIO_Init+0x1c4>)
 800538c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005390:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005394:	4b5f      	ldr	r3, [pc, #380]	; (8005514 <MX_GPIO_Init+0x1c4>)
 8005396:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800539a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800539e:	617b      	str	r3, [r7, #20]
 80053a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80053a2:	4b5c      	ldr	r3, [pc, #368]	; (8005514 <MX_GPIO_Init+0x1c4>)
 80053a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80053a8:	4a5a      	ldr	r2, [pc, #360]	; (8005514 <MX_GPIO_Init+0x1c4>)
 80053aa:	f043 0301 	orr.w	r3, r3, #1
 80053ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80053b2:	4b58      	ldr	r3, [pc, #352]	; (8005514 <MX_GPIO_Init+0x1c4>)
 80053b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80053b8:	f003 0301 	and.w	r3, r3, #1
 80053bc:	613b      	str	r3, [r7, #16]
 80053be:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80053c0:	4b54      	ldr	r3, [pc, #336]	; (8005514 <MX_GPIO_Init+0x1c4>)
 80053c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80053c6:	4a53      	ldr	r2, [pc, #332]	; (8005514 <MX_GPIO_Init+0x1c4>)
 80053c8:	f043 0302 	orr.w	r3, r3, #2
 80053cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80053d0:	4b50      	ldr	r3, [pc, #320]	; (8005514 <MX_GPIO_Init+0x1c4>)
 80053d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80053d6:	f003 0302 	and.w	r3, r3, #2
 80053da:	60fb      	str	r3, [r7, #12]
 80053dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80053de:	4b4d      	ldr	r3, [pc, #308]	; (8005514 <MX_GPIO_Init+0x1c4>)
 80053e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80053e4:	4a4b      	ldr	r2, [pc, #300]	; (8005514 <MX_GPIO_Init+0x1c4>)
 80053e6:	f043 0308 	orr.w	r3, r3, #8
 80053ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80053ee:	4b49      	ldr	r3, [pc, #292]	; (8005514 <MX_GPIO_Init+0x1c4>)
 80053f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80053f4:	f003 0308 	and.w	r3, r3, #8
 80053f8:	60bb      	str	r3, [r7, #8]
 80053fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80053fc:	4b45      	ldr	r3, [pc, #276]	; (8005514 <MX_GPIO_Init+0x1c4>)
 80053fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005402:	4a44      	ldr	r2, [pc, #272]	; (8005514 <MX_GPIO_Init+0x1c4>)
 8005404:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005408:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800540c:	4b41      	ldr	r3, [pc, #260]	; (8005514 <MX_GPIO_Init+0x1c4>)
 800540e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005416:	607b      	str	r3, [r7, #4]
 8005418:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800541a:	4b3e      	ldr	r3, [pc, #248]	; (8005514 <MX_GPIO_Init+0x1c4>)
 800541c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005420:	4a3c      	ldr	r2, [pc, #240]	; (8005514 <MX_GPIO_Init+0x1c4>)
 8005422:	f043 0310 	orr.w	r3, r3, #16
 8005426:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800542a:	4b3a      	ldr	r3, [pc, #232]	; (8005514 <MX_GPIO_Init+0x1c4>)
 800542c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005430:	f003 0310 	and.w	r3, r3, #16
 8005434:	603b      	str	r3, [r7, #0]
 8005436:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8005438:	2200      	movs	r2, #0
 800543a:	f244 0101 	movw	r1, #16385	; 0x4001
 800543e:	4836      	ldr	r0, [pc, #216]	; (8005518 <MX_GPIO_Init+0x1c8>)
 8005440:	f001 fa82 	bl	8006948 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8005444:	2200      	movs	r2, #0
 8005446:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800544a:	4834      	ldr	r0, [pc, #208]	; (800551c <MX_GPIO_Init+0x1cc>)
 800544c:	f001 fa7c 	bl	8006948 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8005450:	2200      	movs	r2, #0
 8005452:	2140      	movs	r1, #64	; 0x40
 8005454:	4832      	ldr	r0, [pc, #200]	; (8005520 <MX_GPIO_Init+0x1d0>)
 8005456:	f001 fa77 	bl	8006948 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800545a:	2200      	movs	r2, #0
 800545c:	2102      	movs	r1, #2
 800545e:	4831      	ldr	r0, [pc, #196]	; (8005524 <MX_GPIO_Init+0x1d4>)
 8005460:	f001 fa72 	bl	8006948 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8005464:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005468:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800546a:	2300      	movs	r3, #0
 800546c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800546e:	2300      	movs	r3, #0
 8005470:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8005472:	f107 031c 	add.w	r3, r7, #28
 8005476:	4619      	mov	r1, r3
 8005478:	482b      	ldr	r0, [pc, #172]	; (8005528 <MX_GPIO_Init+0x1d8>)
 800547a:	f001 f8b5 	bl	80065e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 800547e:	f244 0301 	movw	r3, #16385	; 0x4001
 8005482:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005484:	2301      	movs	r3, #1
 8005486:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005488:	2300      	movs	r3, #0
 800548a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800548c:	2300      	movs	r3, #0
 800548e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005490:	f107 031c 	add.w	r3, r7, #28
 8005494:	4619      	mov	r1, r3
 8005496:	4820      	ldr	r0, [pc, #128]	; (8005518 <MX_GPIO_Init+0x1c8>)
 8005498:	f001 f8a6 	bl	80065e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 800549c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80054a2:	2301      	movs	r3, #1
 80054a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054a6:	2300      	movs	r3, #0
 80054a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054aa:	2300      	movs	r3, #0
 80054ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80054ae:	f107 031c 	add.w	r3, r7, #28
 80054b2:	4619      	mov	r1, r3
 80054b4:	4819      	ldr	r0, [pc, #100]	; (800551c <MX_GPIO_Init+0x1cc>)
 80054b6:	f001 f897 	bl	80065e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80054ba:	2340      	movs	r3, #64	; 0x40
 80054bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80054be:	2301      	movs	r3, #1
 80054c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054c2:	2300      	movs	r3, #0
 80054c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054c6:	2300      	movs	r3, #0
 80054c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80054ca:	f107 031c 	add.w	r3, r7, #28
 80054ce:	4619      	mov	r1, r3
 80054d0:	4813      	ldr	r0, [pc, #76]	; (8005520 <MX_GPIO_Init+0x1d0>)
 80054d2:	f001 f889 	bl	80065e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 80054d6:	2380      	movs	r3, #128	; 0x80
 80054d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80054da:	4b14      	ldr	r3, [pc, #80]	; (800552c <MX_GPIO_Init+0x1dc>)
 80054dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054de:	2300      	movs	r3, #0
 80054e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80054e2:	f107 031c 	add.w	r3, r7, #28
 80054e6:	4619      	mov	r1, r3
 80054e8:	480d      	ldr	r0, [pc, #52]	; (8005520 <MX_GPIO_Init+0x1d0>)
 80054ea:	f001 f87d 	bl	80065e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80054ee:	2302      	movs	r3, #2
 80054f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80054f2:	2301      	movs	r3, #1
 80054f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054f6:	2300      	movs	r3, #0
 80054f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054fa:	2300      	movs	r3, #0
 80054fc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80054fe:	f107 031c 	add.w	r3, r7, #28
 8005502:	4619      	mov	r1, r3
 8005504:	4807      	ldr	r0, [pc, #28]	; (8005524 <MX_GPIO_Init+0x1d4>)
 8005506:	f001 f86f 	bl	80065e8 <HAL_GPIO_Init>

}
 800550a:	bf00      	nop
 800550c:	3730      	adds	r7, #48	; 0x30
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	58024400 	.word	0x58024400
 8005518:	58020400 	.word	0x58020400
 800551c:	58020c00 	.word	0x58020c00
 8005520:	58021800 	.word	0x58021800
 8005524:	58021000 	.word	0x58021000
 8005528:	58020800 	.word	0x58020800
 800552c:	11110000 	.word	0x11110000

08005530 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 8005534:	2201      	movs	r2, #1
 8005536:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800553a:	4802      	ldr	r0, [pc, #8]	; (8005544 <Error_Handler+0x14>)
 800553c:	f001 fa04 	bl	8006948 <HAL_GPIO_WritePin>
  /* USER CODE END Error_Handler_Debug */
}
 8005540:	bf00      	nop
 8005542:	bd80      	pop	{r7, pc}
 8005544:	58020400 	.word	0x58020400

08005548 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005548:	b480      	push	{r7}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800554e:	4b0a      	ldr	r3, [pc, #40]	; (8005578 <HAL_MspInit+0x30>)
 8005550:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005554:	4a08      	ldr	r2, [pc, #32]	; (8005578 <HAL_MspInit+0x30>)
 8005556:	f043 0302 	orr.w	r3, r3, #2
 800555a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800555e:	4b06      	ldr	r3, [pc, #24]	; (8005578 <HAL_MspInit+0x30>)
 8005560:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005564:	f003 0302 	and.w	r3, r3, #2
 8005568:	607b      	str	r3, [r7, #4]
 800556a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800556c:	bf00      	nop
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr
 8005578:	58024400 	.word	0x58024400

0800557c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b08e      	sub	sp, #56	; 0x38
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005584:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005588:	2200      	movs	r2, #0
 800558a:	601a      	str	r2, [r3, #0]
 800558c:	605a      	str	r2, [r3, #4]
 800558e:	609a      	str	r2, [r3, #8]
 8005590:	60da      	str	r2, [r3, #12]
 8005592:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a59      	ldr	r2, [pc, #356]	; (8005700 <HAL_ETH_MspInit+0x184>)
 800559a:	4293      	cmp	r3, r2
 800559c:	f040 80ab 	bne.w	80056f6 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80055a0:	4b58      	ldr	r3, [pc, #352]	; (8005704 <HAL_ETH_MspInit+0x188>)
 80055a2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80055a6:	4a57      	ldr	r2, [pc, #348]	; (8005704 <HAL_ETH_MspInit+0x188>)
 80055a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055ac:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80055b0:	4b54      	ldr	r3, [pc, #336]	; (8005704 <HAL_ETH_MspInit+0x188>)
 80055b2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80055b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055ba:	623b      	str	r3, [r7, #32]
 80055bc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80055be:	4b51      	ldr	r3, [pc, #324]	; (8005704 <HAL_ETH_MspInit+0x188>)
 80055c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80055c4:	4a4f      	ldr	r2, [pc, #316]	; (8005704 <HAL_ETH_MspInit+0x188>)
 80055c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055ca:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80055ce:	4b4d      	ldr	r3, [pc, #308]	; (8005704 <HAL_ETH_MspInit+0x188>)
 80055d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80055d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055d8:	61fb      	str	r3, [r7, #28]
 80055da:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80055dc:	4b49      	ldr	r3, [pc, #292]	; (8005704 <HAL_ETH_MspInit+0x188>)
 80055de:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80055e2:	4a48      	ldr	r2, [pc, #288]	; (8005704 <HAL_ETH_MspInit+0x188>)
 80055e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055e8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80055ec:	4b45      	ldr	r3, [pc, #276]	; (8005704 <HAL_ETH_MspInit+0x188>)
 80055ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80055f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055f6:	61bb      	str	r3, [r7, #24]
 80055f8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80055fa:	4b42      	ldr	r3, [pc, #264]	; (8005704 <HAL_ETH_MspInit+0x188>)
 80055fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005600:	4a40      	ldr	r2, [pc, #256]	; (8005704 <HAL_ETH_MspInit+0x188>)
 8005602:	f043 0304 	orr.w	r3, r3, #4
 8005606:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800560a:	4b3e      	ldr	r3, [pc, #248]	; (8005704 <HAL_ETH_MspInit+0x188>)
 800560c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005610:	f003 0304 	and.w	r3, r3, #4
 8005614:	617b      	str	r3, [r7, #20]
 8005616:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005618:	4b3a      	ldr	r3, [pc, #232]	; (8005704 <HAL_ETH_MspInit+0x188>)
 800561a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800561e:	4a39      	ldr	r2, [pc, #228]	; (8005704 <HAL_ETH_MspInit+0x188>)
 8005620:	f043 0301 	orr.w	r3, r3, #1
 8005624:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005628:	4b36      	ldr	r3, [pc, #216]	; (8005704 <HAL_ETH_MspInit+0x188>)
 800562a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800562e:	f003 0301 	and.w	r3, r3, #1
 8005632:	613b      	str	r3, [r7, #16]
 8005634:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005636:	4b33      	ldr	r3, [pc, #204]	; (8005704 <HAL_ETH_MspInit+0x188>)
 8005638:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800563c:	4a31      	ldr	r2, [pc, #196]	; (8005704 <HAL_ETH_MspInit+0x188>)
 800563e:	f043 0302 	orr.w	r3, r3, #2
 8005642:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005646:	4b2f      	ldr	r3, [pc, #188]	; (8005704 <HAL_ETH_MspInit+0x188>)
 8005648:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800564c:	f003 0302 	and.w	r3, r3, #2
 8005650:	60fb      	str	r3, [r7, #12]
 8005652:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005654:	4b2b      	ldr	r3, [pc, #172]	; (8005704 <HAL_ETH_MspInit+0x188>)
 8005656:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800565a:	4a2a      	ldr	r2, [pc, #168]	; (8005704 <HAL_ETH_MspInit+0x188>)
 800565c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005660:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005664:	4b27      	ldr	r3, [pc, #156]	; (8005704 <HAL_ETH_MspInit+0x188>)
 8005666:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800566a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800566e:	60bb      	str	r3, [r7, #8]
 8005670:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8005672:	2332      	movs	r3, #50	; 0x32
 8005674:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005676:	2302      	movs	r3, #2
 8005678:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800567a:	2300      	movs	r3, #0
 800567c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800567e:	2300      	movs	r3, #0
 8005680:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005682:	230b      	movs	r3, #11
 8005684:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005686:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800568a:	4619      	mov	r1, r3
 800568c:	481e      	ldr	r0, [pc, #120]	; (8005708 <HAL_ETH_MspInit+0x18c>)
 800568e:	f000 ffab 	bl	80065e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8005692:	2386      	movs	r3, #134	; 0x86
 8005694:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005696:	2302      	movs	r3, #2
 8005698:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800569a:	2300      	movs	r3, #0
 800569c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800569e:	2300      	movs	r3, #0
 80056a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80056a2:	230b      	movs	r3, #11
 80056a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056aa:	4619      	mov	r1, r3
 80056ac:	4817      	ldr	r0, [pc, #92]	; (800570c <HAL_ETH_MspInit+0x190>)
 80056ae:	f000 ff9b 	bl	80065e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80056b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80056b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056b8:	2302      	movs	r3, #2
 80056ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056bc:	2300      	movs	r3, #0
 80056be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056c0:	2300      	movs	r3, #0
 80056c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80056c4:	230b      	movs	r3, #11
 80056c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056cc:	4619      	mov	r1, r3
 80056ce:	4810      	ldr	r0, [pc, #64]	; (8005710 <HAL_ETH_MspInit+0x194>)
 80056d0:	f000 ff8a 	bl	80065e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80056d4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80056d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056da:	2302      	movs	r3, #2
 80056dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056de:	2300      	movs	r3, #0
 80056e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056e2:	2300      	movs	r3, #0
 80056e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80056e6:	230b      	movs	r3, #11
 80056e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80056ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056ee:	4619      	mov	r1, r3
 80056f0:	4808      	ldr	r0, [pc, #32]	; (8005714 <HAL_ETH_MspInit+0x198>)
 80056f2:	f000 ff79 	bl	80065e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80056f6:	bf00      	nop
 80056f8:	3738      	adds	r7, #56	; 0x38
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}
 80056fe:	bf00      	nop
 8005700:	40028000 	.word	0x40028000
 8005704:	58024400 	.word	0x58024400
 8005708:	58020800 	.word	0x58020800
 800570c:	58020000 	.word	0x58020000
 8005710:	58020400 	.word	0x58020400
 8005714:	58021800 	.word	0x58021800

08005718 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b08a      	sub	sp, #40	; 0x28
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005720:	f107 0314 	add.w	r3, r7, #20
 8005724:	2200      	movs	r2, #0
 8005726:	601a      	str	r2, [r3, #0]
 8005728:	605a      	str	r2, [r3, #4]
 800572a:	609a      	str	r2, [r3, #8]
 800572c:	60da      	str	r2, [r3, #12]
 800572e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a1a      	ldr	r2, [pc, #104]	; (80057a0 <HAL_UART_MspInit+0x88>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d12e      	bne.n	8005798 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800573a:	4b1a      	ldr	r3, [pc, #104]	; (80057a4 <HAL_UART_MspInit+0x8c>)
 800573c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005740:	4a18      	ldr	r2, [pc, #96]	; (80057a4 <HAL_UART_MspInit+0x8c>)
 8005742:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005746:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800574a:	4b16      	ldr	r3, [pc, #88]	; (80057a4 <HAL_UART_MspInit+0x8c>)
 800574c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005750:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005754:	613b      	str	r3, [r7, #16]
 8005756:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005758:	4b12      	ldr	r3, [pc, #72]	; (80057a4 <HAL_UART_MspInit+0x8c>)
 800575a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800575e:	4a11      	ldr	r2, [pc, #68]	; (80057a4 <HAL_UART_MspInit+0x8c>)
 8005760:	f043 0308 	orr.w	r3, r3, #8
 8005764:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005768:	4b0e      	ldr	r3, [pc, #56]	; (80057a4 <HAL_UART_MspInit+0x8c>)
 800576a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800576e:	f003 0308 	and.w	r3, r3, #8
 8005772:	60fb      	str	r3, [r7, #12]
 8005774:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8005776:	f44f 7340 	mov.w	r3, #768	; 0x300
 800577a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800577c:	2302      	movs	r3, #2
 800577e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005780:	2300      	movs	r3, #0
 8005782:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005784:	2300      	movs	r3, #0
 8005786:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005788:	2307      	movs	r3, #7
 800578a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800578c:	f107 0314 	add.w	r3, r7, #20
 8005790:	4619      	mov	r1, r3
 8005792:	4805      	ldr	r0, [pc, #20]	; (80057a8 <HAL_UART_MspInit+0x90>)
 8005794:	f000 ff28 	bl	80065e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005798:	bf00      	nop
 800579a:	3728      	adds	r7, #40	; 0x28
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}
 80057a0:	40004800 	.word	0x40004800
 80057a4:	58024400 	.word	0x58024400
 80057a8:	58020c00 	.word	0x58020c00

080057ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80057ac:	b480      	push	{r7}
 80057ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80057b0:	bf00      	nop
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr

080057ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80057ba:	b480      	push	{r7}
 80057bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80057be:	e7fe      	b.n	80057be <HardFault_Handler+0x4>

080057c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80057c0:	b480      	push	{r7}
 80057c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80057c4:	e7fe      	b.n	80057c4 <MemManage_Handler+0x4>

080057c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80057c6:	b480      	push	{r7}
 80057c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80057ca:	e7fe      	b.n	80057ca <BusFault_Handler+0x4>

080057cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80057cc:	b480      	push	{r7}
 80057ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80057d0:	e7fe      	b.n	80057d0 <UsageFault_Handler+0x4>

080057d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80057d2:	b480      	push	{r7}
 80057d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80057d6:	bf00      	nop
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr

080057e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80057e0:	b480      	push	{r7}
 80057e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80057e4:	bf00      	nop
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr

080057ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80057ee:	b480      	push	{r7}
 80057f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80057f2:	bf00      	nop
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr

080057fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005800:	f000 f96a 	bl	8005ad8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005804:	bf00      	nop
 8005806:	bd80      	pop	{r7, pc}

08005808 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800580c:	4802      	ldr	r0, [pc, #8]	; (8005818 <OTG_FS_IRQHandler+0x10>)
 800580e:	f001 fb43 	bl	8006e98 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8005812:	bf00      	nop
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	24003248 	.word	0x24003248

0800581c <_sbrk>:
 800581c:	b580      	push	{r7, lr}
 800581e:	b086      	sub	sp, #24
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	4a14      	ldr	r2, [pc, #80]	; (8005878 <_sbrk+0x5c>)
 8005826:	4b15      	ldr	r3, [pc, #84]	; (800587c <_sbrk+0x60>)
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	617b      	str	r3, [r7, #20]
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	613b      	str	r3, [r7, #16]
 8005830:	4b13      	ldr	r3, [pc, #76]	; (8005880 <_sbrk+0x64>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d102      	bne.n	800583e <_sbrk+0x22>
 8005838:	4b11      	ldr	r3, [pc, #68]	; (8005880 <_sbrk+0x64>)
 800583a:	4a12      	ldr	r2, [pc, #72]	; (8005884 <_sbrk+0x68>)
 800583c:	601a      	str	r2, [r3, #0]
 800583e:	4b10      	ldr	r3, [pc, #64]	; (8005880 <_sbrk+0x64>)
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4413      	add	r3, r2
 8005846:	693a      	ldr	r2, [r7, #16]
 8005848:	429a      	cmp	r2, r3
 800584a:	d207      	bcs.n	800585c <_sbrk+0x40>
 800584c:	f00c ffc4 	bl	80127d8 <__errno>
 8005850:	4602      	mov	r2, r0
 8005852:	230c      	movs	r3, #12
 8005854:	6013      	str	r3, [r2, #0]
 8005856:	f04f 33ff 	mov.w	r3, #4294967295
 800585a:	e009      	b.n	8005870 <_sbrk+0x54>
 800585c:	4b08      	ldr	r3, [pc, #32]	; (8005880 <_sbrk+0x64>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	60fb      	str	r3, [r7, #12]
 8005862:	4b07      	ldr	r3, [pc, #28]	; (8005880 <_sbrk+0x64>)
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4413      	add	r3, r2
 800586a:	4a05      	ldr	r2, [pc, #20]	; (8005880 <_sbrk+0x64>)
 800586c:	6013      	str	r3, [r2, #0]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	4618      	mov	r0, r3
 8005872:	3718      	adds	r7, #24
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}
 8005878:	24080000 	.word	0x24080000
 800587c:	00000400 	.word	0x00000400
 8005880:	240002e0 	.word	0x240002e0
 8005884:	24003510 	.word	0x24003510

08005888 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005888:	b480      	push	{r7}
 800588a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800588c:	4b39      	ldr	r3, [pc, #228]	; (8005974 <SystemInit+0xec>)
 800588e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005892:	4a38      	ldr	r2, [pc, #224]	; (8005974 <SystemInit+0xec>)
 8005894:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005898:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800589c:	4b36      	ldr	r3, [pc, #216]	; (8005978 <SystemInit+0xf0>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 030f 	and.w	r3, r3, #15
 80058a4:	2b06      	cmp	r3, #6
 80058a6:	d807      	bhi.n	80058b8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80058a8:	4b33      	ldr	r3, [pc, #204]	; (8005978 <SystemInit+0xf0>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f023 030f 	bic.w	r3, r3, #15
 80058b0:	4a31      	ldr	r2, [pc, #196]	; (8005978 <SystemInit+0xf0>)
 80058b2:	f043 0307 	orr.w	r3, r3, #7
 80058b6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80058b8:	4b30      	ldr	r3, [pc, #192]	; (800597c <SystemInit+0xf4>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a2f      	ldr	r2, [pc, #188]	; (800597c <SystemInit+0xf4>)
 80058be:	f043 0301 	orr.w	r3, r3, #1
 80058c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80058c4:	4b2d      	ldr	r3, [pc, #180]	; (800597c <SystemInit+0xf4>)
 80058c6:	2200      	movs	r2, #0
 80058c8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80058ca:	4b2c      	ldr	r3, [pc, #176]	; (800597c <SystemInit+0xf4>)
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	492b      	ldr	r1, [pc, #172]	; (800597c <SystemInit+0xf4>)
 80058d0:	4b2b      	ldr	r3, [pc, #172]	; (8005980 <SystemInit+0xf8>)
 80058d2:	4013      	ands	r3, r2
 80058d4:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80058d6:	4b28      	ldr	r3, [pc, #160]	; (8005978 <SystemInit+0xf0>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f003 030f 	and.w	r3, r3, #15
 80058de:	2b07      	cmp	r3, #7
 80058e0:	d907      	bls.n	80058f2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80058e2:	4b25      	ldr	r3, [pc, #148]	; (8005978 <SystemInit+0xf0>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f023 030f 	bic.w	r3, r3, #15
 80058ea:	4a23      	ldr	r2, [pc, #140]	; (8005978 <SystemInit+0xf0>)
 80058ec:	f043 0307 	orr.w	r3, r3, #7
 80058f0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80058f2:	4b22      	ldr	r3, [pc, #136]	; (800597c <SystemInit+0xf4>)
 80058f4:	2200      	movs	r2, #0
 80058f6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80058f8:	4b20      	ldr	r3, [pc, #128]	; (800597c <SystemInit+0xf4>)
 80058fa:	2200      	movs	r2, #0
 80058fc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80058fe:	4b1f      	ldr	r3, [pc, #124]	; (800597c <SystemInit+0xf4>)
 8005900:	2200      	movs	r2, #0
 8005902:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8005904:	4b1d      	ldr	r3, [pc, #116]	; (800597c <SystemInit+0xf4>)
 8005906:	4a1f      	ldr	r2, [pc, #124]	; (8005984 <SystemInit+0xfc>)
 8005908:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800590a:	4b1c      	ldr	r3, [pc, #112]	; (800597c <SystemInit+0xf4>)
 800590c:	4a1e      	ldr	r2, [pc, #120]	; (8005988 <SystemInit+0x100>)
 800590e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8005910:	4b1a      	ldr	r3, [pc, #104]	; (800597c <SystemInit+0xf4>)
 8005912:	4a1e      	ldr	r2, [pc, #120]	; (800598c <SystemInit+0x104>)
 8005914:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8005916:	4b19      	ldr	r3, [pc, #100]	; (800597c <SystemInit+0xf4>)
 8005918:	2200      	movs	r2, #0
 800591a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800591c:	4b17      	ldr	r3, [pc, #92]	; (800597c <SystemInit+0xf4>)
 800591e:	4a1b      	ldr	r2, [pc, #108]	; (800598c <SystemInit+0x104>)
 8005920:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8005922:	4b16      	ldr	r3, [pc, #88]	; (800597c <SystemInit+0xf4>)
 8005924:	2200      	movs	r2, #0
 8005926:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8005928:	4b14      	ldr	r3, [pc, #80]	; (800597c <SystemInit+0xf4>)
 800592a:	4a18      	ldr	r2, [pc, #96]	; (800598c <SystemInit+0x104>)
 800592c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800592e:	4b13      	ldr	r3, [pc, #76]	; (800597c <SystemInit+0xf4>)
 8005930:	2200      	movs	r2, #0
 8005932:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005934:	4b11      	ldr	r3, [pc, #68]	; (800597c <SystemInit+0xf4>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a10      	ldr	r2, [pc, #64]	; (800597c <SystemInit+0xf4>)
 800593a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800593e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005940:	4b0e      	ldr	r3, [pc, #56]	; (800597c <SystemInit+0xf4>)
 8005942:	2200      	movs	r2, #0
 8005944:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8005946:	4b12      	ldr	r3, [pc, #72]	; (8005990 <SystemInit+0x108>)
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	4b12      	ldr	r3, [pc, #72]	; (8005994 <SystemInit+0x10c>)
 800594c:	4013      	ands	r3, r2
 800594e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005952:	d202      	bcs.n	800595a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8005954:	4b10      	ldr	r3, [pc, #64]	; (8005998 <SystemInit+0x110>)
 8005956:	2201      	movs	r2, #1
 8005958:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800595a:	4b10      	ldr	r3, [pc, #64]	; (800599c <SystemInit+0x114>)
 800595c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8005960:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005962:	4b04      	ldr	r3, [pc, #16]	; (8005974 <SystemInit+0xec>)
 8005964:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005968:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800596a:	bf00      	nop
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr
 8005974:	e000ed00 	.word	0xe000ed00
 8005978:	52002000 	.word	0x52002000
 800597c:	58024400 	.word	0x58024400
 8005980:	eaf6ed7f 	.word	0xeaf6ed7f
 8005984:	02020200 	.word	0x02020200
 8005988:	01ff0000 	.word	0x01ff0000
 800598c:	01010280 	.word	0x01010280
 8005990:	5c001000 	.word	0x5c001000
 8005994:	ffff0000 	.word	0xffff0000
 8005998:	51008108 	.word	0x51008108
 800599c:	52004000 	.word	0x52004000

080059a0 <Reset_Handler>:
 80059a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80059d8 <LoopFillZerobss+0x10>
 80059a4:	f7ff ff70 	bl	8005888 <SystemInit>
 80059a8:	2100      	movs	r1, #0
 80059aa:	e003      	b.n	80059b4 <LoopCopyDataInit>

080059ac <CopyDataInit>:
 80059ac:	4b0b      	ldr	r3, [pc, #44]	; (80059dc <LoopFillZerobss+0x14>)
 80059ae:	585b      	ldr	r3, [r3, r1]
 80059b0:	5043      	str	r3, [r0, r1]
 80059b2:	3104      	adds	r1, #4

080059b4 <LoopCopyDataInit>:
 80059b4:	480a      	ldr	r0, [pc, #40]	; (80059e0 <LoopFillZerobss+0x18>)
 80059b6:	4b0b      	ldr	r3, [pc, #44]	; (80059e4 <LoopFillZerobss+0x1c>)
 80059b8:	1842      	adds	r2, r0, r1
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d3f6      	bcc.n	80059ac <CopyDataInit>
 80059be:	4a0a      	ldr	r2, [pc, #40]	; (80059e8 <LoopFillZerobss+0x20>)
 80059c0:	e002      	b.n	80059c8 <LoopFillZerobss>

080059c2 <FillZerobss>:
 80059c2:	2300      	movs	r3, #0
 80059c4:	f842 3b04 	str.w	r3, [r2], #4

080059c8 <LoopFillZerobss>:
 80059c8:	4b08      	ldr	r3, [pc, #32]	; (80059ec <LoopFillZerobss+0x24>)
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d3f9      	bcc.n	80059c2 <FillZerobss>
 80059ce:	f00c ff09 	bl	80127e4 <__libc_init_array>
 80059d2:	f7fb fc55 	bl	8001280 <main>
 80059d6:	4770      	bx	lr
 80059d8:	24080000 	.word	0x24080000
 80059dc:	08015b08 	.word	0x08015b08
 80059e0:	24000000 	.word	0x24000000
 80059e4:	24000200 	.word	0x24000200
 80059e8:	240002c0 	.word	0x240002c0
 80059ec:	24003510 	.word	0x24003510

080059f0 <ADC3_IRQHandler>:
 80059f0:	e7fe      	b.n	80059f0 <ADC3_IRQHandler>
	...

080059f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b082      	sub	sp, #8
 80059f8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80059fa:	2003      	movs	r0, #3
 80059fc:	f000 f99e 	bl	8005d3c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005a00:	f003 fabc 	bl	8008f7c <HAL_RCC_GetSysClockFreq>
 8005a04:	4601      	mov	r1, r0
 8005a06:	4b15      	ldr	r3, [pc, #84]	; (8005a5c <HAL_Init+0x68>)
 8005a08:	699b      	ldr	r3, [r3, #24]
 8005a0a:	0a1b      	lsrs	r3, r3, #8
 8005a0c:	f003 030f 	and.w	r3, r3, #15
 8005a10:	4a13      	ldr	r2, [pc, #76]	; (8005a60 <HAL_Init+0x6c>)
 8005a12:	5cd3      	ldrb	r3, [r2, r3]
 8005a14:	f003 031f 	and.w	r3, r3, #31
 8005a18:	fa21 f303 	lsr.w	r3, r1, r3
 8005a1c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005a1e:	4b0f      	ldr	r3, [pc, #60]	; (8005a5c <HAL_Init+0x68>)
 8005a20:	699b      	ldr	r3, [r3, #24]
 8005a22:	f003 030f 	and.w	r3, r3, #15
 8005a26:	4a0e      	ldr	r2, [pc, #56]	; (8005a60 <HAL_Init+0x6c>)
 8005a28:	5cd3      	ldrb	r3, [r2, r3]
 8005a2a:	f003 031f 	and.w	r3, r3, #31
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	fa22 f303 	lsr.w	r3, r2, r3
 8005a34:	4a0b      	ldr	r2, [pc, #44]	; (8005a64 <HAL_Init+0x70>)
 8005a36:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005a38:	4a0b      	ldr	r2, [pc, #44]	; (8005a68 <HAL_Init+0x74>)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005a3e:	2000      	movs	r0, #0
 8005a40:	f000 f814 	bl	8005a6c <HAL_InitTick>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d001      	beq.n	8005a4e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e002      	b.n	8005a54 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005a4e:	f7ff fd7b 	bl	8005548 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005a52:	2300      	movs	r3, #0
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3708      	adds	r7, #8
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}
 8005a5c:	58024400 	.word	0x58024400
 8005a60:	080157bc 	.word	0x080157bc
 8005a64:	24000004 	.word	0x24000004
 8005a68:	24000000 	.word	0x24000000

08005a6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b082      	sub	sp, #8
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8005a74:	4b15      	ldr	r3, [pc, #84]	; (8005acc <HAL_InitTick+0x60>)
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d101      	bne.n	8005a80 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e021      	b.n	8005ac4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8005a80:	4b13      	ldr	r3, [pc, #76]	; (8005ad0 <HAL_InitTick+0x64>)
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	4b11      	ldr	r3, [pc, #68]	; (8005acc <HAL_InitTick+0x60>)
 8005a86:	781b      	ldrb	r3, [r3, #0]
 8005a88:	4619      	mov	r1, r3
 8005a8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005a8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a96:	4618      	mov	r0, r3
 8005a98:	f000 f983 	bl	8005da2 <HAL_SYSTICK_Config>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d001      	beq.n	8005aa6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e00e      	b.n	8005ac4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2b0f      	cmp	r3, #15
 8005aaa:	d80a      	bhi.n	8005ac2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005aac:	2200      	movs	r2, #0
 8005aae:	6879      	ldr	r1, [r7, #4]
 8005ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ab4:	f000 f94d 	bl	8005d52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005ab8:	4a06      	ldr	r2, [pc, #24]	; (8005ad4 <HAL_InitTick+0x68>)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	e000      	b.n	8005ac4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3708      	adds	r7, #8
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}
 8005acc:	2400000c 	.word	0x2400000c
 8005ad0:	24000000 	.word	0x24000000
 8005ad4:	24000008 	.word	0x24000008

08005ad8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005adc:	4b06      	ldr	r3, [pc, #24]	; (8005af8 <HAL_IncTick+0x20>)
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	4b06      	ldr	r3, [pc, #24]	; (8005afc <HAL_IncTick+0x24>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4413      	add	r3, r2
 8005ae8:	4a04      	ldr	r2, [pc, #16]	; (8005afc <HAL_IncTick+0x24>)
 8005aea:	6013      	str	r3, [r2, #0]
}
 8005aec:	bf00      	nop
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr
 8005af6:	bf00      	nop
 8005af8:	2400000c 	.word	0x2400000c
 8005afc:	2400045c 	.word	0x2400045c

08005b00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005b00:	b480      	push	{r7}
 8005b02:	af00      	add	r7, sp, #0
  return uwTick;
 8005b04:	4b03      	ldr	r3, [pc, #12]	; (8005b14 <HAL_GetTick+0x14>)
 8005b06:	681b      	ldr	r3, [r3, #0]
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr
 8005b12:	bf00      	nop
 8005b14:	2400045c 	.word	0x2400045c

08005b18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b084      	sub	sp, #16
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005b20:	f7ff ffee 	bl	8005b00 <HAL_GetTick>
 8005b24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b30:	d005      	beq.n	8005b3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005b32:	4b09      	ldr	r3, [pc, #36]	; (8005b58 <HAL_Delay+0x40>)
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	461a      	mov	r2, r3
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	4413      	add	r3, r2
 8005b3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005b3e:	bf00      	nop
 8005b40:	f7ff ffde 	bl	8005b00 <HAL_GetTick>
 8005b44:	4602      	mov	r2, r0
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	1ad3      	subs	r3, r2, r3
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d8f7      	bhi.n	8005b40 <HAL_Delay+0x28>
  {
  }
}
 8005b50:	bf00      	nop
 8005b52:	3710      	adds	r7, #16
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	2400000c 	.word	0x2400000c

08005b5c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8005b60:	4b03      	ldr	r3, [pc, #12]	; (8005b70 <HAL_GetREVID+0x14>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	0c1b      	lsrs	r3, r3, #16
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr
 8005b70:	5c001000 	.word	0x5c001000

08005b74 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b083      	sub	sp, #12
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8005b7c:	4b06      	ldr	r3, [pc, #24]	; (8005b98 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005b84:	4904      	ldr	r1, [pc, #16]	; (8005b98 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	604b      	str	r3, [r1, #4]
}
 8005b8c:	bf00      	nop
 8005b8e:	370c      	adds	r7, #12
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr
 8005b98:	58000400 	.word	0x58000400

08005b9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b085      	sub	sp, #20
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f003 0307 	and.w	r3, r3, #7
 8005baa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005bac:	4b0b      	ldr	r3, [pc, #44]	; (8005bdc <__NVIC_SetPriorityGrouping+0x40>)
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005bb2:	68ba      	ldr	r2, [r7, #8]
 8005bb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005bb8:	4013      	ands	r3, r2
 8005bba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005bc4:	4b06      	ldr	r3, [pc, #24]	; (8005be0 <__NVIC_SetPriorityGrouping+0x44>)
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005bca:	4a04      	ldr	r2, [pc, #16]	; (8005bdc <__NVIC_SetPriorityGrouping+0x40>)
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	60d3      	str	r3, [r2, #12]
}
 8005bd0:	bf00      	nop
 8005bd2:	3714      	adds	r7, #20
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr
 8005bdc:	e000ed00 	.word	0xe000ed00
 8005be0:	05fa0000 	.word	0x05fa0000

08005be4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005be4:	b480      	push	{r7}
 8005be6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005be8:	4b04      	ldr	r3, [pc, #16]	; (8005bfc <__NVIC_GetPriorityGrouping+0x18>)
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	0a1b      	lsrs	r3, r3, #8
 8005bee:	f003 0307 	and.w	r3, r3, #7
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr
 8005bfc:	e000ed00 	.word	0xe000ed00

08005c00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	4603      	mov	r3, r0
 8005c08:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005c0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	db0b      	blt.n	8005c2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005c12:	88fb      	ldrh	r3, [r7, #6]
 8005c14:	f003 021f 	and.w	r2, r3, #31
 8005c18:	4907      	ldr	r1, [pc, #28]	; (8005c38 <__NVIC_EnableIRQ+0x38>)
 8005c1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c1e:	095b      	lsrs	r3, r3, #5
 8005c20:	2001      	movs	r0, #1
 8005c22:	fa00 f202 	lsl.w	r2, r0, r2
 8005c26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005c2a:	bf00      	nop
 8005c2c:	370c      	adds	r7, #12
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr
 8005c36:	bf00      	nop
 8005c38:	e000e100 	.word	0xe000e100

08005c3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b083      	sub	sp, #12
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	4603      	mov	r3, r0
 8005c44:	6039      	str	r1, [r7, #0]
 8005c46:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005c48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	db0a      	blt.n	8005c66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	b2da      	uxtb	r2, r3
 8005c54:	490c      	ldr	r1, [pc, #48]	; (8005c88 <__NVIC_SetPriority+0x4c>)
 8005c56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c5a:	0112      	lsls	r2, r2, #4
 8005c5c:	b2d2      	uxtb	r2, r2
 8005c5e:	440b      	add	r3, r1
 8005c60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005c64:	e00a      	b.n	8005c7c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	b2da      	uxtb	r2, r3
 8005c6a:	4908      	ldr	r1, [pc, #32]	; (8005c8c <__NVIC_SetPriority+0x50>)
 8005c6c:	88fb      	ldrh	r3, [r7, #6]
 8005c6e:	f003 030f 	and.w	r3, r3, #15
 8005c72:	3b04      	subs	r3, #4
 8005c74:	0112      	lsls	r2, r2, #4
 8005c76:	b2d2      	uxtb	r2, r2
 8005c78:	440b      	add	r3, r1
 8005c7a:	761a      	strb	r2, [r3, #24]
}
 8005c7c:	bf00      	nop
 8005c7e:	370c      	adds	r7, #12
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr
 8005c88:	e000e100 	.word	0xe000e100
 8005c8c:	e000ed00 	.word	0xe000ed00

08005c90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b089      	sub	sp, #36	; 0x24
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	60f8      	str	r0, [r7, #12]
 8005c98:	60b9      	str	r1, [r7, #8]
 8005c9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f003 0307 	and.w	r3, r3, #7
 8005ca2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	f1c3 0307 	rsb	r3, r3, #7
 8005caa:	2b04      	cmp	r3, #4
 8005cac:	bf28      	it	cs
 8005cae:	2304      	movcs	r3, #4
 8005cb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005cb2:	69fb      	ldr	r3, [r7, #28]
 8005cb4:	3304      	adds	r3, #4
 8005cb6:	2b06      	cmp	r3, #6
 8005cb8:	d902      	bls.n	8005cc0 <NVIC_EncodePriority+0x30>
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	3b03      	subs	r3, #3
 8005cbe:	e000      	b.n	8005cc2 <NVIC_EncodePriority+0x32>
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8005cc8:	69bb      	ldr	r3, [r7, #24]
 8005cca:	fa02 f303 	lsl.w	r3, r2, r3
 8005cce:	43da      	mvns	r2, r3
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	401a      	ands	r2, r3
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005cd8:	f04f 31ff 	mov.w	r1, #4294967295
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	fa01 f303 	lsl.w	r3, r1, r3
 8005ce2:	43d9      	mvns	r1, r3
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ce8:	4313      	orrs	r3, r2
         );
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3724      	adds	r7, #36	; 0x24
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr
	...

08005cf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b082      	sub	sp, #8
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	3b01      	subs	r3, #1
 8005d04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005d08:	d301      	bcc.n	8005d0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e00f      	b.n	8005d2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005d0e:	4a0a      	ldr	r2, [pc, #40]	; (8005d38 <SysTick_Config+0x40>)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	3b01      	subs	r3, #1
 8005d14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005d16:	210f      	movs	r1, #15
 8005d18:	f04f 30ff 	mov.w	r0, #4294967295
 8005d1c:	f7ff ff8e 	bl	8005c3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005d20:	4b05      	ldr	r3, [pc, #20]	; (8005d38 <SysTick_Config+0x40>)
 8005d22:	2200      	movs	r2, #0
 8005d24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005d26:	4b04      	ldr	r3, [pc, #16]	; (8005d38 <SysTick_Config+0x40>)
 8005d28:	2207      	movs	r2, #7
 8005d2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005d2c:	2300      	movs	r3, #0
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3708      	adds	r7, #8
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	bf00      	nop
 8005d38:	e000e010 	.word	0xe000e010

08005d3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b082      	sub	sp, #8
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f7ff ff29 	bl	8005b9c <__NVIC_SetPriorityGrouping>
}
 8005d4a:	bf00      	nop
 8005d4c:	3708      	adds	r7, #8
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}

08005d52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005d52:	b580      	push	{r7, lr}
 8005d54:	b086      	sub	sp, #24
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	4603      	mov	r3, r0
 8005d5a:	60b9      	str	r1, [r7, #8]
 8005d5c:	607a      	str	r2, [r7, #4]
 8005d5e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005d60:	f7ff ff40 	bl	8005be4 <__NVIC_GetPriorityGrouping>
 8005d64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005d66:	687a      	ldr	r2, [r7, #4]
 8005d68:	68b9      	ldr	r1, [r7, #8]
 8005d6a:	6978      	ldr	r0, [r7, #20]
 8005d6c:	f7ff ff90 	bl	8005c90 <NVIC_EncodePriority>
 8005d70:	4602      	mov	r2, r0
 8005d72:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005d76:	4611      	mov	r1, r2
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f7ff ff5f 	bl	8005c3c <__NVIC_SetPriority>
}
 8005d7e:	bf00      	nop
 8005d80:	3718      	adds	r7, #24
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}

08005d86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d86:	b580      	push	{r7, lr}
 8005d88:	b082      	sub	sp, #8
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005d90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d94:	4618      	mov	r0, r3
 8005d96:	f7ff ff33 	bl	8005c00 <__NVIC_EnableIRQ>
}
 8005d9a:	bf00      	nop
 8005d9c:	3708      	adds	r7, #8
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}

08005da2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005da2:	b580      	push	{r7, lr}
 8005da4:	b082      	sub	sp, #8
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f7ff ffa4 	bl	8005cf8 <SysTick_Config>
 8005db0:	4603      	mov	r3, r0
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3708      	adds	r7, #8
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
	...

08005dbc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b084      	sub	sp, #16
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d101      	bne.n	8005dce <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e0c6      	b.n	8005f5c <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d102      	bne.n	8005ddc <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f7ff fbd0 	bl	800557c <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2223      	movs	r2, #35	; 0x23
 8005de0:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005de2:	4b60      	ldr	r3, [pc, #384]	; (8005f64 <HAL_ETH_Init+0x1a8>)
 8005de4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005de8:	4a5e      	ldr	r2, [pc, #376]	; (8005f64 <HAL_ETH_Init+0x1a8>)
 8005dea:	f043 0302 	orr.w	r3, r3, #2
 8005dee:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005df2:	4b5c      	ldr	r3, [pc, #368]	; (8005f64 <HAL_ETH_Init+0x1a8>)
 8005df4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005df8:	f003 0302 	and.w	r3, r3, #2
 8005dfc:	60bb      	str	r3, [r7, #8]
 8005dfe:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	7a1b      	ldrb	r3, [r3, #8]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d103      	bne.n	8005e10 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8005e08:	2000      	movs	r0, #0
 8005e0a:	f7ff feb3 	bl	8005b74 <HAL_SYSCFG_ETHInterfaceSelect>
 8005e0e:	e003      	b.n	8005e18 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8005e10:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8005e14:	f7ff feae 	bl	8005b74 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f042 0201 	orr.w	r2, r2, #1
 8005e2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e2e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005e30:	f7ff fe66 	bl	8005b00 <HAL_GetTick>
 8005e34:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005e36:	e00f      	b.n	8005e58 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8005e38:	f7ff fe62 	bl	8005b00 <HAL_GetTick>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005e46:	d907      	bls.n	8005e58 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2204      	movs	r2, #4
 8005e4c:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	22e0      	movs	r2, #224	; 0xe0
 8005e52:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	e081      	b.n	8005f5c <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 0301 	and.w	r3, r3, #1
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d1e6      	bne.n	8005e38 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 fac0 	bl	80063f0 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8005e70:	f003 f9f6 	bl	8009260 <HAL_RCC_GetHCLKFreq>
 8005e74:	4602      	mov	r2, r0
 8005e76:	4b3c      	ldr	r3, [pc, #240]	; (8005f68 <HAL_ETH_Init+0x1ac>)
 8005e78:	fba3 2302 	umull	r2, r3, r3, r2
 8005e7c:	0c9a      	lsrs	r2, r3, #18
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	3a01      	subs	r2, #1
 8005e84:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f000 fa13 	bl	80062b4 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8005ea4:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005ea8:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	695b      	ldr	r3, [r3, #20]
 8005eae:	f003 0303 	and.w	r3, r3, #3
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d007      	beq.n	8005ec6 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2201      	movs	r2, #1
 8005eba:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	22e0      	movs	r2, #224	; 0xe0
 8005ec0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e04a      	b.n	8005f5c <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	f241 1308 	movw	r3, #4360	; 0x1108
 8005ece:	4413      	add	r3, r2
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	4b26      	ldr	r3, [pc, #152]	; (8005f6c <HAL_ETH_Init+0x1b0>)
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	6952      	ldr	r2, [r2, #20]
 8005eda:	0052      	lsls	r2, r2, #1
 8005edc:	6879      	ldr	r1, [r7, #4]
 8005ede:	6809      	ldr	r1, [r1, #0]
 8005ee0:	431a      	orrs	r2, r3
 8005ee2:	f241 1308 	movw	r3, #4360	; 0x1108
 8005ee6:	440b      	add	r3, r1
 8005ee8:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 fad8 	bl	80064a0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f000 fb1c 	bl	800652e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	3305      	adds	r3, #5
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	021a      	lsls	r2, r3, #8
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	3304      	adds	r3, #4
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	4619      	mov	r1, r3
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	430a      	orrs	r2, r1
 8005f10:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	3303      	adds	r3, #3
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	061a      	lsls	r2, r3, #24
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	3302      	adds	r3, #2
 8005f24:	781b      	ldrb	r3, [r3, #0]
 8005f26:	041b      	lsls	r3, r3, #16
 8005f28:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	3301      	adds	r3, #1
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005f34:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005f42:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005f44:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2210      	movs	r2, #16
 8005f52:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2210      	movs	r2, #16
 8005f58:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8005f5a:	2300      	movs	r3, #0
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3710      	adds	r7, #16
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	58024400 	.word	0x58024400
 8005f68:	431bde83 	.word	0x431bde83
 8005f6c:	ffff8001 	.word	0xffff8001

08005f70 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b085      	sub	sp, #20
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8005f82:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	791b      	ldrb	r3, [r3, #4]
 8005f88:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8005f8a:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	7b1b      	ldrb	r3, [r3, #12]
 8005f90:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8005f92:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	7b5b      	ldrb	r3, [r3, #13]
 8005f98:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005f9a:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	7b9b      	ldrb	r3, [r3, #14]
 8005fa0:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8005fa2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	7bdb      	ldrb	r3, [r3, #15]
 8005fa8:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005faa:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005fac:	683a      	ldr	r2, [r7, #0]
 8005fae:	7c12      	ldrb	r2, [r2, #16]
 8005fb0:	2a00      	cmp	r2, #0
 8005fb2:	d102      	bne.n	8005fba <ETH_SetMACConfig+0x4a>
 8005fb4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005fb8:	e000      	b.n	8005fbc <ETH_SetMACConfig+0x4c>
 8005fba:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005fbc:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005fbe:	683a      	ldr	r2, [r7, #0]
 8005fc0:	7c52      	ldrb	r2, [r2, #17]
 8005fc2:	2a00      	cmp	r2, #0
 8005fc4:	d102      	bne.n	8005fcc <ETH_SetMACConfig+0x5c>
 8005fc6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005fca:	e000      	b.n	8005fce <ETH_SetMACConfig+0x5e>
 8005fcc:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005fce:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	7c9b      	ldrb	r3, [r3, #18]
 8005fd4:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005fd6:	431a      	orrs	r2, r3
                                macconf->Speed |
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8005fdc:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8005fe2:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	7f1b      	ldrb	r3, [r3, #28]
 8005fe8:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8005fea:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	7f5b      	ldrb	r3, [r3, #29]
 8005ff0:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8005ff2:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8005ff4:	683a      	ldr	r2, [r7, #0]
 8005ff6:	7f92      	ldrb	r2, [r2, #30]
 8005ff8:	2a00      	cmp	r2, #0
 8005ffa:	d102      	bne.n	8006002 <ETH_SetMACConfig+0x92>
 8005ffc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006000:	e000      	b.n	8006004 <ETH_SetMACConfig+0x94>
 8006002:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8006004:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	7fdb      	ldrb	r3, [r3, #31]
 800600a:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 800600c:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800600e:	683a      	ldr	r2, [r7, #0]
 8006010:	f892 2020 	ldrb.w	r2, [r2, #32]
 8006014:	2a00      	cmp	r2, #0
 8006016:	d102      	bne.n	800601e <ETH_SetMACConfig+0xae>
 8006018:	f44f 7280 	mov.w	r2, #256	; 0x100
 800601c:	e000      	b.n	8006020 <ETH_SetMACConfig+0xb0>
 800601e:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8006020:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8006026:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800602e:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8006030:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8006036:	4313      	orrs	r3, r2
 8006038:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	4b56      	ldr	r3, [pc, #344]	; (800619c <ETH_SetMACConfig+0x22c>)
 8006042:	4013      	ands	r3, r2
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	6812      	ldr	r2, [r2, #0]
 8006048:	68f9      	ldr	r1, [r7, #12]
 800604a:	430b      	orrs	r3, r1
 800604c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006052:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800605a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800605c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006064:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8006066:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800606e:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8006070:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8006072:	683a      	ldr	r2, [r7, #0]
 8006074:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8006078:	2a00      	cmp	r2, #0
 800607a:	d102      	bne.n	8006082 <ETH_SetMACConfig+0x112>
 800607c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006080:	e000      	b.n	8006084 <ETH_SetMACConfig+0x114>
 8006082:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8006084:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800608a:	4313      	orrs	r3, r2
 800608c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	685a      	ldr	r2, [r3, #4]
 8006094:	4b42      	ldr	r3, [pc, #264]	; (80061a0 <ETH_SetMACConfig+0x230>)
 8006096:	4013      	ands	r3, r2
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	6812      	ldr	r2, [r2, #0]
 800609c:	68f9      	ldr	r1, [r7, #12]
 800609e:	430b      	orrs	r3, r1
 80060a0:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80060a8:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80060ae:	4313      	orrs	r3, r2
 80060b0:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	68da      	ldr	r2, [r3, #12]
 80060b8:	4b3a      	ldr	r3, [pc, #232]	; (80061a4 <ETH_SetMACConfig+0x234>)
 80060ba:	4013      	ands	r3, r2
 80060bc:	687a      	ldr	r2, [r7, #4]
 80060be:	6812      	ldr	r2, [r2, #0]
 80060c0:	68f9      	ldr	r1, [r7, #12]
 80060c2:	430b      	orrs	r3, r1
 80060c4:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80060cc:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80060d2:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 80060d4:	683a      	ldr	r2, [r7, #0]
 80060d6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80060da:	2a00      	cmp	r2, #0
 80060dc:	d101      	bne.n	80060e2 <ETH_SetMACConfig+0x172>
 80060de:	2280      	movs	r2, #128	; 0x80
 80060e0:	e000      	b.n	80060e4 <ETH_SetMACConfig+0x174>
 80060e2:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80060e4:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060ea:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80060ec:	4313      	orrs	r3, r2
 80060ee:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80060f6:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80060fa:	4013      	ands	r3, r2
 80060fc:	687a      	ldr	r2, [r7, #4]
 80060fe:	6812      	ldr	r2, [r2, #0]
 8006100:	68f9      	ldr	r1, [r7, #12]
 8006102:	430b      	orrs	r3, r1
 8006104:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800610c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8006114:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8006116:	4313      	orrs	r3, r2
 8006118:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006122:	f023 0103 	bic.w	r1, r3, #3
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	68fa      	ldr	r2, [r7, #12]
 800612c:	430a      	orrs	r2, r1
 800612e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800613a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	430a      	orrs	r2, r1
 8006148:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8006150:	683a      	ldr	r2, [r7, #0]
 8006152:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8006156:	2a00      	cmp	r2, #0
 8006158:	d101      	bne.n	800615e <ETH_SetMACConfig+0x1ee>
 800615a:	2240      	movs	r2, #64	; 0x40
 800615c:	e000      	b.n	8006160 <ETH_SetMACConfig+0x1f0>
 800615e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8006160:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8006168:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800616a:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8006172:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8006174:	4313      	orrs	r3, r2
 8006176:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8006180:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	68fa      	ldr	r2, [r7, #12]
 800618a:	430a      	orrs	r2, r1
 800618c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8006190:	bf00      	nop
 8006192:	3714      	adds	r7, #20
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr
 800619c:	00048083 	.word	0x00048083
 80061a0:	c0f88000 	.word	0xc0f88000
 80061a4:	fffffef0 	.word	0xfffffef0

080061a8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b085      	sub	sp, #20
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	4b38      	ldr	r3, [pc, #224]	; (80062a0 <ETH_SetDMAConfig+0xf8>)
 80061be:	4013      	ands	r3, r2
 80061c0:	683a      	ldr	r2, [r7, #0]
 80061c2:	6812      	ldr	r2, [r2, #0]
 80061c4:	6879      	ldr	r1, [r7, #4]
 80061c6:	6809      	ldr	r1, [r1, #0]
 80061c8:	431a      	orrs	r2, r3
 80061ca:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80061ce:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	791b      	ldrb	r3, [r3, #4]
 80061d4:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80061da:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	7b1b      	ldrb	r3, [r3, #12]
 80061e0:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80061e2:	4313      	orrs	r3, r2
 80061e4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	f241 0304 	movw	r3, #4100	; 0x1004
 80061ee:	4413      	add	r3, r2
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	4b2c      	ldr	r3, [pc, #176]	; (80062a4 <ETH_SetDMAConfig+0xfc>)
 80061f4:	4013      	ands	r3, r2
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	6811      	ldr	r1, [r2, #0]
 80061fa:	68fa      	ldr	r2, [r7, #12]
 80061fc:	431a      	orrs	r2, r3
 80061fe:	f241 0304 	movw	r3, #4100	; 0x1004
 8006202:	440b      	add	r3, r1
 8006204:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	7b5b      	ldrb	r3, [r3, #13]
 800620a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8006210:	4313      	orrs	r3, r2
 8006212:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	4b22      	ldr	r3, [pc, #136]	; (80062a8 <ETH_SetDMAConfig+0x100>)
 8006220:	4013      	ands	r3, r2
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	6811      	ldr	r1, [r2, #0]
 8006226:	68fa      	ldr	r2, [r7, #12]
 8006228:	431a      	orrs	r2, r3
 800622a:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 800622e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	7d1b      	ldrb	r3, [r3, #20]
 8006238:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800623a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	7f5b      	ldrb	r3, [r3, #29]
 8006240:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8006242:	4313      	orrs	r3, r2
 8006244:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	f241 1304 	movw	r3, #4356	; 0x1104
 800624e:	4413      	add	r3, r2
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	4b16      	ldr	r3, [pc, #88]	; (80062ac <ETH_SetDMAConfig+0x104>)
 8006254:	4013      	ands	r3, r2
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	6811      	ldr	r1, [r2, #0]
 800625a:	68fa      	ldr	r2, [r7, #12]
 800625c:	431a      	orrs	r2, r3
 800625e:	f241 1304 	movw	r3, #4356	; 0x1104
 8006262:	440b      	add	r3, r1
 8006264:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	7f1b      	ldrb	r3, [r3, #28]
 800626a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8006270:	4313      	orrs	r3, r2
 8006272:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	f241 1308 	movw	r3, #4360	; 0x1108
 800627c:	4413      	add	r3, r2
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	4b0b      	ldr	r3, [pc, #44]	; (80062b0 <ETH_SetDMAConfig+0x108>)
 8006282:	4013      	ands	r3, r2
 8006284:	687a      	ldr	r2, [r7, #4]
 8006286:	6811      	ldr	r1, [r2, #0]
 8006288:	68fa      	ldr	r2, [r7, #12]
 800628a:	431a      	orrs	r2, r3
 800628c:	f241 1308 	movw	r3, #4360	; 0x1108
 8006290:	440b      	add	r3, r1
 8006292:	601a      	str	r2, [r3, #0]
}
 8006294:	bf00      	nop
 8006296:	3714      	adds	r7, #20
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr
 80062a0:	ffff87fd 	.word	0xffff87fd
 80062a4:	ffff2ffe 	.word	0xffff2ffe
 80062a8:	fffec000 	.word	0xfffec000
 80062ac:	ffc0efef 	.word	0xffc0efef
 80062b0:	7fc0ffff 	.word	0x7fc0ffff

080062b4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b0a4      	sub	sp, #144	; 0x90
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80062bc:	2301      	movs	r3, #1
 80062be:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80062c2:	2300      	movs	r3, #0
 80062c4:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80062c6:	2300      	movs	r3, #0
 80062c8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80062cc:	2300      	movs	r3, #0
 80062ce:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80062d2:	2301      	movs	r3, #1
 80062d4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80062d8:	2301      	movs	r3, #1
 80062da:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80062de:	2301      	movs	r3, #1
 80062e0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80062e4:	2300      	movs	r3, #0
 80062e6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80062ea:	2301      	movs	r3, #1
 80062ec:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80062f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80062f4:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80062f6:	2300      	movs	r3, #0
 80062f8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80062fc:	2300      	movs	r3, #0
 80062fe:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8006300:	2300      	movs	r3, #0
 8006302:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8006306:	2300      	movs	r3, #0
 8006308:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 800630c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8006310:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8006312:	2300      	movs	r3, #0
 8006314:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8006318:	2300      	movs	r3, #0
 800631a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 800631c:	2301      	movs	r3, #1
 800631e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8006322:	2300      	movs	r3, #0
 8006324:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8006328:	2300      	movs	r3, #0
 800632a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800632e:	2300      	movs	r3, #0
 8006330:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8006332:	2300      	movs	r3, #0
 8006334:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8006336:	2300      	movs	r3, #0
 8006338:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800633a:	2300      	movs	r3, #0
 800633c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8006340:	2300      	movs	r3, #0
 8006342:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8006346:	2301      	movs	r3, #1
 8006348:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800634c:	2320      	movs	r3, #32
 800634e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8006352:	2301      	movs	r3, #1
 8006354:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8006358:	2300      	movs	r3, #0
 800635a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800635e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8006362:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8006364:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006368:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800636a:	2300      	movs	r3, #0
 800636c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8006370:	2302      	movs	r3, #2
 8006372:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8006376:	2300      	movs	r3, #0
 8006378:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800637c:	2300      	movs	r3, #0
 800637e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8006382:	2300      	movs	r3, #0
 8006384:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8006388:	2301      	movs	r3, #1
 800638a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800638e:	2300      	movs	r3, #0
 8006390:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8006392:	2301      	movs	r3, #1
 8006394:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8006398:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800639c:	4619      	mov	r1, r3
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f7ff fde6 	bl	8005f70 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80063a4:	2301      	movs	r3, #1
 80063a6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80063a8:	2301      	movs	r3, #1
 80063aa:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80063ac:	2300      	movs	r3, #0
 80063ae:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80063b0:	2300      	movs	r3, #0
 80063b2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80063b6:	2300      	movs	r3, #0
 80063b8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80063ba:	2300      	movs	r3, #0
 80063bc:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80063be:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80063c2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80063c4:	2300      	movs	r3, #0
 80063c6:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80063c8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80063cc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80063ce:	2300      	movs	r3, #0
 80063d0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 80063d4:	f44f 7306 	mov.w	r3, #536	; 0x218
 80063d8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80063da:	f107 0308 	add.w	r3, r7, #8
 80063de:	4619      	mov	r1, r3
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f7ff fee1 	bl	80061a8 <ETH_SetDMAConfig>
}
 80063e6:	bf00      	nop
 80063e8:	3790      	adds	r7, #144	; 0x90
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}
	...

080063f0 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b084      	sub	sp, #16
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006400:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006408:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800640a:	f002 ff29 	bl	8009260 <HAL_RCC_GetHCLKFreq>
 800640e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	4a1e      	ldr	r2, [pc, #120]	; (800648c <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d908      	bls.n	800642a <ETH_MAC_MDIO_ClkConfig+0x3a>
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	4a1d      	ldr	r2, [pc, #116]	; (8006490 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d804      	bhi.n	800642a <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006426:	60fb      	str	r3, [r7, #12]
 8006428:	e027      	b.n	800647a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	4a18      	ldr	r2, [pc, #96]	; (8006490 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d908      	bls.n	8006444 <ETH_MAC_MDIO_ClkConfig+0x54>
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	4a17      	ldr	r2, [pc, #92]	; (8006494 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d804      	bhi.n	8006444 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006440:	60fb      	str	r3, [r7, #12]
 8006442:	e01a      	b.n	800647a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	4a13      	ldr	r2, [pc, #76]	; (8006494 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d903      	bls.n	8006454 <ETH_MAC_MDIO_ClkConfig+0x64>
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	4a12      	ldr	r2, [pc, #72]	; (8006498 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d911      	bls.n	8006478 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	4a10      	ldr	r2, [pc, #64]	; (8006498 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d908      	bls.n	800646e <ETH_MAC_MDIO_ClkConfig+0x7e>
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	4a0f      	ldr	r2, [pc, #60]	; (800649c <ETH_MAC_MDIO_ClkConfig+0xac>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d804      	bhi.n	800646e <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800646a:	60fb      	str	r3, [r7, #12]
 800646c:	e005      	b.n	800647a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006474:	60fb      	str	r3, [r7, #12]
 8006476:	e000      	b.n	800647a <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8006478:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	68fa      	ldr	r2, [r7, #12]
 8006480:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8006484:	bf00      	nop
 8006486:	3710      	adds	r7, #16
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}
 800648c:	01312cff 	.word	0x01312cff
 8006490:	02160ebf 	.word	0x02160ebf
 8006494:	039386ff 	.word	0x039386ff
 8006498:	05f5e0ff 	.word	0x05f5e0ff
 800649c:	08f0d17f 	.word	0x08f0d17f

080064a0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b085      	sub	sp, #20
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80064a8:	2300      	movs	r3, #0
 80064aa:	60fb      	str	r3, [r7, #12]
 80064ac:	e01d      	b.n	80064ea <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	68d9      	ldr	r1, [r3, #12]
 80064b2:	68fa      	ldr	r2, [r7, #12]
 80064b4:	4613      	mov	r3, r2
 80064b6:	005b      	lsls	r3, r3, #1
 80064b8:	4413      	add	r3, r2
 80064ba:	00db      	lsls	r3, r3, #3
 80064bc:	440b      	add	r3, r1
 80064be:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	2200      	movs	r2, #0
 80064c4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	2200      	movs	r2, #0
 80064ca:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	2200      	movs	r2, #0
 80064d0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	2200      	movs	r2, #0
 80064d6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80064d8:	68b9      	ldr	r1, [r7, #8]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	68fa      	ldr	r2, [r7, #12]
 80064de:	3206      	adds	r2, #6
 80064e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	3301      	adds	r3, #1
 80064e8:	60fb      	str	r3, [r7, #12]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2b03      	cmp	r3, #3
 80064ee:	d9de      	bls.n	80064ae <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2200      	movs	r2, #0
 80064f4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	f241 132c 	movw	r3, #4396	; 0x112c
 80064fe:	4413      	add	r3, r2
 8006500:	2203      	movs	r2, #3
 8006502:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	68d9      	ldr	r1, [r3, #12]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	f241 1314 	movw	r3, #4372	; 0x1114
 8006510:	4413      	add	r3, r2
 8006512:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	68da      	ldr	r2, [r3, #12]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8006520:	601a      	str	r2, [r3, #0]
}
 8006522:	bf00      	nop
 8006524:	3714      	adds	r7, #20
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr

0800652e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800652e:	b480      	push	{r7}
 8006530:	b085      	sub	sp, #20
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006536:	2300      	movs	r3, #0
 8006538:	60fb      	str	r3, [r7, #12]
 800653a:	e024      	b.n	8006586 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6919      	ldr	r1, [r3, #16]
 8006540:	68fa      	ldr	r2, [r7, #12]
 8006542:	4613      	mov	r3, r2
 8006544:	005b      	lsls	r3, r3, #1
 8006546:	4413      	add	r3, r2
 8006548:	00db      	lsls	r3, r3, #3
 800654a:	440b      	add	r3, r1
 800654c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	2200      	movs	r2, #0
 8006552:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	2200      	movs	r2, #0
 8006558:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	2200      	movs	r2, #0
 800655e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	2200      	movs	r2, #0
 8006564:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	2200      	movs	r2, #0
 800656a:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	2200      	movs	r2, #0
 8006570:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8006572:	68ba      	ldr	r2, [r7, #8]
 8006574:	6879      	ldr	r1, [r7, #4]
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	330a      	adds	r3, #10
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	440b      	add	r3, r1
 800657e:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	3301      	adds	r3, #1
 8006584:	60fb      	str	r3, [r7, #12]
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2b03      	cmp	r3, #3
 800658a:	d9d7      	bls.n	800653c <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2200      	movs	r2, #0
 8006590:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2200      	movs	r2, #0
 8006596:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2200      	movs	r2, #0
 800659c:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2200      	movs	r2, #0
 80065a2:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2200      	movs	r2, #0
 80065a8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	f241 1330 	movw	r3, #4400	; 0x1130
 80065b2:	4413      	add	r3, r2
 80065b4:	2203      	movs	r2, #3
 80065b6:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6919      	ldr	r1, [r3, #16]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	f241 131c 	movw	r3, #4380	; 0x111c
 80065c4:	4413      	add	r3, r2
 80065c6:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	691b      	ldr	r3, [r3, #16]
 80065cc:	f103 0148 	add.w	r1, r3, #72	; 0x48
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681a      	ldr	r2, [r3, #0]
 80065d4:	f241 1328 	movw	r3, #4392	; 0x1128
 80065d8:	4413      	add	r3, r2
 80065da:	6019      	str	r1, [r3, #0]
}
 80065dc:	bf00      	nop
 80065de:	3714      	adds	r7, #20
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr

080065e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b089      	sub	sp, #36	; 0x24
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80065f2:	2300      	movs	r3, #0
 80065f4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80065f6:	4b89      	ldr	r3, [pc, #548]	; (800681c <HAL_GPIO_Init+0x234>)
 80065f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80065fa:	e194      	b.n	8006926 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	2101      	movs	r1, #1
 8006602:	69fb      	ldr	r3, [r7, #28]
 8006604:	fa01 f303 	lsl.w	r3, r1, r3
 8006608:	4013      	ands	r3, r2
 800660a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	2b00      	cmp	r3, #0
 8006610:	f000 8186 	beq.w	8006920 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	2b01      	cmp	r3, #1
 800661a:	d00b      	beq.n	8006634 <HAL_GPIO_Init+0x4c>
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	2b02      	cmp	r3, #2
 8006622:	d007      	beq.n	8006634 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006628:	2b11      	cmp	r3, #17
 800662a:	d003      	beq.n	8006634 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	2b12      	cmp	r3, #18
 8006632:	d130      	bne.n	8006696 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800663a:	69fb      	ldr	r3, [r7, #28]
 800663c:	005b      	lsls	r3, r3, #1
 800663e:	2203      	movs	r2, #3
 8006640:	fa02 f303 	lsl.w	r3, r2, r3
 8006644:	43db      	mvns	r3, r3
 8006646:	69ba      	ldr	r2, [r7, #24]
 8006648:	4013      	ands	r3, r2
 800664a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	68da      	ldr	r2, [r3, #12]
 8006650:	69fb      	ldr	r3, [r7, #28]
 8006652:	005b      	lsls	r3, r3, #1
 8006654:	fa02 f303 	lsl.w	r3, r2, r3
 8006658:	69ba      	ldr	r2, [r7, #24]
 800665a:	4313      	orrs	r3, r2
 800665c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	69ba      	ldr	r2, [r7, #24]
 8006662:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800666a:	2201      	movs	r2, #1
 800666c:	69fb      	ldr	r3, [r7, #28]
 800666e:	fa02 f303 	lsl.w	r3, r2, r3
 8006672:	43db      	mvns	r3, r3
 8006674:	69ba      	ldr	r2, [r7, #24]
 8006676:	4013      	ands	r3, r2
 8006678:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	091b      	lsrs	r3, r3, #4
 8006680:	f003 0201 	and.w	r2, r3, #1
 8006684:	69fb      	ldr	r3, [r7, #28]
 8006686:	fa02 f303 	lsl.w	r3, r2, r3
 800668a:	69ba      	ldr	r2, [r7, #24]
 800668c:	4313      	orrs	r3, r2
 800668e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	69ba      	ldr	r2, [r7, #24]
 8006694:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800669c:	69fb      	ldr	r3, [r7, #28]
 800669e:	005b      	lsls	r3, r3, #1
 80066a0:	2203      	movs	r2, #3
 80066a2:	fa02 f303 	lsl.w	r3, r2, r3
 80066a6:	43db      	mvns	r3, r3
 80066a8:	69ba      	ldr	r2, [r7, #24]
 80066aa:	4013      	ands	r3, r2
 80066ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	689a      	ldr	r2, [r3, #8]
 80066b2:	69fb      	ldr	r3, [r7, #28]
 80066b4:	005b      	lsls	r3, r3, #1
 80066b6:	fa02 f303 	lsl.w	r3, r2, r3
 80066ba:	69ba      	ldr	r2, [r7, #24]
 80066bc:	4313      	orrs	r3, r2
 80066be:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	69ba      	ldr	r2, [r7, #24]
 80066c4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	2b02      	cmp	r3, #2
 80066cc:	d003      	beq.n	80066d6 <HAL_GPIO_Init+0xee>
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	2b12      	cmp	r3, #18
 80066d4:	d123      	bne.n	800671e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80066d6:	69fb      	ldr	r3, [r7, #28]
 80066d8:	08da      	lsrs	r2, r3, #3
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	3208      	adds	r2, #8
 80066de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	f003 0307 	and.w	r3, r3, #7
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	220f      	movs	r2, #15
 80066ee:	fa02 f303 	lsl.w	r3, r2, r3
 80066f2:	43db      	mvns	r3, r3
 80066f4:	69ba      	ldr	r2, [r7, #24]
 80066f6:	4013      	ands	r3, r2
 80066f8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	691a      	ldr	r2, [r3, #16]
 80066fe:	69fb      	ldr	r3, [r7, #28]
 8006700:	f003 0307 	and.w	r3, r3, #7
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	fa02 f303 	lsl.w	r3, r2, r3
 800670a:	69ba      	ldr	r2, [r7, #24]
 800670c:	4313      	orrs	r3, r2
 800670e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006710:	69fb      	ldr	r3, [r7, #28]
 8006712:	08da      	lsrs	r2, r3, #3
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	3208      	adds	r2, #8
 8006718:	69b9      	ldr	r1, [r7, #24]
 800671a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006724:	69fb      	ldr	r3, [r7, #28]
 8006726:	005b      	lsls	r3, r3, #1
 8006728:	2203      	movs	r2, #3
 800672a:	fa02 f303 	lsl.w	r3, r2, r3
 800672e:	43db      	mvns	r3, r3
 8006730:	69ba      	ldr	r2, [r7, #24]
 8006732:	4013      	ands	r3, r2
 8006734:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	f003 0203 	and.w	r2, r3, #3
 800673e:	69fb      	ldr	r3, [r7, #28]
 8006740:	005b      	lsls	r3, r3, #1
 8006742:	fa02 f303 	lsl.w	r3, r2, r3
 8006746:	69ba      	ldr	r2, [r7, #24]
 8006748:	4313      	orrs	r3, r2
 800674a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	69ba      	ldr	r2, [r7, #24]
 8006750:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800675a:	2b00      	cmp	r3, #0
 800675c:	f000 80e0 	beq.w	8006920 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006760:	4b2f      	ldr	r3, [pc, #188]	; (8006820 <HAL_GPIO_Init+0x238>)
 8006762:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006766:	4a2e      	ldr	r2, [pc, #184]	; (8006820 <HAL_GPIO_Init+0x238>)
 8006768:	f043 0302 	orr.w	r3, r3, #2
 800676c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006770:	4b2b      	ldr	r3, [pc, #172]	; (8006820 <HAL_GPIO_Init+0x238>)
 8006772:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006776:	f003 0302 	and.w	r3, r3, #2
 800677a:	60fb      	str	r3, [r7, #12]
 800677c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800677e:	4a29      	ldr	r2, [pc, #164]	; (8006824 <HAL_GPIO_Init+0x23c>)
 8006780:	69fb      	ldr	r3, [r7, #28]
 8006782:	089b      	lsrs	r3, r3, #2
 8006784:	3302      	adds	r3, #2
 8006786:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800678a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800678c:	69fb      	ldr	r3, [r7, #28]
 800678e:	f003 0303 	and.w	r3, r3, #3
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	220f      	movs	r2, #15
 8006796:	fa02 f303 	lsl.w	r3, r2, r3
 800679a:	43db      	mvns	r3, r3
 800679c:	69ba      	ldr	r2, [r7, #24]
 800679e:	4013      	ands	r3, r2
 80067a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4a20      	ldr	r2, [pc, #128]	; (8006828 <HAL_GPIO_Init+0x240>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d052      	beq.n	8006850 <HAL_GPIO_Init+0x268>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4a1f      	ldr	r2, [pc, #124]	; (800682c <HAL_GPIO_Init+0x244>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d031      	beq.n	8006816 <HAL_GPIO_Init+0x22e>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	4a1e      	ldr	r2, [pc, #120]	; (8006830 <HAL_GPIO_Init+0x248>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d02b      	beq.n	8006812 <HAL_GPIO_Init+0x22a>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	4a1d      	ldr	r2, [pc, #116]	; (8006834 <HAL_GPIO_Init+0x24c>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d025      	beq.n	800680e <HAL_GPIO_Init+0x226>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	4a1c      	ldr	r2, [pc, #112]	; (8006838 <HAL_GPIO_Init+0x250>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d01f      	beq.n	800680a <HAL_GPIO_Init+0x222>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4a1b      	ldr	r2, [pc, #108]	; (800683c <HAL_GPIO_Init+0x254>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d019      	beq.n	8006806 <HAL_GPIO_Init+0x21e>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4a1a      	ldr	r2, [pc, #104]	; (8006840 <HAL_GPIO_Init+0x258>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d013      	beq.n	8006802 <HAL_GPIO_Init+0x21a>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	4a19      	ldr	r2, [pc, #100]	; (8006844 <HAL_GPIO_Init+0x25c>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d00d      	beq.n	80067fe <HAL_GPIO_Init+0x216>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	4a18      	ldr	r2, [pc, #96]	; (8006848 <HAL_GPIO_Init+0x260>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d007      	beq.n	80067fa <HAL_GPIO_Init+0x212>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4a17      	ldr	r2, [pc, #92]	; (800684c <HAL_GPIO_Init+0x264>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d101      	bne.n	80067f6 <HAL_GPIO_Init+0x20e>
 80067f2:	2309      	movs	r3, #9
 80067f4:	e02d      	b.n	8006852 <HAL_GPIO_Init+0x26a>
 80067f6:	230a      	movs	r3, #10
 80067f8:	e02b      	b.n	8006852 <HAL_GPIO_Init+0x26a>
 80067fa:	2308      	movs	r3, #8
 80067fc:	e029      	b.n	8006852 <HAL_GPIO_Init+0x26a>
 80067fe:	2307      	movs	r3, #7
 8006800:	e027      	b.n	8006852 <HAL_GPIO_Init+0x26a>
 8006802:	2306      	movs	r3, #6
 8006804:	e025      	b.n	8006852 <HAL_GPIO_Init+0x26a>
 8006806:	2305      	movs	r3, #5
 8006808:	e023      	b.n	8006852 <HAL_GPIO_Init+0x26a>
 800680a:	2304      	movs	r3, #4
 800680c:	e021      	b.n	8006852 <HAL_GPIO_Init+0x26a>
 800680e:	2303      	movs	r3, #3
 8006810:	e01f      	b.n	8006852 <HAL_GPIO_Init+0x26a>
 8006812:	2302      	movs	r3, #2
 8006814:	e01d      	b.n	8006852 <HAL_GPIO_Init+0x26a>
 8006816:	2301      	movs	r3, #1
 8006818:	e01b      	b.n	8006852 <HAL_GPIO_Init+0x26a>
 800681a:	bf00      	nop
 800681c:	58000080 	.word	0x58000080
 8006820:	58024400 	.word	0x58024400
 8006824:	58000400 	.word	0x58000400
 8006828:	58020000 	.word	0x58020000
 800682c:	58020400 	.word	0x58020400
 8006830:	58020800 	.word	0x58020800
 8006834:	58020c00 	.word	0x58020c00
 8006838:	58021000 	.word	0x58021000
 800683c:	58021400 	.word	0x58021400
 8006840:	58021800 	.word	0x58021800
 8006844:	58021c00 	.word	0x58021c00
 8006848:	58022000 	.word	0x58022000
 800684c:	58022400 	.word	0x58022400
 8006850:	2300      	movs	r3, #0
 8006852:	69fa      	ldr	r2, [r7, #28]
 8006854:	f002 0203 	and.w	r2, r2, #3
 8006858:	0092      	lsls	r2, r2, #2
 800685a:	4093      	lsls	r3, r2
 800685c:	69ba      	ldr	r2, [r7, #24]
 800685e:	4313      	orrs	r3, r2
 8006860:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006862:	4938      	ldr	r1, [pc, #224]	; (8006944 <HAL_GPIO_Init+0x35c>)
 8006864:	69fb      	ldr	r3, [r7, #28]
 8006866:	089b      	lsrs	r3, r3, #2
 8006868:	3302      	adds	r3, #2
 800686a:	69ba      	ldr	r2, [r7, #24]
 800686c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	43db      	mvns	r3, r3
 800687a:	69ba      	ldr	r2, [r7, #24]
 800687c:	4013      	ands	r3, r2
 800687e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006888:	2b00      	cmp	r3, #0
 800688a:	d003      	beq.n	8006894 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800688c:	69ba      	ldr	r2, [r7, #24]
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	4313      	orrs	r3, r2
 8006892:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	69ba      	ldr	r2, [r7, #24]
 8006898:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	43db      	mvns	r3, r3
 80068a4:	69ba      	ldr	r2, [r7, #24]
 80068a6:	4013      	ands	r3, r2
 80068a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d003      	beq.n	80068be <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80068b6:	69ba      	ldr	r2, [r7, #24]
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	4313      	orrs	r3, r2
 80068bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	69ba      	ldr	r2, [r7, #24]
 80068c2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80068c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	43db      	mvns	r3, r3
 80068d0:	69ba      	ldr	r2, [r7, #24]
 80068d2:	4013      	ands	r3, r2
 80068d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d003      	beq.n	80068ea <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80068e2:	69ba      	ldr	r2, [r7, #24]
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	4313      	orrs	r3, r2
 80068e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80068ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80068ee:	69bb      	ldr	r3, [r7, #24]
 80068f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80068f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	43db      	mvns	r3, r3
 80068fe:	69ba      	ldr	r2, [r7, #24]
 8006900:	4013      	ands	r3, r2
 8006902:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800690c:	2b00      	cmp	r3, #0
 800690e:	d003      	beq.n	8006918 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8006910:	69ba      	ldr	r2, [r7, #24]
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	4313      	orrs	r3, r2
 8006916:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006918:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800691c:	69bb      	ldr	r3, [r7, #24]
 800691e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8006920:	69fb      	ldr	r3, [r7, #28]
 8006922:	3301      	adds	r3, #1
 8006924:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	69fb      	ldr	r3, [r7, #28]
 800692c:	fa22 f303 	lsr.w	r3, r2, r3
 8006930:	2b00      	cmp	r3, #0
 8006932:	f47f ae63 	bne.w	80065fc <HAL_GPIO_Init+0x14>
  }
}
 8006936:	bf00      	nop
 8006938:	3724      	adds	r7, #36	; 0x24
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr
 8006942:	bf00      	nop
 8006944:	58000400 	.word	0x58000400

08006948 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006948:	b480      	push	{r7}
 800694a:	b083      	sub	sp, #12
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	460b      	mov	r3, r1
 8006952:	807b      	strh	r3, [r7, #2]
 8006954:	4613      	mov	r3, r2
 8006956:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006958:	787b      	ldrb	r3, [r7, #1]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d003      	beq.n	8006966 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800695e:	887a      	ldrh	r2, [r7, #2]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006964:	e003      	b.n	800696e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006966:	887b      	ldrh	r3, [r7, #2]
 8006968:	041a      	lsls	r2, r3, #16
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	619a      	str	r2, [r3, #24]
}
 800696e:	bf00      	nop
 8006970:	370c      	adds	r7, #12
 8006972:	46bd      	mov	sp, r7
 8006974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006978:	4770      	bx	lr

0800697a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800697a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800697c:	b08f      	sub	sp, #60	; 0x3c
 800697e:	af0a      	add	r7, sp, #40	; 0x28
 8006980:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d101      	bne.n	800698c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8006988:	2301      	movs	r3, #1
 800698a:	e054      	b.n	8006a36 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8006998:	b2db      	uxtb	r3, r3
 800699a:	2b00      	cmp	r3, #0
 800699c:	d106      	bne.n	80069ac <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2200      	movs	r2, #0
 80069a2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f00b fc32 	bl	8012210 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2203      	movs	r2, #3
 80069b0:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d102      	bne.n	80069c6 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2200      	movs	r2, #0
 80069c4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4618      	mov	r0, r3
 80069cc:	f005 f89f 	bl	800bb0e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	603b      	str	r3, [r7, #0]
 80069d6:	687e      	ldr	r6, [r7, #4]
 80069d8:	466d      	mov	r5, sp
 80069da:	f106 0410 	add.w	r4, r6, #16
 80069de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80069e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80069e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80069e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80069e6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80069ea:	e885 0003 	stmia.w	r5, {r0, r1}
 80069ee:	1d33      	adds	r3, r6, #4
 80069f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80069f2:	6838      	ldr	r0, [r7, #0]
 80069f4:	f005 f818 	bl	800ba28 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	2101      	movs	r1, #1
 80069fe:	4618      	mov	r0, r3
 8006a00:	f005 f896 	bl	800bb30 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	603b      	str	r3, [r7, #0]
 8006a0a:	687e      	ldr	r6, [r7, #4]
 8006a0c:	466d      	mov	r5, sp
 8006a0e:	f106 0410 	add.w	r4, r6, #16
 8006a12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006a14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006a16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006a18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006a1a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006a1e:	e885 0003 	stmia.w	r5, {r0, r1}
 8006a22:	1d33      	adds	r3, r6, #4
 8006a24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006a26:	6838      	ldr	r0, [r7, #0]
 8006a28:	f005 f9a8 	bl	800bd7c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8006a34:	2300      	movs	r3, #0
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3714      	adds	r7, #20
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006a3e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8006a3e:	b590      	push	{r4, r7, lr}
 8006a40:	b089      	sub	sp, #36	; 0x24
 8006a42:	af04      	add	r7, sp, #16
 8006a44:	6078      	str	r0, [r7, #4]
 8006a46:	4608      	mov	r0, r1
 8006a48:	4611      	mov	r1, r2
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	70fb      	strb	r3, [r7, #3]
 8006a50:	460b      	mov	r3, r1
 8006a52:	70bb      	strb	r3, [r7, #2]
 8006a54:	4613      	mov	r3, r2
 8006a56:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d101      	bne.n	8006a66 <HAL_HCD_HC_Init+0x28>
 8006a62:	2302      	movs	r3, #2
 8006a64:	e07f      	b.n	8006b66 <HAL_HCD_HC_Init+0x128>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2201      	movs	r2, #1
 8006a6a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8006a6e:	78fa      	ldrb	r2, [r7, #3]
 8006a70:	6879      	ldr	r1, [r7, #4]
 8006a72:	4613      	mov	r3, r2
 8006a74:	009b      	lsls	r3, r3, #2
 8006a76:	4413      	add	r3, r2
 8006a78:	00db      	lsls	r3, r3, #3
 8006a7a:	440b      	add	r3, r1
 8006a7c:	333d      	adds	r3, #61	; 0x3d
 8006a7e:	2200      	movs	r2, #0
 8006a80:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8006a82:	78fa      	ldrb	r2, [r7, #3]
 8006a84:	6879      	ldr	r1, [r7, #4]
 8006a86:	4613      	mov	r3, r2
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	4413      	add	r3, r2
 8006a8c:	00db      	lsls	r3, r3, #3
 8006a8e:	440b      	add	r3, r1
 8006a90:	3338      	adds	r3, #56	; 0x38
 8006a92:	787a      	ldrb	r2, [r7, #1]
 8006a94:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8006a96:	78fa      	ldrb	r2, [r7, #3]
 8006a98:	6879      	ldr	r1, [r7, #4]
 8006a9a:	4613      	mov	r3, r2
 8006a9c:	009b      	lsls	r3, r3, #2
 8006a9e:	4413      	add	r3, r2
 8006aa0:	00db      	lsls	r3, r3, #3
 8006aa2:	440b      	add	r3, r1
 8006aa4:	3340      	adds	r3, #64	; 0x40
 8006aa6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006aa8:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8006aaa:	78fa      	ldrb	r2, [r7, #3]
 8006aac:	6879      	ldr	r1, [r7, #4]
 8006aae:	4613      	mov	r3, r2
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	4413      	add	r3, r2
 8006ab4:	00db      	lsls	r3, r3, #3
 8006ab6:	440b      	add	r3, r1
 8006ab8:	3339      	adds	r3, #57	; 0x39
 8006aba:	78fa      	ldrb	r2, [r7, #3]
 8006abc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8006abe:	78fa      	ldrb	r2, [r7, #3]
 8006ac0:	6879      	ldr	r1, [r7, #4]
 8006ac2:	4613      	mov	r3, r2
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	4413      	add	r3, r2
 8006ac8:	00db      	lsls	r3, r3, #3
 8006aca:	440b      	add	r3, r1
 8006acc:	333f      	adds	r3, #63	; 0x3f
 8006ace:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8006ad2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8006ad4:	78fa      	ldrb	r2, [r7, #3]
 8006ad6:	78bb      	ldrb	r3, [r7, #2]
 8006ad8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006adc:	b2d8      	uxtb	r0, r3
 8006ade:	6879      	ldr	r1, [r7, #4]
 8006ae0:	4613      	mov	r3, r2
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	4413      	add	r3, r2
 8006ae6:	00db      	lsls	r3, r3, #3
 8006ae8:	440b      	add	r3, r1
 8006aea:	333a      	adds	r3, #58	; 0x3a
 8006aec:	4602      	mov	r2, r0
 8006aee:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8006af0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	da0a      	bge.n	8006b0e <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8006af8:	78fa      	ldrb	r2, [r7, #3]
 8006afa:	6879      	ldr	r1, [r7, #4]
 8006afc:	4613      	mov	r3, r2
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	4413      	add	r3, r2
 8006b02:	00db      	lsls	r3, r3, #3
 8006b04:	440b      	add	r3, r1
 8006b06:	333b      	adds	r3, #59	; 0x3b
 8006b08:	2201      	movs	r2, #1
 8006b0a:	701a      	strb	r2, [r3, #0]
 8006b0c:	e009      	b.n	8006b22 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8006b0e:	78fa      	ldrb	r2, [r7, #3]
 8006b10:	6879      	ldr	r1, [r7, #4]
 8006b12:	4613      	mov	r3, r2
 8006b14:	009b      	lsls	r3, r3, #2
 8006b16:	4413      	add	r3, r2
 8006b18:	00db      	lsls	r3, r3, #3
 8006b1a:	440b      	add	r3, r1
 8006b1c:	333b      	adds	r3, #59	; 0x3b
 8006b1e:	2200      	movs	r2, #0
 8006b20:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8006b22:	78fa      	ldrb	r2, [r7, #3]
 8006b24:	6879      	ldr	r1, [r7, #4]
 8006b26:	4613      	mov	r3, r2
 8006b28:	009b      	lsls	r3, r3, #2
 8006b2a:	4413      	add	r3, r2
 8006b2c:	00db      	lsls	r3, r3, #3
 8006b2e:	440b      	add	r3, r1
 8006b30:	333c      	adds	r3, #60	; 0x3c
 8006b32:	f897 2020 	ldrb.w	r2, [r7, #32]
 8006b36:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6818      	ldr	r0, [r3, #0]
 8006b3c:	787c      	ldrb	r4, [r7, #1]
 8006b3e:	78ba      	ldrb	r2, [r7, #2]
 8006b40:	78f9      	ldrb	r1, [r7, #3]
 8006b42:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006b44:	9302      	str	r3, [sp, #8]
 8006b46:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006b4a:	9301      	str	r3, [sp, #4]
 8006b4c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006b50:	9300      	str	r3, [sp, #0]
 8006b52:	4623      	mov	r3, r4
 8006b54:	f005 fa8e 	bl	800c074 <USB_HC_Init>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8006b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3714      	adds	r7, #20
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd90      	pop	{r4, r7, pc}

08006b6e <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8006b6e:	b580      	push	{r7, lr}
 8006b70:	b084      	sub	sp, #16
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	6078      	str	r0, [r7, #4]
 8006b76:	460b      	mov	r3, r1
 8006b78:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d101      	bne.n	8006b8c <HAL_HCD_HC_Halt+0x1e>
 8006b88:	2302      	movs	r3, #2
 8006b8a:	e00f      	b.n	8006bac <HAL_HCD_HC_Halt+0x3e>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	78fa      	ldrb	r2, [r7, #3]
 8006b9a:	4611      	mov	r1, r2
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f005 fcc8 	bl	800c532 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8006baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3710      	adds	r7, #16
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}

08006bb4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b082      	sub	sp, #8
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	4608      	mov	r0, r1
 8006bbe:	4611      	mov	r1, r2
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	70fb      	strb	r3, [r7, #3]
 8006bc6:	460b      	mov	r3, r1
 8006bc8:	70bb      	strb	r3, [r7, #2]
 8006bca:	4613      	mov	r3, r2
 8006bcc:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8006bce:	78fa      	ldrb	r2, [r7, #3]
 8006bd0:	6879      	ldr	r1, [r7, #4]
 8006bd2:	4613      	mov	r3, r2
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	4413      	add	r3, r2
 8006bd8:	00db      	lsls	r3, r3, #3
 8006bda:	440b      	add	r3, r1
 8006bdc:	333b      	adds	r3, #59	; 0x3b
 8006bde:	78ba      	ldrb	r2, [r7, #2]
 8006be0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8006be2:	78fa      	ldrb	r2, [r7, #3]
 8006be4:	6879      	ldr	r1, [r7, #4]
 8006be6:	4613      	mov	r3, r2
 8006be8:	009b      	lsls	r3, r3, #2
 8006bea:	4413      	add	r3, r2
 8006bec:	00db      	lsls	r3, r3, #3
 8006bee:	440b      	add	r3, r1
 8006bf0:	333f      	adds	r3, #63	; 0x3f
 8006bf2:	787a      	ldrb	r2, [r7, #1]
 8006bf4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8006bf6:	7c3b      	ldrb	r3, [r7, #16]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d114      	bne.n	8006c26 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8006bfc:	78fa      	ldrb	r2, [r7, #3]
 8006bfe:	6879      	ldr	r1, [r7, #4]
 8006c00:	4613      	mov	r3, r2
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	4413      	add	r3, r2
 8006c06:	00db      	lsls	r3, r3, #3
 8006c08:	440b      	add	r3, r1
 8006c0a:	3342      	adds	r3, #66	; 0x42
 8006c0c:	2203      	movs	r2, #3
 8006c0e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8006c10:	78fa      	ldrb	r2, [r7, #3]
 8006c12:	6879      	ldr	r1, [r7, #4]
 8006c14:	4613      	mov	r3, r2
 8006c16:	009b      	lsls	r3, r3, #2
 8006c18:	4413      	add	r3, r2
 8006c1a:	00db      	lsls	r3, r3, #3
 8006c1c:	440b      	add	r3, r1
 8006c1e:	333d      	adds	r3, #61	; 0x3d
 8006c20:	7f3a      	ldrb	r2, [r7, #28]
 8006c22:	701a      	strb	r2, [r3, #0]
 8006c24:	e009      	b.n	8006c3a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006c26:	78fa      	ldrb	r2, [r7, #3]
 8006c28:	6879      	ldr	r1, [r7, #4]
 8006c2a:	4613      	mov	r3, r2
 8006c2c:	009b      	lsls	r3, r3, #2
 8006c2e:	4413      	add	r3, r2
 8006c30:	00db      	lsls	r3, r3, #3
 8006c32:	440b      	add	r3, r1
 8006c34:	3342      	adds	r3, #66	; 0x42
 8006c36:	2202      	movs	r2, #2
 8006c38:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8006c3a:	787b      	ldrb	r3, [r7, #1]
 8006c3c:	2b03      	cmp	r3, #3
 8006c3e:	f200 80d6 	bhi.w	8006dee <HAL_HCD_HC_SubmitRequest+0x23a>
 8006c42:	a201      	add	r2, pc, #4	; (adr r2, 8006c48 <HAL_HCD_HC_SubmitRequest+0x94>)
 8006c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c48:	08006c59 	.word	0x08006c59
 8006c4c:	08006dd9 	.word	0x08006dd9
 8006c50:	08006cc5 	.word	0x08006cc5
 8006c54:	08006d4f 	.word	0x08006d4f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8006c58:	7c3b      	ldrb	r3, [r7, #16]
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	f040 80c9 	bne.w	8006df2 <HAL_HCD_HC_SubmitRequest+0x23e>
 8006c60:	78bb      	ldrb	r3, [r7, #2]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	f040 80c5 	bne.w	8006df2 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8006c68:	8b3b      	ldrh	r3, [r7, #24]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d109      	bne.n	8006c82 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8006c6e:	78fa      	ldrb	r2, [r7, #3]
 8006c70:	6879      	ldr	r1, [r7, #4]
 8006c72:	4613      	mov	r3, r2
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	4413      	add	r3, r2
 8006c78:	00db      	lsls	r3, r3, #3
 8006c7a:	440b      	add	r3, r1
 8006c7c:	3351      	adds	r3, #81	; 0x51
 8006c7e:	2201      	movs	r2, #1
 8006c80:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8006c82:	78fa      	ldrb	r2, [r7, #3]
 8006c84:	6879      	ldr	r1, [r7, #4]
 8006c86:	4613      	mov	r3, r2
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	4413      	add	r3, r2
 8006c8c:	00db      	lsls	r3, r3, #3
 8006c8e:	440b      	add	r3, r1
 8006c90:	3351      	adds	r3, #81	; 0x51
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d10a      	bne.n	8006cae <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006c98:	78fa      	ldrb	r2, [r7, #3]
 8006c9a:	6879      	ldr	r1, [r7, #4]
 8006c9c:	4613      	mov	r3, r2
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	4413      	add	r3, r2
 8006ca2:	00db      	lsls	r3, r3, #3
 8006ca4:	440b      	add	r3, r1
 8006ca6:	3342      	adds	r3, #66	; 0x42
 8006ca8:	2200      	movs	r2, #0
 8006caa:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8006cac:	e0a1      	b.n	8006df2 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006cae:	78fa      	ldrb	r2, [r7, #3]
 8006cb0:	6879      	ldr	r1, [r7, #4]
 8006cb2:	4613      	mov	r3, r2
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	4413      	add	r3, r2
 8006cb8:	00db      	lsls	r3, r3, #3
 8006cba:	440b      	add	r3, r1
 8006cbc:	3342      	adds	r3, #66	; 0x42
 8006cbe:	2202      	movs	r2, #2
 8006cc0:	701a      	strb	r2, [r3, #0]
      break;
 8006cc2:	e096      	b.n	8006df2 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8006cc4:	78bb      	ldrb	r3, [r7, #2]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d120      	bne.n	8006d0c <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8006cca:	78fa      	ldrb	r2, [r7, #3]
 8006ccc:	6879      	ldr	r1, [r7, #4]
 8006cce:	4613      	mov	r3, r2
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	4413      	add	r3, r2
 8006cd4:	00db      	lsls	r3, r3, #3
 8006cd6:	440b      	add	r3, r1
 8006cd8:	3351      	adds	r3, #81	; 0x51
 8006cda:	781b      	ldrb	r3, [r3, #0]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d10a      	bne.n	8006cf6 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006ce0:	78fa      	ldrb	r2, [r7, #3]
 8006ce2:	6879      	ldr	r1, [r7, #4]
 8006ce4:	4613      	mov	r3, r2
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	4413      	add	r3, r2
 8006cea:	00db      	lsls	r3, r3, #3
 8006cec:	440b      	add	r3, r1
 8006cee:	3342      	adds	r3, #66	; 0x42
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8006cf4:	e07e      	b.n	8006df4 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006cf6:	78fa      	ldrb	r2, [r7, #3]
 8006cf8:	6879      	ldr	r1, [r7, #4]
 8006cfa:	4613      	mov	r3, r2
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	4413      	add	r3, r2
 8006d00:	00db      	lsls	r3, r3, #3
 8006d02:	440b      	add	r3, r1
 8006d04:	3342      	adds	r3, #66	; 0x42
 8006d06:	2202      	movs	r2, #2
 8006d08:	701a      	strb	r2, [r3, #0]
      break;
 8006d0a:	e073      	b.n	8006df4 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8006d0c:	78fa      	ldrb	r2, [r7, #3]
 8006d0e:	6879      	ldr	r1, [r7, #4]
 8006d10:	4613      	mov	r3, r2
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	4413      	add	r3, r2
 8006d16:	00db      	lsls	r3, r3, #3
 8006d18:	440b      	add	r3, r1
 8006d1a:	3350      	adds	r3, #80	; 0x50
 8006d1c:	781b      	ldrb	r3, [r3, #0]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d10a      	bne.n	8006d38 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006d22:	78fa      	ldrb	r2, [r7, #3]
 8006d24:	6879      	ldr	r1, [r7, #4]
 8006d26:	4613      	mov	r3, r2
 8006d28:	009b      	lsls	r3, r3, #2
 8006d2a:	4413      	add	r3, r2
 8006d2c:	00db      	lsls	r3, r3, #3
 8006d2e:	440b      	add	r3, r1
 8006d30:	3342      	adds	r3, #66	; 0x42
 8006d32:	2200      	movs	r2, #0
 8006d34:	701a      	strb	r2, [r3, #0]
      break;
 8006d36:	e05d      	b.n	8006df4 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006d38:	78fa      	ldrb	r2, [r7, #3]
 8006d3a:	6879      	ldr	r1, [r7, #4]
 8006d3c:	4613      	mov	r3, r2
 8006d3e:	009b      	lsls	r3, r3, #2
 8006d40:	4413      	add	r3, r2
 8006d42:	00db      	lsls	r3, r3, #3
 8006d44:	440b      	add	r3, r1
 8006d46:	3342      	adds	r3, #66	; 0x42
 8006d48:	2202      	movs	r2, #2
 8006d4a:	701a      	strb	r2, [r3, #0]
      break;
 8006d4c:	e052      	b.n	8006df4 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8006d4e:	78bb      	ldrb	r3, [r7, #2]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d120      	bne.n	8006d96 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8006d54:	78fa      	ldrb	r2, [r7, #3]
 8006d56:	6879      	ldr	r1, [r7, #4]
 8006d58:	4613      	mov	r3, r2
 8006d5a:	009b      	lsls	r3, r3, #2
 8006d5c:	4413      	add	r3, r2
 8006d5e:	00db      	lsls	r3, r3, #3
 8006d60:	440b      	add	r3, r1
 8006d62:	3351      	adds	r3, #81	; 0x51
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d10a      	bne.n	8006d80 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006d6a:	78fa      	ldrb	r2, [r7, #3]
 8006d6c:	6879      	ldr	r1, [r7, #4]
 8006d6e:	4613      	mov	r3, r2
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	4413      	add	r3, r2
 8006d74:	00db      	lsls	r3, r3, #3
 8006d76:	440b      	add	r3, r1
 8006d78:	3342      	adds	r3, #66	; 0x42
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8006d7e:	e039      	b.n	8006df4 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006d80:	78fa      	ldrb	r2, [r7, #3]
 8006d82:	6879      	ldr	r1, [r7, #4]
 8006d84:	4613      	mov	r3, r2
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	4413      	add	r3, r2
 8006d8a:	00db      	lsls	r3, r3, #3
 8006d8c:	440b      	add	r3, r1
 8006d8e:	3342      	adds	r3, #66	; 0x42
 8006d90:	2202      	movs	r2, #2
 8006d92:	701a      	strb	r2, [r3, #0]
      break;
 8006d94:	e02e      	b.n	8006df4 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8006d96:	78fa      	ldrb	r2, [r7, #3]
 8006d98:	6879      	ldr	r1, [r7, #4]
 8006d9a:	4613      	mov	r3, r2
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	4413      	add	r3, r2
 8006da0:	00db      	lsls	r3, r3, #3
 8006da2:	440b      	add	r3, r1
 8006da4:	3350      	adds	r3, #80	; 0x50
 8006da6:	781b      	ldrb	r3, [r3, #0]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d10a      	bne.n	8006dc2 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006dac:	78fa      	ldrb	r2, [r7, #3]
 8006dae:	6879      	ldr	r1, [r7, #4]
 8006db0:	4613      	mov	r3, r2
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	4413      	add	r3, r2
 8006db6:	00db      	lsls	r3, r3, #3
 8006db8:	440b      	add	r3, r1
 8006dba:	3342      	adds	r3, #66	; 0x42
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	701a      	strb	r2, [r3, #0]
      break;
 8006dc0:	e018      	b.n	8006df4 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006dc2:	78fa      	ldrb	r2, [r7, #3]
 8006dc4:	6879      	ldr	r1, [r7, #4]
 8006dc6:	4613      	mov	r3, r2
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	4413      	add	r3, r2
 8006dcc:	00db      	lsls	r3, r3, #3
 8006dce:	440b      	add	r3, r1
 8006dd0:	3342      	adds	r3, #66	; 0x42
 8006dd2:	2202      	movs	r2, #2
 8006dd4:	701a      	strb	r2, [r3, #0]
      break;
 8006dd6:	e00d      	b.n	8006df4 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006dd8:	78fa      	ldrb	r2, [r7, #3]
 8006dda:	6879      	ldr	r1, [r7, #4]
 8006ddc:	4613      	mov	r3, r2
 8006dde:	009b      	lsls	r3, r3, #2
 8006de0:	4413      	add	r3, r2
 8006de2:	00db      	lsls	r3, r3, #3
 8006de4:	440b      	add	r3, r1
 8006de6:	3342      	adds	r3, #66	; 0x42
 8006de8:	2200      	movs	r2, #0
 8006dea:	701a      	strb	r2, [r3, #0]
      break;
 8006dec:	e002      	b.n	8006df4 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8006dee:	bf00      	nop
 8006df0:	e000      	b.n	8006df4 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8006df2:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8006df4:	78fa      	ldrb	r2, [r7, #3]
 8006df6:	6879      	ldr	r1, [r7, #4]
 8006df8:	4613      	mov	r3, r2
 8006dfa:	009b      	lsls	r3, r3, #2
 8006dfc:	4413      	add	r3, r2
 8006dfe:	00db      	lsls	r3, r3, #3
 8006e00:	440b      	add	r3, r1
 8006e02:	3344      	adds	r3, #68	; 0x44
 8006e04:	697a      	ldr	r2, [r7, #20]
 8006e06:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8006e08:	78fa      	ldrb	r2, [r7, #3]
 8006e0a:	8b39      	ldrh	r1, [r7, #24]
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	4613      	mov	r3, r2
 8006e10:	009b      	lsls	r3, r3, #2
 8006e12:	4413      	add	r3, r2
 8006e14:	00db      	lsls	r3, r3, #3
 8006e16:	4403      	add	r3, r0
 8006e18:	3348      	adds	r3, #72	; 0x48
 8006e1a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8006e1c:	78fa      	ldrb	r2, [r7, #3]
 8006e1e:	6879      	ldr	r1, [r7, #4]
 8006e20:	4613      	mov	r3, r2
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	4413      	add	r3, r2
 8006e26:	00db      	lsls	r3, r3, #3
 8006e28:	440b      	add	r3, r1
 8006e2a:	335c      	adds	r3, #92	; 0x5c
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8006e30:	78fa      	ldrb	r2, [r7, #3]
 8006e32:	6879      	ldr	r1, [r7, #4]
 8006e34:	4613      	mov	r3, r2
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	4413      	add	r3, r2
 8006e3a:	00db      	lsls	r3, r3, #3
 8006e3c:	440b      	add	r3, r1
 8006e3e:	334c      	adds	r3, #76	; 0x4c
 8006e40:	2200      	movs	r2, #0
 8006e42:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8006e44:	78fa      	ldrb	r2, [r7, #3]
 8006e46:	6879      	ldr	r1, [r7, #4]
 8006e48:	4613      	mov	r3, r2
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	4413      	add	r3, r2
 8006e4e:	00db      	lsls	r3, r3, #3
 8006e50:	440b      	add	r3, r1
 8006e52:	3339      	adds	r3, #57	; 0x39
 8006e54:	78fa      	ldrb	r2, [r7, #3]
 8006e56:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8006e58:	78fa      	ldrb	r2, [r7, #3]
 8006e5a:	6879      	ldr	r1, [r7, #4]
 8006e5c:	4613      	mov	r3, r2
 8006e5e:	009b      	lsls	r3, r3, #2
 8006e60:	4413      	add	r3, r2
 8006e62:	00db      	lsls	r3, r3, #3
 8006e64:	440b      	add	r3, r1
 8006e66:	335d      	adds	r3, #93	; 0x5d
 8006e68:	2200      	movs	r2, #0
 8006e6a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6818      	ldr	r0, [r3, #0]
 8006e70:	78fa      	ldrb	r2, [r7, #3]
 8006e72:	4613      	mov	r3, r2
 8006e74:	009b      	lsls	r3, r3, #2
 8006e76:	4413      	add	r3, r2
 8006e78:	00db      	lsls	r3, r3, #3
 8006e7a:	3338      	adds	r3, #56	; 0x38
 8006e7c:	687a      	ldr	r2, [r7, #4]
 8006e7e:	18d1      	adds	r1, r2, r3
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	691b      	ldr	r3, [r3, #16]
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	461a      	mov	r2, r3
 8006e88:	f005 f9fe 	bl	800c288 <USB_HC_StartXfer>
 8006e8c:	4603      	mov	r3, r0
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3708      	adds	r7, #8
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop

08006e98 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b086      	sub	sp, #24
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f004 ff21 	bl	800bcf6 <USB_GetMode>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	f040 80ef 	bne.w	800709a <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f004 ff05 	bl	800bcd0 <USB_ReadInterrupts>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	f000 80e5 	beq.w	8007098 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f004 fefc 	bl	800bcd0 <USB_ReadInterrupts>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006ede:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ee2:	d104      	bne.n	8006eee <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006eec:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f004 feec 	bl	800bcd0 <USB_ReadInterrupts>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006efe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f02:	d104      	bne.n	8006f0e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006f0c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4618      	mov	r0, r3
 8006f14:	f004 fedc 	bl	800bcd0 <USB_ReadInterrupts>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006f1e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006f22:	d104      	bne.n	8006f2e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006f2c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4618      	mov	r0, r3
 8006f34:	f004 fecc 	bl	800bcd0 <USB_ReadInterrupts>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	f003 0302 	and.w	r3, r3, #2
 8006f3e:	2b02      	cmp	r3, #2
 8006f40:	d103      	bne.n	8006f4a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	2202      	movs	r2, #2
 8006f48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f004 febe 	bl	800bcd0 <USB_ReadInterrupts>
 8006f54:	4603      	mov	r3, r0
 8006f56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f5e:	d115      	bne.n	8006f8c <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8006f68:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f003 0301 	and.w	r3, r3, #1
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d108      	bne.n	8006f8c <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f00b f9c8 	bl	8012310 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	2101      	movs	r1, #1
 8006f86:	4618      	mov	r0, r3
 8006f88:	f004 ffae 	bl	800bee8 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4618      	mov	r0, r3
 8006f92:	f004 fe9d 	bl	800bcd0 <USB_ReadInterrupts>
 8006f96:	4603      	mov	r3, r0
 8006f98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006fa0:	d102      	bne.n	8006fa8 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f001 f966 	bl	8008274 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4618      	mov	r0, r3
 8006fae:	f004 fe8f 	bl	800bcd0 <USB_ReadInterrupts>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	f003 0308 	and.w	r3, r3, #8
 8006fb8:	2b08      	cmp	r3, #8
 8006fba:	d106      	bne.n	8006fca <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f00b f98b 	bl	80122d8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	2208      	movs	r2, #8
 8006fc8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f004 fe7e 	bl	800bcd0 <USB_ReadInterrupts>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fda:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006fde:	d138      	bne.n	8007052 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f005 fa93 	bl	800c510 <USB_HC_ReadInterrupt>
 8006fea:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8006fec:	2300      	movs	r3, #0
 8006fee:	617b      	str	r3, [r7, #20]
 8006ff0:	e025      	b.n	800703e <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	f003 030f 	and.w	r3, r3, #15
 8006ff8:	68ba      	ldr	r2, [r7, #8]
 8006ffa:	fa22 f303 	lsr.w	r3, r2, r3
 8006ffe:	f003 0301 	and.w	r3, r3, #1
 8007002:	2b00      	cmp	r3, #0
 8007004:	d018      	beq.n	8007038 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	015a      	lsls	r2, r3, #5
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	4413      	add	r3, r2
 800700e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007018:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800701c:	d106      	bne.n	800702c <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	b2db      	uxtb	r3, r3
 8007022:	4619      	mov	r1, r3
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f000 f8cf 	bl	80071c8 <HCD_HC_IN_IRQHandler>
 800702a:	e005      	b.n	8007038 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	b2db      	uxtb	r3, r3
 8007030:	4619      	mov	r1, r3
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f000 fcfd 	bl	8007a32 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	3301      	adds	r3, #1
 800703c:	617b      	str	r3, [r7, #20]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	697a      	ldr	r2, [r7, #20]
 8007044:	429a      	cmp	r2, r3
 8007046:	d3d4      	bcc.n	8006ff2 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007050:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4618      	mov	r0, r3
 8007058:	f004 fe3a 	bl	800bcd0 <USB_ReadInterrupts>
 800705c:	4603      	mov	r3, r0
 800705e:	f003 0310 	and.w	r3, r3, #16
 8007062:	2b10      	cmp	r3, #16
 8007064:	d101      	bne.n	800706a <HAL_HCD_IRQHandler+0x1d2>
 8007066:	2301      	movs	r3, #1
 8007068:	e000      	b.n	800706c <HAL_HCD_IRQHandler+0x1d4>
 800706a:	2300      	movs	r3, #0
 800706c:	2b00      	cmp	r3, #0
 800706e:	d014      	beq.n	800709a <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	699a      	ldr	r2, [r3, #24]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f022 0210 	bic.w	r2, r2, #16
 800707e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f001 f84b 	bl	800811c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	699a      	ldr	r2, [r3, #24]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f042 0210 	orr.w	r2, r2, #16
 8007094:	619a      	str	r2, [r3, #24]
 8007096:	e000      	b.n	800709a <HAL_HCD_IRQHandler+0x202>
      return;
 8007098:	bf00      	nop
    }
  }
}
 800709a:	3718      	adds	r7, #24
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b082      	sub	sp, #8
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d101      	bne.n	80070b6 <HAL_HCD_Start+0x16>
 80070b2:	2302      	movs	r3, #2
 80070b4:	e013      	b.n	80070de <HAL_HCD_Start+0x3e>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2201      	movs	r2, #1
 80070ba:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4618      	mov	r0, r3
 80070c4:	f004 fd12 	bl	800baec <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	2101      	movs	r1, #1
 80070ce:	4618      	mov	r0, r3
 80070d0:	f004 ff6e 	bl	800bfb0 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2200      	movs	r2, #0
 80070d8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80070dc:	2300      	movs	r3, #0
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3708      	adds	r7, #8
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}

080070e6 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80070e6:	b580      	push	{r7, lr}
 80070e8:	b082      	sub	sp, #8
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d101      	bne.n	80070fc <HAL_HCD_Stop+0x16>
 80070f8:	2302      	movs	r3, #2
 80070fa:	e00d      	b.n	8007118 <HAL_HCD_Stop+0x32>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2201      	movs	r2, #1
 8007100:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4618      	mov	r0, r3
 800710a:	f005 fb4d 	bl	800c7a8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2200      	movs	r2, #0
 8007112:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8007116:	2300      	movs	r3, #0
}
 8007118:	4618      	mov	r0, r3
 800711a:	3708      	adds	r7, #8
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}

08007120 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b082      	sub	sp, #8
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4618      	mov	r0, r3
 800712e:	f004 ff15 	bl	800bf5c <USB_ResetPort>
 8007132:	4603      	mov	r3, r0
}
 8007134:	4618      	mov	r0, r3
 8007136:	3708      	adds	r7, #8
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}

0800713c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800713c:	b480      	push	{r7}
 800713e:	b083      	sub	sp, #12
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
 8007144:	460b      	mov	r3, r1
 8007146:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8007148:	78fa      	ldrb	r2, [r7, #3]
 800714a:	6879      	ldr	r1, [r7, #4]
 800714c:	4613      	mov	r3, r2
 800714e:	009b      	lsls	r3, r3, #2
 8007150:	4413      	add	r3, r2
 8007152:	00db      	lsls	r3, r3, #3
 8007154:	440b      	add	r3, r1
 8007156:	335c      	adds	r3, #92	; 0x5c
 8007158:	781b      	ldrb	r3, [r3, #0]
}
 800715a:	4618      	mov	r0, r3
 800715c:	370c      	adds	r7, #12
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr

08007166 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8007166:	b480      	push	{r7}
 8007168:	b083      	sub	sp, #12
 800716a:	af00      	add	r7, sp, #0
 800716c:	6078      	str	r0, [r7, #4]
 800716e:	460b      	mov	r3, r1
 8007170:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8007172:	78fa      	ldrb	r2, [r7, #3]
 8007174:	6879      	ldr	r1, [r7, #4]
 8007176:	4613      	mov	r3, r2
 8007178:	009b      	lsls	r3, r3, #2
 800717a:	4413      	add	r3, r2
 800717c:	00db      	lsls	r3, r3, #3
 800717e:	440b      	add	r3, r1
 8007180:	334c      	adds	r3, #76	; 0x4c
 8007182:	681b      	ldr	r3, [r3, #0]
}
 8007184:	4618      	mov	r0, r3
 8007186:	370c      	adds	r7, #12
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr

08007190 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b082      	sub	sp, #8
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4618      	mov	r0, r3
 800719e:	f004 ff57 	bl	800c050 <USB_GetCurrentFrame>
 80071a2:	4603      	mov	r3, r0
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3708      	adds	r7, #8
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b082      	sub	sp, #8
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4618      	mov	r0, r3
 80071ba:	f004 ff32 	bl	800c022 <USB_GetHostSpeed>
 80071be:	4603      	mov	r3, r0
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	3708      	adds	r7, #8
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}

080071c8 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b086      	sub	sp, #24
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	460b      	mov	r3, r1
 80071d2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80071de:	78fb      	ldrb	r3, [r7, #3]
 80071e0:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	015a      	lsls	r2, r3, #5
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	4413      	add	r3, r2
 80071ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	f003 0304 	and.w	r3, r3, #4
 80071f4:	2b04      	cmp	r3, #4
 80071f6:	d119      	bne.n	800722c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	015a      	lsls	r2, r3, #5
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	4413      	add	r3, r2
 8007200:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007204:	461a      	mov	r2, r3
 8007206:	2304      	movs	r3, #4
 8007208:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	015a      	lsls	r2, r3, #5
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	4413      	add	r3, r2
 8007212:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007216:	68db      	ldr	r3, [r3, #12]
 8007218:	68fa      	ldr	r2, [r7, #12]
 800721a:	0151      	lsls	r1, r2, #5
 800721c:	693a      	ldr	r2, [r7, #16]
 800721e:	440a      	add	r2, r1
 8007220:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007224:	f043 0302 	orr.w	r3, r3, #2
 8007228:	60d3      	str	r3, [r2, #12]
 800722a:	e0ce      	b.n	80073ca <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	015a      	lsls	r2, r3, #5
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	4413      	add	r3, r2
 8007234:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800723e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007242:	d12c      	bne.n	800729e <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	015a      	lsls	r2, r3, #5
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	4413      	add	r3, r2
 800724c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007250:	461a      	mov	r2, r3
 8007252:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007256:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8007258:	6879      	ldr	r1, [r7, #4]
 800725a:	68fa      	ldr	r2, [r7, #12]
 800725c:	4613      	mov	r3, r2
 800725e:	009b      	lsls	r3, r3, #2
 8007260:	4413      	add	r3, r2
 8007262:	00db      	lsls	r3, r3, #3
 8007264:	440b      	add	r3, r1
 8007266:	335d      	adds	r3, #93	; 0x5d
 8007268:	2207      	movs	r2, #7
 800726a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	015a      	lsls	r2, r3, #5
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	4413      	add	r3, r2
 8007274:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007278:	68db      	ldr	r3, [r3, #12]
 800727a:	68fa      	ldr	r2, [r7, #12]
 800727c:	0151      	lsls	r1, r2, #5
 800727e:	693a      	ldr	r2, [r7, #16]
 8007280:	440a      	add	r2, r1
 8007282:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007286:	f043 0302 	orr.w	r3, r3, #2
 800728a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	68fa      	ldr	r2, [r7, #12]
 8007292:	b2d2      	uxtb	r2, r2
 8007294:	4611      	mov	r1, r2
 8007296:	4618      	mov	r0, r3
 8007298:	f005 f94b 	bl	800c532 <USB_HC_Halt>
 800729c:	e095      	b.n	80073ca <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	015a      	lsls	r2, r3, #5
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	4413      	add	r3, r2
 80072a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	f003 0320 	and.w	r3, r3, #32
 80072b0:	2b20      	cmp	r3, #32
 80072b2:	d109      	bne.n	80072c8 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	015a      	lsls	r2, r3, #5
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	4413      	add	r3, r2
 80072bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072c0:	461a      	mov	r2, r3
 80072c2:	2320      	movs	r3, #32
 80072c4:	6093      	str	r3, [r2, #8]
 80072c6:	e080      	b.n	80073ca <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	015a      	lsls	r2, r3, #5
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	4413      	add	r3, r2
 80072d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072d4:	689b      	ldr	r3, [r3, #8]
 80072d6:	f003 0308 	and.w	r3, r3, #8
 80072da:	2b08      	cmp	r3, #8
 80072dc:	d134      	bne.n	8007348 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	015a      	lsls	r2, r3, #5
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	4413      	add	r3, r2
 80072e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072ea:	68db      	ldr	r3, [r3, #12]
 80072ec:	68fa      	ldr	r2, [r7, #12]
 80072ee:	0151      	lsls	r1, r2, #5
 80072f0:	693a      	ldr	r2, [r7, #16]
 80072f2:	440a      	add	r2, r1
 80072f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072f8:	f043 0302 	orr.w	r3, r3, #2
 80072fc:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80072fe:	6879      	ldr	r1, [r7, #4]
 8007300:	68fa      	ldr	r2, [r7, #12]
 8007302:	4613      	mov	r3, r2
 8007304:	009b      	lsls	r3, r3, #2
 8007306:	4413      	add	r3, r2
 8007308:	00db      	lsls	r3, r3, #3
 800730a:	440b      	add	r3, r1
 800730c:	335d      	adds	r3, #93	; 0x5d
 800730e:	2205      	movs	r2, #5
 8007310:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	015a      	lsls	r2, r3, #5
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	4413      	add	r3, r2
 800731a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800731e:	461a      	mov	r2, r3
 8007320:	2310      	movs	r3, #16
 8007322:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	015a      	lsls	r2, r3, #5
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	4413      	add	r3, r2
 800732c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007330:	461a      	mov	r2, r3
 8007332:	2308      	movs	r3, #8
 8007334:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	68fa      	ldr	r2, [r7, #12]
 800733c:	b2d2      	uxtb	r2, r2
 800733e:	4611      	mov	r1, r2
 8007340:	4618      	mov	r0, r3
 8007342:	f005 f8f6 	bl	800c532 <USB_HC_Halt>
 8007346:	e040      	b.n	80073ca <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	015a      	lsls	r2, r3, #5
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	4413      	add	r3, r2
 8007350:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800735a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800735e:	d134      	bne.n	80073ca <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	015a      	lsls	r2, r3, #5
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	4413      	add	r3, r2
 8007368:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800736c:	68db      	ldr	r3, [r3, #12]
 800736e:	68fa      	ldr	r2, [r7, #12]
 8007370:	0151      	lsls	r1, r2, #5
 8007372:	693a      	ldr	r2, [r7, #16]
 8007374:	440a      	add	r2, r1
 8007376:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800737a:	f043 0302 	orr.w	r3, r3, #2
 800737e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	68fa      	ldr	r2, [r7, #12]
 8007386:	b2d2      	uxtb	r2, r2
 8007388:	4611      	mov	r1, r2
 800738a:	4618      	mov	r0, r3
 800738c:	f005 f8d1 	bl	800c532 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	015a      	lsls	r2, r3, #5
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	4413      	add	r3, r2
 8007398:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800739c:	461a      	mov	r2, r3
 800739e:	2310      	movs	r3, #16
 80073a0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80073a2:	6879      	ldr	r1, [r7, #4]
 80073a4:	68fa      	ldr	r2, [r7, #12]
 80073a6:	4613      	mov	r3, r2
 80073a8:	009b      	lsls	r3, r3, #2
 80073aa:	4413      	add	r3, r2
 80073ac:	00db      	lsls	r3, r3, #3
 80073ae:	440b      	add	r3, r1
 80073b0:	335d      	adds	r3, #93	; 0x5d
 80073b2:	2208      	movs	r2, #8
 80073b4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	015a      	lsls	r2, r3, #5
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	4413      	add	r3, r2
 80073be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073c2:	461a      	mov	r2, r3
 80073c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073c8:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	015a      	lsls	r2, r3, #5
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	4413      	add	r3, r2
 80073d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80073dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073e0:	d122      	bne.n	8007428 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	015a      	lsls	r2, r3, #5
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	4413      	add	r3, r2
 80073ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073ee:	68db      	ldr	r3, [r3, #12]
 80073f0:	68fa      	ldr	r2, [r7, #12]
 80073f2:	0151      	lsls	r1, r2, #5
 80073f4:	693a      	ldr	r2, [r7, #16]
 80073f6:	440a      	add	r2, r1
 80073f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80073fc:	f043 0302 	orr.w	r3, r3, #2
 8007400:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	68fa      	ldr	r2, [r7, #12]
 8007408:	b2d2      	uxtb	r2, r2
 800740a:	4611      	mov	r1, r2
 800740c:	4618      	mov	r0, r3
 800740e:	f005 f890 	bl	800c532 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	015a      	lsls	r2, r3, #5
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	4413      	add	r3, r2
 800741a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800741e:	461a      	mov	r2, r3
 8007420:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007424:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8007426:	e300      	b.n	8007a2a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	015a      	lsls	r2, r3, #5
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	4413      	add	r3, r2
 8007430:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007434:	689b      	ldr	r3, [r3, #8]
 8007436:	f003 0301 	and.w	r3, r3, #1
 800743a:	2b01      	cmp	r3, #1
 800743c:	f040 80fd 	bne.w	800763a <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	691b      	ldr	r3, [r3, #16]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d01b      	beq.n	8007480 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8007448:	6879      	ldr	r1, [r7, #4]
 800744a:	68fa      	ldr	r2, [r7, #12]
 800744c:	4613      	mov	r3, r2
 800744e:	009b      	lsls	r3, r3, #2
 8007450:	4413      	add	r3, r2
 8007452:	00db      	lsls	r3, r3, #3
 8007454:	440b      	add	r3, r1
 8007456:	3348      	adds	r3, #72	; 0x48
 8007458:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	0159      	lsls	r1, r3, #5
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	440b      	add	r3, r1
 8007462:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007466:	691b      	ldr	r3, [r3, #16]
 8007468:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800746c:	1ad1      	subs	r1, r2, r3
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	68fa      	ldr	r2, [r7, #12]
 8007472:	4613      	mov	r3, r2
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	4413      	add	r3, r2
 8007478:	00db      	lsls	r3, r3, #3
 800747a:	4403      	add	r3, r0
 800747c:	334c      	adds	r3, #76	; 0x4c
 800747e:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8007480:	6879      	ldr	r1, [r7, #4]
 8007482:	68fa      	ldr	r2, [r7, #12]
 8007484:	4613      	mov	r3, r2
 8007486:	009b      	lsls	r3, r3, #2
 8007488:	4413      	add	r3, r2
 800748a:	00db      	lsls	r3, r3, #3
 800748c:	440b      	add	r3, r1
 800748e:	335d      	adds	r3, #93	; 0x5d
 8007490:	2201      	movs	r2, #1
 8007492:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8007494:	6879      	ldr	r1, [r7, #4]
 8007496:	68fa      	ldr	r2, [r7, #12]
 8007498:	4613      	mov	r3, r2
 800749a:	009b      	lsls	r3, r3, #2
 800749c:	4413      	add	r3, r2
 800749e:	00db      	lsls	r3, r3, #3
 80074a0:	440b      	add	r3, r1
 80074a2:	3358      	adds	r3, #88	; 0x58
 80074a4:	2200      	movs	r2, #0
 80074a6:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	015a      	lsls	r2, r3, #5
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	4413      	add	r3, r2
 80074b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074b4:	461a      	mov	r2, r3
 80074b6:	2301      	movs	r3, #1
 80074b8:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80074ba:	6879      	ldr	r1, [r7, #4]
 80074bc:	68fa      	ldr	r2, [r7, #12]
 80074be:	4613      	mov	r3, r2
 80074c0:	009b      	lsls	r3, r3, #2
 80074c2:	4413      	add	r3, r2
 80074c4:	00db      	lsls	r3, r3, #3
 80074c6:	440b      	add	r3, r1
 80074c8:	333f      	adds	r3, #63	; 0x3f
 80074ca:	781b      	ldrb	r3, [r3, #0]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d00a      	beq.n	80074e6 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80074d0:	6879      	ldr	r1, [r7, #4]
 80074d2:	68fa      	ldr	r2, [r7, #12]
 80074d4:	4613      	mov	r3, r2
 80074d6:	009b      	lsls	r3, r3, #2
 80074d8:	4413      	add	r3, r2
 80074da:	00db      	lsls	r3, r3, #3
 80074dc:	440b      	add	r3, r1
 80074de:	333f      	adds	r3, #63	; 0x3f
 80074e0:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80074e2:	2b02      	cmp	r3, #2
 80074e4:	d121      	bne.n	800752a <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	015a      	lsls	r2, r3, #5
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	4413      	add	r3, r2
 80074ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074f2:	68db      	ldr	r3, [r3, #12]
 80074f4:	68fa      	ldr	r2, [r7, #12]
 80074f6:	0151      	lsls	r1, r2, #5
 80074f8:	693a      	ldr	r2, [r7, #16]
 80074fa:	440a      	add	r2, r1
 80074fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007500:	f043 0302 	orr.w	r3, r3, #2
 8007504:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	68fa      	ldr	r2, [r7, #12]
 800750c:	b2d2      	uxtb	r2, r2
 800750e:	4611      	mov	r1, r2
 8007510:	4618      	mov	r0, r3
 8007512:	f005 f80e 	bl	800c532 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	015a      	lsls	r2, r3, #5
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	4413      	add	r3, r2
 800751e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007522:	461a      	mov	r2, r3
 8007524:	2310      	movs	r3, #16
 8007526:	6093      	str	r3, [r2, #8]
 8007528:	e070      	b.n	800760c <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800752a:	6879      	ldr	r1, [r7, #4]
 800752c:	68fa      	ldr	r2, [r7, #12]
 800752e:	4613      	mov	r3, r2
 8007530:	009b      	lsls	r3, r3, #2
 8007532:	4413      	add	r3, r2
 8007534:	00db      	lsls	r3, r3, #3
 8007536:	440b      	add	r3, r1
 8007538:	333f      	adds	r3, #63	; 0x3f
 800753a:	781b      	ldrb	r3, [r3, #0]
 800753c:	2b03      	cmp	r3, #3
 800753e:	d12a      	bne.n	8007596 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	015a      	lsls	r2, r3, #5
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	4413      	add	r3, r2
 8007548:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	68fa      	ldr	r2, [r7, #12]
 8007550:	0151      	lsls	r1, r2, #5
 8007552:	693a      	ldr	r2, [r7, #16]
 8007554:	440a      	add	r2, r1
 8007556:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800755a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800755e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8007560:	6879      	ldr	r1, [r7, #4]
 8007562:	68fa      	ldr	r2, [r7, #12]
 8007564:	4613      	mov	r3, r2
 8007566:	009b      	lsls	r3, r3, #2
 8007568:	4413      	add	r3, r2
 800756a:	00db      	lsls	r3, r3, #3
 800756c:	440b      	add	r3, r1
 800756e:	335c      	adds	r3, #92	; 0x5c
 8007570:	2201      	movs	r2, #1
 8007572:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	b2d8      	uxtb	r0, r3
 8007578:	6879      	ldr	r1, [r7, #4]
 800757a:	68fa      	ldr	r2, [r7, #12]
 800757c:	4613      	mov	r3, r2
 800757e:	009b      	lsls	r3, r3, #2
 8007580:	4413      	add	r3, r2
 8007582:	00db      	lsls	r3, r3, #3
 8007584:	440b      	add	r3, r1
 8007586:	335c      	adds	r3, #92	; 0x5c
 8007588:	781b      	ldrb	r3, [r3, #0]
 800758a:	461a      	mov	r2, r3
 800758c:	4601      	mov	r1, r0
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f00a fecc 	bl	801232c <HAL_HCD_HC_NotifyURBChange_Callback>
 8007594:	e03a      	b.n	800760c <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8007596:	6879      	ldr	r1, [r7, #4]
 8007598:	68fa      	ldr	r2, [r7, #12]
 800759a:	4613      	mov	r3, r2
 800759c:	009b      	lsls	r3, r3, #2
 800759e:	4413      	add	r3, r2
 80075a0:	00db      	lsls	r3, r3, #3
 80075a2:	440b      	add	r3, r1
 80075a4:	333f      	adds	r3, #63	; 0x3f
 80075a6:	781b      	ldrb	r3, [r3, #0]
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	d12f      	bne.n	800760c <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80075ac:	6879      	ldr	r1, [r7, #4]
 80075ae:	68fa      	ldr	r2, [r7, #12]
 80075b0:	4613      	mov	r3, r2
 80075b2:	009b      	lsls	r3, r3, #2
 80075b4:	4413      	add	r3, r2
 80075b6:	00db      	lsls	r3, r3, #3
 80075b8:	440b      	add	r3, r1
 80075ba:	335c      	adds	r3, #92	; 0x5c
 80075bc:	2201      	movs	r2, #1
 80075be:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80075c0:	6879      	ldr	r1, [r7, #4]
 80075c2:	68fa      	ldr	r2, [r7, #12]
 80075c4:	4613      	mov	r3, r2
 80075c6:	009b      	lsls	r3, r3, #2
 80075c8:	4413      	add	r3, r2
 80075ca:	00db      	lsls	r3, r3, #3
 80075cc:	440b      	add	r3, r1
 80075ce:	3350      	adds	r3, #80	; 0x50
 80075d0:	781b      	ldrb	r3, [r3, #0]
 80075d2:	f083 0301 	eor.w	r3, r3, #1
 80075d6:	b2d8      	uxtb	r0, r3
 80075d8:	6879      	ldr	r1, [r7, #4]
 80075da:	68fa      	ldr	r2, [r7, #12]
 80075dc:	4613      	mov	r3, r2
 80075de:	009b      	lsls	r3, r3, #2
 80075e0:	4413      	add	r3, r2
 80075e2:	00db      	lsls	r3, r3, #3
 80075e4:	440b      	add	r3, r1
 80075e6:	3350      	adds	r3, #80	; 0x50
 80075e8:	4602      	mov	r2, r0
 80075ea:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	b2d8      	uxtb	r0, r3
 80075f0:	6879      	ldr	r1, [r7, #4]
 80075f2:	68fa      	ldr	r2, [r7, #12]
 80075f4:	4613      	mov	r3, r2
 80075f6:	009b      	lsls	r3, r3, #2
 80075f8:	4413      	add	r3, r2
 80075fa:	00db      	lsls	r3, r3, #3
 80075fc:	440b      	add	r3, r1
 80075fe:	335c      	adds	r3, #92	; 0x5c
 8007600:	781b      	ldrb	r3, [r3, #0]
 8007602:	461a      	mov	r2, r3
 8007604:	4601      	mov	r1, r0
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f00a fe90 	bl	801232c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 800760c:	6879      	ldr	r1, [r7, #4]
 800760e:	68fa      	ldr	r2, [r7, #12]
 8007610:	4613      	mov	r3, r2
 8007612:	009b      	lsls	r3, r3, #2
 8007614:	4413      	add	r3, r2
 8007616:	00db      	lsls	r3, r3, #3
 8007618:	440b      	add	r3, r1
 800761a:	3350      	adds	r3, #80	; 0x50
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	f083 0301 	eor.w	r3, r3, #1
 8007622:	b2d8      	uxtb	r0, r3
 8007624:	6879      	ldr	r1, [r7, #4]
 8007626:	68fa      	ldr	r2, [r7, #12]
 8007628:	4613      	mov	r3, r2
 800762a:	009b      	lsls	r3, r3, #2
 800762c:	4413      	add	r3, r2
 800762e:	00db      	lsls	r3, r3, #3
 8007630:	440b      	add	r3, r1
 8007632:	3350      	adds	r3, #80	; 0x50
 8007634:	4602      	mov	r2, r0
 8007636:	701a      	strb	r2, [r3, #0]
}
 8007638:	e1f7      	b.n	8007a2a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	015a      	lsls	r2, r3, #5
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	4413      	add	r3, r2
 8007642:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007646:	689b      	ldr	r3, [r3, #8]
 8007648:	f003 0302 	and.w	r3, r3, #2
 800764c:	2b02      	cmp	r3, #2
 800764e:	f040 811a 	bne.w	8007886 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	015a      	lsls	r2, r3, #5
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	4413      	add	r3, r2
 800765a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800765e:	68db      	ldr	r3, [r3, #12]
 8007660:	68fa      	ldr	r2, [r7, #12]
 8007662:	0151      	lsls	r1, r2, #5
 8007664:	693a      	ldr	r2, [r7, #16]
 8007666:	440a      	add	r2, r1
 8007668:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800766c:	f023 0302 	bic.w	r3, r3, #2
 8007670:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8007672:	6879      	ldr	r1, [r7, #4]
 8007674:	68fa      	ldr	r2, [r7, #12]
 8007676:	4613      	mov	r3, r2
 8007678:	009b      	lsls	r3, r3, #2
 800767a:	4413      	add	r3, r2
 800767c:	00db      	lsls	r3, r3, #3
 800767e:	440b      	add	r3, r1
 8007680:	335d      	adds	r3, #93	; 0x5d
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	2b01      	cmp	r3, #1
 8007686:	d10a      	bne.n	800769e <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8007688:	6879      	ldr	r1, [r7, #4]
 800768a:	68fa      	ldr	r2, [r7, #12]
 800768c:	4613      	mov	r3, r2
 800768e:	009b      	lsls	r3, r3, #2
 8007690:	4413      	add	r3, r2
 8007692:	00db      	lsls	r3, r3, #3
 8007694:	440b      	add	r3, r1
 8007696:	335c      	adds	r3, #92	; 0x5c
 8007698:	2201      	movs	r2, #1
 800769a:	701a      	strb	r2, [r3, #0]
 800769c:	e0d9      	b.n	8007852 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800769e:	6879      	ldr	r1, [r7, #4]
 80076a0:	68fa      	ldr	r2, [r7, #12]
 80076a2:	4613      	mov	r3, r2
 80076a4:	009b      	lsls	r3, r3, #2
 80076a6:	4413      	add	r3, r2
 80076a8:	00db      	lsls	r3, r3, #3
 80076aa:	440b      	add	r3, r1
 80076ac:	335d      	adds	r3, #93	; 0x5d
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	2b05      	cmp	r3, #5
 80076b2:	d10a      	bne.n	80076ca <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80076b4:	6879      	ldr	r1, [r7, #4]
 80076b6:	68fa      	ldr	r2, [r7, #12]
 80076b8:	4613      	mov	r3, r2
 80076ba:	009b      	lsls	r3, r3, #2
 80076bc:	4413      	add	r3, r2
 80076be:	00db      	lsls	r3, r3, #3
 80076c0:	440b      	add	r3, r1
 80076c2:	335c      	adds	r3, #92	; 0x5c
 80076c4:	2205      	movs	r2, #5
 80076c6:	701a      	strb	r2, [r3, #0]
 80076c8:	e0c3      	b.n	8007852 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80076ca:	6879      	ldr	r1, [r7, #4]
 80076cc:	68fa      	ldr	r2, [r7, #12]
 80076ce:	4613      	mov	r3, r2
 80076d0:	009b      	lsls	r3, r3, #2
 80076d2:	4413      	add	r3, r2
 80076d4:	00db      	lsls	r3, r3, #3
 80076d6:	440b      	add	r3, r1
 80076d8:	335d      	adds	r3, #93	; 0x5d
 80076da:	781b      	ldrb	r3, [r3, #0]
 80076dc:	2b06      	cmp	r3, #6
 80076de:	d00a      	beq.n	80076f6 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80076e0:	6879      	ldr	r1, [r7, #4]
 80076e2:	68fa      	ldr	r2, [r7, #12]
 80076e4:	4613      	mov	r3, r2
 80076e6:	009b      	lsls	r3, r3, #2
 80076e8:	4413      	add	r3, r2
 80076ea:	00db      	lsls	r3, r3, #3
 80076ec:	440b      	add	r3, r1
 80076ee:	335d      	adds	r3, #93	; 0x5d
 80076f0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80076f2:	2b08      	cmp	r3, #8
 80076f4:	d156      	bne.n	80077a4 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 80076f6:	6879      	ldr	r1, [r7, #4]
 80076f8:	68fa      	ldr	r2, [r7, #12]
 80076fa:	4613      	mov	r3, r2
 80076fc:	009b      	lsls	r3, r3, #2
 80076fe:	4413      	add	r3, r2
 8007700:	00db      	lsls	r3, r3, #3
 8007702:	440b      	add	r3, r1
 8007704:	3358      	adds	r3, #88	; 0x58
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	1c59      	adds	r1, r3, #1
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	68fa      	ldr	r2, [r7, #12]
 800770e:	4613      	mov	r3, r2
 8007710:	009b      	lsls	r3, r3, #2
 8007712:	4413      	add	r3, r2
 8007714:	00db      	lsls	r3, r3, #3
 8007716:	4403      	add	r3, r0
 8007718:	3358      	adds	r3, #88	; 0x58
 800771a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800771c:	6879      	ldr	r1, [r7, #4]
 800771e:	68fa      	ldr	r2, [r7, #12]
 8007720:	4613      	mov	r3, r2
 8007722:	009b      	lsls	r3, r3, #2
 8007724:	4413      	add	r3, r2
 8007726:	00db      	lsls	r3, r3, #3
 8007728:	440b      	add	r3, r1
 800772a:	3358      	adds	r3, #88	; 0x58
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	2b03      	cmp	r3, #3
 8007730:	d914      	bls.n	800775c <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8007732:	6879      	ldr	r1, [r7, #4]
 8007734:	68fa      	ldr	r2, [r7, #12]
 8007736:	4613      	mov	r3, r2
 8007738:	009b      	lsls	r3, r3, #2
 800773a:	4413      	add	r3, r2
 800773c:	00db      	lsls	r3, r3, #3
 800773e:	440b      	add	r3, r1
 8007740:	3358      	adds	r3, #88	; 0x58
 8007742:	2200      	movs	r2, #0
 8007744:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007746:	6879      	ldr	r1, [r7, #4]
 8007748:	68fa      	ldr	r2, [r7, #12]
 800774a:	4613      	mov	r3, r2
 800774c:	009b      	lsls	r3, r3, #2
 800774e:	4413      	add	r3, r2
 8007750:	00db      	lsls	r3, r3, #3
 8007752:	440b      	add	r3, r1
 8007754:	335c      	adds	r3, #92	; 0x5c
 8007756:	2204      	movs	r2, #4
 8007758:	701a      	strb	r2, [r3, #0]
 800775a:	e009      	b.n	8007770 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800775c:	6879      	ldr	r1, [r7, #4]
 800775e:	68fa      	ldr	r2, [r7, #12]
 8007760:	4613      	mov	r3, r2
 8007762:	009b      	lsls	r3, r3, #2
 8007764:	4413      	add	r3, r2
 8007766:	00db      	lsls	r3, r3, #3
 8007768:	440b      	add	r3, r1
 800776a:	335c      	adds	r3, #92	; 0x5c
 800776c:	2202      	movs	r2, #2
 800776e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	015a      	lsls	r2, r3, #5
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	4413      	add	r3, r2
 8007778:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007786:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800778e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	015a      	lsls	r2, r3, #5
 8007794:	693b      	ldr	r3, [r7, #16]
 8007796:	4413      	add	r3, r2
 8007798:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800779c:	461a      	mov	r2, r3
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	6013      	str	r3, [r2, #0]
 80077a2:	e056      	b.n	8007852 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80077a4:	6879      	ldr	r1, [r7, #4]
 80077a6:	68fa      	ldr	r2, [r7, #12]
 80077a8:	4613      	mov	r3, r2
 80077aa:	009b      	lsls	r3, r3, #2
 80077ac:	4413      	add	r3, r2
 80077ae:	00db      	lsls	r3, r3, #3
 80077b0:	440b      	add	r3, r1
 80077b2:	335d      	adds	r3, #93	; 0x5d
 80077b4:	781b      	ldrb	r3, [r3, #0]
 80077b6:	2b03      	cmp	r3, #3
 80077b8:	d123      	bne.n	8007802 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80077ba:	6879      	ldr	r1, [r7, #4]
 80077bc:	68fa      	ldr	r2, [r7, #12]
 80077be:	4613      	mov	r3, r2
 80077c0:	009b      	lsls	r3, r3, #2
 80077c2:	4413      	add	r3, r2
 80077c4:	00db      	lsls	r3, r3, #3
 80077c6:	440b      	add	r3, r1
 80077c8:	335c      	adds	r3, #92	; 0x5c
 80077ca:	2202      	movs	r2, #2
 80077cc:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	015a      	lsls	r2, r3, #5
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	4413      	add	r3, r2
 80077d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80077e4:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80077ec:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	015a      	lsls	r2, r3, #5
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	4413      	add	r3, r2
 80077f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077fa:	461a      	mov	r2, r3
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	6013      	str	r3, [r2, #0]
 8007800:	e027      	b.n	8007852 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8007802:	6879      	ldr	r1, [r7, #4]
 8007804:	68fa      	ldr	r2, [r7, #12]
 8007806:	4613      	mov	r3, r2
 8007808:	009b      	lsls	r3, r3, #2
 800780a:	4413      	add	r3, r2
 800780c:	00db      	lsls	r3, r3, #3
 800780e:	440b      	add	r3, r1
 8007810:	335d      	adds	r3, #93	; 0x5d
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	2b07      	cmp	r3, #7
 8007816:	d11c      	bne.n	8007852 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8007818:	6879      	ldr	r1, [r7, #4]
 800781a:	68fa      	ldr	r2, [r7, #12]
 800781c:	4613      	mov	r3, r2
 800781e:	009b      	lsls	r3, r3, #2
 8007820:	4413      	add	r3, r2
 8007822:	00db      	lsls	r3, r3, #3
 8007824:	440b      	add	r3, r1
 8007826:	3358      	adds	r3, #88	; 0x58
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	1c59      	adds	r1, r3, #1
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	68fa      	ldr	r2, [r7, #12]
 8007830:	4613      	mov	r3, r2
 8007832:	009b      	lsls	r3, r3, #2
 8007834:	4413      	add	r3, r2
 8007836:	00db      	lsls	r3, r3, #3
 8007838:	4403      	add	r3, r0
 800783a:	3358      	adds	r3, #88	; 0x58
 800783c:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800783e:	6879      	ldr	r1, [r7, #4]
 8007840:	68fa      	ldr	r2, [r7, #12]
 8007842:	4613      	mov	r3, r2
 8007844:	009b      	lsls	r3, r3, #2
 8007846:	4413      	add	r3, r2
 8007848:	00db      	lsls	r3, r3, #3
 800784a:	440b      	add	r3, r1
 800784c:	335c      	adds	r3, #92	; 0x5c
 800784e:	2204      	movs	r2, #4
 8007850:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	015a      	lsls	r2, r3, #5
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	4413      	add	r3, r2
 800785a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800785e:	461a      	mov	r2, r3
 8007860:	2302      	movs	r3, #2
 8007862:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	b2d8      	uxtb	r0, r3
 8007868:	6879      	ldr	r1, [r7, #4]
 800786a:	68fa      	ldr	r2, [r7, #12]
 800786c:	4613      	mov	r3, r2
 800786e:	009b      	lsls	r3, r3, #2
 8007870:	4413      	add	r3, r2
 8007872:	00db      	lsls	r3, r3, #3
 8007874:	440b      	add	r3, r1
 8007876:	335c      	adds	r3, #92	; 0x5c
 8007878:	781b      	ldrb	r3, [r3, #0]
 800787a:	461a      	mov	r2, r3
 800787c:	4601      	mov	r1, r0
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f00a fd54 	bl	801232c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8007884:	e0d1      	b.n	8007a2a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	015a      	lsls	r2, r3, #5
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	4413      	add	r3, r2
 800788e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007892:	689b      	ldr	r3, [r3, #8]
 8007894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007898:	2b80      	cmp	r3, #128	; 0x80
 800789a:	d13e      	bne.n	800791a <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	015a      	lsls	r2, r3, #5
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	4413      	add	r3, r2
 80078a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078a8:	68db      	ldr	r3, [r3, #12]
 80078aa:	68fa      	ldr	r2, [r7, #12]
 80078ac:	0151      	lsls	r1, r2, #5
 80078ae:	693a      	ldr	r2, [r7, #16]
 80078b0:	440a      	add	r2, r1
 80078b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80078b6:	f043 0302 	orr.w	r3, r3, #2
 80078ba:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80078bc:	6879      	ldr	r1, [r7, #4]
 80078be:	68fa      	ldr	r2, [r7, #12]
 80078c0:	4613      	mov	r3, r2
 80078c2:	009b      	lsls	r3, r3, #2
 80078c4:	4413      	add	r3, r2
 80078c6:	00db      	lsls	r3, r3, #3
 80078c8:	440b      	add	r3, r1
 80078ca:	3358      	adds	r3, #88	; 0x58
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	1c59      	adds	r1, r3, #1
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	68fa      	ldr	r2, [r7, #12]
 80078d4:	4613      	mov	r3, r2
 80078d6:	009b      	lsls	r3, r3, #2
 80078d8:	4413      	add	r3, r2
 80078da:	00db      	lsls	r3, r3, #3
 80078dc:	4403      	add	r3, r0
 80078de:	3358      	adds	r3, #88	; 0x58
 80078e0:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80078e2:	6879      	ldr	r1, [r7, #4]
 80078e4:	68fa      	ldr	r2, [r7, #12]
 80078e6:	4613      	mov	r3, r2
 80078e8:	009b      	lsls	r3, r3, #2
 80078ea:	4413      	add	r3, r2
 80078ec:	00db      	lsls	r3, r3, #3
 80078ee:	440b      	add	r3, r1
 80078f0:	335d      	adds	r3, #93	; 0x5d
 80078f2:	2206      	movs	r2, #6
 80078f4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	68fa      	ldr	r2, [r7, #12]
 80078fc:	b2d2      	uxtb	r2, r2
 80078fe:	4611      	mov	r1, r2
 8007900:	4618      	mov	r0, r3
 8007902:	f004 fe16 	bl	800c532 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	015a      	lsls	r2, r3, #5
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	4413      	add	r3, r2
 800790e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007912:	461a      	mov	r2, r3
 8007914:	2380      	movs	r3, #128	; 0x80
 8007916:	6093      	str	r3, [r2, #8]
}
 8007918:	e087      	b.n	8007a2a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	015a      	lsls	r2, r3, #5
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	4413      	add	r3, r2
 8007922:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007926:	689b      	ldr	r3, [r3, #8]
 8007928:	f003 0310 	and.w	r3, r3, #16
 800792c:	2b10      	cmp	r3, #16
 800792e:	d17c      	bne.n	8007a2a <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8007930:	6879      	ldr	r1, [r7, #4]
 8007932:	68fa      	ldr	r2, [r7, #12]
 8007934:	4613      	mov	r3, r2
 8007936:	009b      	lsls	r3, r3, #2
 8007938:	4413      	add	r3, r2
 800793a:	00db      	lsls	r3, r3, #3
 800793c:	440b      	add	r3, r1
 800793e:	333f      	adds	r3, #63	; 0x3f
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	2b03      	cmp	r3, #3
 8007944:	d122      	bne.n	800798c <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8007946:	6879      	ldr	r1, [r7, #4]
 8007948:	68fa      	ldr	r2, [r7, #12]
 800794a:	4613      	mov	r3, r2
 800794c:	009b      	lsls	r3, r3, #2
 800794e:	4413      	add	r3, r2
 8007950:	00db      	lsls	r3, r3, #3
 8007952:	440b      	add	r3, r1
 8007954:	3358      	adds	r3, #88	; 0x58
 8007956:	2200      	movs	r2, #0
 8007958:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	015a      	lsls	r2, r3, #5
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	4413      	add	r3, r2
 8007962:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007966:	68db      	ldr	r3, [r3, #12]
 8007968:	68fa      	ldr	r2, [r7, #12]
 800796a:	0151      	lsls	r1, r2, #5
 800796c:	693a      	ldr	r2, [r7, #16]
 800796e:	440a      	add	r2, r1
 8007970:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007974:	f043 0302 	orr.w	r3, r3, #2
 8007978:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	68fa      	ldr	r2, [r7, #12]
 8007980:	b2d2      	uxtb	r2, r2
 8007982:	4611      	mov	r1, r2
 8007984:	4618      	mov	r0, r3
 8007986:	f004 fdd4 	bl	800c532 <USB_HC_Halt>
 800798a:	e045      	b.n	8007a18 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800798c:	6879      	ldr	r1, [r7, #4]
 800798e:	68fa      	ldr	r2, [r7, #12]
 8007990:	4613      	mov	r3, r2
 8007992:	009b      	lsls	r3, r3, #2
 8007994:	4413      	add	r3, r2
 8007996:	00db      	lsls	r3, r3, #3
 8007998:	440b      	add	r3, r1
 800799a:	333f      	adds	r3, #63	; 0x3f
 800799c:	781b      	ldrb	r3, [r3, #0]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d00a      	beq.n	80079b8 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80079a2:	6879      	ldr	r1, [r7, #4]
 80079a4:	68fa      	ldr	r2, [r7, #12]
 80079a6:	4613      	mov	r3, r2
 80079a8:	009b      	lsls	r3, r3, #2
 80079aa:	4413      	add	r3, r2
 80079ac:	00db      	lsls	r3, r3, #3
 80079ae:	440b      	add	r3, r1
 80079b0:	333f      	adds	r3, #63	; 0x3f
 80079b2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80079b4:	2b02      	cmp	r3, #2
 80079b6:	d12f      	bne.n	8007a18 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80079b8:	6879      	ldr	r1, [r7, #4]
 80079ba:	68fa      	ldr	r2, [r7, #12]
 80079bc:	4613      	mov	r3, r2
 80079be:	009b      	lsls	r3, r3, #2
 80079c0:	4413      	add	r3, r2
 80079c2:	00db      	lsls	r3, r3, #3
 80079c4:	440b      	add	r3, r1
 80079c6:	3358      	adds	r3, #88	; 0x58
 80079c8:	2200      	movs	r2, #0
 80079ca:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	691b      	ldr	r3, [r3, #16]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d121      	bne.n	8007a18 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 80079d4:	6879      	ldr	r1, [r7, #4]
 80079d6:	68fa      	ldr	r2, [r7, #12]
 80079d8:	4613      	mov	r3, r2
 80079da:	009b      	lsls	r3, r3, #2
 80079dc:	4413      	add	r3, r2
 80079de:	00db      	lsls	r3, r3, #3
 80079e0:	440b      	add	r3, r1
 80079e2:	335d      	adds	r3, #93	; 0x5d
 80079e4:	2203      	movs	r2, #3
 80079e6:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	015a      	lsls	r2, r3, #5
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	4413      	add	r3, r2
 80079f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079f4:	68db      	ldr	r3, [r3, #12]
 80079f6:	68fa      	ldr	r2, [r7, #12]
 80079f8:	0151      	lsls	r1, r2, #5
 80079fa:	693a      	ldr	r2, [r7, #16]
 80079fc:	440a      	add	r2, r1
 80079fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a02:	f043 0302 	orr.w	r3, r3, #2
 8007a06:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	68fa      	ldr	r2, [r7, #12]
 8007a0e:	b2d2      	uxtb	r2, r2
 8007a10:	4611      	mov	r1, r2
 8007a12:	4618      	mov	r0, r3
 8007a14:	f004 fd8d 	bl	800c532 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	015a      	lsls	r2, r3, #5
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	4413      	add	r3, r2
 8007a20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a24:	461a      	mov	r2, r3
 8007a26:	2310      	movs	r3, #16
 8007a28:	6093      	str	r3, [r2, #8]
}
 8007a2a:	bf00      	nop
 8007a2c:	3718      	adds	r7, #24
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}

08007a32 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8007a32:	b580      	push	{r7, lr}
 8007a34:	b086      	sub	sp, #24
 8007a36:	af00      	add	r7, sp, #0
 8007a38:	6078      	str	r0, [r7, #4]
 8007a3a:	460b      	mov	r3, r1
 8007a3c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8007a48:	78fb      	ldrb	r3, [r7, #3]
 8007a4a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	015a      	lsls	r2, r3, #5
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	4413      	add	r3, r2
 8007a54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a58:	689b      	ldr	r3, [r3, #8]
 8007a5a:	f003 0304 	and.w	r3, r3, #4
 8007a5e:	2b04      	cmp	r3, #4
 8007a60:	d119      	bne.n	8007a96 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	015a      	lsls	r2, r3, #5
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	4413      	add	r3, r2
 8007a6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a6e:	461a      	mov	r2, r3
 8007a70:	2304      	movs	r3, #4
 8007a72:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	015a      	lsls	r2, r3, #5
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	4413      	add	r3, r2
 8007a7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a80:	68db      	ldr	r3, [r3, #12]
 8007a82:	68fa      	ldr	r2, [r7, #12]
 8007a84:	0151      	lsls	r1, r2, #5
 8007a86:	693a      	ldr	r2, [r7, #16]
 8007a88:	440a      	add	r2, r1
 8007a8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a8e:	f043 0302 	orr.w	r3, r3, #2
 8007a92:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8007a94:	e33e      	b.n	8008114 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	015a      	lsls	r2, r3, #5
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	4413      	add	r3, r2
 8007a9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007aa2:	689b      	ldr	r3, [r3, #8]
 8007aa4:	f003 0320 	and.w	r3, r3, #32
 8007aa8:	2b20      	cmp	r3, #32
 8007aaa:	d141      	bne.n	8007b30 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	015a      	lsls	r2, r3, #5
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	4413      	add	r3, r2
 8007ab4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ab8:	461a      	mov	r2, r3
 8007aba:	2320      	movs	r3, #32
 8007abc:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8007abe:	6879      	ldr	r1, [r7, #4]
 8007ac0:	68fa      	ldr	r2, [r7, #12]
 8007ac2:	4613      	mov	r3, r2
 8007ac4:	009b      	lsls	r3, r3, #2
 8007ac6:	4413      	add	r3, r2
 8007ac8:	00db      	lsls	r3, r3, #3
 8007aca:	440b      	add	r3, r1
 8007acc:	333d      	adds	r3, #61	; 0x3d
 8007ace:	781b      	ldrb	r3, [r3, #0]
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	f040 831f 	bne.w	8008114 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8007ad6:	6879      	ldr	r1, [r7, #4]
 8007ad8:	68fa      	ldr	r2, [r7, #12]
 8007ada:	4613      	mov	r3, r2
 8007adc:	009b      	lsls	r3, r3, #2
 8007ade:	4413      	add	r3, r2
 8007ae0:	00db      	lsls	r3, r3, #3
 8007ae2:	440b      	add	r3, r1
 8007ae4:	333d      	adds	r3, #61	; 0x3d
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8007aea:	6879      	ldr	r1, [r7, #4]
 8007aec:	68fa      	ldr	r2, [r7, #12]
 8007aee:	4613      	mov	r3, r2
 8007af0:	009b      	lsls	r3, r3, #2
 8007af2:	4413      	add	r3, r2
 8007af4:	00db      	lsls	r3, r3, #3
 8007af6:	440b      	add	r3, r1
 8007af8:	335c      	adds	r3, #92	; 0x5c
 8007afa:	2202      	movs	r2, #2
 8007afc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	015a      	lsls	r2, r3, #5
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	4413      	add	r3, r2
 8007b06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b0a:	68db      	ldr	r3, [r3, #12]
 8007b0c:	68fa      	ldr	r2, [r7, #12]
 8007b0e:	0151      	lsls	r1, r2, #5
 8007b10:	693a      	ldr	r2, [r7, #16]
 8007b12:	440a      	add	r2, r1
 8007b14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b18:	f043 0302 	orr.w	r3, r3, #2
 8007b1c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	68fa      	ldr	r2, [r7, #12]
 8007b24:	b2d2      	uxtb	r2, r2
 8007b26:	4611      	mov	r1, r2
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f004 fd02 	bl	800c532 <USB_HC_Halt>
}
 8007b2e:	e2f1      	b.n	8008114 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	015a      	lsls	r2, r3, #5
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	4413      	add	r3, r2
 8007b38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b3c:	689b      	ldr	r3, [r3, #8]
 8007b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b42:	2b40      	cmp	r3, #64	; 0x40
 8007b44:	d13f      	bne.n	8007bc6 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8007b46:	6879      	ldr	r1, [r7, #4]
 8007b48:	68fa      	ldr	r2, [r7, #12]
 8007b4a:	4613      	mov	r3, r2
 8007b4c:	009b      	lsls	r3, r3, #2
 8007b4e:	4413      	add	r3, r2
 8007b50:	00db      	lsls	r3, r3, #3
 8007b52:	440b      	add	r3, r1
 8007b54:	335d      	adds	r3, #93	; 0x5d
 8007b56:	2204      	movs	r2, #4
 8007b58:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8007b5a:	6879      	ldr	r1, [r7, #4]
 8007b5c:	68fa      	ldr	r2, [r7, #12]
 8007b5e:	4613      	mov	r3, r2
 8007b60:	009b      	lsls	r3, r3, #2
 8007b62:	4413      	add	r3, r2
 8007b64:	00db      	lsls	r3, r3, #3
 8007b66:	440b      	add	r3, r1
 8007b68:	333d      	adds	r3, #61	; 0x3d
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8007b6e:	6879      	ldr	r1, [r7, #4]
 8007b70:	68fa      	ldr	r2, [r7, #12]
 8007b72:	4613      	mov	r3, r2
 8007b74:	009b      	lsls	r3, r3, #2
 8007b76:	4413      	add	r3, r2
 8007b78:	00db      	lsls	r3, r3, #3
 8007b7a:	440b      	add	r3, r1
 8007b7c:	3358      	adds	r3, #88	; 0x58
 8007b7e:	2200      	movs	r2, #0
 8007b80:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	015a      	lsls	r2, r3, #5
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	4413      	add	r3, r2
 8007b8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b8e:	68db      	ldr	r3, [r3, #12]
 8007b90:	68fa      	ldr	r2, [r7, #12]
 8007b92:	0151      	lsls	r1, r2, #5
 8007b94:	693a      	ldr	r2, [r7, #16]
 8007b96:	440a      	add	r2, r1
 8007b98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b9c:	f043 0302 	orr.w	r3, r3, #2
 8007ba0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	68fa      	ldr	r2, [r7, #12]
 8007ba8:	b2d2      	uxtb	r2, r2
 8007baa:	4611      	mov	r1, r2
 8007bac:	4618      	mov	r0, r3
 8007bae:	f004 fcc0 	bl	800c532 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	015a      	lsls	r2, r3, #5
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	4413      	add	r3, r2
 8007bba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bbe:	461a      	mov	r2, r3
 8007bc0:	2340      	movs	r3, #64	; 0x40
 8007bc2:	6093      	str	r3, [r2, #8]
}
 8007bc4:	e2a6      	b.n	8008114 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	015a      	lsls	r2, r3, #5
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	4413      	add	r3, r2
 8007bce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bd2:	689b      	ldr	r3, [r3, #8]
 8007bd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007bd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bdc:	d122      	bne.n	8007c24 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	015a      	lsls	r2, r3, #5
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	4413      	add	r3, r2
 8007be6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bea:	68db      	ldr	r3, [r3, #12]
 8007bec:	68fa      	ldr	r2, [r7, #12]
 8007bee:	0151      	lsls	r1, r2, #5
 8007bf0:	693a      	ldr	r2, [r7, #16]
 8007bf2:	440a      	add	r2, r1
 8007bf4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007bf8:	f043 0302 	orr.w	r3, r3, #2
 8007bfc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	68fa      	ldr	r2, [r7, #12]
 8007c04:	b2d2      	uxtb	r2, r2
 8007c06:	4611      	mov	r1, r2
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f004 fc92 	bl	800c532 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	015a      	lsls	r2, r3, #5
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	4413      	add	r3, r2
 8007c16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c1a:	461a      	mov	r2, r3
 8007c1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c20:	6093      	str	r3, [r2, #8]
}
 8007c22:	e277      	b.n	8008114 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	015a      	lsls	r2, r3, #5
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	4413      	add	r3, r2
 8007c2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c30:	689b      	ldr	r3, [r3, #8]
 8007c32:	f003 0301 	and.w	r3, r3, #1
 8007c36:	2b01      	cmp	r3, #1
 8007c38:	d135      	bne.n	8007ca6 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8007c3a:	6879      	ldr	r1, [r7, #4]
 8007c3c:	68fa      	ldr	r2, [r7, #12]
 8007c3e:	4613      	mov	r3, r2
 8007c40:	009b      	lsls	r3, r3, #2
 8007c42:	4413      	add	r3, r2
 8007c44:	00db      	lsls	r3, r3, #3
 8007c46:	440b      	add	r3, r1
 8007c48:	3358      	adds	r3, #88	; 0x58
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	015a      	lsls	r2, r3, #5
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	4413      	add	r3, r2
 8007c56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c5a:	68db      	ldr	r3, [r3, #12]
 8007c5c:	68fa      	ldr	r2, [r7, #12]
 8007c5e:	0151      	lsls	r1, r2, #5
 8007c60:	693a      	ldr	r2, [r7, #16]
 8007c62:	440a      	add	r2, r1
 8007c64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c68:	f043 0302 	orr.w	r3, r3, #2
 8007c6c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	68fa      	ldr	r2, [r7, #12]
 8007c74:	b2d2      	uxtb	r2, r2
 8007c76:	4611      	mov	r1, r2
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f004 fc5a 	bl	800c532 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	015a      	lsls	r2, r3, #5
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	4413      	add	r3, r2
 8007c86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8007c90:	6879      	ldr	r1, [r7, #4]
 8007c92:	68fa      	ldr	r2, [r7, #12]
 8007c94:	4613      	mov	r3, r2
 8007c96:	009b      	lsls	r3, r3, #2
 8007c98:	4413      	add	r3, r2
 8007c9a:	00db      	lsls	r3, r3, #3
 8007c9c:	440b      	add	r3, r1
 8007c9e:	335d      	adds	r3, #93	; 0x5d
 8007ca0:	2201      	movs	r2, #1
 8007ca2:	701a      	strb	r2, [r3, #0]
}
 8007ca4:	e236      	b.n	8008114 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	015a      	lsls	r2, r3, #5
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	4413      	add	r3, r2
 8007cae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cb2:	689b      	ldr	r3, [r3, #8]
 8007cb4:	f003 0308 	and.w	r3, r3, #8
 8007cb8:	2b08      	cmp	r3, #8
 8007cba:	d12b      	bne.n	8007d14 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	015a      	lsls	r2, r3, #5
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	4413      	add	r3, r2
 8007cc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cc8:	461a      	mov	r2, r3
 8007cca:	2308      	movs	r3, #8
 8007ccc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	015a      	lsls	r2, r3, #5
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	4413      	add	r3, r2
 8007cd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cda:	68db      	ldr	r3, [r3, #12]
 8007cdc:	68fa      	ldr	r2, [r7, #12]
 8007cde:	0151      	lsls	r1, r2, #5
 8007ce0:	693a      	ldr	r2, [r7, #16]
 8007ce2:	440a      	add	r2, r1
 8007ce4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ce8:	f043 0302 	orr.w	r3, r3, #2
 8007cec:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	68fa      	ldr	r2, [r7, #12]
 8007cf4:	b2d2      	uxtb	r2, r2
 8007cf6:	4611      	mov	r1, r2
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f004 fc1a 	bl	800c532 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8007cfe:	6879      	ldr	r1, [r7, #4]
 8007d00:	68fa      	ldr	r2, [r7, #12]
 8007d02:	4613      	mov	r3, r2
 8007d04:	009b      	lsls	r3, r3, #2
 8007d06:	4413      	add	r3, r2
 8007d08:	00db      	lsls	r3, r3, #3
 8007d0a:	440b      	add	r3, r1
 8007d0c:	335d      	adds	r3, #93	; 0x5d
 8007d0e:	2205      	movs	r2, #5
 8007d10:	701a      	strb	r2, [r3, #0]
}
 8007d12:	e1ff      	b.n	8008114 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	015a      	lsls	r2, r3, #5
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	4413      	add	r3, r2
 8007d1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d20:	689b      	ldr	r3, [r3, #8]
 8007d22:	f003 0310 	and.w	r3, r3, #16
 8007d26:	2b10      	cmp	r3, #16
 8007d28:	d155      	bne.n	8007dd6 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8007d2a:	6879      	ldr	r1, [r7, #4]
 8007d2c:	68fa      	ldr	r2, [r7, #12]
 8007d2e:	4613      	mov	r3, r2
 8007d30:	009b      	lsls	r3, r3, #2
 8007d32:	4413      	add	r3, r2
 8007d34:	00db      	lsls	r3, r3, #3
 8007d36:	440b      	add	r3, r1
 8007d38:	3358      	adds	r3, #88	; 0x58
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8007d3e:	6879      	ldr	r1, [r7, #4]
 8007d40:	68fa      	ldr	r2, [r7, #12]
 8007d42:	4613      	mov	r3, r2
 8007d44:	009b      	lsls	r3, r3, #2
 8007d46:	4413      	add	r3, r2
 8007d48:	00db      	lsls	r3, r3, #3
 8007d4a:	440b      	add	r3, r1
 8007d4c:	335d      	adds	r3, #93	; 0x5d
 8007d4e:	2203      	movs	r2, #3
 8007d50:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8007d52:	6879      	ldr	r1, [r7, #4]
 8007d54:	68fa      	ldr	r2, [r7, #12]
 8007d56:	4613      	mov	r3, r2
 8007d58:	009b      	lsls	r3, r3, #2
 8007d5a:	4413      	add	r3, r2
 8007d5c:	00db      	lsls	r3, r3, #3
 8007d5e:	440b      	add	r3, r1
 8007d60:	333d      	adds	r3, #61	; 0x3d
 8007d62:	781b      	ldrb	r3, [r3, #0]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d114      	bne.n	8007d92 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8007d68:	6879      	ldr	r1, [r7, #4]
 8007d6a:	68fa      	ldr	r2, [r7, #12]
 8007d6c:	4613      	mov	r3, r2
 8007d6e:	009b      	lsls	r3, r3, #2
 8007d70:	4413      	add	r3, r2
 8007d72:	00db      	lsls	r3, r3, #3
 8007d74:	440b      	add	r3, r1
 8007d76:	333c      	adds	r3, #60	; 0x3c
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d109      	bne.n	8007d92 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8007d7e:	6879      	ldr	r1, [r7, #4]
 8007d80:	68fa      	ldr	r2, [r7, #12]
 8007d82:	4613      	mov	r3, r2
 8007d84:	009b      	lsls	r3, r3, #2
 8007d86:	4413      	add	r3, r2
 8007d88:	00db      	lsls	r3, r3, #3
 8007d8a:	440b      	add	r3, r1
 8007d8c:	333d      	adds	r3, #61	; 0x3d
 8007d8e:	2201      	movs	r2, #1
 8007d90:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	015a      	lsls	r2, r3, #5
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	4413      	add	r3, r2
 8007d9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d9e:	68db      	ldr	r3, [r3, #12]
 8007da0:	68fa      	ldr	r2, [r7, #12]
 8007da2:	0151      	lsls	r1, r2, #5
 8007da4:	693a      	ldr	r2, [r7, #16]
 8007da6:	440a      	add	r2, r1
 8007da8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007dac:	f043 0302 	orr.w	r3, r3, #2
 8007db0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	68fa      	ldr	r2, [r7, #12]
 8007db8:	b2d2      	uxtb	r2, r2
 8007dba:	4611      	mov	r1, r2
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f004 fbb8 	bl	800c532 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	015a      	lsls	r2, r3, #5
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	4413      	add	r3, r2
 8007dca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dce:	461a      	mov	r2, r3
 8007dd0:	2310      	movs	r3, #16
 8007dd2:	6093      	str	r3, [r2, #8]
}
 8007dd4:	e19e      	b.n	8008114 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	015a      	lsls	r2, r3, #5
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	4413      	add	r3, r2
 8007dde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007de2:	689b      	ldr	r3, [r3, #8]
 8007de4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007de8:	2b80      	cmp	r3, #128	; 0x80
 8007dea:	d12b      	bne.n	8007e44 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	015a      	lsls	r2, r3, #5
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	4413      	add	r3, r2
 8007df4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007df8:	68db      	ldr	r3, [r3, #12]
 8007dfa:	68fa      	ldr	r2, [r7, #12]
 8007dfc:	0151      	lsls	r1, r2, #5
 8007dfe:	693a      	ldr	r2, [r7, #16]
 8007e00:	440a      	add	r2, r1
 8007e02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e06:	f043 0302 	orr.w	r3, r3, #2
 8007e0a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	68fa      	ldr	r2, [r7, #12]
 8007e12:	b2d2      	uxtb	r2, r2
 8007e14:	4611      	mov	r1, r2
 8007e16:	4618      	mov	r0, r3
 8007e18:	f004 fb8b 	bl	800c532 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8007e1c:	6879      	ldr	r1, [r7, #4]
 8007e1e:	68fa      	ldr	r2, [r7, #12]
 8007e20:	4613      	mov	r3, r2
 8007e22:	009b      	lsls	r3, r3, #2
 8007e24:	4413      	add	r3, r2
 8007e26:	00db      	lsls	r3, r3, #3
 8007e28:	440b      	add	r3, r1
 8007e2a:	335d      	adds	r3, #93	; 0x5d
 8007e2c:	2206      	movs	r2, #6
 8007e2e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	015a      	lsls	r2, r3, #5
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	4413      	add	r3, r2
 8007e38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	2380      	movs	r3, #128	; 0x80
 8007e40:	6093      	str	r3, [r2, #8]
}
 8007e42:	e167      	b.n	8008114 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	015a      	lsls	r2, r3, #5
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	4413      	add	r3, r2
 8007e4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e50:	689b      	ldr	r3, [r3, #8]
 8007e52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e5a:	d135      	bne.n	8007ec8 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	015a      	lsls	r2, r3, #5
 8007e60:	693b      	ldr	r3, [r7, #16]
 8007e62:	4413      	add	r3, r2
 8007e64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e68:	68db      	ldr	r3, [r3, #12]
 8007e6a:	68fa      	ldr	r2, [r7, #12]
 8007e6c:	0151      	lsls	r1, r2, #5
 8007e6e:	693a      	ldr	r2, [r7, #16]
 8007e70:	440a      	add	r2, r1
 8007e72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e76:	f043 0302 	orr.w	r3, r3, #2
 8007e7a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	68fa      	ldr	r2, [r7, #12]
 8007e82:	b2d2      	uxtb	r2, r2
 8007e84:	4611      	mov	r1, r2
 8007e86:	4618      	mov	r0, r3
 8007e88:	f004 fb53 	bl	800c532 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	015a      	lsls	r2, r3, #5
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	4413      	add	r3, r2
 8007e94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e98:	461a      	mov	r2, r3
 8007e9a:	2310      	movs	r3, #16
 8007e9c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	015a      	lsls	r2, r3, #5
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	4413      	add	r3, r2
 8007ea6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007eaa:	461a      	mov	r2, r3
 8007eac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007eb0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8007eb2:	6879      	ldr	r1, [r7, #4]
 8007eb4:	68fa      	ldr	r2, [r7, #12]
 8007eb6:	4613      	mov	r3, r2
 8007eb8:	009b      	lsls	r3, r3, #2
 8007eba:	4413      	add	r3, r2
 8007ebc:	00db      	lsls	r3, r3, #3
 8007ebe:	440b      	add	r3, r1
 8007ec0:	335d      	adds	r3, #93	; 0x5d
 8007ec2:	2208      	movs	r2, #8
 8007ec4:	701a      	strb	r2, [r3, #0]
}
 8007ec6:	e125      	b.n	8008114 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	015a      	lsls	r2, r3, #5
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	4413      	add	r3, r2
 8007ed0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ed4:	689b      	ldr	r3, [r3, #8]
 8007ed6:	f003 0302 	and.w	r3, r3, #2
 8007eda:	2b02      	cmp	r3, #2
 8007edc:	f040 811a 	bne.w	8008114 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	015a      	lsls	r2, r3, #5
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	4413      	add	r3, r2
 8007ee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007eec:	68db      	ldr	r3, [r3, #12]
 8007eee:	68fa      	ldr	r2, [r7, #12]
 8007ef0:	0151      	lsls	r1, r2, #5
 8007ef2:	693a      	ldr	r2, [r7, #16]
 8007ef4:	440a      	add	r2, r1
 8007ef6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007efa:	f023 0302 	bic.w	r3, r3, #2
 8007efe:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8007f00:	6879      	ldr	r1, [r7, #4]
 8007f02:	68fa      	ldr	r2, [r7, #12]
 8007f04:	4613      	mov	r3, r2
 8007f06:	009b      	lsls	r3, r3, #2
 8007f08:	4413      	add	r3, r2
 8007f0a:	00db      	lsls	r3, r3, #3
 8007f0c:	440b      	add	r3, r1
 8007f0e:	335d      	adds	r3, #93	; 0x5d
 8007f10:	781b      	ldrb	r3, [r3, #0]
 8007f12:	2b01      	cmp	r3, #1
 8007f14:	d137      	bne.n	8007f86 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8007f16:	6879      	ldr	r1, [r7, #4]
 8007f18:	68fa      	ldr	r2, [r7, #12]
 8007f1a:	4613      	mov	r3, r2
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	4413      	add	r3, r2
 8007f20:	00db      	lsls	r3, r3, #3
 8007f22:	440b      	add	r3, r1
 8007f24:	335c      	adds	r3, #92	; 0x5c
 8007f26:	2201      	movs	r2, #1
 8007f28:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8007f2a:	6879      	ldr	r1, [r7, #4]
 8007f2c:	68fa      	ldr	r2, [r7, #12]
 8007f2e:	4613      	mov	r3, r2
 8007f30:	009b      	lsls	r3, r3, #2
 8007f32:	4413      	add	r3, r2
 8007f34:	00db      	lsls	r3, r3, #3
 8007f36:	440b      	add	r3, r1
 8007f38:	333f      	adds	r3, #63	; 0x3f
 8007f3a:	781b      	ldrb	r3, [r3, #0]
 8007f3c:	2b02      	cmp	r3, #2
 8007f3e:	d00b      	beq.n	8007f58 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8007f40:	6879      	ldr	r1, [r7, #4]
 8007f42:	68fa      	ldr	r2, [r7, #12]
 8007f44:	4613      	mov	r3, r2
 8007f46:	009b      	lsls	r3, r3, #2
 8007f48:	4413      	add	r3, r2
 8007f4a:	00db      	lsls	r3, r3, #3
 8007f4c:	440b      	add	r3, r1
 8007f4e:	333f      	adds	r3, #63	; 0x3f
 8007f50:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8007f52:	2b03      	cmp	r3, #3
 8007f54:	f040 80c5 	bne.w	80080e2 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8007f58:	6879      	ldr	r1, [r7, #4]
 8007f5a:	68fa      	ldr	r2, [r7, #12]
 8007f5c:	4613      	mov	r3, r2
 8007f5e:	009b      	lsls	r3, r3, #2
 8007f60:	4413      	add	r3, r2
 8007f62:	00db      	lsls	r3, r3, #3
 8007f64:	440b      	add	r3, r1
 8007f66:	3351      	adds	r3, #81	; 0x51
 8007f68:	781b      	ldrb	r3, [r3, #0]
 8007f6a:	f083 0301 	eor.w	r3, r3, #1
 8007f6e:	b2d8      	uxtb	r0, r3
 8007f70:	6879      	ldr	r1, [r7, #4]
 8007f72:	68fa      	ldr	r2, [r7, #12]
 8007f74:	4613      	mov	r3, r2
 8007f76:	009b      	lsls	r3, r3, #2
 8007f78:	4413      	add	r3, r2
 8007f7a:	00db      	lsls	r3, r3, #3
 8007f7c:	440b      	add	r3, r1
 8007f7e:	3351      	adds	r3, #81	; 0x51
 8007f80:	4602      	mov	r2, r0
 8007f82:	701a      	strb	r2, [r3, #0]
 8007f84:	e0ad      	b.n	80080e2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8007f86:	6879      	ldr	r1, [r7, #4]
 8007f88:	68fa      	ldr	r2, [r7, #12]
 8007f8a:	4613      	mov	r3, r2
 8007f8c:	009b      	lsls	r3, r3, #2
 8007f8e:	4413      	add	r3, r2
 8007f90:	00db      	lsls	r3, r3, #3
 8007f92:	440b      	add	r3, r1
 8007f94:	335d      	adds	r3, #93	; 0x5d
 8007f96:	781b      	ldrb	r3, [r3, #0]
 8007f98:	2b03      	cmp	r3, #3
 8007f9a:	d10a      	bne.n	8007fb2 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007f9c:	6879      	ldr	r1, [r7, #4]
 8007f9e:	68fa      	ldr	r2, [r7, #12]
 8007fa0:	4613      	mov	r3, r2
 8007fa2:	009b      	lsls	r3, r3, #2
 8007fa4:	4413      	add	r3, r2
 8007fa6:	00db      	lsls	r3, r3, #3
 8007fa8:	440b      	add	r3, r1
 8007faa:	335c      	adds	r3, #92	; 0x5c
 8007fac:	2202      	movs	r2, #2
 8007fae:	701a      	strb	r2, [r3, #0]
 8007fb0:	e097      	b.n	80080e2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8007fb2:	6879      	ldr	r1, [r7, #4]
 8007fb4:	68fa      	ldr	r2, [r7, #12]
 8007fb6:	4613      	mov	r3, r2
 8007fb8:	009b      	lsls	r3, r3, #2
 8007fba:	4413      	add	r3, r2
 8007fbc:	00db      	lsls	r3, r3, #3
 8007fbe:	440b      	add	r3, r1
 8007fc0:	335d      	adds	r3, #93	; 0x5d
 8007fc2:	781b      	ldrb	r3, [r3, #0]
 8007fc4:	2b04      	cmp	r3, #4
 8007fc6:	d10a      	bne.n	8007fde <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8007fc8:	6879      	ldr	r1, [r7, #4]
 8007fca:	68fa      	ldr	r2, [r7, #12]
 8007fcc:	4613      	mov	r3, r2
 8007fce:	009b      	lsls	r3, r3, #2
 8007fd0:	4413      	add	r3, r2
 8007fd2:	00db      	lsls	r3, r3, #3
 8007fd4:	440b      	add	r3, r1
 8007fd6:	335c      	adds	r3, #92	; 0x5c
 8007fd8:	2202      	movs	r2, #2
 8007fda:	701a      	strb	r2, [r3, #0]
 8007fdc:	e081      	b.n	80080e2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8007fde:	6879      	ldr	r1, [r7, #4]
 8007fe0:	68fa      	ldr	r2, [r7, #12]
 8007fe2:	4613      	mov	r3, r2
 8007fe4:	009b      	lsls	r3, r3, #2
 8007fe6:	4413      	add	r3, r2
 8007fe8:	00db      	lsls	r3, r3, #3
 8007fea:	440b      	add	r3, r1
 8007fec:	335d      	adds	r3, #93	; 0x5d
 8007fee:	781b      	ldrb	r3, [r3, #0]
 8007ff0:	2b05      	cmp	r3, #5
 8007ff2:	d10a      	bne.n	800800a <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8007ff4:	6879      	ldr	r1, [r7, #4]
 8007ff6:	68fa      	ldr	r2, [r7, #12]
 8007ff8:	4613      	mov	r3, r2
 8007ffa:	009b      	lsls	r3, r3, #2
 8007ffc:	4413      	add	r3, r2
 8007ffe:	00db      	lsls	r3, r3, #3
 8008000:	440b      	add	r3, r1
 8008002:	335c      	adds	r3, #92	; 0x5c
 8008004:	2205      	movs	r2, #5
 8008006:	701a      	strb	r2, [r3, #0]
 8008008:	e06b      	b.n	80080e2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800800a:	6879      	ldr	r1, [r7, #4]
 800800c:	68fa      	ldr	r2, [r7, #12]
 800800e:	4613      	mov	r3, r2
 8008010:	009b      	lsls	r3, r3, #2
 8008012:	4413      	add	r3, r2
 8008014:	00db      	lsls	r3, r3, #3
 8008016:	440b      	add	r3, r1
 8008018:	335d      	adds	r3, #93	; 0x5d
 800801a:	781b      	ldrb	r3, [r3, #0]
 800801c:	2b06      	cmp	r3, #6
 800801e:	d00a      	beq.n	8008036 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8008020:	6879      	ldr	r1, [r7, #4]
 8008022:	68fa      	ldr	r2, [r7, #12]
 8008024:	4613      	mov	r3, r2
 8008026:	009b      	lsls	r3, r3, #2
 8008028:	4413      	add	r3, r2
 800802a:	00db      	lsls	r3, r3, #3
 800802c:	440b      	add	r3, r1
 800802e:	335d      	adds	r3, #93	; 0x5d
 8008030:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8008032:	2b08      	cmp	r3, #8
 8008034:	d155      	bne.n	80080e2 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8008036:	6879      	ldr	r1, [r7, #4]
 8008038:	68fa      	ldr	r2, [r7, #12]
 800803a:	4613      	mov	r3, r2
 800803c:	009b      	lsls	r3, r3, #2
 800803e:	4413      	add	r3, r2
 8008040:	00db      	lsls	r3, r3, #3
 8008042:	440b      	add	r3, r1
 8008044:	3358      	adds	r3, #88	; 0x58
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	1c59      	adds	r1, r3, #1
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	68fa      	ldr	r2, [r7, #12]
 800804e:	4613      	mov	r3, r2
 8008050:	009b      	lsls	r3, r3, #2
 8008052:	4413      	add	r3, r2
 8008054:	00db      	lsls	r3, r3, #3
 8008056:	4403      	add	r3, r0
 8008058:	3358      	adds	r3, #88	; 0x58
 800805a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800805c:	6879      	ldr	r1, [r7, #4]
 800805e:	68fa      	ldr	r2, [r7, #12]
 8008060:	4613      	mov	r3, r2
 8008062:	009b      	lsls	r3, r3, #2
 8008064:	4413      	add	r3, r2
 8008066:	00db      	lsls	r3, r3, #3
 8008068:	440b      	add	r3, r1
 800806a:	3358      	adds	r3, #88	; 0x58
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	2b03      	cmp	r3, #3
 8008070:	d914      	bls.n	800809c <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8008072:	6879      	ldr	r1, [r7, #4]
 8008074:	68fa      	ldr	r2, [r7, #12]
 8008076:	4613      	mov	r3, r2
 8008078:	009b      	lsls	r3, r3, #2
 800807a:	4413      	add	r3, r2
 800807c:	00db      	lsls	r3, r3, #3
 800807e:	440b      	add	r3, r1
 8008080:	3358      	adds	r3, #88	; 0x58
 8008082:	2200      	movs	r2, #0
 8008084:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8008086:	6879      	ldr	r1, [r7, #4]
 8008088:	68fa      	ldr	r2, [r7, #12]
 800808a:	4613      	mov	r3, r2
 800808c:	009b      	lsls	r3, r3, #2
 800808e:	4413      	add	r3, r2
 8008090:	00db      	lsls	r3, r3, #3
 8008092:	440b      	add	r3, r1
 8008094:	335c      	adds	r3, #92	; 0x5c
 8008096:	2204      	movs	r2, #4
 8008098:	701a      	strb	r2, [r3, #0]
 800809a:	e009      	b.n	80080b0 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800809c:	6879      	ldr	r1, [r7, #4]
 800809e:	68fa      	ldr	r2, [r7, #12]
 80080a0:	4613      	mov	r3, r2
 80080a2:	009b      	lsls	r3, r3, #2
 80080a4:	4413      	add	r3, r2
 80080a6:	00db      	lsls	r3, r3, #3
 80080a8:	440b      	add	r3, r1
 80080aa:	335c      	adds	r3, #92	; 0x5c
 80080ac:	2202      	movs	r2, #2
 80080ae:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	015a      	lsls	r2, r3, #5
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	4413      	add	r3, r2
 80080b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80080c6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80080ce:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	015a      	lsls	r2, r3, #5
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	4413      	add	r3, r2
 80080d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080dc:	461a      	mov	r2, r3
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	015a      	lsls	r2, r3, #5
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	4413      	add	r3, r2
 80080ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080ee:	461a      	mov	r2, r3
 80080f0:	2302      	movs	r3, #2
 80080f2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	b2d8      	uxtb	r0, r3
 80080f8:	6879      	ldr	r1, [r7, #4]
 80080fa:	68fa      	ldr	r2, [r7, #12]
 80080fc:	4613      	mov	r3, r2
 80080fe:	009b      	lsls	r3, r3, #2
 8008100:	4413      	add	r3, r2
 8008102:	00db      	lsls	r3, r3, #3
 8008104:	440b      	add	r3, r1
 8008106:	335c      	adds	r3, #92	; 0x5c
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	461a      	mov	r2, r3
 800810c:	4601      	mov	r1, r0
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f00a f90c 	bl	801232c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8008114:	bf00      	nop
 8008116:	3718      	adds	r7, #24
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}

0800811c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b08a      	sub	sp, #40	; 0x28
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800812a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800812c:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	6a1b      	ldr	r3, [r3, #32]
 8008134:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8008136:	69fb      	ldr	r3, [r7, #28]
 8008138:	f003 030f 	and.w	r3, r3, #15
 800813c:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800813e:	69fb      	ldr	r3, [r7, #28]
 8008140:	0c5b      	lsrs	r3, r3, #17
 8008142:	f003 030f 	and.w	r3, r3, #15
 8008146:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008148:	69fb      	ldr	r3, [r7, #28]
 800814a:	091b      	lsrs	r3, r3, #4
 800814c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008150:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	2b02      	cmp	r3, #2
 8008156:	d003      	beq.n	8008160 <HCD_RXQLVL_IRQHandler+0x44>
 8008158:	2b05      	cmp	r3, #5
 800815a:	f000 8082 	beq.w	8008262 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800815e:	e083      	b.n	8008268 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d07f      	beq.n	8008266 <HCD_RXQLVL_IRQHandler+0x14a>
 8008166:	6879      	ldr	r1, [r7, #4]
 8008168:	69ba      	ldr	r2, [r7, #24]
 800816a:	4613      	mov	r3, r2
 800816c:	009b      	lsls	r3, r3, #2
 800816e:	4413      	add	r3, r2
 8008170:	00db      	lsls	r3, r3, #3
 8008172:	440b      	add	r3, r1
 8008174:	3344      	adds	r3, #68	; 0x44
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d074      	beq.n	8008266 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6818      	ldr	r0, [r3, #0]
 8008180:	6879      	ldr	r1, [r7, #4]
 8008182:	69ba      	ldr	r2, [r7, #24]
 8008184:	4613      	mov	r3, r2
 8008186:	009b      	lsls	r3, r3, #2
 8008188:	4413      	add	r3, r2
 800818a:	00db      	lsls	r3, r3, #3
 800818c:	440b      	add	r3, r1
 800818e:	3344      	adds	r3, #68	; 0x44
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	693a      	ldr	r2, [r7, #16]
 8008194:	b292      	uxth	r2, r2
 8008196:	4619      	mov	r1, r3
 8008198:	f003 fd71 	bl	800bc7e <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 800819c:	6879      	ldr	r1, [r7, #4]
 800819e:	69ba      	ldr	r2, [r7, #24]
 80081a0:	4613      	mov	r3, r2
 80081a2:	009b      	lsls	r3, r3, #2
 80081a4:	4413      	add	r3, r2
 80081a6:	00db      	lsls	r3, r3, #3
 80081a8:	440b      	add	r3, r1
 80081aa:	3344      	adds	r3, #68	; 0x44
 80081ac:	681a      	ldr	r2, [r3, #0]
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	18d1      	adds	r1, r2, r3
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	69ba      	ldr	r2, [r7, #24]
 80081b6:	4613      	mov	r3, r2
 80081b8:	009b      	lsls	r3, r3, #2
 80081ba:	4413      	add	r3, r2
 80081bc:	00db      	lsls	r3, r3, #3
 80081be:	4403      	add	r3, r0
 80081c0:	3344      	adds	r3, #68	; 0x44
 80081c2:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80081c4:	6879      	ldr	r1, [r7, #4]
 80081c6:	69ba      	ldr	r2, [r7, #24]
 80081c8:	4613      	mov	r3, r2
 80081ca:	009b      	lsls	r3, r3, #2
 80081cc:	4413      	add	r3, r2
 80081ce:	00db      	lsls	r3, r3, #3
 80081d0:	440b      	add	r3, r1
 80081d2:	334c      	adds	r3, #76	; 0x4c
 80081d4:	681a      	ldr	r2, [r3, #0]
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	18d1      	adds	r1, r2, r3
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	69ba      	ldr	r2, [r7, #24]
 80081de:	4613      	mov	r3, r2
 80081e0:	009b      	lsls	r3, r3, #2
 80081e2:	4413      	add	r3, r2
 80081e4:	00db      	lsls	r3, r3, #3
 80081e6:	4403      	add	r3, r0
 80081e8:	334c      	adds	r3, #76	; 0x4c
 80081ea:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80081ec:	69bb      	ldr	r3, [r7, #24]
 80081ee:	015a      	lsls	r2, r3, #5
 80081f0:	6a3b      	ldr	r3, [r7, #32]
 80081f2:	4413      	add	r3, r2
 80081f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081f8:	691a      	ldr	r2, [r3, #16]
 80081fa:	4b1d      	ldr	r3, [pc, #116]	; (8008270 <HCD_RXQLVL_IRQHandler+0x154>)
 80081fc:	4013      	ands	r3, r2
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d031      	beq.n	8008266 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008202:	69bb      	ldr	r3, [r7, #24]
 8008204:	015a      	lsls	r2, r3, #5
 8008206:	6a3b      	ldr	r3, [r7, #32]
 8008208:	4413      	add	r3, r2
 800820a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008218:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008220:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008222:	69bb      	ldr	r3, [r7, #24]
 8008224:	015a      	lsls	r2, r3, #5
 8008226:	6a3b      	ldr	r3, [r7, #32]
 8008228:	4413      	add	r3, r2
 800822a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800822e:	461a      	mov	r2, r3
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8008234:	6879      	ldr	r1, [r7, #4]
 8008236:	69ba      	ldr	r2, [r7, #24]
 8008238:	4613      	mov	r3, r2
 800823a:	009b      	lsls	r3, r3, #2
 800823c:	4413      	add	r3, r2
 800823e:	00db      	lsls	r3, r3, #3
 8008240:	440b      	add	r3, r1
 8008242:	3350      	adds	r3, #80	; 0x50
 8008244:	781b      	ldrb	r3, [r3, #0]
 8008246:	f083 0301 	eor.w	r3, r3, #1
 800824a:	b2d8      	uxtb	r0, r3
 800824c:	6879      	ldr	r1, [r7, #4]
 800824e:	69ba      	ldr	r2, [r7, #24]
 8008250:	4613      	mov	r3, r2
 8008252:	009b      	lsls	r3, r3, #2
 8008254:	4413      	add	r3, r2
 8008256:	00db      	lsls	r3, r3, #3
 8008258:	440b      	add	r3, r1
 800825a:	3350      	adds	r3, #80	; 0x50
 800825c:	4602      	mov	r2, r0
 800825e:	701a      	strb	r2, [r3, #0]
      break;
 8008260:	e001      	b.n	8008266 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8008262:	bf00      	nop
 8008264:	e000      	b.n	8008268 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8008266:	bf00      	nop
  }
}
 8008268:	bf00      	nop
 800826a:	3728      	adds	r7, #40	; 0x28
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}
 8008270:	1ff80000 	.word	0x1ff80000

08008274 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b086      	sub	sp, #24
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80082a0:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	f003 0302 	and.w	r3, r3, #2
 80082a8:	2b02      	cmp	r3, #2
 80082aa:	d10b      	bne.n	80082c4 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	f003 0301 	and.w	r3, r3, #1
 80082b2:	2b01      	cmp	r3, #1
 80082b4:	d102      	bne.n	80082bc <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f00a f81c 	bl	80122f4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	f043 0302 	orr.w	r3, r3, #2
 80082c2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f003 0308 	and.w	r3, r3, #8
 80082ca:	2b08      	cmp	r3, #8
 80082cc:	d132      	bne.n	8008334 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	f043 0308 	orr.w	r3, r3, #8
 80082d4:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	f003 0304 	and.w	r3, r3, #4
 80082dc:	2b04      	cmp	r3, #4
 80082de:	d126      	bne.n	800832e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	699b      	ldr	r3, [r3, #24]
 80082e4:	2b02      	cmp	r3, #2
 80082e6:	d113      	bne.n	8008310 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80082ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80082f2:	d106      	bne.n	8008302 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	2102      	movs	r1, #2
 80082fa:	4618      	mov	r0, r3
 80082fc:	f003 fdf4 	bl	800bee8 <USB_InitFSLSPClkSel>
 8008300:	e011      	b.n	8008326 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	2101      	movs	r1, #1
 8008308:	4618      	mov	r0, r3
 800830a:	f003 fded 	bl	800bee8 <USB_InitFSLSPClkSel>
 800830e:	e00a      	b.n	8008326 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	68db      	ldr	r3, [r3, #12]
 8008314:	2b01      	cmp	r3, #1
 8008316:	d106      	bne.n	8008326 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800831e:	461a      	mov	r2, r3
 8008320:	f64e 2360 	movw	r3, #60000	; 0xea60
 8008324:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f00a f80e 	bl	8012348 <HAL_HCD_PortEnabled_Callback>
 800832c:	e002      	b.n	8008334 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f00a f818 	bl	8012364 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f003 0320 	and.w	r3, r3, #32
 800833a:	2b20      	cmp	r3, #32
 800833c:	d103      	bne.n	8008346 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	f043 0320 	orr.w	r3, r3, #32
 8008344:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8008346:	693b      	ldr	r3, [r7, #16]
 8008348:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800834c:	461a      	mov	r2, r3
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	6013      	str	r3, [r2, #0]
}
 8008352:	bf00      	nop
 8008354:	3718      	adds	r7, #24
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}
	...

0800835c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b084      	sub	sp, #16
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008364:	4b19      	ldr	r3, [pc, #100]	; (80083cc <HAL_PWREx_ConfigSupply+0x70>)
 8008366:	68db      	ldr	r3, [r3, #12]
 8008368:	f003 0304 	and.w	r3, r3, #4
 800836c:	2b04      	cmp	r3, #4
 800836e:	d00a      	beq.n	8008386 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008370:	4b16      	ldr	r3, [pc, #88]	; (80083cc <HAL_PWREx_ConfigSupply+0x70>)
 8008372:	68db      	ldr	r3, [r3, #12]
 8008374:	f003 0307 	and.w	r3, r3, #7
 8008378:	687a      	ldr	r2, [r7, #4]
 800837a:	429a      	cmp	r2, r3
 800837c:	d001      	beq.n	8008382 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800837e:	2301      	movs	r3, #1
 8008380:	e01f      	b.n	80083c2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008382:	2300      	movs	r3, #0
 8008384:	e01d      	b.n	80083c2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008386:	4b11      	ldr	r3, [pc, #68]	; (80083cc <HAL_PWREx_ConfigSupply+0x70>)
 8008388:	68db      	ldr	r3, [r3, #12]
 800838a:	f023 0207 	bic.w	r2, r3, #7
 800838e:	490f      	ldr	r1, [pc, #60]	; (80083cc <HAL_PWREx_ConfigSupply+0x70>)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	4313      	orrs	r3, r2
 8008394:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008396:	f7fd fbb3 	bl	8005b00 <HAL_GetTick>
 800839a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800839c:	e009      	b.n	80083b2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800839e:	f7fd fbaf 	bl	8005b00 <HAL_GetTick>
 80083a2:	4602      	mov	r2, r0
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	1ad3      	subs	r3, r2, r3
 80083a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80083ac:	d901      	bls.n	80083b2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80083ae:	2301      	movs	r3, #1
 80083b0:	e007      	b.n	80083c2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80083b2:	4b06      	ldr	r3, [pc, #24]	; (80083cc <HAL_PWREx_ConfigSupply+0x70>)
 80083b4:	685b      	ldr	r3, [r3, #4]
 80083b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80083ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083be:	d1ee      	bne.n	800839e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80083c0:	2300      	movs	r3, #0
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3710      	adds	r7, #16
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}
 80083ca:	bf00      	nop
 80083cc:	58024800 	.word	0x58024800

080083d0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80083d0:	b480      	push	{r7}
 80083d2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80083d4:	4b05      	ldr	r3, [pc, #20]	; (80083ec <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80083d6:	68db      	ldr	r3, [r3, #12]
 80083d8:	4a04      	ldr	r2, [pc, #16]	; (80083ec <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80083da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80083de:	60d3      	str	r3, [r2, #12]
}
 80083e0:	bf00      	nop
 80083e2:	46bd      	mov	sp, r7
 80083e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e8:	4770      	bx	lr
 80083ea:	bf00      	nop
 80083ec:	58024800 	.word	0x58024800

080083f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b08c      	sub	sp, #48	; 0x30
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d101      	bne.n	8008402 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80083fe:	2301      	movs	r3, #1
 8008400:	e3ff      	b.n	8008c02 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f003 0301 	and.w	r3, r3, #1
 800840a:	2b00      	cmp	r3, #0
 800840c:	f000 8087 	beq.w	800851e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008410:	4b99      	ldr	r3, [pc, #612]	; (8008678 <HAL_RCC_OscConfig+0x288>)
 8008412:	691b      	ldr	r3, [r3, #16]
 8008414:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008418:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800841a:	4b97      	ldr	r3, [pc, #604]	; (8008678 <HAL_RCC_OscConfig+0x288>)
 800841c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800841e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008422:	2b10      	cmp	r3, #16
 8008424:	d007      	beq.n	8008436 <HAL_RCC_OscConfig+0x46>
 8008426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008428:	2b18      	cmp	r3, #24
 800842a:	d110      	bne.n	800844e <HAL_RCC_OscConfig+0x5e>
 800842c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800842e:	f003 0303 	and.w	r3, r3, #3
 8008432:	2b02      	cmp	r3, #2
 8008434:	d10b      	bne.n	800844e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008436:	4b90      	ldr	r3, [pc, #576]	; (8008678 <HAL_RCC_OscConfig+0x288>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800843e:	2b00      	cmp	r3, #0
 8008440:	d06c      	beq.n	800851c <HAL_RCC_OscConfig+0x12c>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d168      	bne.n	800851c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800844a:	2301      	movs	r3, #1
 800844c:	e3d9      	b.n	8008c02 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	685b      	ldr	r3, [r3, #4]
 8008452:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008456:	d106      	bne.n	8008466 <HAL_RCC_OscConfig+0x76>
 8008458:	4b87      	ldr	r3, [pc, #540]	; (8008678 <HAL_RCC_OscConfig+0x288>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4a86      	ldr	r2, [pc, #536]	; (8008678 <HAL_RCC_OscConfig+0x288>)
 800845e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008462:	6013      	str	r3, [r2, #0]
 8008464:	e02e      	b.n	80084c4 <HAL_RCC_OscConfig+0xd4>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	685b      	ldr	r3, [r3, #4]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d10c      	bne.n	8008488 <HAL_RCC_OscConfig+0x98>
 800846e:	4b82      	ldr	r3, [pc, #520]	; (8008678 <HAL_RCC_OscConfig+0x288>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4a81      	ldr	r2, [pc, #516]	; (8008678 <HAL_RCC_OscConfig+0x288>)
 8008474:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008478:	6013      	str	r3, [r2, #0]
 800847a:	4b7f      	ldr	r3, [pc, #508]	; (8008678 <HAL_RCC_OscConfig+0x288>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	4a7e      	ldr	r2, [pc, #504]	; (8008678 <HAL_RCC_OscConfig+0x288>)
 8008480:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008484:	6013      	str	r3, [r2, #0]
 8008486:	e01d      	b.n	80084c4 <HAL_RCC_OscConfig+0xd4>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	685b      	ldr	r3, [r3, #4]
 800848c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008490:	d10c      	bne.n	80084ac <HAL_RCC_OscConfig+0xbc>
 8008492:	4b79      	ldr	r3, [pc, #484]	; (8008678 <HAL_RCC_OscConfig+0x288>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4a78      	ldr	r2, [pc, #480]	; (8008678 <HAL_RCC_OscConfig+0x288>)
 8008498:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800849c:	6013      	str	r3, [r2, #0]
 800849e:	4b76      	ldr	r3, [pc, #472]	; (8008678 <HAL_RCC_OscConfig+0x288>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	4a75      	ldr	r2, [pc, #468]	; (8008678 <HAL_RCC_OscConfig+0x288>)
 80084a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80084a8:	6013      	str	r3, [r2, #0]
 80084aa:	e00b      	b.n	80084c4 <HAL_RCC_OscConfig+0xd4>
 80084ac:	4b72      	ldr	r3, [pc, #456]	; (8008678 <HAL_RCC_OscConfig+0x288>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4a71      	ldr	r2, [pc, #452]	; (8008678 <HAL_RCC_OscConfig+0x288>)
 80084b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80084b6:	6013      	str	r3, [r2, #0]
 80084b8:	4b6f      	ldr	r3, [pc, #444]	; (8008678 <HAL_RCC_OscConfig+0x288>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a6e      	ldr	r2, [pc, #440]	; (8008678 <HAL_RCC_OscConfig+0x288>)
 80084be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80084c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d013      	beq.n	80084f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084cc:	f7fd fb18 	bl	8005b00 <HAL_GetTick>
 80084d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80084d2:	e008      	b.n	80084e6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80084d4:	f7fd fb14 	bl	8005b00 <HAL_GetTick>
 80084d8:	4602      	mov	r2, r0
 80084da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084dc:	1ad3      	subs	r3, r2, r3
 80084de:	2b64      	cmp	r3, #100	; 0x64
 80084e0:	d901      	bls.n	80084e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80084e2:	2303      	movs	r3, #3
 80084e4:	e38d      	b.n	8008c02 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80084e6:	4b64      	ldr	r3, [pc, #400]	; (8008678 <HAL_RCC_OscConfig+0x288>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d0f0      	beq.n	80084d4 <HAL_RCC_OscConfig+0xe4>
 80084f2:	e014      	b.n	800851e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084f4:	f7fd fb04 	bl	8005b00 <HAL_GetTick>
 80084f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80084fa:	e008      	b.n	800850e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80084fc:	f7fd fb00 	bl	8005b00 <HAL_GetTick>
 8008500:	4602      	mov	r2, r0
 8008502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008504:	1ad3      	subs	r3, r2, r3
 8008506:	2b64      	cmp	r3, #100	; 0x64
 8008508:	d901      	bls.n	800850e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800850a:	2303      	movs	r3, #3
 800850c:	e379      	b.n	8008c02 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800850e:	4b5a      	ldr	r3, [pc, #360]	; (8008678 <HAL_RCC_OscConfig+0x288>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008516:	2b00      	cmp	r3, #0
 8008518:	d1f0      	bne.n	80084fc <HAL_RCC_OscConfig+0x10c>
 800851a:	e000      	b.n	800851e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800851c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f003 0302 	and.w	r3, r3, #2
 8008526:	2b00      	cmp	r3, #0
 8008528:	f000 80ae 	beq.w	8008688 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800852c:	4b52      	ldr	r3, [pc, #328]	; (8008678 <HAL_RCC_OscConfig+0x288>)
 800852e:	691b      	ldr	r3, [r3, #16]
 8008530:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008534:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008536:	4b50      	ldr	r3, [pc, #320]	; (8008678 <HAL_RCC_OscConfig+0x288>)
 8008538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800853a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800853c:	6a3b      	ldr	r3, [r7, #32]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d007      	beq.n	8008552 <HAL_RCC_OscConfig+0x162>
 8008542:	6a3b      	ldr	r3, [r7, #32]
 8008544:	2b18      	cmp	r3, #24
 8008546:	d13a      	bne.n	80085be <HAL_RCC_OscConfig+0x1ce>
 8008548:	69fb      	ldr	r3, [r7, #28]
 800854a:	f003 0303 	and.w	r3, r3, #3
 800854e:	2b00      	cmp	r3, #0
 8008550:	d135      	bne.n	80085be <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008552:	4b49      	ldr	r3, [pc, #292]	; (8008678 <HAL_RCC_OscConfig+0x288>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f003 0304 	and.w	r3, r3, #4
 800855a:	2b00      	cmp	r3, #0
 800855c:	d005      	beq.n	800856a <HAL_RCC_OscConfig+0x17a>
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	68db      	ldr	r3, [r3, #12]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d101      	bne.n	800856a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008566:	2301      	movs	r3, #1
 8008568:	e34b      	b.n	8008c02 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800856a:	f7fd faf7 	bl	8005b5c <HAL_GetREVID>
 800856e:	4602      	mov	r2, r0
 8008570:	f241 0303 	movw	r3, #4099	; 0x1003
 8008574:	429a      	cmp	r2, r3
 8008576:	d817      	bhi.n	80085a8 <HAL_RCC_OscConfig+0x1b8>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	691b      	ldr	r3, [r3, #16]
 800857c:	2b40      	cmp	r3, #64	; 0x40
 800857e:	d108      	bne.n	8008592 <HAL_RCC_OscConfig+0x1a2>
 8008580:	4b3d      	ldr	r3, [pc, #244]	; (8008678 <HAL_RCC_OscConfig+0x288>)
 8008582:	685b      	ldr	r3, [r3, #4]
 8008584:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008588:	4a3b      	ldr	r2, [pc, #236]	; (8008678 <HAL_RCC_OscConfig+0x288>)
 800858a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800858e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008590:	e07a      	b.n	8008688 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008592:	4b39      	ldr	r3, [pc, #228]	; (8008678 <HAL_RCC_OscConfig+0x288>)
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	691b      	ldr	r3, [r3, #16]
 800859e:	031b      	lsls	r3, r3, #12
 80085a0:	4935      	ldr	r1, [pc, #212]	; (8008678 <HAL_RCC_OscConfig+0x288>)
 80085a2:	4313      	orrs	r3, r2
 80085a4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80085a6:	e06f      	b.n	8008688 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80085a8:	4b33      	ldr	r3, [pc, #204]	; (8008678 <HAL_RCC_OscConfig+0x288>)
 80085aa:	685b      	ldr	r3, [r3, #4]
 80085ac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	691b      	ldr	r3, [r3, #16]
 80085b4:	061b      	lsls	r3, r3, #24
 80085b6:	4930      	ldr	r1, [pc, #192]	; (8008678 <HAL_RCC_OscConfig+0x288>)
 80085b8:	4313      	orrs	r3, r2
 80085ba:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80085bc:	e064      	b.n	8008688 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	68db      	ldr	r3, [r3, #12]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d045      	beq.n	8008652 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80085c6:	4b2c      	ldr	r3, [pc, #176]	; (8008678 <HAL_RCC_OscConfig+0x288>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f023 0219 	bic.w	r2, r3, #25
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	68db      	ldr	r3, [r3, #12]
 80085d2:	4929      	ldr	r1, [pc, #164]	; (8008678 <HAL_RCC_OscConfig+0x288>)
 80085d4:	4313      	orrs	r3, r2
 80085d6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085d8:	f7fd fa92 	bl	8005b00 <HAL_GetTick>
 80085dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80085de:	e008      	b.n	80085f2 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80085e0:	f7fd fa8e 	bl	8005b00 <HAL_GetTick>
 80085e4:	4602      	mov	r2, r0
 80085e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e8:	1ad3      	subs	r3, r2, r3
 80085ea:	2b02      	cmp	r3, #2
 80085ec:	d901      	bls.n	80085f2 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80085ee:	2303      	movs	r3, #3
 80085f0:	e307      	b.n	8008c02 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80085f2:	4b21      	ldr	r3, [pc, #132]	; (8008678 <HAL_RCC_OscConfig+0x288>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f003 0304 	and.w	r3, r3, #4
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d0f0      	beq.n	80085e0 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80085fe:	f7fd faad 	bl	8005b5c <HAL_GetREVID>
 8008602:	4602      	mov	r2, r0
 8008604:	f241 0303 	movw	r3, #4099	; 0x1003
 8008608:	429a      	cmp	r2, r3
 800860a:	d817      	bhi.n	800863c <HAL_RCC_OscConfig+0x24c>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	691b      	ldr	r3, [r3, #16]
 8008610:	2b40      	cmp	r3, #64	; 0x40
 8008612:	d108      	bne.n	8008626 <HAL_RCC_OscConfig+0x236>
 8008614:	4b18      	ldr	r3, [pc, #96]	; (8008678 <HAL_RCC_OscConfig+0x288>)
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800861c:	4a16      	ldr	r2, [pc, #88]	; (8008678 <HAL_RCC_OscConfig+0x288>)
 800861e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008622:	6053      	str	r3, [r2, #4]
 8008624:	e030      	b.n	8008688 <HAL_RCC_OscConfig+0x298>
 8008626:	4b14      	ldr	r3, [pc, #80]	; (8008678 <HAL_RCC_OscConfig+0x288>)
 8008628:	685b      	ldr	r3, [r3, #4]
 800862a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	691b      	ldr	r3, [r3, #16]
 8008632:	031b      	lsls	r3, r3, #12
 8008634:	4910      	ldr	r1, [pc, #64]	; (8008678 <HAL_RCC_OscConfig+0x288>)
 8008636:	4313      	orrs	r3, r2
 8008638:	604b      	str	r3, [r1, #4]
 800863a:	e025      	b.n	8008688 <HAL_RCC_OscConfig+0x298>
 800863c:	4b0e      	ldr	r3, [pc, #56]	; (8008678 <HAL_RCC_OscConfig+0x288>)
 800863e:	685b      	ldr	r3, [r3, #4]
 8008640:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	691b      	ldr	r3, [r3, #16]
 8008648:	061b      	lsls	r3, r3, #24
 800864a:	490b      	ldr	r1, [pc, #44]	; (8008678 <HAL_RCC_OscConfig+0x288>)
 800864c:	4313      	orrs	r3, r2
 800864e:	604b      	str	r3, [r1, #4]
 8008650:	e01a      	b.n	8008688 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008652:	4b09      	ldr	r3, [pc, #36]	; (8008678 <HAL_RCC_OscConfig+0x288>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4a08      	ldr	r2, [pc, #32]	; (8008678 <HAL_RCC_OscConfig+0x288>)
 8008658:	f023 0301 	bic.w	r3, r3, #1
 800865c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800865e:	f7fd fa4f 	bl	8005b00 <HAL_GetTick>
 8008662:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008664:	e00a      	b.n	800867c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008666:	f7fd fa4b 	bl	8005b00 <HAL_GetTick>
 800866a:	4602      	mov	r2, r0
 800866c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800866e:	1ad3      	subs	r3, r2, r3
 8008670:	2b02      	cmp	r3, #2
 8008672:	d903      	bls.n	800867c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8008674:	2303      	movs	r3, #3
 8008676:	e2c4      	b.n	8008c02 <HAL_RCC_OscConfig+0x812>
 8008678:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800867c:	4ba4      	ldr	r3, [pc, #656]	; (8008910 <HAL_RCC_OscConfig+0x520>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f003 0304 	and.w	r3, r3, #4
 8008684:	2b00      	cmp	r3, #0
 8008686:	d1ee      	bne.n	8008666 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f003 0310 	and.w	r3, r3, #16
 8008690:	2b00      	cmp	r3, #0
 8008692:	f000 80a9 	beq.w	80087e8 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008696:	4b9e      	ldr	r3, [pc, #632]	; (8008910 <HAL_RCC_OscConfig+0x520>)
 8008698:	691b      	ldr	r3, [r3, #16]
 800869a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800869e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80086a0:	4b9b      	ldr	r3, [pc, #620]	; (8008910 <HAL_RCC_OscConfig+0x520>)
 80086a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086a4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80086a6:	69bb      	ldr	r3, [r7, #24]
 80086a8:	2b08      	cmp	r3, #8
 80086aa:	d007      	beq.n	80086bc <HAL_RCC_OscConfig+0x2cc>
 80086ac:	69bb      	ldr	r3, [r7, #24]
 80086ae:	2b18      	cmp	r3, #24
 80086b0:	d13a      	bne.n	8008728 <HAL_RCC_OscConfig+0x338>
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	f003 0303 	and.w	r3, r3, #3
 80086b8:	2b01      	cmp	r3, #1
 80086ba:	d135      	bne.n	8008728 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80086bc:	4b94      	ldr	r3, [pc, #592]	; (8008910 <HAL_RCC_OscConfig+0x520>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d005      	beq.n	80086d4 <HAL_RCC_OscConfig+0x2e4>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	69db      	ldr	r3, [r3, #28]
 80086cc:	2b80      	cmp	r3, #128	; 0x80
 80086ce:	d001      	beq.n	80086d4 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80086d0:	2301      	movs	r3, #1
 80086d2:	e296      	b.n	8008c02 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80086d4:	f7fd fa42 	bl	8005b5c <HAL_GetREVID>
 80086d8:	4602      	mov	r2, r0
 80086da:	f241 0303 	movw	r3, #4099	; 0x1003
 80086de:	429a      	cmp	r2, r3
 80086e0:	d817      	bhi.n	8008712 <HAL_RCC_OscConfig+0x322>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6a1b      	ldr	r3, [r3, #32]
 80086e6:	2b20      	cmp	r3, #32
 80086e8:	d108      	bne.n	80086fc <HAL_RCC_OscConfig+0x30c>
 80086ea:	4b89      	ldr	r3, [pc, #548]	; (8008910 <HAL_RCC_OscConfig+0x520>)
 80086ec:	685b      	ldr	r3, [r3, #4]
 80086ee:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80086f2:	4a87      	ldr	r2, [pc, #540]	; (8008910 <HAL_RCC_OscConfig+0x520>)
 80086f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80086f8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80086fa:	e075      	b.n	80087e8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80086fc:	4b84      	ldr	r3, [pc, #528]	; (8008910 <HAL_RCC_OscConfig+0x520>)
 80086fe:	685b      	ldr	r3, [r3, #4]
 8008700:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6a1b      	ldr	r3, [r3, #32]
 8008708:	069b      	lsls	r3, r3, #26
 800870a:	4981      	ldr	r1, [pc, #516]	; (8008910 <HAL_RCC_OscConfig+0x520>)
 800870c:	4313      	orrs	r3, r2
 800870e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008710:	e06a      	b.n	80087e8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008712:	4b7f      	ldr	r3, [pc, #508]	; (8008910 <HAL_RCC_OscConfig+0x520>)
 8008714:	68db      	ldr	r3, [r3, #12]
 8008716:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6a1b      	ldr	r3, [r3, #32]
 800871e:	061b      	lsls	r3, r3, #24
 8008720:	497b      	ldr	r1, [pc, #492]	; (8008910 <HAL_RCC_OscConfig+0x520>)
 8008722:	4313      	orrs	r3, r2
 8008724:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008726:	e05f      	b.n	80087e8 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	69db      	ldr	r3, [r3, #28]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d042      	beq.n	80087b6 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008730:	4b77      	ldr	r3, [pc, #476]	; (8008910 <HAL_RCC_OscConfig+0x520>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	4a76      	ldr	r2, [pc, #472]	; (8008910 <HAL_RCC_OscConfig+0x520>)
 8008736:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800873a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800873c:	f7fd f9e0 	bl	8005b00 <HAL_GetTick>
 8008740:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008742:	e008      	b.n	8008756 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008744:	f7fd f9dc 	bl	8005b00 <HAL_GetTick>
 8008748:	4602      	mov	r2, r0
 800874a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800874c:	1ad3      	subs	r3, r2, r3
 800874e:	2b02      	cmp	r3, #2
 8008750:	d901      	bls.n	8008756 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8008752:	2303      	movs	r3, #3
 8008754:	e255      	b.n	8008c02 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008756:	4b6e      	ldr	r3, [pc, #440]	; (8008910 <HAL_RCC_OscConfig+0x520>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800875e:	2b00      	cmp	r3, #0
 8008760:	d0f0      	beq.n	8008744 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008762:	f7fd f9fb 	bl	8005b5c <HAL_GetREVID>
 8008766:	4602      	mov	r2, r0
 8008768:	f241 0303 	movw	r3, #4099	; 0x1003
 800876c:	429a      	cmp	r2, r3
 800876e:	d817      	bhi.n	80087a0 <HAL_RCC_OscConfig+0x3b0>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6a1b      	ldr	r3, [r3, #32]
 8008774:	2b20      	cmp	r3, #32
 8008776:	d108      	bne.n	800878a <HAL_RCC_OscConfig+0x39a>
 8008778:	4b65      	ldr	r3, [pc, #404]	; (8008910 <HAL_RCC_OscConfig+0x520>)
 800877a:	685b      	ldr	r3, [r3, #4]
 800877c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008780:	4a63      	ldr	r2, [pc, #396]	; (8008910 <HAL_RCC_OscConfig+0x520>)
 8008782:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008786:	6053      	str	r3, [r2, #4]
 8008788:	e02e      	b.n	80087e8 <HAL_RCC_OscConfig+0x3f8>
 800878a:	4b61      	ldr	r3, [pc, #388]	; (8008910 <HAL_RCC_OscConfig+0x520>)
 800878c:	685b      	ldr	r3, [r3, #4]
 800878e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6a1b      	ldr	r3, [r3, #32]
 8008796:	069b      	lsls	r3, r3, #26
 8008798:	495d      	ldr	r1, [pc, #372]	; (8008910 <HAL_RCC_OscConfig+0x520>)
 800879a:	4313      	orrs	r3, r2
 800879c:	604b      	str	r3, [r1, #4]
 800879e:	e023      	b.n	80087e8 <HAL_RCC_OscConfig+0x3f8>
 80087a0:	4b5b      	ldr	r3, [pc, #364]	; (8008910 <HAL_RCC_OscConfig+0x520>)
 80087a2:	68db      	ldr	r3, [r3, #12]
 80087a4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6a1b      	ldr	r3, [r3, #32]
 80087ac:	061b      	lsls	r3, r3, #24
 80087ae:	4958      	ldr	r1, [pc, #352]	; (8008910 <HAL_RCC_OscConfig+0x520>)
 80087b0:	4313      	orrs	r3, r2
 80087b2:	60cb      	str	r3, [r1, #12]
 80087b4:	e018      	b.n	80087e8 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80087b6:	4b56      	ldr	r3, [pc, #344]	; (8008910 <HAL_RCC_OscConfig+0x520>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	4a55      	ldr	r2, [pc, #340]	; (8008910 <HAL_RCC_OscConfig+0x520>)
 80087bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80087c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087c2:	f7fd f99d 	bl	8005b00 <HAL_GetTick>
 80087c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80087c8:	e008      	b.n	80087dc <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80087ca:	f7fd f999 	bl	8005b00 <HAL_GetTick>
 80087ce:	4602      	mov	r2, r0
 80087d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d2:	1ad3      	subs	r3, r2, r3
 80087d4:	2b02      	cmp	r3, #2
 80087d6:	d901      	bls.n	80087dc <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80087d8:	2303      	movs	r3, #3
 80087da:	e212      	b.n	8008c02 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80087dc:	4b4c      	ldr	r3, [pc, #304]	; (8008910 <HAL_RCC_OscConfig+0x520>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d1f0      	bne.n	80087ca <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f003 0308 	and.w	r3, r3, #8
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d036      	beq.n	8008862 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	695b      	ldr	r3, [r3, #20]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d019      	beq.n	8008830 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80087fc:	4b44      	ldr	r3, [pc, #272]	; (8008910 <HAL_RCC_OscConfig+0x520>)
 80087fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008800:	4a43      	ldr	r2, [pc, #268]	; (8008910 <HAL_RCC_OscConfig+0x520>)
 8008802:	f043 0301 	orr.w	r3, r3, #1
 8008806:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008808:	f7fd f97a 	bl	8005b00 <HAL_GetTick>
 800880c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800880e:	e008      	b.n	8008822 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008810:	f7fd f976 	bl	8005b00 <HAL_GetTick>
 8008814:	4602      	mov	r2, r0
 8008816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008818:	1ad3      	subs	r3, r2, r3
 800881a:	2b02      	cmp	r3, #2
 800881c:	d901      	bls.n	8008822 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800881e:	2303      	movs	r3, #3
 8008820:	e1ef      	b.n	8008c02 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008822:	4b3b      	ldr	r3, [pc, #236]	; (8008910 <HAL_RCC_OscConfig+0x520>)
 8008824:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008826:	f003 0302 	and.w	r3, r3, #2
 800882a:	2b00      	cmp	r3, #0
 800882c:	d0f0      	beq.n	8008810 <HAL_RCC_OscConfig+0x420>
 800882e:	e018      	b.n	8008862 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008830:	4b37      	ldr	r3, [pc, #220]	; (8008910 <HAL_RCC_OscConfig+0x520>)
 8008832:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008834:	4a36      	ldr	r2, [pc, #216]	; (8008910 <HAL_RCC_OscConfig+0x520>)
 8008836:	f023 0301 	bic.w	r3, r3, #1
 800883a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800883c:	f7fd f960 	bl	8005b00 <HAL_GetTick>
 8008840:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008842:	e008      	b.n	8008856 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008844:	f7fd f95c 	bl	8005b00 <HAL_GetTick>
 8008848:	4602      	mov	r2, r0
 800884a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800884c:	1ad3      	subs	r3, r2, r3
 800884e:	2b02      	cmp	r3, #2
 8008850:	d901      	bls.n	8008856 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8008852:	2303      	movs	r3, #3
 8008854:	e1d5      	b.n	8008c02 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008856:	4b2e      	ldr	r3, [pc, #184]	; (8008910 <HAL_RCC_OscConfig+0x520>)
 8008858:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800885a:	f003 0302 	and.w	r3, r3, #2
 800885e:	2b00      	cmp	r3, #0
 8008860:	d1f0      	bne.n	8008844 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f003 0320 	and.w	r3, r3, #32
 800886a:	2b00      	cmp	r3, #0
 800886c:	d036      	beq.n	80088dc <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	699b      	ldr	r3, [r3, #24]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d019      	beq.n	80088aa <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008876:	4b26      	ldr	r3, [pc, #152]	; (8008910 <HAL_RCC_OscConfig+0x520>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4a25      	ldr	r2, [pc, #148]	; (8008910 <HAL_RCC_OscConfig+0x520>)
 800887c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008880:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008882:	f7fd f93d 	bl	8005b00 <HAL_GetTick>
 8008886:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008888:	e008      	b.n	800889c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800888a:	f7fd f939 	bl	8005b00 <HAL_GetTick>
 800888e:	4602      	mov	r2, r0
 8008890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008892:	1ad3      	subs	r3, r2, r3
 8008894:	2b02      	cmp	r3, #2
 8008896:	d901      	bls.n	800889c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8008898:	2303      	movs	r3, #3
 800889a:	e1b2      	b.n	8008c02 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800889c:	4b1c      	ldr	r3, [pc, #112]	; (8008910 <HAL_RCC_OscConfig+0x520>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d0f0      	beq.n	800888a <HAL_RCC_OscConfig+0x49a>
 80088a8:	e018      	b.n	80088dc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80088aa:	4b19      	ldr	r3, [pc, #100]	; (8008910 <HAL_RCC_OscConfig+0x520>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4a18      	ldr	r2, [pc, #96]	; (8008910 <HAL_RCC_OscConfig+0x520>)
 80088b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80088b4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80088b6:	f7fd f923 	bl	8005b00 <HAL_GetTick>
 80088ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80088bc:	e008      	b.n	80088d0 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80088be:	f7fd f91f 	bl	8005b00 <HAL_GetTick>
 80088c2:	4602      	mov	r2, r0
 80088c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c6:	1ad3      	subs	r3, r2, r3
 80088c8:	2b02      	cmp	r3, #2
 80088ca:	d901      	bls.n	80088d0 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80088cc:	2303      	movs	r3, #3
 80088ce:	e198      	b.n	8008c02 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80088d0:	4b0f      	ldr	r3, [pc, #60]	; (8008910 <HAL_RCC_OscConfig+0x520>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d1f0      	bne.n	80088be <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f003 0304 	and.w	r3, r3, #4
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	f000 8085 	beq.w	80089f4 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80088ea:	4b0a      	ldr	r3, [pc, #40]	; (8008914 <HAL_RCC_OscConfig+0x524>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	4a09      	ldr	r2, [pc, #36]	; (8008914 <HAL_RCC_OscConfig+0x524>)
 80088f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80088f4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80088f6:	f7fd f903 	bl	8005b00 <HAL_GetTick>
 80088fa:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80088fc:	e00c      	b.n	8008918 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80088fe:	f7fd f8ff 	bl	8005b00 <HAL_GetTick>
 8008902:	4602      	mov	r2, r0
 8008904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008906:	1ad3      	subs	r3, r2, r3
 8008908:	2b64      	cmp	r3, #100	; 0x64
 800890a:	d905      	bls.n	8008918 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 800890c:	2303      	movs	r3, #3
 800890e:	e178      	b.n	8008c02 <HAL_RCC_OscConfig+0x812>
 8008910:	58024400 	.word	0x58024400
 8008914:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008918:	4b96      	ldr	r3, [pc, #600]	; (8008b74 <HAL_RCC_OscConfig+0x784>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008920:	2b00      	cmp	r3, #0
 8008922:	d0ec      	beq.n	80088fe <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	689b      	ldr	r3, [r3, #8]
 8008928:	2b01      	cmp	r3, #1
 800892a:	d106      	bne.n	800893a <HAL_RCC_OscConfig+0x54a>
 800892c:	4b92      	ldr	r3, [pc, #584]	; (8008b78 <HAL_RCC_OscConfig+0x788>)
 800892e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008930:	4a91      	ldr	r2, [pc, #580]	; (8008b78 <HAL_RCC_OscConfig+0x788>)
 8008932:	f043 0301 	orr.w	r3, r3, #1
 8008936:	6713      	str	r3, [r2, #112]	; 0x70
 8008938:	e02d      	b.n	8008996 <HAL_RCC_OscConfig+0x5a6>
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	689b      	ldr	r3, [r3, #8]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d10c      	bne.n	800895c <HAL_RCC_OscConfig+0x56c>
 8008942:	4b8d      	ldr	r3, [pc, #564]	; (8008b78 <HAL_RCC_OscConfig+0x788>)
 8008944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008946:	4a8c      	ldr	r2, [pc, #560]	; (8008b78 <HAL_RCC_OscConfig+0x788>)
 8008948:	f023 0301 	bic.w	r3, r3, #1
 800894c:	6713      	str	r3, [r2, #112]	; 0x70
 800894e:	4b8a      	ldr	r3, [pc, #552]	; (8008b78 <HAL_RCC_OscConfig+0x788>)
 8008950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008952:	4a89      	ldr	r2, [pc, #548]	; (8008b78 <HAL_RCC_OscConfig+0x788>)
 8008954:	f023 0304 	bic.w	r3, r3, #4
 8008958:	6713      	str	r3, [r2, #112]	; 0x70
 800895a:	e01c      	b.n	8008996 <HAL_RCC_OscConfig+0x5a6>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	689b      	ldr	r3, [r3, #8]
 8008960:	2b05      	cmp	r3, #5
 8008962:	d10c      	bne.n	800897e <HAL_RCC_OscConfig+0x58e>
 8008964:	4b84      	ldr	r3, [pc, #528]	; (8008b78 <HAL_RCC_OscConfig+0x788>)
 8008966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008968:	4a83      	ldr	r2, [pc, #524]	; (8008b78 <HAL_RCC_OscConfig+0x788>)
 800896a:	f043 0304 	orr.w	r3, r3, #4
 800896e:	6713      	str	r3, [r2, #112]	; 0x70
 8008970:	4b81      	ldr	r3, [pc, #516]	; (8008b78 <HAL_RCC_OscConfig+0x788>)
 8008972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008974:	4a80      	ldr	r2, [pc, #512]	; (8008b78 <HAL_RCC_OscConfig+0x788>)
 8008976:	f043 0301 	orr.w	r3, r3, #1
 800897a:	6713      	str	r3, [r2, #112]	; 0x70
 800897c:	e00b      	b.n	8008996 <HAL_RCC_OscConfig+0x5a6>
 800897e:	4b7e      	ldr	r3, [pc, #504]	; (8008b78 <HAL_RCC_OscConfig+0x788>)
 8008980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008982:	4a7d      	ldr	r2, [pc, #500]	; (8008b78 <HAL_RCC_OscConfig+0x788>)
 8008984:	f023 0301 	bic.w	r3, r3, #1
 8008988:	6713      	str	r3, [r2, #112]	; 0x70
 800898a:	4b7b      	ldr	r3, [pc, #492]	; (8008b78 <HAL_RCC_OscConfig+0x788>)
 800898c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800898e:	4a7a      	ldr	r2, [pc, #488]	; (8008b78 <HAL_RCC_OscConfig+0x788>)
 8008990:	f023 0304 	bic.w	r3, r3, #4
 8008994:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	689b      	ldr	r3, [r3, #8]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d015      	beq.n	80089ca <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800899e:	f7fd f8af 	bl	8005b00 <HAL_GetTick>
 80089a2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80089a4:	e00a      	b.n	80089bc <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80089a6:	f7fd f8ab 	bl	8005b00 <HAL_GetTick>
 80089aa:	4602      	mov	r2, r0
 80089ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ae:	1ad3      	subs	r3, r2, r3
 80089b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d901      	bls.n	80089bc <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80089b8:	2303      	movs	r3, #3
 80089ba:	e122      	b.n	8008c02 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80089bc:	4b6e      	ldr	r3, [pc, #440]	; (8008b78 <HAL_RCC_OscConfig+0x788>)
 80089be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089c0:	f003 0302 	and.w	r3, r3, #2
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d0ee      	beq.n	80089a6 <HAL_RCC_OscConfig+0x5b6>
 80089c8:	e014      	b.n	80089f4 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089ca:	f7fd f899 	bl	8005b00 <HAL_GetTick>
 80089ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80089d0:	e00a      	b.n	80089e8 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80089d2:	f7fd f895 	bl	8005b00 <HAL_GetTick>
 80089d6:	4602      	mov	r2, r0
 80089d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089da:	1ad3      	subs	r3, r2, r3
 80089dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d901      	bls.n	80089e8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80089e4:	2303      	movs	r3, #3
 80089e6:	e10c      	b.n	8008c02 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80089e8:	4b63      	ldr	r3, [pc, #396]	; (8008b78 <HAL_RCC_OscConfig+0x788>)
 80089ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089ec:	f003 0302 	and.w	r3, r3, #2
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d1ee      	bne.n	80089d2 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	f000 8101 	beq.w	8008c00 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80089fe:	4b5e      	ldr	r3, [pc, #376]	; (8008b78 <HAL_RCC_OscConfig+0x788>)
 8008a00:	691b      	ldr	r3, [r3, #16]
 8008a02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a06:	2b18      	cmp	r3, #24
 8008a08:	f000 80bc 	beq.w	8008b84 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a10:	2b02      	cmp	r3, #2
 8008a12:	f040 8095 	bne.w	8008b40 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a16:	4b58      	ldr	r3, [pc, #352]	; (8008b78 <HAL_RCC_OscConfig+0x788>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4a57      	ldr	r2, [pc, #348]	; (8008b78 <HAL_RCC_OscConfig+0x788>)
 8008a1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008a20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a22:	f7fd f86d 	bl	8005b00 <HAL_GetTick>
 8008a26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008a28:	e008      	b.n	8008a3c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a2a:	f7fd f869 	bl	8005b00 <HAL_GetTick>
 8008a2e:	4602      	mov	r2, r0
 8008a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a32:	1ad3      	subs	r3, r2, r3
 8008a34:	2b02      	cmp	r3, #2
 8008a36:	d901      	bls.n	8008a3c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8008a38:	2303      	movs	r3, #3
 8008a3a:	e0e2      	b.n	8008c02 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008a3c:	4b4e      	ldr	r3, [pc, #312]	; (8008b78 <HAL_RCC_OscConfig+0x788>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d1f0      	bne.n	8008a2a <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008a48:	4b4b      	ldr	r3, [pc, #300]	; (8008b78 <HAL_RCC_OscConfig+0x788>)
 8008a4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008a4c:	4b4b      	ldr	r3, [pc, #300]	; (8008b7c <HAL_RCC_OscConfig+0x78c>)
 8008a4e:	4013      	ands	r3, r2
 8008a50:	687a      	ldr	r2, [r7, #4]
 8008a52:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008a54:	687a      	ldr	r2, [r7, #4]
 8008a56:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008a58:	0112      	lsls	r2, r2, #4
 8008a5a:	430a      	orrs	r2, r1
 8008a5c:	4946      	ldr	r1, [pc, #280]	; (8008b78 <HAL_RCC_OscConfig+0x788>)
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	628b      	str	r3, [r1, #40]	; 0x28
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a66:	3b01      	subs	r3, #1
 8008a68:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a70:	3b01      	subs	r3, #1
 8008a72:	025b      	lsls	r3, r3, #9
 8008a74:	b29b      	uxth	r3, r3
 8008a76:	431a      	orrs	r2, r3
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a7c:	3b01      	subs	r3, #1
 8008a7e:	041b      	lsls	r3, r3, #16
 8008a80:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008a84:	431a      	orrs	r2, r3
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a8a:	3b01      	subs	r3, #1
 8008a8c:	061b      	lsls	r3, r3, #24
 8008a8e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008a92:	4939      	ldr	r1, [pc, #228]	; (8008b78 <HAL_RCC_OscConfig+0x788>)
 8008a94:	4313      	orrs	r3, r2
 8008a96:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8008a98:	4b37      	ldr	r3, [pc, #220]	; (8008b78 <HAL_RCC_OscConfig+0x788>)
 8008a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a9c:	4a36      	ldr	r2, [pc, #216]	; (8008b78 <HAL_RCC_OscConfig+0x788>)
 8008a9e:	f023 0301 	bic.w	r3, r3, #1
 8008aa2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008aa4:	4b34      	ldr	r3, [pc, #208]	; (8008b78 <HAL_RCC_OscConfig+0x788>)
 8008aa6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008aa8:	4b35      	ldr	r3, [pc, #212]	; (8008b80 <HAL_RCC_OscConfig+0x790>)
 8008aaa:	4013      	ands	r3, r2
 8008aac:	687a      	ldr	r2, [r7, #4]
 8008aae:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008ab0:	00d2      	lsls	r2, r2, #3
 8008ab2:	4931      	ldr	r1, [pc, #196]	; (8008b78 <HAL_RCC_OscConfig+0x788>)
 8008ab4:	4313      	orrs	r3, r2
 8008ab6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008ab8:	4b2f      	ldr	r3, [pc, #188]	; (8008b78 <HAL_RCC_OscConfig+0x788>)
 8008aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008abc:	f023 020c 	bic.w	r2, r3, #12
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ac4:	492c      	ldr	r1, [pc, #176]	; (8008b78 <HAL_RCC_OscConfig+0x788>)
 8008ac6:	4313      	orrs	r3, r2
 8008ac8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008aca:	4b2b      	ldr	r3, [pc, #172]	; (8008b78 <HAL_RCC_OscConfig+0x788>)
 8008acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ace:	f023 0202 	bic.w	r2, r3, #2
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ad6:	4928      	ldr	r1, [pc, #160]	; (8008b78 <HAL_RCC_OscConfig+0x788>)
 8008ad8:	4313      	orrs	r3, r2
 8008ada:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008adc:	4b26      	ldr	r3, [pc, #152]	; (8008b78 <HAL_RCC_OscConfig+0x788>)
 8008ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ae0:	4a25      	ldr	r2, [pc, #148]	; (8008b78 <HAL_RCC_OscConfig+0x788>)
 8008ae2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ae6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ae8:	4b23      	ldr	r3, [pc, #140]	; (8008b78 <HAL_RCC_OscConfig+0x788>)
 8008aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aec:	4a22      	ldr	r2, [pc, #136]	; (8008b78 <HAL_RCC_OscConfig+0x788>)
 8008aee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008af2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008af4:	4b20      	ldr	r3, [pc, #128]	; (8008b78 <HAL_RCC_OscConfig+0x788>)
 8008af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008af8:	4a1f      	ldr	r2, [pc, #124]	; (8008b78 <HAL_RCC_OscConfig+0x788>)
 8008afa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008afe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008b00:	4b1d      	ldr	r3, [pc, #116]	; (8008b78 <HAL_RCC_OscConfig+0x788>)
 8008b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b04:	4a1c      	ldr	r2, [pc, #112]	; (8008b78 <HAL_RCC_OscConfig+0x788>)
 8008b06:	f043 0301 	orr.w	r3, r3, #1
 8008b0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008b0c:	4b1a      	ldr	r3, [pc, #104]	; (8008b78 <HAL_RCC_OscConfig+0x788>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4a19      	ldr	r2, [pc, #100]	; (8008b78 <HAL_RCC_OscConfig+0x788>)
 8008b12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008b16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b18:	f7fc fff2 	bl	8005b00 <HAL_GetTick>
 8008b1c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008b1e:	e008      	b.n	8008b32 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008b20:	f7fc ffee 	bl	8005b00 <HAL_GetTick>
 8008b24:	4602      	mov	r2, r0
 8008b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b28:	1ad3      	subs	r3, r2, r3
 8008b2a:	2b02      	cmp	r3, #2
 8008b2c:	d901      	bls.n	8008b32 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8008b2e:	2303      	movs	r3, #3
 8008b30:	e067      	b.n	8008c02 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008b32:	4b11      	ldr	r3, [pc, #68]	; (8008b78 <HAL_RCC_OscConfig+0x788>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d0f0      	beq.n	8008b20 <HAL_RCC_OscConfig+0x730>
 8008b3e:	e05f      	b.n	8008c00 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b40:	4b0d      	ldr	r3, [pc, #52]	; (8008b78 <HAL_RCC_OscConfig+0x788>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4a0c      	ldr	r2, [pc, #48]	; (8008b78 <HAL_RCC_OscConfig+0x788>)
 8008b46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008b4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b4c:	f7fc ffd8 	bl	8005b00 <HAL_GetTick>
 8008b50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008b52:	e008      	b.n	8008b66 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008b54:	f7fc ffd4 	bl	8005b00 <HAL_GetTick>
 8008b58:	4602      	mov	r2, r0
 8008b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b5c:	1ad3      	subs	r3, r2, r3
 8008b5e:	2b02      	cmp	r3, #2
 8008b60:	d901      	bls.n	8008b66 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8008b62:	2303      	movs	r3, #3
 8008b64:	e04d      	b.n	8008c02 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008b66:	4b04      	ldr	r3, [pc, #16]	; (8008b78 <HAL_RCC_OscConfig+0x788>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d1f0      	bne.n	8008b54 <HAL_RCC_OscConfig+0x764>
 8008b72:	e045      	b.n	8008c00 <HAL_RCC_OscConfig+0x810>
 8008b74:	58024800 	.word	0x58024800
 8008b78:	58024400 	.word	0x58024400
 8008b7c:	fffffc0c 	.word	0xfffffc0c
 8008b80:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008b84:	4b21      	ldr	r3, [pc, #132]	; (8008c0c <HAL_RCC_OscConfig+0x81c>)
 8008b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b88:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008b8a:	4b20      	ldr	r3, [pc, #128]	; (8008c0c <HAL_RCC_OscConfig+0x81c>)
 8008b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b8e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b94:	2b01      	cmp	r3, #1
 8008b96:	d031      	beq.n	8008bfc <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	f003 0203 	and.w	r2, r3, #3
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008ba2:	429a      	cmp	r2, r3
 8008ba4:	d12a      	bne.n	8008bfc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008ba6:	693b      	ldr	r3, [r7, #16]
 8008ba8:	091b      	lsrs	r3, r3, #4
 8008baa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008bb2:	429a      	cmp	r2, r3
 8008bb4:	d122      	bne.n	8008bfc <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bc0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008bc2:	429a      	cmp	r2, r3
 8008bc4:	d11a      	bne.n	8008bfc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	0a5b      	lsrs	r3, r3, #9
 8008bca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bd2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	d111      	bne.n	8008bfc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	0c1b      	lsrs	r3, r3, #16
 8008bdc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008be4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008be6:	429a      	cmp	r2, r3
 8008be8:	d108      	bne.n	8008bfc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	0e1b      	lsrs	r3, r3, #24
 8008bee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bf6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008bf8:	429a      	cmp	r2, r3
 8008bfa:	d001      	beq.n	8008c00 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	e000      	b.n	8008c02 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8008c00:	2300      	movs	r3, #0
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3730      	adds	r7, #48	; 0x30
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}
 8008c0a:	bf00      	nop
 8008c0c:	58024400 	.word	0x58024400

08008c10 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b086      	sub	sp, #24
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d101      	bne.n	8008c24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008c20:	2301      	movs	r3, #1
 8008c22:	e19c      	b.n	8008f5e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008c24:	4b8a      	ldr	r3, [pc, #552]	; (8008e50 <HAL_RCC_ClockConfig+0x240>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f003 030f 	and.w	r3, r3, #15
 8008c2c:	683a      	ldr	r2, [r7, #0]
 8008c2e:	429a      	cmp	r2, r3
 8008c30:	d910      	bls.n	8008c54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c32:	4b87      	ldr	r3, [pc, #540]	; (8008e50 <HAL_RCC_ClockConfig+0x240>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f023 020f 	bic.w	r2, r3, #15
 8008c3a:	4985      	ldr	r1, [pc, #532]	; (8008e50 <HAL_RCC_ClockConfig+0x240>)
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c42:	4b83      	ldr	r3, [pc, #524]	; (8008e50 <HAL_RCC_ClockConfig+0x240>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f003 030f 	and.w	r3, r3, #15
 8008c4a:	683a      	ldr	r2, [r7, #0]
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	d001      	beq.n	8008c54 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008c50:	2301      	movs	r3, #1
 8008c52:	e184      	b.n	8008f5e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f003 0304 	and.w	r3, r3, #4
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d010      	beq.n	8008c82 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	691a      	ldr	r2, [r3, #16]
 8008c64:	4b7b      	ldr	r3, [pc, #492]	; (8008e54 <HAL_RCC_ClockConfig+0x244>)
 8008c66:	699b      	ldr	r3, [r3, #24]
 8008c68:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008c6c:	429a      	cmp	r2, r3
 8008c6e:	d908      	bls.n	8008c82 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008c70:	4b78      	ldr	r3, [pc, #480]	; (8008e54 <HAL_RCC_ClockConfig+0x244>)
 8008c72:	699b      	ldr	r3, [r3, #24]
 8008c74:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	691b      	ldr	r3, [r3, #16]
 8008c7c:	4975      	ldr	r1, [pc, #468]	; (8008e54 <HAL_RCC_ClockConfig+0x244>)
 8008c7e:	4313      	orrs	r3, r2
 8008c80:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f003 0308 	and.w	r3, r3, #8
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d010      	beq.n	8008cb0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	695a      	ldr	r2, [r3, #20]
 8008c92:	4b70      	ldr	r3, [pc, #448]	; (8008e54 <HAL_RCC_ClockConfig+0x244>)
 8008c94:	69db      	ldr	r3, [r3, #28]
 8008c96:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008c9a:	429a      	cmp	r2, r3
 8008c9c:	d908      	bls.n	8008cb0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008c9e:	4b6d      	ldr	r3, [pc, #436]	; (8008e54 <HAL_RCC_ClockConfig+0x244>)
 8008ca0:	69db      	ldr	r3, [r3, #28]
 8008ca2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	695b      	ldr	r3, [r3, #20]
 8008caa:	496a      	ldr	r1, [pc, #424]	; (8008e54 <HAL_RCC_ClockConfig+0x244>)
 8008cac:	4313      	orrs	r3, r2
 8008cae:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f003 0310 	and.w	r3, r3, #16
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d010      	beq.n	8008cde <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	699a      	ldr	r2, [r3, #24]
 8008cc0:	4b64      	ldr	r3, [pc, #400]	; (8008e54 <HAL_RCC_ClockConfig+0x244>)
 8008cc2:	69db      	ldr	r3, [r3, #28]
 8008cc4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008cc8:	429a      	cmp	r2, r3
 8008cca:	d908      	bls.n	8008cde <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008ccc:	4b61      	ldr	r3, [pc, #388]	; (8008e54 <HAL_RCC_ClockConfig+0x244>)
 8008cce:	69db      	ldr	r3, [r3, #28]
 8008cd0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	699b      	ldr	r3, [r3, #24]
 8008cd8:	495e      	ldr	r1, [pc, #376]	; (8008e54 <HAL_RCC_ClockConfig+0x244>)
 8008cda:	4313      	orrs	r3, r2
 8008cdc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f003 0320 	and.w	r3, r3, #32
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d010      	beq.n	8008d0c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	69da      	ldr	r2, [r3, #28]
 8008cee:	4b59      	ldr	r3, [pc, #356]	; (8008e54 <HAL_RCC_ClockConfig+0x244>)
 8008cf0:	6a1b      	ldr	r3, [r3, #32]
 8008cf2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	d908      	bls.n	8008d0c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008cfa:	4b56      	ldr	r3, [pc, #344]	; (8008e54 <HAL_RCC_ClockConfig+0x244>)
 8008cfc:	6a1b      	ldr	r3, [r3, #32]
 8008cfe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	69db      	ldr	r3, [r3, #28]
 8008d06:	4953      	ldr	r1, [pc, #332]	; (8008e54 <HAL_RCC_ClockConfig+0x244>)
 8008d08:	4313      	orrs	r3, r2
 8008d0a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f003 0302 	and.w	r3, r3, #2
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d010      	beq.n	8008d3a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	68da      	ldr	r2, [r3, #12]
 8008d1c:	4b4d      	ldr	r3, [pc, #308]	; (8008e54 <HAL_RCC_ClockConfig+0x244>)
 8008d1e:	699b      	ldr	r3, [r3, #24]
 8008d20:	f003 030f 	and.w	r3, r3, #15
 8008d24:	429a      	cmp	r2, r3
 8008d26:	d908      	bls.n	8008d3a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008d28:	4b4a      	ldr	r3, [pc, #296]	; (8008e54 <HAL_RCC_ClockConfig+0x244>)
 8008d2a:	699b      	ldr	r3, [r3, #24]
 8008d2c:	f023 020f 	bic.w	r2, r3, #15
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	68db      	ldr	r3, [r3, #12]
 8008d34:	4947      	ldr	r1, [pc, #284]	; (8008e54 <HAL_RCC_ClockConfig+0x244>)
 8008d36:	4313      	orrs	r3, r2
 8008d38:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f003 0301 	and.w	r3, r3, #1
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d055      	beq.n	8008df2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008d46:	4b43      	ldr	r3, [pc, #268]	; (8008e54 <HAL_RCC_ClockConfig+0x244>)
 8008d48:	699b      	ldr	r3, [r3, #24]
 8008d4a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	689b      	ldr	r3, [r3, #8]
 8008d52:	4940      	ldr	r1, [pc, #256]	; (8008e54 <HAL_RCC_ClockConfig+0x244>)
 8008d54:	4313      	orrs	r3, r2
 8008d56:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	2b02      	cmp	r3, #2
 8008d5e:	d107      	bne.n	8008d70 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008d60:	4b3c      	ldr	r3, [pc, #240]	; (8008e54 <HAL_RCC_ClockConfig+0x244>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d121      	bne.n	8008db0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	e0f6      	b.n	8008f5e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	685b      	ldr	r3, [r3, #4]
 8008d74:	2b03      	cmp	r3, #3
 8008d76:	d107      	bne.n	8008d88 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008d78:	4b36      	ldr	r3, [pc, #216]	; (8008e54 <HAL_RCC_ClockConfig+0x244>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d115      	bne.n	8008db0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008d84:	2301      	movs	r3, #1
 8008d86:	e0ea      	b.n	8008f5e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	685b      	ldr	r3, [r3, #4]
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	d107      	bne.n	8008da0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008d90:	4b30      	ldr	r3, [pc, #192]	; (8008e54 <HAL_RCC_ClockConfig+0x244>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d109      	bne.n	8008db0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	e0de      	b.n	8008f5e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008da0:	4b2c      	ldr	r3, [pc, #176]	; (8008e54 <HAL_RCC_ClockConfig+0x244>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f003 0304 	and.w	r3, r3, #4
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d101      	bne.n	8008db0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008dac:	2301      	movs	r3, #1
 8008dae:	e0d6      	b.n	8008f5e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008db0:	4b28      	ldr	r3, [pc, #160]	; (8008e54 <HAL_RCC_ClockConfig+0x244>)
 8008db2:	691b      	ldr	r3, [r3, #16]
 8008db4:	f023 0207 	bic.w	r2, r3, #7
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	685b      	ldr	r3, [r3, #4]
 8008dbc:	4925      	ldr	r1, [pc, #148]	; (8008e54 <HAL_RCC_ClockConfig+0x244>)
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008dc2:	f7fc fe9d 	bl	8005b00 <HAL_GetTick>
 8008dc6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008dc8:	e00a      	b.n	8008de0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008dca:	f7fc fe99 	bl	8005b00 <HAL_GetTick>
 8008dce:	4602      	mov	r2, r0
 8008dd0:	697b      	ldr	r3, [r7, #20]
 8008dd2:	1ad3      	subs	r3, r2, r3
 8008dd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	d901      	bls.n	8008de0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008ddc:	2303      	movs	r3, #3
 8008dde:	e0be      	b.n	8008f5e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008de0:	4b1c      	ldr	r3, [pc, #112]	; (8008e54 <HAL_RCC_ClockConfig+0x244>)
 8008de2:	691b      	ldr	r3, [r3, #16]
 8008de4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	685b      	ldr	r3, [r3, #4]
 8008dec:	00db      	lsls	r3, r3, #3
 8008dee:	429a      	cmp	r2, r3
 8008df0:	d1eb      	bne.n	8008dca <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f003 0302 	and.w	r3, r3, #2
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d010      	beq.n	8008e20 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	68da      	ldr	r2, [r3, #12]
 8008e02:	4b14      	ldr	r3, [pc, #80]	; (8008e54 <HAL_RCC_ClockConfig+0x244>)
 8008e04:	699b      	ldr	r3, [r3, #24]
 8008e06:	f003 030f 	and.w	r3, r3, #15
 8008e0a:	429a      	cmp	r2, r3
 8008e0c:	d208      	bcs.n	8008e20 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008e0e:	4b11      	ldr	r3, [pc, #68]	; (8008e54 <HAL_RCC_ClockConfig+0x244>)
 8008e10:	699b      	ldr	r3, [r3, #24]
 8008e12:	f023 020f 	bic.w	r2, r3, #15
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	68db      	ldr	r3, [r3, #12]
 8008e1a:	490e      	ldr	r1, [pc, #56]	; (8008e54 <HAL_RCC_ClockConfig+0x244>)
 8008e1c:	4313      	orrs	r3, r2
 8008e1e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008e20:	4b0b      	ldr	r3, [pc, #44]	; (8008e50 <HAL_RCC_ClockConfig+0x240>)
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f003 030f 	and.w	r3, r3, #15
 8008e28:	683a      	ldr	r2, [r7, #0]
 8008e2a:	429a      	cmp	r2, r3
 8008e2c:	d214      	bcs.n	8008e58 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e2e:	4b08      	ldr	r3, [pc, #32]	; (8008e50 <HAL_RCC_ClockConfig+0x240>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f023 020f 	bic.w	r2, r3, #15
 8008e36:	4906      	ldr	r1, [pc, #24]	; (8008e50 <HAL_RCC_ClockConfig+0x240>)
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	4313      	orrs	r3, r2
 8008e3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e3e:	4b04      	ldr	r3, [pc, #16]	; (8008e50 <HAL_RCC_ClockConfig+0x240>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f003 030f 	and.w	r3, r3, #15
 8008e46:	683a      	ldr	r2, [r7, #0]
 8008e48:	429a      	cmp	r2, r3
 8008e4a:	d005      	beq.n	8008e58 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	e086      	b.n	8008f5e <HAL_RCC_ClockConfig+0x34e>
 8008e50:	52002000 	.word	0x52002000
 8008e54:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f003 0304 	and.w	r3, r3, #4
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d010      	beq.n	8008e86 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	691a      	ldr	r2, [r3, #16]
 8008e68:	4b3f      	ldr	r3, [pc, #252]	; (8008f68 <HAL_RCC_ClockConfig+0x358>)
 8008e6a:	699b      	ldr	r3, [r3, #24]
 8008e6c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008e70:	429a      	cmp	r2, r3
 8008e72:	d208      	bcs.n	8008e86 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008e74:	4b3c      	ldr	r3, [pc, #240]	; (8008f68 <HAL_RCC_ClockConfig+0x358>)
 8008e76:	699b      	ldr	r3, [r3, #24]
 8008e78:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	691b      	ldr	r3, [r3, #16]
 8008e80:	4939      	ldr	r1, [pc, #228]	; (8008f68 <HAL_RCC_ClockConfig+0x358>)
 8008e82:	4313      	orrs	r3, r2
 8008e84:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f003 0308 	and.w	r3, r3, #8
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d010      	beq.n	8008eb4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	695a      	ldr	r2, [r3, #20]
 8008e96:	4b34      	ldr	r3, [pc, #208]	; (8008f68 <HAL_RCC_ClockConfig+0x358>)
 8008e98:	69db      	ldr	r3, [r3, #28]
 8008e9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008e9e:	429a      	cmp	r2, r3
 8008ea0:	d208      	bcs.n	8008eb4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008ea2:	4b31      	ldr	r3, [pc, #196]	; (8008f68 <HAL_RCC_ClockConfig+0x358>)
 8008ea4:	69db      	ldr	r3, [r3, #28]
 8008ea6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	695b      	ldr	r3, [r3, #20]
 8008eae:	492e      	ldr	r1, [pc, #184]	; (8008f68 <HAL_RCC_ClockConfig+0x358>)
 8008eb0:	4313      	orrs	r3, r2
 8008eb2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f003 0310 	and.w	r3, r3, #16
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d010      	beq.n	8008ee2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	699a      	ldr	r2, [r3, #24]
 8008ec4:	4b28      	ldr	r3, [pc, #160]	; (8008f68 <HAL_RCC_ClockConfig+0x358>)
 8008ec6:	69db      	ldr	r3, [r3, #28]
 8008ec8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008ecc:	429a      	cmp	r2, r3
 8008ece:	d208      	bcs.n	8008ee2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008ed0:	4b25      	ldr	r3, [pc, #148]	; (8008f68 <HAL_RCC_ClockConfig+0x358>)
 8008ed2:	69db      	ldr	r3, [r3, #28]
 8008ed4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	699b      	ldr	r3, [r3, #24]
 8008edc:	4922      	ldr	r1, [pc, #136]	; (8008f68 <HAL_RCC_ClockConfig+0x358>)
 8008ede:	4313      	orrs	r3, r2
 8008ee0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f003 0320 	and.w	r3, r3, #32
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d010      	beq.n	8008f10 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	69da      	ldr	r2, [r3, #28]
 8008ef2:	4b1d      	ldr	r3, [pc, #116]	; (8008f68 <HAL_RCC_ClockConfig+0x358>)
 8008ef4:	6a1b      	ldr	r3, [r3, #32]
 8008ef6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008efa:	429a      	cmp	r2, r3
 8008efc:	d208      	bcs.n	8008f10 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008efe:	4b1a      	ldr	r3, [pc, #104]	; (8008f68 <HAL_RCC_ClockConfig+0x358>)
 8008f00:	6a1b      	ldr	r3, [r3, #32]
 8008f02:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	69db      	ldr	r3, [r3, #28]
 8008f0a:	4917      	ldr	r1, [pc, #92]	; (8008f68 <HAL_RCC_ClockConfig+0x358>)
 8008f0c:	4313      	orrs	r3, r2
 8008f0e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008f10:	f000 f834 	bl	8008f7c <HAL_RCC_GetSysClockFreq>
 8008f14:	4601      	mov	r1, r0
 8008f16:	4b14      	ldr	r3, [pc, #80]	; (8008f68 <HAL_RCC_ClockConfig+0x358>)
 8008f18:	699b      	ldr	r3, [r3, #24]
 8008f1a:	0a1b      	lsrs	r3, r3, #8
 8008f1c:	f003 030f 	and.w	r3, r3, #15
 8008f20:	4a12      	ldr	r2, [pc, #72]	; (8008f6c <HAL_RCC_ClockConfig+0x35c>)
 8008f22:	5cd3      	ldrb	r3, [r2, r3]
 8008f24:	f003 031f 	and.w	r3, r3, #31
 8008f28:	fa21 f303 	lsr.w	r3, r1, r3
 8008f2c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008f2e:	4b0e      	ldr	r3, [pc, #56]	; (8008f68 <HAL_RCC_ClockConfig+0x358>)
 8008f30:	699b      	ldr	r3, [r3, #24]
 8008f32:	f003 030f 	and.w	r3, r3, #15
 8008f36:	4a0d      	ldr	r2, [pc, #52]	; (8008f6c <HAL_RCC_ClockConfig+0x35c>)
 8008f38:	5cd3      	ldrb	r3, [r2, r3]
 8008f3a:	f003 031f 	and.w	r3, r3, #31
 8008f3e:	693a      	ldr	r2, [r7, #16]
 8008f40:	fa22 f303 	lsr.w	r3, r2, r3
 8008f44:	4a0a      	ldr	r2, [pc, #40]	; (8008f70 <HAL_RCC_ClockConfig+0x360>)
 8008f46:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008f48:	4a0a      	ldr	r2, [pc, #40]	; (8008f74 <HAL_RCC_ClockConfig+0x364>)
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8008f4e:	4b0a      	ldr	r3, [pc, #40]	; (8008f78 <HAL_RCC_ClockConfig+0x368>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	4618      	mov	r0, r3
 8008f54:	f7fc fd8a 	bl	8005a6c <HAL_InitTick>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3718      	adds	r7, #24
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}
 8008f66:	bf00      	nop
 8008f68:	58024400 	.word	0x58024400
 8008f6c:	080157bc 	.word	0x080157bc
 8008f70:	24000004 	.word	0x24000004
 8008f74:	24000000 	.word	0x24000000
 8008f78:	24000008 	.word	0x24000008

08008f7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b089      	sub	sp, #36	; 0x24
 8008f80:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008f82:	4baf      	ldr	r3, [pc, #700]	; (8009240 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008f84:	691b      	ldr	r3, [r3, #16]
 8008f86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008f8a:	2b18      	cmp	r3, #24
 8008f8c:	f200 814e 	bhi.w	800922c <HAL_RCC_GetSysClockFreq+0x2b0>
 8008f90:	a201      	add	r2, pc, #4	; (adr r2, 8008f98 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f96:	bf00      	nop
 8008f98:	08008ffd 	.word	0x08008ffd
 8008f9c:	0800922d 	.word	0x0800922d
 8008fa0:	0800922d 	.word	0x0800922d
 8008fa4:	0800922d 	.word	0x0800922d
 8008fa8:	0800922d 	.word	0x0800922d
 8008fac:	0800922d 	.word	0x0800922d
 8008fb0:	0800922d 	.word	0x0800922d
 8008fb4:	0800922d 	.word	0x0800922d
 8008fb8:	08009023 	.word	0x08009023
 8008fbc:	0800922d 	.word	0x0800922d
 8008fc0:	0800922d 	.word	0x0800922d
 8008fc4:	0800922d 	.word	0x0800922d
 8008fc8:	0800922d 	.word	0x0800922d
 8008fcc:	0800922d 	.word	0x0800922d
 8008fd0:	0800922d 	.word	0x0800922d
 8008fd4:	0800922d 	.word	0x0800922d
 8008fd8:	08009029 	.word	0x08009029
 8008fdc:	0800922d 	.word	0x0800922d
 8008fe0:	0800922d 	.word	0x0800922d
 8008fe4:	0800922d 	.word	0x0800922d
 8008fe8:	0800922d 	.word	0x0800922d
 8008fec:	0800922d 	.word	0x0800922d
 8008ff0:	0800922d 	.word	0x0800922d
 8008ff4:	0800922d 	.word	0x0800922d
 8008ff8:	0800902f 	.word	0x0800902f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ffc:	4b90      	ldr	r3, [pc, #576]	; (8009240 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f003 0320 	and.w	r3, r3, #32
 8009004:	2b00      	cmp	r3, #0
 8009006:	d009      	beq.n	800901c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009008:	4b8d      	ldr	r3, [pc, #564]	; (8009240 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	08db      	lsrs	r3, r3, #3
 800900e:	f003 0303 	and.w	r3, r3, #3
 8009012:	4a8c      	ldr	r2, [pc, #560]	; (8009244 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8009014:	fa22 f303 	lsr.w	r3, r2, r3
 8009018:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800901a:	e10a      	b.n	8009232 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800901c:	4b89      	ldr	r3, [pc, #548]	; (8009244 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800901e:	61bb      	str	r3, [r7, #24]
    break;
 8009020:	e107      	b.n	8009232 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8009022:	4b89      	ldr	r3, [pc, #548]	; (8009248 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8009024:	61bb      	str	r3, [r7, #24]
    break;
 8009026:	e104      	b.n	8009232 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8009028:	4b88      	ldr	r3, [pc, #544]	; (800924c <HAL_RCC_GetSysClockFreq+0x2d0>)
 800902a:	61bb      	str	r3, [r7, #24]
    break;
 800902c:	e101      	b.n	8009232 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800902e:	4b84      	ldr	r3, [pc, #528]	; (8009240 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009032:	f003 0303 	and.w	r3, r3, #3
 8009036:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8009038:	4b81      	ldr	r3, [pc, #516]	; (8009240 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800903a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800903c:	091b      	lsrs	r3, r3, #4
 800903e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009042:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009044:	4b7e      	ldr	r3, [pc, #504]	; (8009240 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009048:	f003 0301 	and.w	r3, r3, #1
 800904c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800904e:	4b7c      	ldr	r3, [pc, #496]	; (8009240 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009052:	08db      	lsrs	r3, r3, #3
 8009054:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009058:	68fa      	ldr	r2, [r7, #12]
 800905a:	fb02 f303 	mul.w	r3, r2, r3
 800905e:	ee07 3a90 	vmov	s15, r3
 8009062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009066:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800906a:	693b      	ldr	r3, [r7, #16]
 800906c:	2b00      	cmp	r3, #0
 800906e:	f000 80da 	beq.w	8009226 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	2b01      	cmp	r3, #1
 8009076:	d05a      	beq.n	800912e <HAL_RCC_GetSysClockFreq+0x1b2>
 8009078:	2b01      	cmp	r3, #1
 800907a:	d302      	bcc.n	8009082 <HAL_RCC_GetSysClockFreq+0x106>
 800907c:	2b02      	cmp	r3, #2
 800907e:	d078      	beq.n	8009172 <HAL_RCC_GetSysClockFreq+0x1f6>
 8009080:	e099      	b.n	80091b6 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009082:	4b6f      	ldr	r3, [pc, #444]	; (8009240 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f003 0320 	and.w	r3, r3, #32
 800908a:	2b00      	cmp	r3, #0
 800908c:	d02d      	beq.n	80090ea <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800908e:	4b6c      	ldr	r3, [pc, #432]	; (8009240 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	08db      	lsrs	r3, r3, #3
 8009094:	f003 0303 	and.w	r3, r3, #3
 8009098:	4a6a      	ldr	r2, [pc, #424]	; (8009244 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800909a:	fa22 f303 	lsr.w	r3, r2, r3
 800909e:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	ee07 3a90 	vmov	s15, r3
 80090a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090aa:	693b      	ldr	r3, [r7, #16]
 80090ac:	ee07 3a90 	vmov	s15, r3
 80090b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090b8:	4b61      	ldr	r3, [pc, #388]	; (8009240 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80090ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090c0:	ee07 3a90 	vmov	s15, r3
 80090c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090c8:	ed97 6a02 	vldr	s12, [r7, #8]
 80090cc:	eddf 5a60 	vldr	s11, [pc, #384]	; 8009250 <HAL_RCC_GetSysClockFreq+0x2d4>
 80090d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090e4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80090e8:	e087      	b.n	80091fa <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80090ea:	693b      	ldr	r3, [r7, #16]
 80090ec:	ee07 3a90 	vmov	s15, r3
 80090f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090f4:	eddf 6a57 	vldr	s13, [pc, #348]	; 8009254 <HAL_RCC_GetSysClockFreq+0x2d8>
 80090f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090fc:	4b50      	ldr	r3, [pc, #320]	; (8009240 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80090fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009100:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009104:	ee07 3a90 	vmov	s15, r3
 8009108:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800910c:	ed97 6a02 	vldr	s12, [r7, #8]
 8009110:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8009250 <HAL_RCC_GetSysClockFreq+0x2d4>
 8009114:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009118:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800911c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009120:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009124:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009128:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800912c:	e065      	b.n	80091fa <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	ee07 3a90 	vmov	s15, r3
 8009134:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009138:	eddf 6a47 	vldr	s13, [pc, #284]	; 8009258 <HAL_RCC_GetSysClockFreq+0x2dc>
 800913c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009140:	4b3f      	ldr	r3, [pc, #252]	; (8009240 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009144:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009148:	ee07 3a90 	vmov	s15, r3
 800914c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009150:	ed97 6a02 	vldr	s12, [r7, #8]
 8009154:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8009250 <HAL_RCC_GetSysClockFreq+0x2d4>
 8009158:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800915c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009160:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009164:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009168:	ee67 7a27 	vmul.f32	s15, s14, s15
 800916c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009170:	e043      	b.n	80091fa <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009172:	693b      	ldr	r3, [r7, #16]
 8009174:	ee07 3a90 	vmov	s15, r3
 8009178:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800917c:	eddf 6a37 	vldr	s13, [pc, #220]	; 800925c <HAL_RCC_GetSysClockFreq+0x2e0>
 8009180:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009184:	4b2e      	ldr	r3, [pc, #184]	; (8009240 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009188:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800918c:	ee07 3a90 	vmov	s15, r3
 8009190:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009194:	ed97 6a02 	vldr	s12, [r7, #8]
 8009198:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8009250 <HAL_RCC_GetSysClockFreq+0x2d4>
 800919c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80091a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091b0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80091b4:	e021      	b.n	80091fa <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	ee07 3a90 	vmov	s15, r3
 80091bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091c0:	eddf 6a25 	vldr	s13, [pc, #148]	; 8009258 <HAL_RCC_GetSysClockFreq+0x2dc>
 80091c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091c8:	4b1d      	ldr	r3, [pc, #116]	; (8009240 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80091ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091d0:	ee07 3a90 	vmov	s15, r3
 80091d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091d8:	ed97 6a02 	vldr	s12, [r7, #8]
 80091dc:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8009250 <HAL_RCC_GetSysClockFreq+0x2d4>
 80091e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80091ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091f4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80091f8:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80091fa:	4b11      	ldr	r3, [pc, #68]	; (8009240 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80091fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091fe:	0a5b      	lsrs	r3, r3, #9
 8009200:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009204:	3301      	adds	r3, #1
 8009206:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	ee07 3a90 	vmov	s15, r3
 800920e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009212:	edd7 6a07 	vldr	s13, [r7, #28]
 8009216:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800921a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800921e:	ee17 3a90 	vmov	r3, s15
 8009222:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8009224:	e005      	b.n	8009232 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8009226:	2300      	movs	r3, #0
 8009228:	61bb      	str	r3, [r7, #24]
    break;
 800922a:	e002      	b.n	8009232 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 800922c:	4b06      	ldr	r3, [pc, #24]	; (8009248 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800922e:	61bb      	str	r3, [r7, #24]
    break;
 8009230:	bf00      	nop
  }

  return sysclockfreq;
 8009232:	69bb      	ldr	r3, [r7, #24]
}
 8009234:	4618      	mov	r0, r3
 8009236:	3724      	adds	r7, #36	; 0x24
 8009238:	46bd      	mov	sp, r7
 800923a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923e:	4770      	bx	lr
 8009240:	58024400 	.word	0x58024400
 8009244:	03d09000 	.word	0x03d09000
 8009248:	003d0900 	.word	0x003d0900
 800924c:	007a1200 	.word	0x007a1200
 8009250:	46000000 	.word	0x46000000
 8009254:	4c742400 	.word	0x4c742400
 8009258:	4a742400 	.word	0x4a742400
 800925c:	4af42400 	.word	0x4af42400

08009260 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b082      	sub	sp, #8
 8009264:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009266:	f7ff fe89 	bl	8008f7c <HAL_RCC_GetSysClockFreq>
 800926a:	4601      	mov	r1, r0
 800926c:	4b10      	ldr	r3, [pc, #64]	; (80092b0 <HAL_RCC_GetHCLKFreq+0x50>)
 800926e:	699b      	ldr	r3, [r3, #24]
 8009270:	0a1b      	lsrs	r3, r3, #8
 8009272:	f003 030f 	and.w	r3, r3, #15
 8009276:	4a0f      	ldr	r2, [pc, #60]	; (80092b4 <HAL_RCC_GetHCLKFreq+0x54>)
 8009278:	5cd3      	ldrb	r3, [r2, r3]
 800927a:	f003 031f 	and.w	r3, r3, #31
 800927e:	fa21 f303 	lsr.w	r3, r1, r3
 8009282:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009284:	4b0a      	ldr	r3, [pc, #40]	; (80092b0 <HAL_RCC_GetHCLKFreq+0x50>)
 8009286:	699b      	ldr	r3, [r3, #24]
 8009288:	f003 030f 	and.w	r3, r3, #15
 800928c:	4a09      	ldr	r2, [pc, #36]	; (80092b4 <HAL_RCC_GetHCLKFreq+0x54>)
 800928e:	5cd3      	ldrb	r3, [r2, r3]
 8009290:	f003 031f 	and.w	r3, r3, #31
 8009294:	687a      	ldr	r2, [r7, #4]
 8009296:	fa22 f303 	lsr.w	r3, r2, r3
 800929a:	4a07      	ldr	r2, [pc, #28]	; (80092b8 <HAL_RCC_GetHCLKFreq+0x58>)
 800929c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800929e:	4a07      	ldr	r2, [pc, #28]	; (80092bc <HAL_RCC_GetHCLKFreq+0x5c>)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80092a4:	4b04      	ldr	r3, [pc, #16]	; (80092b8 <HAL_RCC_GetHCLKFreq+0x58>)
 80092a6:	681b      	ldr	r3, [r3, #0]
}
 80092a8:	4618      	mov	r0, r3
 80092aa:	3708      	adds	r7, #8
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}
 80092b0:	58024400 	.word	0x58024400
 80092b4:	080157bc 	.word	0x080157bc
 80092b8:	24000004 	.word	0x24000004
 80092bc:	24000000 	.word	0x24000000

080092c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80092c4:	f7ff ffcc 	bl	8009260 <HAL_RCC_GetHCLKFreq>
 80092c8:	4601      	mov	r1, r0
 80092ca:	4b06      	ldr	r3, [pc, #24]	; (80092e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80092cc:	69db      	ldr	r3, [r3, #28]
 80092ce:	091b      	lsrs	r3, r3, #4
 80092d0:	f003 0307 	and.w	r3, r3, #7
 80092d4:	4a04      	ldr	r2, [pc, #16]	; (80092e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80092d6:	5cd3      	ldrb	r3, [r2, r3]
 80092d8:	f003 031f 	and.w	r3, r3, #31
 80092dc:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	bd80      	pop	{r7, pc}
 80092e4:	58024400 	.word	0x58024400
 80092e8:	080157bc 	.word	0x080157bc

080092ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80092f0:	f7ff ffb6 	bl	8009260 <HAL_RCC_GetHCLKFreq>
 80092f4:	4601      	mov	r1, r0
 80092f6:	4b06      	ldr	r3, [pc, #24]	; (8009310 <HAL_RCC_GetPCLK2Freq+0x24>)
 80092f8:	69db      	ldr	r3, [r3, #28]
 80092fa:	0a1b      	lsrs	r3, r3, #8
 80092fc:	f003 0307 	and.w	r3, r3, #7
 8009300:	4a04      	ldr	r2, [pc, #16]	; (8009314 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009302:	5cd3      	ldrb	r3, [r2, r3]
 8009304:	f003 031f 	and.w	r3, r3, #31
 8009308:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800930c:	4618      	mov	r0, r3
 800930e:	bd80      	pop	{r7, pc}
 8009310:	58024400 	.word	0x58024400
 8009314:	080157bc 	.word	0x080157bc

08009318 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b086      	sub	sp, #24
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009320:	2300      	movs	r3, #0
 8009322:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009324:	2300      	movs	r3, #0
 8009326:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009330:	2b00      	cmp	r3, #0
 8009332:	d03d      	beq.n	80093b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009338:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800933c:	d013      	beq.n	8009366 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800933e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009342:	d802      	bhi.n	800934a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8009344:	2b00      	cmp	r3, #0
 8009346:	d007      	beq.n	8009358 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8009348:	e01f      	b.n	800938a <HAL_RCCEx_PeriphCLKConfig+0x72>
 800934a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800934e:	d013      	beq.n	8009378 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8009350:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009354:	d01c      	beq.n	8009390 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8009356:	e018      	b.n	800938a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009358:	4baf      	ldr	r3, [pc, #700]	; (8009618 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800935a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800935c:	4aae      	ldr	r2, [pc, #696]	; (8009618 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800935e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009362:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009364:	e015      	b.n	8009392 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	3304      	adds	r3, #4
 800936a:	2102      	movs	r1, #2
 800936c:	4618      	mov	r0, r3
 800936e:	f001 f96f 	bl	800a650 <RCCEx_PLL2_Config>
 8009372:	4603      	mov	r3, r0
 8009374:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009376:	e00c      	b.n	8009392 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	3324      	adds	r3, #36	; 0x24
 800937c:	2102      	movs	r1, #2
 800937e:	4618      	mov	r0, r3
 8009380:	f001 fa18 	bl	800a7b4 <RCCEx_PLL3_Config>
 8009384:	4603      	mov	r3, r0
 8009386:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009388:	e003      	b.n	8009392 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800938a:	2301      	movs	r3, #1
 800938c:	75fb      	strb	r3, [r7, #23]
      break;
 800938e:	e000      	b.n	8009392 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8009390:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009392:	7dfb      	ldrb	r3, [r7, #23]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d109      	bne.n	80093ac <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009398:	4b9f      	ldr	r3, [pc, #636]	; (8009618 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800939a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800939c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80093a4:	499c      	ldr	r1, [pc, #624]	; (8009618 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80093a6:	4313      	orrs	r3, r2
 80093a8:	650b      	str	r3, [r1, #80]	; 0x50
 80093aa:	e001      	b.n	80093b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093ac:	7dfb      	ldrb	r3, [r7, #23]
 80093ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d03d      	beq.n	8009438 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093c0:	2b04      	cmp	r3, #4
 80093c2:	d826      	bhi.n	8009412 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80093c4:	a201      	add	r2, pc, #4	; (adr r2, 80093cc <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80093c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093ca:	bf00      	nop
 80093cc:	080093e1 	.word	0x080093e1
 80093d0:	080093ef 	.word	0x080093ef
 80093d4:	08009401 	.word	0x08009401
 80093d8:	08009419 	.word	0x08009419
 80093dc:	08009419 	.word	0x08009419
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093e0:	4b8d      	ldr	r3, [pc, #564]	; (8009618 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80093e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093e4:	4a8c      	ldr	r2, [pc, #560]	; (8009618 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80093e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80093ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80093ec:	e015      	b.n	800941a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	3304      	adds	r3, #4
 80093f2:	2100      	movs	r1, #0
 80093f4:	4618      	mov	r0, r3
 80093f6:	f001 f92b 	bl	800a650 <RCCEx_PLL2_Config>
 80093fa:	4603      	mov	r3, r0
 80093fc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80093fe:	e00c      	b.n	800941a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	3324      	adds	r3, #36	; 0x24
 8009404:	2100      	movs	r1, #0
 8009406:	4618      	mov	r0, r3
 8009408:	f001 f9d4 	bl	800a7b4 <RCCEx_PLL3_Config>
 800940c:	4603      	mov	r3, r0
 800940e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009410:	e003      	b.n	800941a <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009412:	2301      	movs	r3, #1
 8009414:	75fb      	strb	r3, [r7, #23]
      break;
 8009416:	e000      	b.n	800941a <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8009418:	bf00      	nop
    }

    if(ret == HAL_OK)
 800941a:	7dfb      	ldrb	r3, [r7, #23]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d109      	bne.n	8009434 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009420:	4b7d      	ldr	r3, [pc, #500]	; (8009618 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009422:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009424:	f023 0207 	bic.w	r2, r3, #7
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800942c:	497a      	ldr	r1, [pc, #488]	; (8009618 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800942e:	4313      	orrs	r3, r2
 8009430:	650b      	str	r3, [r1, #80]	; 0x50
 8009432:	e001      	b.n	8009438 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009434:	7dfb      	ldrb	r3, [r7, #23]
 8009436:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009440:	2b00      	cmp	r3, #0
 8009442:	d03e      	beq.n	80094c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009448:	2b80      	cmp	r3, #128	; 0x80
 800944a:	d01c      	beq.n	8009486 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800944c:	2b80      	cmp	r3, #128	; 0x80
 800944e:	d804      	bhi.n	800945a <HAL_RCCEx_PeriphCLKConfig+0x142>
 8009450:	2b00      	cmp	r3, #0
 8009452:	d008      	beq.n	8009466 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8009454:	2b40      	cmp	r3, #64	; 0x40
 8009456:	d00d      	beq.n	8009474 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8009458:	e01e      	b.n	8009498 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800945a:	2bc0      	cmp	r3, #192	; 0xc0
 800945c:	d01f      	beq.n	800949e <HAL_RCCEx_PeriphCLKConfig+0x186>
 800945e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009462:	d01e      	beq.n	80094a2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8009464:	e018      	b.n	8009498 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009466:	4b6c      	ldr	r3, [pc, #432]	; (8009618 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800946a:	4a6b      	ldr	r2, [pc, #428]	; (8009618 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800946c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009470:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009472:	e017      	b.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	3304      	adds	r3, #4
 8009478:	2100      	movs	r1, #0
 800947a:	4618      	mov	r0, r3
 800947c:	f001 f8e8 	bl	800a650 <RCCEx_PLL2_Config>
 8009480:	4603      	mov	r3, r0
 8009482:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009484:	e00e      	b.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	3324      	adds	r3, #36	; 0x24
 800948a:	2100      	movs	r1, #0
 800948c:	4618      	mov	r0, r3
 800948e:	f001 f991 	bl	800a7b4 <RCCEx_PLL3_Config>
 8009492:	4603      	mov	r3, r0
 8009494:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009496:	e005      	b.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009498:	2301      	movs	r3, #1
 800949a:	75fb      	strb	r3, [r7, #23]
      break;
 800949c:	e002      	b.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800949e:	bf00      	nop
 80094a0:	e000      	b.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80094a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80094a4:	7dfb      	ldrb	r3, [r7, #23]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d109      	bne.n	80094be <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80094aa:	4b5b      	ldr	r3, [pc, #364]	; (8009618 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80094ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094ae:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094b6:	4958      	ldr	r1, [pc, #352]	; (8009618 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80094b8:	4313      	orrs	r3, r2
 80094ba:	650b      	str	r3, [r1, #80]	; 0x50
 80094bc:	e001      	b.n	80094c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094be:	7dfb      	ldrb	r3, [r7, #23]
 80094c0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d044      	beq.n	8009558 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80094d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80094d8:	d01f      	beq.n	800951a <HAL_RCCEx_PeriphCLKConfig+0x202>
 80094da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80094de:	d805      	bhi.n	80094ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d00a      	beq.n	80094fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80094e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80094e8:	d00e      	beq.n	8009508 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80094ea:	e01f      	b.n	800952c <HAL_RCCEx_PeriphCLKConfig+0x214>
 80094ec:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80094f0:	d01f      	beq.n	8009532 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80094f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80094f6:	d01e      	beq.n	8009536 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80094f8:	e018      	b.n	800952c <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094fa:	4b47      	ldr	r3, [pc, #284]	; (8009618 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80094fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094fe:	4a46      	ldr	r2, [pc, #280]	; (8009618 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009500:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009504:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009506:	e017      	b.n	8009538 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	3304      	adds	r3, #4
 800950c:	2100      	movs	r1, #0
 800950e:	4618      	mov	r0, r3
 8009510:	f001 f89e 	bl	800a650 <RCCEx_PLL2_Config>
 8009514:	4603      	mov	r3, r0
 8009516:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009518:	e00e      	b.n	8009538 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	3324      	adds	r3, #36	; 0x24
 800951e:	2100      	movs	r1, #0
 8009520:	4618      	mov	r0, r3
 8009522:	f001 f947 	bl	800a7b4 <RCCEx_PLL3_Config>
 8009526:	4603      	mov	r3, r0
 8009528:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800952a:	e005      	b.n	8009538 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800952c:	2301      	movs	r3, #1
 800952e:	75fb      	strb	r3, [r7, #23]
      break;
 8009530:	e002      	b.n	8009538 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8009532:	bf00      	nop
 8009534:	e000      	b.n	8009538 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8009536:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009538:	7dfb      	ldrb	r3, [r7, #23]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d10a      	bne.n	8009554 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800953e:	4b36      	ldr	r3, [pc, #216]	; (8009618 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009542:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800954c:	4932      	ldr	r1, [pc, #200]	; (8009618 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800954e:	4313      	orrs	r3, r2
 8009550:	658b      	str	r3, [r1, #88]	; 0x58
 8009552:	e001      	b.n	8009558 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009554:	7dfb      	ldrb	r3, [r7, #23]
 8009556:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009560:	2b00      	cmp	r3, #0
 8009562:	d044      	beq.n	80095ee <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800956a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800956e:	d01f      	beq.n	80095b0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009570:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009574:	d805      	bhi.n	8009582 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8009576:	2b00      	cmp	r3, #0
 8009578:	d00a      	beq.n	8009590 <HAL_RCCEx_PeriphCLKConfig+0x278>
 800957a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800957e:	d00e      	beq.n	800959e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8009580:	e01f      	b.n	80095c2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8009582:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009586:	d01f      	beq.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8009588:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800958c:	d01e      	beq.n	80095cc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800958e:	e018      	b.n	80095c2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009590:	4b21      	ldr	r3, [pc, #132]	; (8009618 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009594:	4a20      	ldr	r2, [pc, #128]	; (8009618 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009596:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800959a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800959c:	e017      	b.n	80095ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	3304      	adds	r3, #4
 80095a2:	2100      	movs	r1, #0
 80095a4:	4618      	mov	r0, r3
 80095a6:	f001 f853 	bl	800a650 <RCCEx_PLL2_Config>
 80095aa:	4603      	mov	r3, r0
 80095ac:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80095ae:	e00e      	b.n	80095ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	3324      	adds	r3, #36	; 0x24
 80095b4:	2100      	movs	r1, #0
 80095b6:	4618      	mov	r0, r3
 80095b8:	f001 f8fc 	bl	800a7b4 <RCCEx_PLL3_Config>
 80095bc:	4603      	mov	r3, r0
 80095be:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80095c0:	e005      	b.n	80095ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80095c2:	2301      	movs	r3, #1
 80095c4:	75fb      	strb	r3, [r7, #23]
      break;
 80095c6:	e002      	b.n	80095ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80095c8:	bf00      	nop
 80095ca:	e000      	b.n	80095ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80095cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80095ce:	7dfb      	ldrb	r3, [r7, #23]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d10a      	bne.n	80095ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80095d4:	4b10      	ldr	r3, [pc, #64]	; (8009618 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80095d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095d8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80095e2:	490d      	ldr	r1, [pc, #52]	; (8009618 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80095e4:	4313      	orrs	r3, r2
 80095e6:	658b      	str	r3, [r1, #88]	; 0x58
 80095e8:	e001      	b.n	80095ee <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095ea:	7dfb      	ldrb	r3, [r7, #23]
 80095ec:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d035      	beq.n	8009666 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095fe:	2b10      	cmp	r3, #16
 8009600:	d00c      	beq.n	800961c <HAL_RCCEx_PeriphCLKConfig+0x304>
 8009602:	2b10      	cmp	r3, #16
 8009604:	d802      	bhi.n	800960c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8009606:	2b00      	cmp	r3, #0
 8009608:	d01b      	beq.n	8009642 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800960a:	e017      	b.n	800963c <HAL_RCCEx_PeriphCLKConfig+0x324>
 800960c:	2b20      	cmp	r3, #32
 800960e:	d00c      	beq.n	800962a <HAL_RCCEx_PeriphCLKConfig+0x312>
 8009610:	2b30      	cmp	r3, #48	; 0x30
 8009612:	d018      	beq.n	8009646 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8009614:	e012      	b.n	800963c <HAL_RCCEx_PeriphCLKConfig+0x324>
 8009616:	bf00      	nop
 8009618:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800961c:	4baf      	ldr	r3, [pc, #700]	; (80098dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800961e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009620:	4aae      	ldr	r2, [pc, #696]	; (80098dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009622:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009626:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8009628:	e00e      	b.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	3304      	adds	r3, #4
 800962e:	2102      	movs	r1, #2
 8009630:	4618      	mov	r0, r3
 8009632:	f001 f80d 	bl	800a650 <RCCEx_PLL2_Config>
 8009636:	4603      	mov	r3, r0
 8009638:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800963a:	e005      	b.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800963c:	2301      	movs	r3, #1
 800963e:	75fb      	strb	r3, [r7, #23]
      break;
 8009640:	e002      	b.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8009642:	bf00      	nop
 8009644:	e000      	b.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8009646:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009648:	7dfb      	ldrb	r3, [r7, #23]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d109      	bne.n	8009662 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800964e:	4ba3      	ldr	r3, [pc, #652]	; (80098dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009652:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800965a:	49a0      	ldr	r1, [pc, #640]	; (80098dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800965c:	4313      	orrs	r3, r2
 800965e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009660:	e001      	b.n	8009666 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009662:	7dfb      	ldrb	r3, [r7, #23]
 8009664:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800966e:	2b00      	cmp	r3, #0
 8009670:	d042      	beq.n	80096f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009676:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800967a:	d01f      	beq.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 800967c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009680:	d805      	bhi.n	800968e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009682:	2b00      	cmp	r3, #0
 8009684:	d00a      	beq.n	800969c <HAL_RCCEx_PeriphCLKConfig+0x384>
 8009686:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800968a:	d00e      	beq.n	80096aa <HAL_RCCEx_PeriphCLKConfig+0x392>
 800968c:	e01f      	b.n	80096ce <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800968e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009692:	d01f      	beq.n	80096d4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8009694:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009698:	d01e      	beq.n	80096d8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800969a:	e018      	b.n	80096ce <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800969c:	4b8f      	ldr	r3, [pc, #572]	; (80098dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800969e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096a0:	4a8e      	ldr	r2, [pc, #568]	; (80098dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80096a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80096a8:	e017      	b.n	80096da <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	3304      	adds	r3, #4
 80096ae:	2100      	movs	r1, #0
 80096b0:	4618      	mov	r0, r3
 80096b2:	f000 ffcd 	bl	800a650 <RCCEx_PLL2_Config>
 80096b6:	4603      	mov	r3, r0
 80096b8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80096ba:	e00e      	b.n	80096da <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	3324      	adds	r3, #36	; 0x24
 80096c0:	2100      	movs	r1, #0
 80096c2:	4618      	mov	r0, r3
 80096c4:	f001 f876 	bl	800a7b4 <RCCEx_PLL3_Config>
 80096c8:	4603      	mov	r3, r0
 80096ca:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80096cc:	e005      	b.n	80096da <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80096ce:	2301      	movs	r3, #1
 80096d0:	75fb      	strb	r3, [r7, #23]
      break;
 80096d2:	e002      	b.n	80096da <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80096d4:	bf00      	nop
 80096d6:	e000      	b.n	80096da <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80096d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80096da:	7dfb      	ldrb	r3, [r7, #23]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d109      	bne.n	80096f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80096e0:	4b7e      	ldr	r3, [pc, #504]	; (80098dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80096e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096e4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096ec:	497b      	ldr	r1, [pc, #492]	; (80098dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80096ee:	4313      	orrs	r3, r2
 80096f0:	650b      	str	r3, [r1, #80]	; 0x50
 80096f2:	e001      	b.n	80096f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096f4:	7dfb      	ldrb	r3, [r7, #23]
 80096f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009700:	2b00      	cmp	r3, #0
 8009702:	d042      	beq.n	800978a <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009708:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800970c:	d01b      	beq.n	8009746 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800970e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009712:	d805      	bhi.n	8009720 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8009714:	2b00      	cmp	r3, #0
 8009716:	d022      	beq.n	800975e <HAL_RCCEx_PeriphCLKConfig+0x446>
 8009718:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800971c:	d00a      	beq.n	8009734 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800971e:	e01b      	b.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8009720:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009724:	d01d      	beq.n	8009762 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8009726:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800972a:	d01c      	beq.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 800972c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009730:	d01b      	beq.n	800976a <HAL_RCCEx_PeriphCLKConfig+0x452>
 8009732:	e011      	b.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	3304      	adds	r3, #4
 8009738:	2101      	movs	r1, #1
 800973a:	4618      	mov	r0, r3
 800973c:	f000 ff88 	bl	800a650 <RCCEx_PLL2_Config>
 8009740:	4603      	mov	r3, r0
 8009742:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009744:	e012      	b.n	800976c <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	3324      	adds	r3, #36	; 0x24
 800974a:	2101      	movs	r1, #1
 800974c:	4618      	mov	r0, r3
 800974e:	f001 f831 	bl	800a7b4 <RCCEx_PLL3_Config>
 8009752:	4603      	mov	r3, r0
 8009754:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009756:	e009      	b.n	800976c <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009758:	2301      	movs	r3, #1
 800975a:	75fb      	strb	r3, [r7, #23]
      break;
 800975c:	e006      	b.n	800976c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800975e:	bf00      	nop
 8009760:	e004      	b.n	800976c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8009762:	bf00      	nop
 8009764:	e002      	b.n	800976c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8009766:	bf00      	nop
 8009768:	e000      	b.n	800976c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800976a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800976c:	7dfb      	ldrb	r3, [r7, #23]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d109      	bne.n	8009786 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009772:	4b5a      	ldr	r3, [pc, #360]	; (80098dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009774:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009776:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800977e:	4957      	ldr	r1, [pc, #348]	; (80098dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009780:	4313      	orrs	r3, r2
 8009782:	650b      	str	r3, [r1, #80]	; 0x50
 8009784:	e001      	b.n	800978a <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009786:	7dfb      	ldrb	r3, [r7, #23]
 8009788:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009792:	2b00      	cmp	r3, #0
 8009794:	d044      	beq.n	8009820 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800979c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097a0:	d01b      	beq.n	80097da <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80097a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097a6:	d805      	bhi.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d022      	beq.n	80097f2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80097ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80097b0:	d00a      	beq.n	80097c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80097b2:	e01b      	b.n	80097ec <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80097b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097b8:	d01d      	beq.n	80097f6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80097ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80097be:	d01c      	beq.n	80097fa <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80097c0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80097c4:	d01b      	beq.n	80097fe <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80097c6:	e011      	b.n	80097ec <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	3304      	adds	r3, #4
 80097cc:	2101      	movs	r1, #1
 80097ce:	4618      	mov	r0, r3
 80097d0:	f000 ff3e 	bl	800a650 <RCCEx_PLL2_Config>
 80097d4:	4603      	mov	r3, r0
 80097d6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80097d8:	e012      	b.n	8009800 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	3324      	adds	r3, #36	; 0x24
 80097de:	2101      	movs	r1, #1
 80097e0:	4618      	mov	r0, r3
 80097e2:	f000 ffe7 	bl	800a7b4 <RCCEx_PLL3_Config>
 80097e6:	4603      	mov	r3, r0
 80097e8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80097ea:	e009      	b.n	8009800 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80097ec:	2301      	movs	r3, #1
 80097ee:	75fb      	strb	r3, [r7, #23]
      break;
 80097f0:	e006      	b.n	8009800 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80097f2:	bf00      	nop
 80097f4:	e004      	b.n	8009800 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80097f6:	bf00      	nop
 80097f8:	e002      	b.n	8009800 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80097fa:	bf00      	nop
 80097fc:	e000      	b.n	8009800 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80097fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009800:	7dfb      	ldrb	r3, [r7, #23]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d10a      	bne.n	800981c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009806:	4b35      	ldr	r3, [pc, #212]	; (80098dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800980a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009814:	4931      	ldr	r1, [pc, #196]	; (80098dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009816:	4313      	orrs	r3, r2
 8009818:	658b      	str	r3, [r1, #88]	; 0x58
 800981a:	e001      	b.n	8009820 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800981c:	7dfb      	ldrb	r3, [r7, #23]
 800981e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009828:	2b00      	cmp	r3, #0
 800982a:	d02d      	beq.n	8009888 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009830:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009834:	d005      	beq.n	8009842 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8009836:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800983a:	d009      	beq.n	8009850 <HAL_RCCEx_PeriphCLKConfig+0x538>
 800983c:	2b00      	cmp	r3, #0
 800983e:	d013      	beq.n	8009868 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8009840:	e00f      	b.n	8009862 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009842:	4b26      	ldr	r3, [pc, #152]	; (80098dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009846:	4a25      	ldr	r2, [pc, #148]	; (80098dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009848:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800984c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800984e:	e00c      	b.n	800986a <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	3304      	adds	r3, #4
 8009854:	2101      	movs	r1, #1
 8009856:	4618      	mov	r0, r3
 8009858:	f000 fefa 	bl	800a650 <RCCEx_PLL2_Config>
 800985c:	4603      	mov	r3, r0
 800985e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009860:	e003      	b.n	800986a <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009862:	2301      	movs	r3, #1
 8009864:	75fb      	strb	r3, [r7, #23]
      break;
 8009866:	e000      	b.n	800986a <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8009868:	bf00      	nop
    }

    if(ret == HAL_OK)
 800986a:	7dfb      	ldrb	r3, [r7, #23]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d109      	bne.n	8009884 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009870:	4b1a      	ldr	r3, [pc, #104]	; (80098dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009872:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009874:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800987c:	4917      	ldr	r1, [pc, #92]	; (80098dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800987e:	4313      	orrs	r3, r2
 8009880:	650b      	str	r3, [r1, #80]	; 0x50
 8009882:	e001      	b.n	8009888 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009884:	7dfb      	ldrb	r3, [r7, #23]
 8009886:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009890:	2b00      	cmp	r3, #0
 8009892:	d035      	beq.n	8009900 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009898:	2b03      	cmp	r3, #3
 800989a:	d81b      	bhi.n	80098d4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800989c:	a201      	add	r2, pc, #4	; (adr r2, 80098a4 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 800989e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098a2:	bf00      	nop
 80098a4:	080098e1 	.word	0x080098e1
 80098a8:	080098b5 	.word	0x080098b5
 80098ac:	080098c3 	.word	0x080098c3
 80098b0:	080098e1 	.word	0x080098e1
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098b4:	4b09      	ldr	r3, [pc, #36]	; (80098dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80098b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098b8:	4a08      	ldr	r2, [pc, #32]	; (80098dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80098ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80098c0:	e00f      	b.n	80098e2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	3304      	adds	r3, #4
 80098c6:	2102      	movs	r1, #2
 80098c8:	4618      	mov	r0, r3
 80098ca:	f000 fec1 	bl	800a650 <RCCEx_PLL2_Config>
 80098ce:	4603      	mov	r3, r0
 80098d0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80098d2:	e006      	b.n	80098e2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80098d4:	2301      	movs	r3, #1
 80098d6:	75fb      	strb	r3, [r7, #23]
      break;
 80098d8:	e003      	b.n	80098e2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 80098da:	bf00      	nop
 80098dc:	58024400 	.word	0x58024400
      break;
 80098e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80098e2:	7dfb      	ldrb	r3, [r7, #23]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d109      	bne.n	80098fc <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80098e8:	4bba      	ldr	r3, [pc, #744]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80098ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098ec:	f023 0203 	bic.w	r2, r3, #3
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098f4:	49b7      	ldr	r1, [pc, #732]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80098f6:	4313      	orrs	r3, r2
 80098f8:	64cb      	str	r3, [r1, #76]	; 0x4c
 80098fa:	e001      	b.n	8009900 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098fc:	7dfb      	ldrb	r3, [r7, #23]
 80098fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009908:	2b00      	cmp	r3, #0
 800990a:	f000 8086 	beq.w	8009a1a <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800990e:	4bb2      	ldr	r3, [pc, #712]	; (8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	4ab1      	ldr	r2, [pc, #708]	; (8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8009914:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009918:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800991a:	f7fc f8f1 	bl	8005b00 <HAL_GetTick>
 800991e:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009920:	e009      	b.n	8009936 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009922:	f7fc f8ed 	bl	8005b00 <HAL_GetTick>
 8009926:	4602      	mov	r2, r0
 8009928:	693b      	ldr	r3, [r7, #16]
 800992a:	1ad3      	subs	r3, r2, r3
 800992c:	2b64      	cmp	r3, #100	; 0x64
 800992e:	d902      	bls.n	8009936 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8009930:	2303      	movs	r3, #3
 8009932:	75fb      	strb	r3, [r7, #23]
        break;
 8009934:	e005      	b.n	8009942 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009936:	4ba8      	ldr	r3, [pc, #672]	; (8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800993e:	2b00      	cmp	r3, #0
 8009940:	d0ef      	beq.n	8009922 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8009942:	7dfb      	ldrb	r3, [r7, #23]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d166      	bne.n	8009a16 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009948:	4ba2      	ldr	r3, [pc, #648]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800994a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009952:	4053      	eors	r3, r2
 8009954:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009958:	2b00      	cmp	r3, #0
 800995a:	d013      	beq.n	8009984 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800995c:	4b9d      	ldr	r3, [pc, #628]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800995e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009960:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009964:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009966:	4b9b      	ldr	r3, [pc, #620]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800996a:	4a9a      	ldr	r2, [pc, #616]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800996c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009970:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009972:	4b98      	ldr	r3, [pc, #608]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009976:	4a97      	ldr	r2, [pc, #604]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009978:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800997c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800997e:	4a95      	ldr	r2, [pc, #596]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800998a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800998e:	d115      	bne.n	80099bc <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009990:	f7fc f8b6 	bl	8005b00 <HAL_GetTick>
 8009994:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009996:	e00b      	b.n	80099b0 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009998:	f7fc f8b2 	bl	8005b00 <HAL_GetTick>
 800999c:	4602      	mov	r2, r0
 800999e:	693b      	ldr	r3, [r7, #16]
 80099a0:	1ad3      	subs	r3, r2, r3
 80099a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d902      	bls.n	80099b0 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 80099aa:	2303      	movs	r3, #3
 80099ac:	75fb      	strb	r3, [r7, #23]
            break;
 80099ae:	e005      	b.n	80099bc <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80099b0:	4b88      	ldr	r3, [pc, #544]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80099b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099b4:	f003 0302 	and.w	r3, r3, #2
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d0ed      	beq.n	8009998 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 80099bc:	7dfb      	ldrb	r3, [r7, #23]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d126      	bne.n	8009a10 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80099c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80099cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80099d0:	d10d      	bne.n	80099ee <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80099d2:	4b80      	ldr	r3, [pc, #512]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80099d4:	691b      	ldr	r3, [r3, #16]
 80099d6:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80099e0:	0919      	lsrs	r1, r3, #4
 80099e2:	4b7e      	ldr	r3, [pc, #504]	; (8009bdc <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 80099e4:	400b      	ands	r3, r1
 80099e6:	497b      	ldr	r1, [pc, #492]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80099e8:	4313      	orrs	r3, r2
 80099ea:	610b      	str	r3, [r1, #16]
 80099ec:	e005      	b.n	80099fa <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 80099ee:	4b79      	ldr	r3, [pc, #484]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80099f0:	691b      	ldr	r3, [r3, #16]
 80099f2:	4a78      	ldr	r2, [pc, #480]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80099f4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80099f8:	6113      	str	r3, [r2, #16]
 80099fa:	4b76      	ldr	r3, [pc, #472]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80099fc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009a04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009a08:	4972      	ldr	r1, [pc, #456]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009a0a:	4313      	orrs	r3, r2
 8009a0c:	670b      	str	r3, [r1, #112]	; 0x70
 8009a0e:	e004      	b.n	8009a1a <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009a10:	7dfb      	ldrb	r3, [r7, #23]
 8009a12:	75bb      	strb	r3, [r7, #22]
 8009a14:	e001      	b.n	8009a1a <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a16:	7dfb      	ldrb	r3, [r7, #23]
 8009a18:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	f003 0301 	and.w	r3, r3, #1
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d07d      	beq.n	8009b22 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009a2a:	2b28      	cmp	r3, #40	; 0x28
 8009a2c:	d866      	bhi.n	8009afc <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8009a2e:	a201      	add	r2, pc, #4	; (adr r2, 8009a34 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8009a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a34:	08009b03 	.word	0x08009b03
 8009a38:	08009afd 	.word	0x08009afd
 8009a3c:	08009afd 	.word	0x08009afd
 8009a40:	08009afd 	.word	0x08009afd
 8009a44:	08009afd 	.word	0x08009afd
 8009a48:	08009afd 	.word	0x08009afd
 8009a4c:	08009afd 	.word	0x08009afd
 8009a50:	08009afd 	.word	0x08009afd
 8009a54:	08009ad9 	.word	0x08009ad9
 8009a58:	08009afd 	.word	0x08009afd
 8009a5c:	08009afd 	.word	0x08009afd
 8009a60:	08009afd 	.word	0x08009afd
 8009a64:	08009afd 	.word	0x08009afd
 8009a68:	08009afd 	.word	0x08009afd
 8009a6c:	08009afd 	.word	0x08009afd
 8009a70:	08009afd 	.word	0x08009afd
 8009a74:	08009aeb 	.word	0x08009aeb
 8009a78:	08009afd 	.word	0x08009afd
 8009a7c:	08009afd 	.word	0x08009afd
 8009a80:	08009afd 	.word	0x08009afd
 8009a84:	08009afd 	.word	0x08009afd
 8009a88:	08009afd 	.word	0x08009afd
 8009a8c:	08009afd 	.word	0x08009afd
 8009a90:	08009afd 	.word	0x08009afd
 8009a94:	08009b03 	.word	0x08009b03
 8009a98:	08009afd 	.word	0x08009afd
 8009a9c:	08009afd 	.word	0x08009afd
 8009aa0:	08009afd 	.word	0x08009afd
 8009aa4:	08009afd 	.word	0x08009afd
 8009aa8:	08009afd 	.word	0x08009afd
 8009aac:	08009afd 	.word	0x08009afd
 8009ab0:	08009afd 	.word	0x08009afd
 8009ab4:	08009b03 	.word	0x08009b03
 8009ab8:	08009afd 	.word	0x08009afd
 8009abc:	08009afd 	.word	0x08009afd
 8009ac0:	08009afd 	.word	0x08009afd
 8009ac4:	08009afd 	.word	0x08009afd
 8009ac8:	08009afd 	.word	0x08009afd
 8009acc:	08009afd 	.word	0x08009afd
 8009ad0:	08009afd 	.word	0x08009afd
 8009ad4:	08009b03 	.word	0x08009b03
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	3304      	adds	r3, #4
 8009adc:	2101      	movs	r1, #1
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f000 fdb6 	bl	800a650 <RCCEx_PLL2_Config>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009ae8:	e00c      	b.n	8009b04 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	3324      	adds	r3, #36	; 0x24
 8009aee:	2101      	movs	r1, #1
 8009af0:	4618      	mov	r0, r3
 8009af2:	f000 fe5f 	bl	800a7b4 <RCCEx_PLL3_Config>
 8009af6:	4603      	mov	r3, r0
 8009af8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009afa:	e003      	b.n	8009b04 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009afc:	2301      	movs	r3, #1
 8009afe:	75fb      	strb	r3, [r7, #23]
      break;
 8009b00:	e000      	b.n	8009b04 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8009b02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b04:	7dfb      	ldrb	r3, [r7, #23]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d109      	bne.n	8009b1e <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009b0a:	4b32      	ldr	r3, [pc, #200]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b0e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b16:	492f      	ldr	r1, [pc, #188]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009b18:	4313      	orrs	r3, r2
 8009b1a:	654b      	str	r3, [r1, #84]	; 0x54
 8009b1c:	e001      	b.n	8009b22 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b1e:	7dfb      	ldrb	r3, [r7, #23]
 8009b20:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f003 0302 	and.w	r3, r3, #2
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d037      	beq.n	8009b9e <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b32:	2b05      	cmp	r3, #5
 8009b34:	d820      	bhi.n	8009b78 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8009b36:	a201      	add	r2, pc, #4	; (adr r2, 8009b3c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8009b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b3c:	08009b7f 	.word	0x08009b7f
 8009b40:	08009b55 	.word	0x08009b55
 8009b44:	08009b67 	.word	0x08009b67
 8009b48:	08009b7f 	.word	0x08009b7f
 8009b4c:	08009b7f 	.word	0x08009b7f
 8009b50:	08009b7f 	.word	0x08009b7f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	3304      	adds	r3, #4
 8009b58:	2101      	movs	r1, #1
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f000 fd78 	bl	800a650 <RCCEx_PLL2_Config>
 8009b60:	4603      	mov	r3, r0
 8009b62:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009b64:	e00c      	b.n	8009b80 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	3324      	adds	r3, #36	; 0x24
 8009b6a:	2101      	movs	r1, #1
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	f000 fe21 	bl	800a7b4 <RCCEx_PLL3_Config>
 8009b72:	4603      	mov	r3, r0
 8009b74:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009b76:	e003      	b.n	8009b80 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b78:	2301      	movs	r3, #1
 8009b7a:	75fb      	strb	r3, [r7, #23]
      break;
 8009b7c:	e000      	b.n	8009b80 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8009b7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b80:	7dfb      	ldrb	r3, [r7, #23]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d109      	bne.n	8009b9a <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009b86:	4b13      	ldr	r3, [pc, #76]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b8a:	f023 0207 	bic.w	r2, r3, #7
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b92:	4910      	ldr	r1, [pc, #64]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009b94:	4313      	orrs	r3, r2
 8009b96:	654b      	str	r3, [r1, #84]	; 0x54
 8009b98:	e001      	b.n	8009b9e <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b9a:	7dfb      	ldrb	r3, [r7, #23]
 8009b9c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	f003 0304 	and.w	r3, r3, #4
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d040      	beq.n	8009c2c <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bb0:	2b05      	cmp	r3, #5
 8009bb2:	d827      	bhi.n	8009c04 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8009bb4:	a201      	add	r2, pc, #4	; (adr r2, 8009bbc <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8009bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bba:	bf00      	nop
 8009bbc:	08009c0b 	.word	0x08009c0b
 8009bc0:	08009be1 	.word	0x08009be1
 8009bc4:	08009bf3 	.word	0x08009bf3
 8009bc8:	08009c0b 	.word	0x08009c0b
 8009bcc:	08009c0b 	.word	0x08009c0b
 8009bd0:	08009c0b 	.word	0x08009c0b
 8009bd4:	58024400 	.word	0x58024400
 8009bd8:	58024800 	.word	0x58024800
 8009bdc:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	3304      	adds	r3, #4
 8009be4:	2101      	movs	r1, #1
 8009be6:	4618      	mov	r0, r3
 8009be8:	f000 fd32 	bl	800a650 <RCCEx_PLL2_Config>
 8009bec:	4603      	mov	r3, r0
 8009bee:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009bf0:	e00c      	b.n	8009c0c <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	3324      	adds	r3, #36	; 0x24
 8009bf6:	2101      	movs	r1, #1
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f000 fddb 	bl	800a7b4 <RCCEx_PLL3_Config>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009c02:	e003      	b.n	8009c0c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c04:	2301      	movs	r3, #1
 8009c06:	75fb      	strb	r3, [r7, #23]
      break;
 8009c08:	e000      	b.n	8009c0c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8009c0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c0c:	7dfb      	ldrb	r3, [r7, #23]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d10a      	bne.n	8009c28 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009c12:	4bb2      	ldr	r3, [pc, #712]	; (8009edc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c16:	f023 0207 	bic.w	r2, r3, #7
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c20:	49ae      	ldr	r1, [pc, #696]	; (8009edc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009c22:	4313      	orrs	r3, r2
 8009c24:	658b      	str	r3, [r1, #88]	; 0x58
 8009c26:	e001      	b.n	8009c2c <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c28:	7dfb      	ldrb	r3, [r7, #23]
 8009c2a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f003 0320 	and.w	r3, r3, #32
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d044      	beq.n	8009cc2 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c42:	d01b      	beq.n	8009c7c <HAL_RCCEx_PeriphCLKConfig+0x964>
 8009c44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c48:	d805      	bhi.n	8009c56 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d022      	beq.n	8009c94 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8009c4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009c52:	d00a      	beq.n	8009c6a <HAL_RCCEx_PeriphCLKConfig+0x952>
 8009c54:	e01b      	b.n	8009c8e <HAL_RCCEx_PeriphCLKConfig+0x976>
 8009c56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c5a:	d01d      	beq.n	8009c98 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8009c5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009c60:	d01c      	beq.n	8009c9c <HAL_RCCEx_PeriphCLKConfig+0x984>
 8009c62:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009c66:	d01b      	beq.n	8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8009c68:	e011      	b.n	8009c8e <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	3304      	adds	r3, #4
 8009c6e:	2100      	movs	r1, #0
 8009c70:	4618      	mov	r0, r3
 8009c72:	f000 fced 	bl	800a650 <RCCEx_PLL2_Config>
 8009c76:	4603      	mov	r3, r0
 8009c78:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009c7a:	e012      	b.n	8009ca2 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	3324      	adds	r3, #36	; 0x24
 8009c80:	2102      	movs	r1, #2
 8009c82:	4618      	mov	r0, r3
 8009c84:	f000 fd96 	bl	800a7b4 <RCCEx_PLL3_Config>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009c8c:	e009      	b.n	8009ca2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c8e:	2301      	movs	r3, #1
 8009c90:	75fb      	strb	r3, [r7, #23]
      break;
 8009c92:	e006      	b.n	8009ca2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8009c94:	bf00      	nop
 8009c96:	e004      	b.n	8009ca2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8009c98:	bf00      	nop
 8009c9a:	e002      	b.n	8009ca2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8009c9c:	bf00      	nop
 8009c9e:	e000      	b.n	8009ca2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8009ca0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ca2:	7dfb      	ldrb	r3, [r7, #23]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d10a      	bne.n	8009cbe <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009ca8:	4b8c      	ldr	r3, [pc, #560]	; (8009edc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cac:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009cb6:	4989      	ldr	r1, [pc, #548]	; (8009edc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009cb8:	4313      	orrs	r3, r2
 8009cba:	654b      	str	r3, [r1, #84]	; 0x54
 8009cbc:	e001      	b.n	8009cc2 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cbe:	7dfb      	ldrb	r3, [r7, #23]
 8009cc0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d044      	beq.n	8009d58 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009cd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009cd8:	d01b      	beq.n	8009d12 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8009cda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009cde:	d805      	bhi.n	8009cec <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d022      	beq.n	8009d2a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8009ce4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ce8:	d00a      	beq.n	8009d00 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8009cea:	e01b      	b.n	8009d24 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8009cec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cf0:	d01d      	beq.n	8009d2e <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8009cf2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009cf6:	d01c      	beq.n	8009d32 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8009cf8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009cfc:	d01b      	beq.n	8009d36 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8009cfe:	e011      	b.n	8009d24 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	3304      	adds	r3, #4
 8009d04:	2100      	movs	r1, #0
 8009d06:	4618      	mov	r0, r3
 8009d08:	f000 fca2 	bl	800a650 <RCCEx_PLL2_Config>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009d10:	e012      	b.n	8009d38 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	3324      	adds	r3, #36	; 0x24
 8009d16:	2102      	movs	r1, #2
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f000 fd4b 	bl	800a7b4 <RCCEx_PLL3_Config>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009d22:	e009      	b.n	8009d38 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009d24:	2301      	movs	r3, #1
 8009d26:	75fb      	strb	r3, [r7, #23]
      break;
 8009d28:	e006      	b.n	8009d38 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8009d2a:	bf00      	nop
 8009d2c:	e004      	b.n	8009d38 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8009d2e:	bf00      	nop
 8009d30:	e002      	b.n	8009d38 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8009d32:	bf00      	nop
 8009d34:	e000      	b.n	8009d38 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8009d36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009d38:	7dfb      	ldrb	r3, [r7, #23]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d10a      	bne.n	8009d54 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009d3e:	4b67      	ldr	r3, [pc, #412]	; (8009edc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d42:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009d4c:	4963      	ldr	r1, [pc, #396]	; (8009edc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009d4e:	4313      	orrs	r3, r2
 8009d50:	658b      	str	r3, [r1, #88]	; 0x58
 8009d52:	e001      	b.n	8009d58 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d54:	7dfb      	ldrb	r3, [r7, #23]
 8009d56:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d044      	beq.n	8009dee <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009d6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009d6e:	d01b      	beq.n	8009da8 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8009d70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009d74:	d805      	bhi.n	8009d82 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d022      	beq.n	8009dc0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8009d7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d7e:	d00a      	beq.n	8009d96 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8009d80:	e01b      	b.n	8009dba <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8009d82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d86:	d01d      	beq.n	8009dc4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8009d88:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009d8c:	d01c      	beq.n	8009dc8 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8009d8e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009d92:	d01b      	beq.n	8009dcc <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8009d94:	e011      	b.n	8009dba <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	3304      	adds	r3, #4
 8009d9a:	2100      	movs	r1, #0
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	f000 fc57 	bl	800a650 <RCCEx_PLL2_Config>
 8009da2:	4603      	mov	r3, r0
 8009da4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009da6:	e012      	b.n	8009dce <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	3324      	adds	r3, #36	; 0x24
 8009dac:	2102      	movs	r1, #2
 8009dae:	4618      	mov	r0, r3
 8009db0:	f000 fd00 	bl	800a7b4 <RCCEx_PLL3_Config>
 8009db4:	4603      	mov	r3, r0
 8009db6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009db8:	e009      	b.n	8009dce <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009dba:	2301      	movs	r3, #1
 8009dbc:	75fb      	strb	r3, [r7, #23]
      break;
 8009dbe:	e006      	b.n	8009dce <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8009dc0:	bf00      	nop
 8009dc2:	e004      	b.n	8009dce <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8009dc4:	bf00      	nop
 8009dc6:	e002      	b.n	8009dce <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8009dc8:	bf00      	nop
 8009dca:	e000      	b.n	8009dce <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8009dcc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009dce:	7dfb      	ldrb	r3, [r7, #23]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d10a      	bne.n	8009dea <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009dd4:	4b41      	ldr	r3, [pc, #260]	; (8009edc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dd8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009de2:	493e      	ldr	r1, [pc, #248]	; (8009edc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009de4:	4313      	orrs	r3, r2
 8009de6:	658b      	str	r3, [r1, #88]	; 0x58
 8009de8:	e001      	b.n	8009dee <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dea:	7dfb      	ldrb	r3, [r7, #23]
 8009dec:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	f003 0308 	and.w	r3, r3, #8
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d01a      	beq.n	8009e30 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009e00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e04:	d10a      	bne.n	8009e1c <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	3324      	adds	r3, #36	; 0x24
 8009e0a:	2102      	movs	r1, #2
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	f000 fcd1 	bl	800a7b4 <RCCEx_PLL3_Config>
 8009e12:	4603      	mov	r3, r0
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d001      	beq.n	8009e1c <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8009e18:	2301      	movs	r3, #1
 8009e1a:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009e1c:	4b2f      	ldr	r3, [pc, #188]	; (8009edc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e20:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009e2a:	492c      	ldr	r1, [pc, #176]	; (8009edc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009e2c:	4313      	orrs	r3, r2
 8009e2e:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	f003 0310 	and.w	r3, r3, #16
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d01a      	beq.n	8009e72 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009e42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e46:	d10a      	bne.n	8009e5e <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	3324      	adds	r3, #36	; 0x24
 8009e4c:	2102      	movs	r1, #2
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f000 fcb0 	bl	800a7b4 <RCCEx_PLL3_Config>
 8009e54:	4603      	mov	r3, r0
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d001      	beq.n	8009e5e <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009e5e:	4b1f      	ldr	r3, [pc, #124]	; (8009edc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e62:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009e6c:	491b      	ldr	r1, [pc, #108]	; (8009edc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009e6e:	4313      	orrs	r3, r2
 8009e70:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d032      	beq.n	8009ee4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009e84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e88:	d00d      	beq.n	8009ea6 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8009e8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009e8e:	d016      	beq.n	8009ebe <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d111      	bne.n	8009eb8 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	3304      	adds	r3, #4
 8009e98:	2100      	movs	r1, #0
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f000 fbd8 	bl	800a650 <RCCEx_PLL2_Config>
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009ea4:	e00c      	b.n	8009ec0 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	3324      	adds	r3, #36	; 0x24
 8009eaa:	2102      	movs	r1, #2
 8009eac:	4618      	mov	r0, r3
 8009eae:	f000 fc81 	bl	800a7b4 <RCCEx_PLL3_Config>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009eb6:	e003      	b.n	8009ec0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009eb8:	2301      	movs	r3, #1
 8009eba:	75fb      	strb	r3, [r7, #23]
      break;
 8009ebc:	e000      	b.n	8009ec0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8009ebe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ec0:	7dfb      	ldrb	r3, [r7, #23]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d10c      	bne.n	8009ee0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009ec6:	4b05      	ldr	r3, [pc, #20]	; (8009edc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009eca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009ed4:	4901      	ldr	r1, [pc, #4]	; (8009edc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009ed6:	4313      	orrs	r3, r2
 8009ed8:	658b      	str	r3, [r1, #88]	; 0x58
 8009eda:	e003      	b.n	8009ee4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8009edc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ee0:	7dfb      	ldrb	r3, [r7, #23]
 8009ee2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d02f      	beq.n	8009f50 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ef6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009efa:	d00c      	beq.n	8009f16 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8009efc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009f00:	d015      	beq.n	8009f2e <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8009f02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009f06:	d10f      	bne.n	8009f28 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f08:	4b79      	ldr	r3, [pc, #484]	; (800a0f0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f0c:	4a78      	ldr	r2, [pc, #480]	; (800a0f0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009f0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f12:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8009f14:	e00c      	b.n	8009f30 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	3324      	adds	r3, #36	; 0x24
 8009f1a:	2101      	movs	r1, #1
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	f000 fc49 	bl	800a7b4 <RCCEx_PLL3_Config>
 8009f22:	4603      	mov	r3, r0
 8009f24:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009f26:	e003      	b.n	8009f30 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009f28:	2301      	movs	r3, #1
 8009f2a:	75fb      	strb	r3, [r7, #23]
      break;
 8009f2c:	e000      	b.n	8009f30 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8009f2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f30:	7dfb      	ldrb	r3, [r7, #23]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d10a      	bne.n	8009f4c <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009f36:	4b6e      	ldr	r3, [pc, #440]	; (800a0f0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f3a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f44:	496a      	ldr	r1, [pc, #424]	; (800a0f0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009f46:	4313      	orrs	r3, r2
 8009f48:	654b      	str	r3, [r1, #84]	; 0x54
 8009f4a:	e001      	b.n	8009f50 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f4c:	7dfb      	ldrb	r3, [r7, #23]
 8009f4e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d029      	beq.n	8009fb0 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d003      	beq.n	8009f6c <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8009f64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f68:	d007      	beq.n	8009f7a <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8009f6a:	e00f      	b.n	8009f8c <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f6c:	4b60      	ldr	r3, [pc, #384]	; (800a0f0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f70:	4a5f      	ldr	r2, [pc, #380]	; (800a0f0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009f72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f76:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009f78:	e00b      	b.n	8009f92 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	3304      	adds	r3, #4
 8009f7e:	2102      	movs	r1, #2
 8009f80:	4618      	mov	r0, r3
 8009f82:	f000 fb65 	bl	800a650 <RCCEx_PLL2_Config>
 8009f86:	4603      	mov	r3, r0
 8009f88:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009f8a:	e002      	b.n	8009f92 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8009f8c:	2301      	movs	r3, #1
 8009f8e:	75fb      	strb	r3, [r7, #23]
      break;
 8009f90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f92:	7dfb      	ldrb	r3, [r7, #23]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d109      	bne.n	8009fac <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009f98:	4b55      	ldr	r3, [pc, #340]	; (800a0f0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009f9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f9c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fa4:	4952      	ldr	r1, [pc, #328]	; (800a0f0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009fa6:	4313      	orrs	r3, r2
 8009fa8:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009faa:	e001      	b.n	8009fb0 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fac:	7dfb      	ldrb	r3, [r7, #23]
 8009fae:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d00a      	beq.n	8009fd2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	3324      	adds	r3, #36	; 0x24
 8009fc0:	2102      	movs	r1, #2
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f000 fbf6 	bl	800a7b4 <RCCEx_PLL3_Config>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d001      	beq.n	8009fd2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8009fce:	2301      	movs	r3, #1
 8009fd0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d02f      	beq.n	800a03e <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009fe2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fe6:	d00c      	beq.n	800a002 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8009fe8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fec:	d802      	bhi.n	8009ff4 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d011      	beq.n	800a016 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8009ff2:	e00d      	b.n	800a010 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8009ff4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ff8:	d00f      	beq.n	800a01a <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8009ffa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009ffe:	d00e      	beq.n	800a01e <HAL_RCCEx_PeriphCLKConfig+0xd06>
 800a000:	e006      	b.n	800a010 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a002:	4b3b      	ldr	r3, [pc, #236]	; (800a0f0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a006:	4a3a      	ldr	r2, [pc, #232]	; (800a0f0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a008:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a00c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800a00e:	e007      	b.n	800a020 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a010:	2301      	movs	r3, #1
 800a012:	75fb      	strb	r3, [r7, #23]
      break;
 800a014:	e004      	b.n	800a020 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800a016:	bf00      	nop
 800a018:	e002      	b.n	800a020 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800a01a:	bf00      	nop
 800a01c:	e000      	b.n	800a020 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800a01e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a020:	7dfb      	ldrb	r3, [r7, #23]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d109      	bne.n	800a03a <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a026:	4b32      	ldr	r3, [pc, #200]	; (800a0f0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a02a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a032:	492f      	ldr	r1, [pc, #188]	; (800a0f0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a034:	4313      	orrs	r3, r2
 800a036:	654b      	str	r3, [r1, #84]	; 0x54
 800a038:	e001      	b.n	800a03e <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a03a:	7dfb      	ldrb	r3, [r7, #23]
 800a03c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a046:	2b00      	cmp	r3, #0
 800a048:	d008      	beq.n	800a05c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a04a:	4b29      	ldr	r3, [pc, #164]	; (800a0f0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a04c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a04e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a056:	4926      	ldr	r1, [pc, #152]	; (800a0f0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a058:	4313      	orrs	r3, r2
 800a05a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a064:	2b00      	cmp	r3, #0
 800a066:	d009      	beq.n	800a07c <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a068:	4b21      	ldr	r3, [pc, #132]	; (800a0f0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a06a:	691b      	ldr	r3, [r3, #16]
 800a06c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a076:	491e      	ldr	r1, [pc, #120]	; (800a0f0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a078:	4313      	orrs	r3, r2
 800a07a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a084:	2b00      	cmp	r3, #0
 800a086:	d008      	beq.n	800a09a <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a088:	4b19      	ldr	r3, [pc, #100]	; (800a0f0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a08a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a08c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a094:	4916      	ldr	r1, [pc, #88]	; (800a0f0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a096:	4313      	orrs	r3, r2
 800a098:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d00d      	beq.n	800a0c2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a0a6:	4b12      	ldr	r3, [pc, #72]	; (800a0f0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a0a8:	691b      	ldr	r3, [r3, #16]
 800a0aa:	4a11      	ldr	r2, [pc, #68]	; (800a0f0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a0ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a0b0:	6113      	str	r3, [r2, #16]
 800a0b2:	4b0f      	ldr	r3, [pc, #60]	; (800a0f0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a0b4:	691a      	ldr	r2, [r3, #16]
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a0bc:	490c      	ldr	r1, [pc, #48]	; (800a0f0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a0be:	4313      	orrs	r3, r2
 800a0c0:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	da08      	bge.n	800a0dc <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a0ca:	4b09      	ldr	r3, [pc, #36]	; (800a0f0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a0cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0ce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0d6:	4906      	ldr	r1, [pc, #24]	; (800a0f0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a0d8:	4313      	orrs	r3, r2
 800a0da:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 800a0dc:	7dbb      	ldrb	r3, [r7, #22]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d101      	bne.n	800a0e6 <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	e000      	b.n	800a0e8 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 800a0e6:	2301      	movs	r3, #1
}
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	3718      	adds	r7, #24
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	bd80      	pop	{r7, pc}
 800a0f0:	58024400 	.word	0x58024400

0800a0f4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a0f8:	f7ff f8b2 	bl	8009260 <HAL_RCC_GetHCLKFreq>
 800a0fc:	4601      	mov	r1, r0
 800a0fe:	4b06      	ldr	r3, [pc, #24]	; (800a118 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a100:	6a1b      	ldr	r3, [r3, #32]
 800a102:	091b      	lsrs	r3, r3, #4
 800a104:	f003 0307 	and.w	r3, r3, #7
 800a108:	4a04      	ldr	r2, [pc, #16]	; (800a11c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a10a:	5cd3      	ldrb	r3, [r2, r3]
 800a10c:	f003 031f 	and.w	r3, r3, #31
 800a110:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a114:	4618      	mov	r0, r3
 800a116:	bd80      	pop	{r7, pc}
 800a118:	58024400 	.word	0x58024400
 800a11c:	080157bc 	.word	0x080157bc

0800a120 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800a120:	b480      	push	{r7}
 800a122:	b089      	sub	sp, #36	; 0x24
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a128:	4b9d      	ldr	r3, [pc, #628]	; (800a3a0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a12a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a12c:	f003 0303 	and.w	r3, r3, #3
 800a130:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800a132:	4b9b      	ldr	r3, [pc, #620]	; (800a3a0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a136:	0b1b      	lsrs	r3, r3, #12
 800a138:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a13c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a13e:	4b98      	ldr	r3, [pc, #608]	; (800a3a0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a142:	091b      	lsrs	r3, r3, #4
 800a144:	f003 0301 	and.w	r3, r3, #1
 800a148:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800a14a:	4b95      	ldr	r3, [pc, #596]	; (800a3a0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a14c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a14e:	08db      	lsrs	r3, r3, #3
 800a150:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a154:	693a      	ldr	r2, [r7, #16]
 800a156:	fb02 f303 	mul.w	r3, r2, r3
 800a15a:	ee07 3a90 	vmov	s15, r3
 800a15e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a162:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a166:	697b      	ldr	r3, [r7, #20]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	f000 810a 	beq.w	800a382 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 800a16e:	69bb      	ldr	r3, [r7, #24]
 800a170:	2b01      	cmp	r3, #1
 800a172:	d05a      	beq.n	800a22a <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 800a174:	2b01      	cmp	r3, #1
 800a176:	d302      	bcc.n	800a17e <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 800a178:	2b02      	cmp	r3, #2
 800a17a:	d078      	beq.n	800a26e <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 800a17c:	e099      	b.n	800a2b2 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a17e:	4b88      	ldr	r3, [pc, #544]	; (800a3a0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	f003 0320 	and.w	r3, r3, #32
 800a186:	2b00      	cmp	r3, #0
 800a188:	d02d      	beq.n	800a1e6 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a18a:	4b85      	ldr	r3, [pc, #532]	; (800a3a0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	08db      	lsrs	r3, r3, #3
 800a190:	f003 0303 	and.w	r3, r3, #3
 800a194:	4a83      	ldr	r2, [pc, #524]	; (800a3a4 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800a196:	fa22 f303 	lsr.w	r3, r2, r3
 800a19a:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	ee07 3a90 	vmov	s15, r3
 800a1a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1a6:	697b      	ldr	r3, [r7, #20]
 800a1a8:	ee07 3a90 	vmov	s15, r3
 800a1ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1b4:	4b7a      	ldr	r3, [pc, #488]	; (800a3a0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a1b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1bc:	ee07 3a90 	vmov	s15, r3
 800a1c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1c4:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1c8:	eddf 5a77 	vldr	s11, [pc, #476]	; 800a3a8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800a1cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a1d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1e0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a1e4:	e087      	b.n	800a2f6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a1e6:	697b      	ldr	r3, [r7, #20]
 800a1e8:	ee07 3a90 	vmov	s15, r3
 800a1ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1f0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800a3ac <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 800a1f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1f8:	4b69      	ldr	r3, [pc, #420]	; (800a3a0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a1fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a200:	ee07 3a90 	vmov	s15, r3
 800a204:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a208:	ed97 6a03 	vldr	s12, [r7, #12]
 800a20c:	eddf 5a66 	vldr	s11, [pc, #408]	; 800a3a8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800a210:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a214:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a218:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a21c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a220:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a224:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a228:	e065      	b.n	800a2f6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a22a:	697b      	ldr	r3, [r7, #20]
 800a22c:	ee07 3a90 	vmov	s15, r3
 800a230:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a234:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800a3b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800a238:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a23c:	4b58      	ldr	r3, [pc, #352]	; (800a3a0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a23e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a240:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a244:	ee07 3a90 	vmov	s15, r3
 800a248:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a24c:	ed97 6a03 	vldr	s12, [r7, #12]
 800a250:	eddf 5a55 	vldr	s11, [pc, #340]	; 800a3a8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800a254:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a258:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a25c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a260:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a264:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a268:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a26c:	e043      	b.n	800a2f6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	ee07 3a90 	vmov	s15, r3
 800a274:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a278:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800a3b4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 800a27c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a280:	4b47      	ldr	r3, [pc, #284]	; (800a3a0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a284:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a288:	ee07 3a90 	vmov	s15, r3
 800a28c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a290:	ed97 6a03 	vldr	s12, [r7, #12]
 800a294:	eddf 5a44 	vldr	s11, [pc, #272]	; 800a3a8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800a298:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a29c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a2a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2ac:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a2b0:	e021      	b.n	800a2f6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a2b2:	697b      	ldr	r3, [r7, #20]
 800a2b4:	ee07 3a90 	vmov	s15, r3
 800a2b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2bc:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800a3b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800a2c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2c4:	4b36      	ldr	r3, [pc, #216]	; (800a3a0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a2c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2cc:	ee07 3a90 	vmov	s15, r3
 800a2d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2d4:	ed97 6a03 	vldr	s12, [r7, #12]
 800a2d8:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a3a8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800a2dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a2e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2f0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a2f4:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800a2f6:	4b2a      	ldr	r3, [pc, #168]	; (800a3a0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a2f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2fa:	0a5b      	lsrs	r3, r3, #9
 800a2fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a300:	ee07 3a90 	vmov	s15, r3
 800a304:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a308:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a30c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a310:	edd7 6a07 	vldr	s13, [r7, #28]
 800a314:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a318:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a31c:	ee17 2a90 	vmov	r2, s15
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800a324:	4b1e      	ldr	r3, [pc, #120]	; (800a3a0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a328:	0c1b      	lsrs	r3, r3, #16
 800a32a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a32e:	ee07 3a90 	vmov	s15, r3
 800a332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a336:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a33a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a33e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a342:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a346:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a34a:	ee17 2a90 	vmov	r2, s15
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800a352:	4b13      	ldr	r3, [pc, #76]	; (800a3a0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a356:	0e1b      	lsrs	r3, r3, #24
 800a358:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a35c:	ee07 3a90 	vmov	s15, r3
 800a360:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a364:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a368:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a36c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a370:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a374:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a378:	ee17 2a90 	vmov	r2, s15
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a380:	e008      	b.n	800a394 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2200      	movs	r2, #0
 800a386:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2200      	movs	r2, #0
 800a38c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	2200      	movs	r2, #0
 800a392:	609a      	str	r2, [r3, #8]
}
 800a394:	bf00      	nop
 800a396:	3724      	adds	r7, #36	; 0x24
 800a398:	46bd      	mov	sp, r7
 800a39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39e:	4770      	bx	lr
 800a3a0:	58024400 	.word	0x58024400
 800a3a4:	03d09000 	.word	0x03d09000
 800a3a8:	46000000 	.word	0x46000000
 800a3ac:	4c742400 	.word	0x4c742400
 800a3b0:	4a742400 	.word	0x4a742400
 800a3b4:	4af42400 	.word	0x4af42400

0800a3b8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800a3b8:	b480      	push	{r7}
 800a3ba:	b089      	sub	sp, #36	; 0x24
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a3c0:	4b9d      	ldr	r3, [pc, #628]	; (800a638 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a3c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3c4:	f003 0303 	and.w	r3, r3, #3
 800a3c8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800a3ca:	4b9b      	ldr	r3, [pc, #620]	; (800a638 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a3cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3ce:	0d1b      	lsrs	r3, r3, #20
 800a3d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a3d4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a3d6:	4b98      	ldr	r3, [pc, #608]	; (800a638 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a3d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3da:	0a1b      	lsrs	r3, r3, #8
 800a3dc:	f003 0301 	and.w	r3, r3, #1
 800a3e0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a3e2:	4b95      	ldr	r3, [pc, #596]	; (800a638 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a3e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3e6:	08db      	lsrs	r3, r3, #3
 800a3e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a3ec:	693a      	ldr	r2, [r7, #16]
 800a3ee:	fb02 f303 	mul.w	r3, r2, r3
 800a3f2:	ee07 3a90 	vmov	s15, r3
 800a3f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3fa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a3fe:	697b      	ldr	r3, [r7, #20]
 800a400:	2b00      	cmp	r3, #0
 800a402:	f000 810a 	beq.w	800a61a <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800a406:	69bb      	ldr	r3, [r7, #24]
 800a408:	2b01      	cmp	r3, #1
 800a40a:	d05a      	beq.n	800a4c2 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 800a40c:	2b01      	cmp	r3, #1
 800a40e:	d302      	bcc.n	800a416 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 800a410:	2b02      	cmp	r3, #2
 800a412:	d078      	beq.n	800a506 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 800a414:	e099      	b.n	800a54a <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a416:	4b88      	ldr	r3, [pc, #544]	; (800a638 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	f003 0320 	and.w	r3, r3, #32
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d02d      	beq.n	800a47e <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a422:	4b85      	ldr	r3, [pc, #532]	; (800a638 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	08db      	lsrs	r3, r3, #3
 800a428:	f003 0303 	and.w	r3, r3, #3
 800a42c:	4a83      	ldr	r2, [pc, #524]	; (800a63c <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 800a42e:	fa22 f303 	lsr.w	r3, r2, r3
 800a432:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	ee07 3a90 	vmov	s15, r3
 800a43a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a43e:	697b      	ldr	r3, [r7, #20]
 800a440:	ee07 3a90 	vmov	s15, r3
 800a444:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a448:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a44c:	4b7a      	ldr	r3, [pc, #488]	; (800a638 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a44e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a450:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a454:	ee07 3a90 	vmov	s15, r3
 800a458:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a45c:	ed97 6a03 	vldr	s12, [r7, #12]
 800a460:	eddf 5a77 	vldr	s11, [pc, #476]	; 800a640 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800a464:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a468:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a46c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a470:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a474:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a478:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a47c:	e087      	b.n	800a58e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a47e:	697b      	ldr	r3, [r7, #20]
 800a480:	ee07 3a90 	vmov	s15, r3
 800a484:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a488:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800a644 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 800a48c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a490:	4b69      	ldr	r3, [pc, #420]	; (800a638 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a494:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a498:	ee07 3a90 	vmov	s15, r3
 800a49c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4a0:	ed97 6a03 	vldr	s12, [r7, #12]
 800a4a4:	eddf 5a66 	vldr	s11, [pc, #408]	; 800a640 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800a4a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a4b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4bc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a4c0:	e065      	b.n	800a58e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a4c2:	697b      	ldr	r3, [r7, #20]
 800a4c4:	ee07 3a90 	vmov	s15, r3
 800a4c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4cc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800a648 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800a4d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4d4:	4b58      	ldr	r3, [pc, #352]	; (800a638 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a4d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4dc:	ee07 3a90 	vmov	s15, r3
 800a4e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4e4:	ed97 6a03 	vldr	s12, [r7, #12]
 800a4e8:	eddf 5a55 	vldr	s11, [pc, #340]	; 800a640 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800a4ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a4f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a500:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a504:	e043      	b.n	800a58e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a506:	697b      	ldr	r3, [r7, #20]
 800a508:	ee07 3a90 	vmov	s15, r3
 800a50c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a510:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800a64c <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 800a514:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a518:	4b47      	ldr	r3, [pc, #284]	; (800a638 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a51a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a51c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a520:	ee07 3a90 	vmov	s15, r3
 800a524:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a528:	ed97 6a03 	vldr	s12, [r7, #12]
 800a52c:	eddf 5a44 	vldr	s11, [pc, #272]	; 800a640 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800a530:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a534:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a538:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a53c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a540:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a544:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a548:	e021      	b.n	800a58e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a54a:	697b      	ldr	r3, [r7, #20]
 800a54c:	ee07 3a90 	vmov	s15, r3
 800a550:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a554:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800a648 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800a558:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a55c:	4b36      	ldr	r3, [pc, #216]	; (800a638 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a55e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a560:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a564:	ee07 3a90 	vmov	s15, r3
 800a568:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a56c:	ed97 6a03 	vldr	s12, [r7, #12]
 800a570:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a640 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800a574:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a578:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a57c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a580:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a584:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a588:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a58c:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800a58e:	4b2a      	ldr	r3, [pc, #168]	; (800a638 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a592:	0a5b      	lsrs	r3, r3, #9
 800a594:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a598:	ee07 3a90 	vmov	s15, r3
 800a59c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a5a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a5a8:	edd7 6a07 	vldr	s13, [r7, #28]
 800a5ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a5b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a5b4:	ee17 2a90 	vmov	r2, s15
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800a5bc:	4b1e      	ldr	r3, [pc, #120]	; (800a638 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a5be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5c0:	0c1b      	lsrs	r3, r3, #16
 800a5c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a5c6:	ee07 3a90 	vmov	s15, r3
 800a5ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a5d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a5d6:	edd7 6a07 	vldr	s13, [r7, #28]
 800a5da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a5de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a5e2:	ee17 2a90 	vmov	r2, s15
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800a5ea:	4b13      	ldr	r3, [pc, #76]	; (800a638 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a5ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5ee:	0e1b      	lsrs	r3, r3, #24
 800a5f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a5f4:	ee07 3a90 	vmov	s15, r3
 800a5f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a600:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a604:	edd7 6a07 	vldr	s13, [r7, #28]
 800a608:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a60c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a610:	ee17 2a90 	vmov	r2, s15
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a618:	e008      	b.n	800a62c <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	2200      	movs	r2, #0
 800a61e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2200      	movs	r2, #0
 800a624:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2200      	movs	r2, #0
 800a62a:	609a      	str	r2, [r3, #8]
}
 800a62c:	bf00      	nop
 800a62e:	3724      	adds	r7, #36	; 0x24
 800a630:	46bd      	mov	sp, r7
 800a632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a636:	4770      	bx	lr
 800a638:	58024400 	.word	0x58024400
 800a63c:	03d09000 	.word	0x03d09000
 800a640:	46000000 	.word	0x46000000
 800a644:	4c742400 	.word	0x4c742400
 800a648:	4a742400 	.word	0x4a742400
 800a64c:	4af42400 	.word	0x4af42400

0800a650 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b084      	sub	sp, #16
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
 800a658:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a65a:	2300      	movs	r3, #0
 800a65c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a65e:	4b53      	ldr	r3, [pc, #332]	; (800a7ac <RCCEx_PLL2_Config+0x15c>)
 800a660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a662:	f003 0303 	and.w	r3, r3, #3
 800a666:	2b03      	cmp	r3, #3
 800a668:	d101      	bne.n	800a66e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a66a:	2301      	movs	r3, #1
 800a66c:	e099      	b.n	800a7a2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a66e:	4b4f      	ldr	r3, [pc, #316]	; (800a7ac <RCCEx_PLL2_Config+0x15c>)
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	4a4e      	ldr	r2, [pc, #312]	; (800a7ac <RCCEx_PLL2_Config+0x15c>)
 800a674:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a678:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a67a:	f7fb fa41 	bl	8005b00 <HAL_GetTick>
 800a67e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a680:	e008      	b.n	800a694 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a682:	f7fb fa3d 	bl	8005b00 <HAL_GetTick>
 800a686:	4602      	mov	r2, r0
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	1ad3      	subs	r3, r2, r3
 800a68c:	2b02      	cmp	r3, #2
 800a68e:	d901      	bls.n	800a694 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a690:	2303      	movs	r3, #3
 800a692:	e086      	b.n	800a7a2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a694:	4b45      	ldr	r3, [pc, #276]	; (800a7ac <RCCEx_PLL2_Config+0x15c>)
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d1f0      	bne.n	800a682 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a6a0:	4b42      	ldr	r3, [pc, #264]	; (800a7ac <RCCEx_PLL2_Config+0x15c>)
 800a6a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6a4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	031b      	lsls	r3, r3, #12
 800a6ae:	493f      	ldr	r1, [pc, #252]	; (800a7ac <RCCEx_PLL2_Config+0x15c>)
 800a6b0:	4313      	orrs	r3, r2
 800a6b2:	628b      	str	r3, [r1, #40]	; 0x28
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	685b      	ldr	r3, [r3, #4]
 800a6b8:	3b01      	subs	r3, #1
 800a6ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	689b      	ldr	r3, [r3, #8]
 800a6c2:	3b01      	subs	r3, #1
 800a6c4:	025b      	lsls	r3, r3, #9
 800a6c6:	b29b      	uxth	r3, r3
 800a6c8:	431a      	orrs	r2, r3
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	68db      	ldr	r3, [r3, #12]
 800a6ce:	3b01      	subs	r3, #1
 800a6d0:	041b      	lsls	r3, r3, #16
 800a6d2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a6d6:	431a      	orrs	r2, r3
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	691b      	ldr	r3, [r3, #16]
 800a6dc:	3b01      	subs	r3, #1
 800a6de:	061b      	lsls	r3, r3, #24
 800a6e0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a6e4:	4931      	ldr	r1, [pc, #196]	; (800a7ac <RCCEx_PLL2_Config+0x15c>)
 800a6e6:	4313      	orrs	r3, r2
 800a6e8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a6ea:	4b30      	ldr	r3, [pc, #192]	; (800a7ac <RCCEx_PLL2_Config+0x15c>)
 800a6ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	695b      	ldr	r3, [r3, #20]
 800a6f6:	492d      	ldr	r1, [pc, #180]	; (800a7ac <RCCEx_PLL2_Config+0x15c>)
 800a6f8:	4313      	orrs	r3, r2
 800a6fa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a6fc:	4b2b      	ldr	r3, [pc, #172]	; (800a7ac <RCCEx_PLL2_Config+0x15c>)
 800a6fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a700:	f023 0220 	bic.w	r2, r3, #32
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	699b      	ldr	r3, [r3, #24]
 800a708:	4928      	ldr	r1, [pc, #160]	; (800a7ac <RCCEx_PLL2_Config+0x15c>)
 800a70a:	4313      	orrs	r3, r2
 800a70c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a70e:	4b27      	ldr	r3, [pc, #156]	; (800a7ac <RCCEx_PLL2_Config+0x15c>)
 800a710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a712:	4a26      	ldr	r2, [pc, #152]	; (800a7ac <RCCEx_PLL2_Config+0x15c>)
 800a714:	f023 0310 	bic.w	r3, r3, #16
 800a718:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a71a:	4b24      	ldr	r3, [pc, #144]	; (800a7ac <RCCEx_PLL2_Config+0x15c>)
 800a71c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a71e:	4b24      	ldr	r3, [pc, #144]	; (800a7b0 <RCCEx_PLL2_Config+0x160>)
 800a720:	4013      	ands	r3, r2
 800a722:	687a      	ldr	r2, [r7, #4]
 800a724:	69d2      	ldr	r2, [r2, #28]
 800a726:	00d2      	lsls	r2, r2, #3
 800a728:	4920      	ldr	r1, [pc, #128]	; (800a7ac <RCCEx_PLL2_Config+0x15c>)
 800a72a:	4313      	orrs	r3, r2
 800a72c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a72e:	4b1f      	ldr	r3, [pc, #124]	; (800a7ac <RCCEx_PLL2_Config+0x15c>)
 800a730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a732:	4a1e      	ldr	r2, [pc, #120]	; (800a7ac <RCCEx_PLL2_Config+0x15c>)
 800a734:	f043 0310 	orr.w	r3, r3, #16
 800a738:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d106      	bne.n	800a74e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a740:	4b1a      	ldr	r3, [pc, #104]	; (800a7ac <RCCEx_PLL2_Config+0x15c>)
 800a742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a744:	4a19      	ldr	r2, [pc, #100]	; (800a7ac <RCCEx_PLL2_Config+0x15c>)
 800a746:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a74a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a74c:	e00f      	b.n	800a76e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	2b01      	cmp	r3, #1
 800a752:	d106      	bne.n	800a762 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a754:	4b15      	ldr	r3, [pc, #84]	; (800a7ac <RCCEx_PLL2_Config+0x15c>)
 800a756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a758:	4a14      	ldr	r2, [pc, #80]	; (800a7ac <RCCEx_PLL2_Config+0x15c>)
 800a75a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a75e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a760:	e005      	b.n	800a76e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a762:	4b12      	ldr	r3, [pc, #72]	; (800a7ac <RCCEx_PLL2_Config+0x15c>)
 800a764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a766:	4a11      	ldr	r2, [pc, #68]	; (800a7ac <RCCEx_PLL2_Config+0x15c>)
 800a768:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a76c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a76e:	4b0f      	ldr	r3, [pc, #60]	; (800a7ac <RCCEx_PLL2_Config+0x15c>)
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	4a0e      	ldr	r2, [pc, #56]	; (800a7ac <RCCEx_PLL2_Config+0x15c>)
 800a774:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a778:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a77a:	f7fb f9c1 	bl	8005b00 <HAL_GetTick>
 800a77e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a780:	e008      	b.n	800a794 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a782:	f7fb f9bd 	bl	8005b00 <HAL_GetTick>
 800a786:	4602      	mov	r2, r0
 800a788:	68bb      	ldr	r3, [r7, #8]
 800a78a:	1ad3      	subs	r3, r2, r3
 800a78c:	2b02      	cmp	r3, #2
 800a78e:	d901      	bls.n	800a794 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a790:	2303      	movs	r3, #3
 800a792:	e006      	b.n	800a7a2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a794:	4b05      	ldr	r3, [pc, #20]	; (800a7ac <RCCEx_PLL2_Config+0x15c>)
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d0f0      	beq.n	800a782 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a7a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	3710      	adds	r7, #16
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}
 800a7aa:	bf00      	nop
 800a7ac:	58024400 	.word	0x58024400
 800a7b0:	ffff0007 	.word	0xffff0007

0800a7b4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b084      	sub	sp, #16
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
 800a7bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a7be:	2300      	movs	r3, #0
 800a7c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a7c2:	4b53      	ldr	r3, [pc, #332]	; (800a910 <RCCEx_PLL3_Config+0x15c>)
 800a7c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7c6:	f003 0303 	and.w	r3, r3, #3
 800a7ca:	2b03      	cmp	r3, #3
 800a7cc:	d101      	bne.n	800a7d2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	e099      	b.n	800a906 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a7d2:	4b4f      	ldr	r3, [pc, #316]	; (800a910 <RCCEx_PLL3_Config+0x15c>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	4a4e      	ldr	r2, [pc, #312]	; (800a910 <RCCEx_PLL3_Config+0x15c>)
 800a7d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a7dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a7de:	f7fb f98f 	bl	8005b00 <HAL_GetTick>
 800a7e2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a7e4:	e008      	b.n	800a7f8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a7e6:	f7fb f98b 	bl	8005b00 <HAL_GetTick>
 800a7ea:	4602      	mov	r2, r0
 800a7ec:	68bb      	ldr	r3, [r7, #8]
 800a7ee:	1ad3      	subs	r3, r2, r3
 800a7f0:	2b02      	cmp	r3, #2
 800a7f2:	d901      	bls.n	800a7f8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a7f4:	2303      	movs	r3, #3
 800a7f6:	e086      	b.n	800a906 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a7f8:	4b45      	ldr	r3, [pc, #276]	; (800a910 <RCCEx_PLL3_Config+0x15c>)
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a800:	2b00      	cmp	r3, #0
 800a802:	d1f0      	bne.n	800a7e6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a804:	4b42      	ldr	r3, [pc, #264]	; (800a910 <RCCEx_PLL3_Config+0x15c>)
 800a806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a808:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	051b      	lsls	r3, r3, #20
 800a812:	493f      	ldr	r1, [pc, #252]	; (800a910 <RCCEx_PLL3_Config+0x15c>)
 800a814:	4313      	orrs	r3, r2
 800a816:	628b      	str	r3, [r1, #40]	; 0x28
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	685b      	ldr	r3, [r3, #4]
 800a81c:	3b01      	subs	r3, #1
 800a81e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	689b      	ldr	r3, [r3, #8]
 800a826:	3b01      	subs	r3, #1
 800a828:	025b      	lsls	r3, r3, #9
 800a82a:	b29b      	uxth	r3, r3
 800a82c:	431a      	orrs	r2, r3
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	68db      	ldr	r3, [r3, #12]
 800a832:	3b01      	subs	r3, #1
 800a834:	041b      	lsls	r3, r3, #16
 800a836:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a83a:	431a      	orrs	r2, r3
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	691b      	ldr	r3, [r3, #16]
 800a840:	3b01      	subs	r3, #1
 800a842:	061b      	lsls	r3, r3, #24
 800a844:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a848:	4931      	ldr	r1, [pc, #196]	; (800a910 <RCCEx_PLL3_Config+0x15c>)
 800a84a:	4313      	orrs	r3, r2
 800a84c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a84e:	4b30      	ldr	r3, [pc, #192]	; (800a910 <RCCEx_PLL3_Config+0x15c>)
 800a850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a852:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	695b      	ldr	r3, [r3, #20]
 800a85a:	492d      	ldr	r1, [pc, #180]	; (800a910 <RCCEx_PLL3_Config+0x15c>)
 800a85c:	4313      	orrs	r3, r2
 800a85e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a860:	4b2b      	ldr	r3, [pc, #172]	; (800a910 <RCCEx_PLL3_Config+0x15c>)
 800a862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a864:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	699b      	ldr	r3, [r3, #24]
 800a86c:	4928      	ldr	r1, [pc, #160]	; (800a910 <RCCEx_PLL3_Config+0x15c>)
 800a86e:	4313      	orrs	r3, r2
 800a870:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a872:	4b27      	ldr	r3, [pc, #156]	; (800a910 <RCCEx_PLL3_Config+0x15c>)
 800a874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a876:	4a26      	ldr	r2, [pc, #152]	; (800a910 <RCCEx_PLL3_Config+0x15c>)
 800a878:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a87c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a87e:	4b24      	ldr	r3, [pc, #144]	; (800a910 <RCCEx_PLL3_Config+0x15c>)
 800a880:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a882:	4b24      	ldr	r3, [pc, #144]	; (800a914 <RCCEx_PLL3_Config+0x160>)
 800a884:	4013      	ands	r3, r2
 800a886:	687a      	ldr	r2, [r7, #4]
 800a888:	69d2      	ldr	r2, [r2, #28]
 800a88a:	00d2      	lsls	r2, r2, #3
 800a88c:	4920      	ldr	r1, [pc, #128]	; (800a910 <RCCEx_PLL3_Config+0x15c>)
 800a88e:	4313      	orrs	r3, r2
 800a890:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a892:	4b1f      	ldr	r3, [pc, #124]	; (800a910 <RCCEx_PLL3_Config+0x15c>)
 800a894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a896:	4a1e      	ldr	r2, [pc, #120]	; (800a910 <RCCEx_PLL3_Config+0x15c>)
 800a898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a89c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d106      	bne.n	800a8b2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a8a4:	4b1a      	ldr	r3, [pc, #104]	; (800a910 <RCCEx_PLL3_Config+0x15c>)
 800a8a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8a8:	4a19      	ldr	r2, [pc, #100]	; (800a910 <RCCEx_PLL3_Config+0x15c>)
 800a8aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a8ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a8b0:	e00f      	b.n	800a8d2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	2b01      	cmp	r3, #1
 800a8b6:	d106      	bne.n	800a8c6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a8b8:	4b15      	ldr	r3, [pc, #84]	; (800a910 <RCCEx_PLL3_Config+0x15c>)
 800a8ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8bc:	4a14      	ldr	r2, [pc, #80]	; (800a910 <RCCEx_PLL3_Config+0x15c>)
 800a8be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a8c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a8c4:	e005      	b.n	800a8d2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a8c6:	4b12      	ldr	r3, [pc, #72]	; (800a910 <RCCEx_PLL3_Config+0x15c>)
 800a8c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8ca:	4a11      	ldr	r2, [pc, #68]	; (800a910 <RCCEx_PLL3_Config+0x15c>)
 800a8cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a8d0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a8d2:	4b0f      	ldr	r3, [pc, #60]	; (800a910 <RCCEx_PLL3_Config+0x15c>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	4a0e      	ldr	r2, [pc, #56]	; (800a910 <RCCEx_PLL3_Config+0x15c>)
 800a8d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a8dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a8de:	f7fb f90f 	bl	8005b00 <HAL_GetTick>
 800a8e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a8e4:	e008      	b.n	800a8f8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a8e6:	f7fb f90b 	bl	8005b00 <HAL_GetTick>
 800a8ea:	4602      	mov	r2, r0
 800a8ec:	68bb      	ldr	r3, [r7, #8]
 800a8ee:	1ad3      	subs	r3, r2, r3
 800a8f0:	2b02      	cmp	r3, #2
 800a8f2:	d901      	bls.n	800a8f8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a8f4:	2303      	movs	r3, #3
 800a8f6:	e006      	b.n	800a906 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a8f8:	4b05      	ldr	r3, [pc, #20]	; (800a910 <RCCEx_PLL3_Config+0x15c>)
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a900:	2b00      	cmp	r3, #0
 800a902:	d0f0      	beq.n	800a8e6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a904:	7bfb      	ldrb	r3, [r7, #15]
}
 800a906:	4618      	mov	r0, r3
 800a908:	3710      	adds	r7, #16
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}
 800a90e:	bf00      	nop
 800a910:	58024400 	.word	0x58024400
 800a914:	ffff0007 	.word	0xffff0007

0800a918 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b082      	sub	sp, #8
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d101      	bne.n	800a92a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a926:	2301      	movs	r3, #1
 800a928:	e042      	b.n	800a9b0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a930:	2b00      	cmp	r3, #0
 800a932:	d106      	bne.n	800a942 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	2200      	movs	r2, #0
 800a938:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a93c:	6878      	ldr	r0, [r7, #4]
 800a93e:	f7fa feeb 	bl	8005718 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	2224      	movs	r2, #36	; 0x24
 800a946:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	681a      	ldr	r2, [r3, #0]
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	f022 0201 	bic.w	r2, r2, #1
 800a958:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a95a:	6878      	ldr	r0, [r7, #4]
 800a95c:	f000 f82c 	bl	800a9b8 <UART_SetConfig>
 800a960:	4603      	mov	r3, r0
 800a962:	2b01      	cmp	r3, #1
 800a964:	d101      	bne.n	800a96a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a966:	2301      	movs	r3, #1
 800a968:	e022      	b.n	800a9b0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d002      	beq.n	800a978 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	f000 fdd0 	bl	800b518 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	685a      	ldr	r2, [r3, #4]
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a986:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	689a      	ldr	r2, [r3, #8]
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a996:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	681a      	ldr	r2, [r3, #0]
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	f042 0201 	orr.w	r2, r2, #1
 800a9a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a9a8:	6878      	ldr	r0, [r7, #4]
 800a9aa:	f000 fe57 	bl	800b65c <UART_CheckIdleState>
 800a9ae:	4603      	mov	r3, r0
}
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	3708      	adds	r7, #8
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	bd80      	pop	{r7, pc}

0800a9b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a9b8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800a9bc:	b08e      	sub	sp, #56	; 0x38
 800a9be:	af00      	add	r7, sp, #0
 800a9c0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	689a      	ldr	r2, [r3, #8]
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	691b      	ldr	r3, [r3, #16]
 800a9d0:	431a      	orrs	r2, r3
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	695b      	ldr	r3, [r3, #20]
 800a9d6:	431a      	orrs	r2, r3
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	69db      	ldr	r3, [r3, #28]
 800a9dc:	4313      	orrs	r3, r2
 800a9de:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a9e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a9e6:	4313      	orrs	r3, r2
 800a9e8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	681a      	ldr	r2, [r3, #0]
 800a9f0:	4bc1      	ldr	r3, [pc, #772]	; (800acf8 <UART_SetConfig+0x340>)
 800a9f2:	4013      	ands	r3, r2
 800a9f4:	687a      	ldr	r2, [r7, #4]
 800a9f6:	6812      	ldr	r2, [r2, #0]
 800a9f8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a9fa:	430b      	orrs	r3, r1
 800a9fc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	685b      	ldr	r3, [r3, #4]
 800aa04:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	68da      	ldr	r2, [r3, #12]
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	430a      	orrs	r2, r1
 800aa12:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	699b      	ldr	r3, [r3, #24]
 800aa18:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	4ab7      	ldr	r2, [pc, #732]	; (800acfc <UART_SetConfig+0x344>)
 800aa20:	4293      	cmp	r3, r2
 800aa22:	d004      	beq.n	800aa2e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6a1b      	ldr	r3, [r3, #32]
 800aa28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa2a:	4313      	orrs	r3, r2
 800aa2c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	689a      	ldr	r2, [r3, #8]
 800aa34:	4bb2      	ldr	r3, [pc, #712]	; (800ad00 <UART_SetConfig+0x348>)
 800aa36:	4013      	ands	r3, r2
 800aa38:	687a      	ldr	r2, [r7, #4]
 800aa3a:	6812      	ldr	r2, [r2, #0]
 800aa3c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800aa3e:	430b      	orrs	r3, r1
 800aa40:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa48:	f023 010f 	bic.w	r1, r3, #15
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	430a      	orrs	r2, r1
 800aa56:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	4aa9      	ldr	r2, [pc, #676]	; (800ad04 <UART_SetConfig+0x34c>)
 800aa5e:	4293      	cmp	r3, r2
 800aa60:	d177      	bne.n	800ab52 <UART_SetConfig+0x19a>
 800aa62:	4ba9      	ldr	r3, [pc, #676]	; (800ad08 <UART_SetConfig+0x350>)
 800aa64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aa6a:	2b28      	cmp	r3, #40	; 0x28
 800aa6c:	d86c      	bhi.n	800ab48 <UART_SetConfig+0x190>
 800aa6e:	a201      	add	r2, pc, #4	; (adr r2, 800aa74 <UART_SetConfig+0xbc>)
 800aa70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa74:	0800ab19 	.word	0x0800ab19
 800aa78:	0800ab49 	.word	0x0800ab49
 800aa7c:	0800ab49 	.word	0x0800ab49
 800aa80:	0800ab49 	.word	0x0800ab49
 800aa84:	0800ab49 	.word	0x0800ab49
 800aa88:	0800ab49 	.word	0x0800ab49
 800aa8c:	0800ab49 	.word	0x0800ab49
 800aa90:	0800ab49 	.word	0x0800ab49
 800aa94:	0800ab21 	.word	0x0800ab21
 800aa98:	0800ab49 	.word	0x0800ab49
 800aa9c:	0800ab49 	.word	0x0800ab49
 800aaa0:	0800ab49 	.word	0x0800ab49
 800aaa4:	0800ab49 	.word	0x0800ab49
 800aaa8:	0800ab49 	.word	0x0800ab49
 800aaac:	0800ab49 	.word	0x0800ab49
 800aab0:	0800ab49 	.word	0x0800ab49
 800aab4:	0800ab29 	.word	0x0800ab29
 800aab8:	0800ab49 	.word	0x0800ab49
 800aabc:	0800ab49 	.word	0x0800ab49
 800aac0:	0800ab49 	.word	0x0800ab49
 800aac4:	0800ab49 	.word	0x0800ab49
 800aac8:	0800ab49 	.word	0x0800ab49
 800aacc:	0800ab49 	.word	0x0800ab49
 800aad0:	0800ab49 	.word	0x0800ab49
 800aad4:	0800ab31 	.word	0x0800ab31
 800aad8:	0800ab49 	.word	0x0800ab49
 800aadc:	0800ab49 	.word	0x0800ab49
 800aae0:	0800ab49 	.word	0x0800ab49
 800aae4:	0800ab49 	.word	0x0800ab49
 800aae8:	0800ab49 	.word	0x0800ab49
 800aaec:	0800ab49 	.word	0x0800ab49
 800aaf0:	0800ab49 	.word	0x0800ab49
 800aaf4:	0800ab39 	.word	0x0800ab39
 800aaf8:	0800ab49 	.word	0x0800ab49
 800aafc:	0800ab49 	.word	0x0800ab49
 800ab00:	0800ab49 	.word	0x0800ab49
 800ab04:	0800ab49 	.word	0x0800ab49
 800ab08:	0800ab49 	.word	0x0800ab49
 800ab0c:	0800ab49 	.word	0x0800ab49
 800ab10:	0800ab49 	.word	0x0800ab49
 800ab14:	0800ab41 	.word	0x0800ab41
 800ab18:	2301      	movs	r3, #1
 800ab1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab1e:	e233      	b.n	800af88 <UART_SetConfig+0x5d0>
 800ab20:	2304      	movs	r3, #4
 800ab22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab26:	e22f      	b.n	800af88 <UART_SetConfig+0x5d0>
 800ab28:	2308      	movs	r3, #8
 800ab2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab2e:	e22b      	b.n	800af88 <UART_SetConfig+0x5d0>
 800ab30:	2310      	movs	r3, #16
 800ab32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab36:	e227      	b.n	800af88 <UART_SetConfig+0x5d0>
 800ab38:	2320      	movs	r3, #32
 800ab3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab3e:	e223      	b.n	800af88 <UART_SetConfig+0x5d0>
 800ab40:	2340      	movs	r3, #64	; 0x40
 800ab42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab46:	e21f      	b.n	800af88 <UART_SetConfig+0x5d0>
 800ab48:	2380      	movs	r3, #128	; 0x80
 800ab4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab4e:	bf00      	nop
 800ab50:	e21a      	b.n	800af88 <UART_SetConfig+0x5d0>
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	4a6d      	ldr	r2, [pc, #436]	; (800ad0c <UART_SetConfig+0x354>)
 800ab58:	4293      	cmp	r3, r2
 800ab5a:	d132      	bne.n	800abc2 <UART_SetConfig+0x20a>
 800ab5c:	4b6a      	ldr	r3, [pc, #424]	; (800ad08 <UART_SetConfig+0x350>)
 800ab5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab60:	f003 0307 	and.w	r3, r3, #7
 800ab64:	2b05      	cmp	r3, #5
 800ab66:	d827      	bhi.n	800abb8 <UART_SetConfig+0x200>
 800ab68:	a201      	add	r2, pc, #4	; (adr r2, 800ab70 <UART_SetConfig+0x1b8>)
 800ab6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab6e:	bf00      	nop
 800ab70:	0800ab89 	.word	0x0800ab89
 800ab74:	0800ab91 	.word	0x0800ab91
 800ab78:	0800ab99 	.word	0x0800ab99
 800ab7c:	0800aba1 	.word	0x0800aba1
 800ab80:	0800aba9 	.word	0x0800aba9
 800ab84:	0800abb1 	.word	0x0800abb1
 800ab88:	2300      	movs	r3, #0
 800ab8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab8e:	e1fb      	b.n	800af88 <UART_SetConfig+0x5d0>
 800ab90:	2304      	movs	r3, #4
 800ab92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab96:	e1f7      	b.n	800af88 <UART_SetConfig+0x5d0>
 800ab98:	2308      	movs	r3, #8
 800ab9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab9e:	e1f3      	b.n	800af88 <UART_SetConfig+0x5d0>
 800aba0:	2310      	movs	r3, #16
 800aba2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aba6:	e1ef      	b.n	800af88 <UART_SetConfig+0x5d0>
 800aba8:	2320      	movs	r3, #32
 800abaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abae:	e1eb      	b.n	800af88 <UART_SetConfig+0x5d0>
 800abb0:	2340      	movs	r3, #64	; 0x40
 800abb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abb6:	e1e7      	b.n	800af88 <UART_SetConfig+0x5d0>
 800abb8:	2380      	movs	r3, #128	; 0x80
 800abba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abbe:	bf00      	nop
 800abc0:	e1e2      	b.n	800af88 <UART_SetConfig+0x5d0>
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	4a52      	ldr	r2, [pc, #328]	; (800ad10 <UART_SetConfig+0x358>)
 800abc8:	4293      	cmp	r3, r2
 800abca:	d132      	bne.n	800ac32 <UART_SetConfig+0x27a>
 800abcc:	4b4e      	ldr	r3, [pc, #312]	; (800ad08 <UART_SetConfig+0x350>)
 800abce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abd0:	f003 0307 	and.w	r3, r3, #7
 800abd4:	2b05      	cmp	r3, #5
 800abd6:	d827      	bhi.n	800ac28 <UART_SetConfig+0x270>
 800abd8:	a201      	add	r2, pc, #4	; (adr r2, 800abe0 <UART_SetConfig+0x228>)
 800abda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abde:	bf00      	nop
 800abe0:	0800abf9 	.word	0x0800abf9
 800abe4:	0800ac01 	.word	0x0800ac01
 800abe8:	0800ac09 	.word	0x0800ac09
 800abec:	0800ac11 	.word	0x0800ac11
 800abf0:	0800ac19 	.word	0x0800ac19
 800abf4:	0800ac21 	.word	0x0800ac21
 800abf8:	2300      	movs	r3, #0
 800abfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abfe:	e1c3      	b.n	800af88 <UART_SetConfig+0x5d0>
 800ac00:	2304      	movs	r3, #4
 800ac02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac06:	e1bf      	b.n	800af88 <UART_SetConfig+0x5d0>
 800ac08:	2308      	movs	r3, #8
 800ac0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac0e:	e1bb      	b.n	800af88 <UART_SetConfig+0x5d0>
 800ac10:	2310      	movs	r3, #16
 800ac12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac16:	e1b7      	b.n	800af88 <UART_SetConfig+0x5d0>
 800ac18:	2320      	movs	r3, #32
 800ac1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac1e:	e1b3      	b.n	800af88 <UART_SetConfig+0x5d0>
 800ac20:	2340      	movs	r3, #64	; 0x40
 800ac22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac26:	e1af      	b.n	800af88 <UART_SetConfig+0x5d0>
 800ac28:	2380      	movs	r3, #128	; 0x80
 800ac2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac2e:	bf00      	nop
 800ac30:	e1aa      	b.n	800af88 <UART_SetConfig+0x5d0>
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	4a37      	ldr	r2, [pc, #220]	; (800ad14 <UART_SetConfig+0x35c>)
 800ac38:	4293      	cmp	r3, r2
 800ac3a:	d132      	bne.n	800aca2 <UART_SetConfig+0x2ea>
 800ac3c:	4b32      	ldr	r3, [pc, #200]	; (800ad08 <UART_SetConfig+0x350>)
 800ac3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac40:	f003 0307 	and.w	r3, r3, #7
 800ac44:	2b05      	cmp	r3, #5
 800ac46:	d827      	bhi.n	800ac98 <UART_SetConfig+0x2e0>
 800ac48:	a201      	add	r2, pc, #4	; (adr r2, 800ac50 <UART_SetConfig+0x298>)
 800ac4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac4e:	bf00      	nop
 800ac50:	0800ac69 	.word	0x0800ac69
 800ac54:	0800ac71 	.word	0x0800ac71
 800ac58:	0800ac79 	.word	0x0800ac79
 800ac5c:	0800ac81 	.word	0x0800ac81
 800ac60:	0800ac89 	.word	0x0800ac89
 800ac64:	0800ac91 	.word	0x0800ac91
 800ac68:	2300      	movs	r3, #0
 800ac6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac6e:	e18b      	b.n	800af88 <UART_SetConfig+0x5d0>
 800ac70:	2304      	movs	r3, #4
 800ac72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac76:	e187      	b.n	800af88 <UART_SetConfig+0x5d0>
 800ac78:	2308      	movs	r3, #8
 800ac7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac7e:	e183      	b.n	800af88 <UART_SetConfig+0x5d0>
 800ac80:	2310      	movs	r3, #16
 800ac82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac86:	e17f      	b.n	800af88 <UART_SetConfig+0x5d0>
 800ac88:	2320      	movs	r3, #32
 800ac8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac8e:	e17b      	b.n	800af88 <UART_SetConfig+0x5d0>
 800ac90:	2340      	movs	r3, #64	; 0x40
 800ac92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac96:	e177      	b.n	800af88 <UART_SetConfig+0x5d0>
 800ac98:	2380      	movs	r3, #128	; 0x80
 800ac9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac9e:	bf00      	nop
 800aca0:	e172      	b.n	800af88 <UART_SetConfig+0x5d0>
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	4a1c      	ldr	r2, [pc, #112]	; (800ad18 <UART_SetConfig+0x360>)
 800aca8:	4293      	cmp	r3, r2
 800acaa:	d144      	bne.n	800ad36 <UART_SetConfig+0x37e>
 800acac:	4b16      	ldr	r3, [pc, #88]	; (800ad08 <UART_SetConfig+0x350>)
 800acae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acb0:	f003 0307 	and.w	r3, r3, #7
 800acb4:	2b05      	cmp	r3, #5
 800acb6:	d839      	bhi.n	800ad2c <UART_SetConfig+0x374>
 800acb8:	a201      	add	r2, pc, #4	; (adr r2, 800acc0 <UART_SetConfig+0x308>)
 800acba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acbe:	bf00      	nop
 800acc0:	0800acd9 	.word	0x0800acd9
 800acc4:	0800ace1 	.word	0x0800ace1
 800acc8:	0800ace9 	.word	0x0800ace9
 800accc:	0800acf1 	.word	0x0800acf1
 800acd0:	0800ad1d 	.word	0x0800ad1d
 800acd4:	0800ad25 	.word	0x0800ad25
 800acd8:	2300      	movs	r3, #0
 800acda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800acde:	e153      	b.n	800af88 <UART_SetConfig+0x5d0>
 800ace0:	2304      	movs	r3, #4
 800ace2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ace6:	e14f      	b.n	800af88 <UART_SetConfig+0x5d0>
 800ace8:	2308      	movs	r3, #8
 800acea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800acee:	e14b      	b.n	800af88 <UART_SetConfig+0x5d0>
 800acf0:	2310      	movs	r3, #16
 800acf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800acf6:	e147      	b.n	800af88 <UART_SetConfig+0x5d0>
 800acf8:	cfff69f3 	.word	0xcfff69f3
 800acfc:	58000c00 	.word	0x58000c00
 800ad00:	11fff4ff 	.word	0x11fff4ff
 800ad04:	40011000 	.word	0x40011000
 800ad08:	58024400 	.word	0x58024400
 800ad0c:	40004400 	.word	0x40004400
 800ad10:	40004800 	.word	0x40004800
 800ad14:	40004c00 	.word	0x40004c00
 800ad18:	40005000 	.word	0x40005000
 800ad1c:	2320      	movs	r3, #32
 800ad1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad22:	e131      	b.n	800af88 <UART_SetConfig+0x5d0>
 800ad24:	2340      	movs	r3, #64	; 0x40
 800ad26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad2a:	e12d      	b.n	800af88 <UART_SetConfig+0x5d0>
 800ad2c:	2380      	movs	r3, #128	; 0x80
 800ad2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad32:	bf00      	nop
 800ad34:	e128      	b.n	800af88 <UART_SetConfig+0x5d0>
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	4ab6      	ldr	r2, [pc, #728]	; (800b014 <UART_SetConfig+0x65c>)
 800ad3c:	4293      	cmp	r3, r2
 800ad3e:	d178      	bne.n	800ae32 <UART_SetConfig+0x47a>
 800ad40:	4bb5      	ldr	r3, [pc, #724]	; (800b018 <UART_SetConfig+0x660>)
 800ad42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ad48:	2b28      	cmp	r3, #40	; 0x28
 800ad4a:	d86d      	bhi.n	800ae28 <UART_SetConfig+0x470>
 800ad4c:	a201      	add	r2, pc, #4	; (adr r2, 800ad54 <UART_SetConfig+0x39c>)
 800ad4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad52:	bf00      	nop
 800ad54:	0800adf9 	.word	0x0800adf9
 800ad58:	0800ae29 	.word	0x0800ae29
 800ad5c:	0800ae29 	.word	0x0800ae29
 800ad60:	0800ae29 	.word	0x0800ae29
 800ad64:	0800ae29 	.word	0x0800ae29
 800ad68:	0800ae29 	.word	0x0800ae29
 800ad6c:	0800ae29 	.word	0x0800ae29
 800ad70:	0800ae29 	.word	0x0800ae29
 800ad74:	0800ae01 	.word	0x0800ae01
 800ad78:	0800ae29 	.word	0x0800ae29
 800ad7c:	0800ae29 	.word	0x0800ae29
 800ad80:	0800ae29 	.word	0x0800ae29
 800ad84:	0800ae29 	.word	0x0800ae29
 800ad88:	0800ae29 	.word	0x0800ae29
 800ad8c:	0800ae29 	.word	0x0800ae29
 800ad90:	0800ae29 	.word	0x0800ae29
 800ad94:	0800ae09 	.word	0x0800ae09
 800ad98:	0800ae29 	.word	0x0800ae29
 800ad9c:	0800ae29 	.word	0x0800ae29
 800ada0:	0800ae29 	.word	0x0800ae29
 800ada4:	0800ae29 	.word	0x0800ae29
 800ada8:	0800ae29 	.word	0x0800ae29
 800adac:	0800ae29 	.word	0x0800ae29
 800adb0:	0800ae29 	.word	0x0800ae29
 800adb4:	0800ae11 	.word	0x0800ae11
 800adb8:	0800ae29 	.word	0x0800ae29
 800adbc:	0800ae29 	.word	0x0800ae29
 800adc0:	0800ae29 	.word	0x0800ae29
 800adc4:	0800ae29 	.word	0x0800ae29
 800adc8:	0800ae29 	.word	0x0800ae29
 800adcc:	0800ae29 	.word	0x0800ae29
 800add0:	0800ae29 	.word	0x0800ae29
 800add4:	0800ae19 	.word	0x0800ae19
 800add8:	0800ae29 	.word	0x0800ae29
 800addc:	0800ae29 	.word	0x0800ae29
 800ade0:	0800ae29 	.word	0x0800ae29
 800ade4:	0800ae29 	.word	0x0800ae29
 800ade8:	0800ae29 	.word	0x0800ae29
 800adec:	0800ae29 	.word	0x0800ae29
 800adf0:	0800ae29 	.word	0x0800ae29
 800adf4:	0800ae21 	.word	0x0800ae21
 800adf8:	2301      	movs	r3, #1
 800adfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800adfe:	e0c3      	b.n	800af88 <UART_SetConfig+0x5d0>
 800ae00:	2304      	movs	r3, #4
 800ae02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae06:	e0bf      	b.n	800af88 <UART_SetConfig+0x5d0>
 800ae08:	2308      	movs	r3, #8
 800ae0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae0e:	e0bb      	b.n	800af88 <UART_SetConfig+0x5d0>
 800ae10:	2310      	movs	r3, #16
 800ae12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae16:	e0b7      	b.n	800af88 <UART_SetConfig+0x5d0>
 800ae18:	2320      	movs	r3, #32
 800ae1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae1e:	e0b3      	b.n	800af88 <UART_SetConfig+0x5d0>
 800ae20:	2340      	movs	r3, #64	; 0x40
 800ae22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae26:	e0af      	b.n	800af88 <UART_SetConfig+0x5d0>
 800ae28:	2380      	movs	r3, #128	; 0x80
 800ae2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae2e:	bf00      	nop
 800ae30:	e0aa      	b.n	800af88 <UART_SetConfig+0x5d0>
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	4a79      	ldr	r2, [pc, #484]	; (800b01c <UART_SetConfig+0x664>)
 800ae38:	4293      	cmp	r3, r2
 800ae3a:	d132      	bne.n	800aea2 <UART_SetConfig+0x4ea>
 800ae3c:	4b76      	ldr	r3, [pc, #472]	; (800b018 <UART_SetConfig+0x660>)
 800ae3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae40:	f003 0307 	and.w	r3, r3, #7
 800ae44:	2b05      	cmp	r3, #5
 800ae46:	d827      	bhi.n	800ae98 <UART_SetConfig+0x4e0>
 800ae48:	a201      	add	r2, pc, #4	; (adr r2, 800ae50 <UART_SetConfig+0x498>)
 800ae4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae4e:	bf00      	nop
 800ae50:	0800ae69 	.word	0x0800ae69
 800ae54:	0800ae71 	.word	0x0800ae71
 800ae58:	0800ae79 	.word	0x0800ae79
 800ae5c:	0800ae81 	.word	0x0800ae81
 800ae60:	0800ae89 	.word	0x0800ae89
 800ae64:	0800ae91 	.word	0x0800ae91
 800ae68:	2300      	movs	r3, #0
 800ae6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae6e:	e08b      	b.n	800af88 <UART_SetConfig+0x5d0>
 800ae70:	2304      	movs	r3, #4
 800ae72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae76:	e087      	b.n	800af88 <UART_SetConfig+0x5d0>
 800ae78:	2308      	movs	r3, #8
 800ae7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae7e:	e083      	b.n	800af88 <UART_SetConfig+0x5d0>
 800ae80:	2310      	movs	r3, #16
 800ae82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae86:	e07f      	b.n	800af88 <UART_SetConfig+0x5d0>
 800ae88:	2320      	movs	r3, #32
 800ae8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae8e:	e07b      	b.n	800af88 <UART_SetConfig+0x5d0>
 800ae90:	2340      	movs	r3, #64	; 0x40
 800ae92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae96:	e077      	b.n	800af88 <UART_SetConfig+0x5d0>
 800ae98:	2380      	movs	r3, #128	; 0x80
 800ae9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae9e:	bf00      	nop
 800aea0:	e072      	b.n	800af88 <UART_SetConfig+0x5d0>
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	4a5e      	ldr	r2, [pc, #376]	; (800b020 <UART_SetConfig+0x668>)
 800aea8:	4293      	cmp	r3, r2
 800aeaa:	d132      	bne.n	800af12 <UART_SetConfig+0x55a>
 800aeac:	4b5a      	ldr	r3, [pc, #360]	; (800b018 <UART_SetConfig+0x660>)
 800aeae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aeb0:	f003 0307 	and.w	r3, r3, #7
 800aeb4:	2b05      	cmp	r3, #5
 800aeb6:	d827      	bhi.n	800af08 <UART_SetConfig+0x550>
 800aeb8:	a201      	add	r2, pc, #4	; (adr r2, 800aec0 <UART_SetConfig+0x508>)
 800aeba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aebe:	bf00      	nop
 800aec0:	0800aed9 	.word	0x0800aed9
 800aec4:	0800aee1 	.word	0x0800aee1
 800aec8:	0800aee9 	.word	0x0800aee9
 800aecc:	0800aef1 	.word	0x0800aef1
 800aed0:	0800aef9 	.word	0x0800aef9
 800aed4:	0800af01 	.word	0x0800af01
 800aed8:	2300      	movs	r3, #0
 800aeda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aede:	e053      	b.n	800af88 <UART_SetConfig+0x5d0>
 800aee0:	2304      	movs	r3, #4
 800aee2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aee6:	e04f      	b.n	800af88 <UART_SetConfig+0x5d0>
 800aee8:	2308      	movs	r3, #8
 800aeea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aeee:	e04b      	b.n	800af88 <UART_SetConfig+0x5d0>
 800aef0:	2310      	movs	r3, #16
 800aef2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aef6:	e047      	b.n	800af88 <UART_SetConfig+0x5d0>
 800aef8:	2320      	movs	r3, #32
 800aefa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aefe:	e043      	b.n	800af88 <UART_SetConfig+0x5d0>
 800af00:	2340      	movs	r3, #64	; 0x40
 800af02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af06:	e03f      	b.n	800af88 <UART_SetConfig+0x5d0>
 800af08:	2380      	movs	r3, #128	; 0x80
 800af0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af0e:	bf00      	nop
 800af10:	e03a      	b.n	800af88 <UART_SetConfig+0x5d0>
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	4a43      	ldr	r2, [pc, #268]	; (800b024 <UART_SetConfig+0x66c>)
 800af18:	4293      	cmp	r3, r2
 800af1a:	d132      	bne.n	800af82 <UART_SetConfig+0x5ca>
 800af1c:	4b3e      	ldr	r3, [pc, #248]	; (800b018 <UART_SetConfig+0x660>)
 800af1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af20:	f003 0307 	and.w	r3, r3, #7
 800af24:	2b05      	cmp	r3, #5
 800af26:	d827      	bhi.n	800af78 <UART_SetConfig+0x5c0>
 800af28:	a201      	add	r2, pc, #4	; (adr r2, 800af30 <UART_SetConfig+0x578>)
 800af2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af2e:	bf00      	nop
 800af30:	0800af49 	.word	0x0800af49
 800af34:	0800af51 	.word	0x0800af51
 800af38:	0800af59 	.word	0x0800af59
 800af3c:	0800af61 	.word	0x0800af61
 800af40:	0800af69 	.word	0x0800af69
 800af44:	0800af71 	.word	0x0800af71
 800af48:	2302      	movs	r3, #2
 800af4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af4e:	e01b      	b.n	800af88 <UART_SetConfig+0x5d0>
 800af50:	2304      	movs	r3, #4
 800af52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af56:	e017      	b.n	800af88 <UART_SetConfig+0x5d0>
 800af58:	2308      	movs	r3, #8
 800af5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af5e:	e013      	b.n	800af88 <UART_SetConfig+0x5d0>
 800af60:	2310      	movs	r3, #16
 800af62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af66:	e00f      	b.n	800af88 <UART_SetConfig+0x5d0>
 800af68:	2320      	movs	r3, #32
 800af6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af6e:	e00b      	b.n	800af88 <UART_SetConfig+0x5d0>
 800af70:	2340      	movs	r3, #64	; 0x40
 800af72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af76:	e007      	b.n	800af88 <UART_SetConfig+0x5d0>
 800af78:	2380      	movs	r3, #128	; 0x80
 800af7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af7e:	bf00      	nop
 800af80:	e002      	b.n	800af88 <UART_SetConfig+0x5d0>
 800af82:	2380      	movs	r3, #128	; 0x80
 800af84:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	4a25      	ldr	r2, [pc, #148]	; (800b024 <UART_SetConfig+0x66c>)
 800af8e:	4293      	cmp	r3, r2
 800af90:	f040 80b8 	bne.w	800b104 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800af94:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800af98:	2b08      	cmp	r3, #8
 800af9a:	d019      	beq.n	800afd0 <UART_SetConfig+0x618>
 800af9c:	2b08      	cmp	r3, #8
 800af9e:	dc04      	bgt.n	800afaa <UART_SetConfig+0x5f2>
 800afa0:	2b02      	cmp	r3, #2
 800afa2:	d009      	beq.n	800afb8 <UART_SetConfig+0x600>
 800afa4:	2b04      	cmp	r3, #4
 800afa6:	d00b      	beq.n	800afc0 <UART_SetConfig+0x608>
 800afa8:	e042      	b.n	800b030 <UART_SetConfig+0x678>
 800afaa:	2b20      	cmp	r3, #32
 800afac:	d02b      	beq.n	800b006 <UART_SetConfig+0x64e>
 800afae:	2b40      	cmp	r3, #64	; 0x40
 800afb0:	d02c      	beq.n	800b00c <UART_SetConfig+0x654>
 800afb2:	2b10      	cmp	r3, #16
 800afb4:	d014      	beq.n	800afe0 <UART_SetConfig+0x628>
 800afb6:	e03b      	b.n	800b030 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800afb8:	f7ff f89c 	bl	800a0f4 <HAL_RCCEx_GetD3PCLK1Freq>
 800afbc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800afbe:	e03d      	b.n	800b03c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800afc0:	f107 0314 	add.w	r3, r7, #20
 800afc4:	4618      	mov	r0, r3
 800afc6:	f7ff f8ab 	bl	800a120 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800afca:	69bb      	ldr	r3, [r7, #24]
 800afcc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800afce:	e035      	b.n	800b03c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800afd0:	f107 0308 	add.w	r3, r7, #8
 800afd4:	4618      	mov	r0, r3
 800afd6:	f7ff f9ef 	bl	800a3b8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800afde:	e02d      	b.n	800b03c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800afe0:	4b0d      	ldr	r3, [pc, #52]	; (800b018 <UART_SetConfig+0x660>)
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	f003 0320 	and.w	r3, r3, #32
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d009      	beq.n	800b000 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800afec:	4b0a      	ldr	r3, [pc, #40]	; (800b018 <UART_SetConfig+0x660>)
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	08db      	lsrs	r3, r3, #3
 800aff2:	f003 0303 	and.w	r3, r3, #3
 800aff6:	4a0c      	ldr	r2, [pc, #48]	; (800b028 <UART_SetConfig+0x670>)
 800aff8:	fa22 f303 	lsr.w	r3, r2, r3
 800affc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800affe:	e01d      	b.n	800b03c <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 800b000:	4b09      	ldr	r3, [pc, #36]	; (800b028 <UART_SetConfig+0x670>)
 800b002:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b004:	e01a      	b.n	800b03c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b006:	4b09      	ldr	r3, [pc, #36]	; (800b02c <UART_SetConfig+0x674>)
 800b008:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b00a:	e017      	b.n	800b03c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b00c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b010:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b012:	e013      	b.n	800b03c <UART_SetConfig+0x684>
 800b014:	40011400 	.word	0x40011400
 800b018:	58024400 	.word	0x58024400
 800b01c:	40007800 	.word	0x40007800
 800b020:	40007c00 	.word	0x40007c00
 800b024:	58000c00 	.word	0x58000c00
 800b028:	03d09000 	.word	0x03d09000
 800b02c:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800b030:	2300      	movs	r3, #0
 800b032:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b034:	2301      	movs	r3, #1
 800b036:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b03a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b03c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b03e:	2b00      	cmp	r3, #0
 800b040:	f000 824d 	beq.w	800b4de <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b048:	4aad      	ldr	r2, [pc, #692]	; (800b300 <UART_SetConfig+0x948>)
 800b04a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b04e:	461a      	mov	r2, r3
 800b050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b052:	fbb3 f3f2 	udiv	r3, r3, r2
 800b056:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	685a      	ldr	r2, [r3, #4]
 800b05c:	4613      	mov	r3, r2
 800b05e:	005b      	lsls	r3, r3, #1
 800b060:	4413      	add	r3, r2
 800b062:	6a3a      	ldr	r2, [r7, #32]
 800b064:	429a      	cmp	r2, r3
 800b066:	d305      	bcc.n	800b074 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	685b      	ldr	r3, [r3, #4]
 800b06c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b06e:	6a3a      	ldr	r2, [r7, #32]
 800b070:	429a      	cmp	r2, r3
 800b072:	d903      	bls.n	800b07c <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 800b074:	2301      	movs	r3, #1
 800b076:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b07a:	e230      	b.n	800b4de <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b07c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b07e:	4618      	mov	r0, r3
 800b080:	f04f 0100 	mov.w	r1, #0
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b088:	4a9d      	ldr	r2, [pc, #628]	; (800b300 <UART_SetConfig+0x948>)
 800b08a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b08e:	b29b      	uxth	r3, r3
 800b090:	f04f 0400 	mov.w	r4, #0
 800b094:	461a      	mov	r2, r3
 800b096:	4623      	mov	r3, r4
 800b098:	f7f5 f926 	bl	80002e8 <__aeabi_uldivmod>
 800b09c:	4603      	mov	r3, r0
 800b09e:	460c      	mov	r4, r1
 800b0a0:	4619      	mov	r1, r3
 800b0a2:	4622      	mov	r2, r4
 800b0a4:	f04f 0300 	mov.w	r3, #0
 800b0a8:	f04f 0400 	mov.w	r4, #0
 800b0ac:	0214      	lsls	r4, r2, #8
 800b0ae:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800b0b2:	020b      	lsls	r3, r1, #8
 800b0b4:	687a      	ldr	r2, [r7, #4]
 800b0b6:	6852      	ldr	r2, [r2, #4]
 800b0b8:	0852      	lsrs	r2, r2, #1
 800b0ba:	4611      	mov	r1, r2
 800b0bc:	f04f 0200 	mov.w	r2, #0
 800b0c0:	eb13 0b01 	adds.w	fp, r3, r1
 800b0c4:	eb44 0c02 	adc.w	ip, r4, r2
 800b0c8:	4658      	mov	r0, fp
 800b0ca:	4661      	mov	r1, ip
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	685b      	ldr	r3, [r3, #4]
 800b0d0:	f04f 0400 	mov.w	r4, #0
 800b0d4:	461a      	mov	r2, r3
 800b0d6:	4623      	mov	r3, r4
 800b0d8:	f7f5 f906 	bl	80002e8 <__aeabi_uldivmod>
 800b0dc:	4603      	mov	r3, r0
 800b0de:	460c      	mov	r4, r1
 800b0e0:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b0e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b0e8:	d308      	bcc.n	800b0fc <UART_SetConfig+0x744>
 800b0ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b0f0:	d204      	bcs.n	800b0fc <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b0f8:	60da      	str	r2, [r3, #12]
 800b0fa:	e1f0      	b.n	800b4de <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 800b0fc:	2301      	movs	r3, #1
 800b0fe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b102:	e1ec      	b.n	800b4de <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	69db      	ldr	r3, [r3, #28]
 800b108:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b10c:	f040 8100 	bne.w	800b310 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 800b110:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b114:	2b40      	cmp	r3, #64	; 0x40
 800b116:	f200 80b7 	bhi.w	800b288 <UART_SetConfig+0x8d0>
 800b11a:	a201      	add	r2, pc, #4	; (adr r2, 800b120 <UART_SetConfig+0x768>)
 800b11c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b120:	0800b225 	.word	0x0800b225
 800b124:	0800b22d 	.word	0x0800b22d
 800b128:	0800b289 	.word	0x0800b289
 800b12c:	0800b289 	.word	0x0800b289
 800b130:	0800b235 	.word	0x0800b235
 800b134:	0800b289 	.word	0x0800b289
 800b138:	0800b289 	.word	0x0800b289
 800b13c:	0800b289 	.word	0x0800b289
 800b140:	0800b245 	.word	0x0800b245
 800b144:	0800b289 	.word	0x0800b289
 800b148:	0800b289 	.word	0x0800b289
 800b14c:	0800b289 	.word	0x0800b289
 800b150:	0800b289 	.word	0x0800b289
 800b154:	0800b289 	.word	0x0800b289
 800b158:	0800b289 	.word	0x0800b289
 800b15c:	0800b289 	.word	0x0800b289
 800b160:	0800b255 	.word	0x0800b255
 800b164:	0800b289 	.word	0x0800b289
 800b168:	0800b289 	.word	0x0800b289
 800b16c:	0800b289 	.word	0x0800b289
 800b170:	0800b289 	.word	0x0800b289
 800b174:	0800b289 	.word	0x0800b289
 800b178:	0800b289 	.word	0x0800b289
 800b17c:	0800b289 	.word	0x0800b289
 800b180:	0800b289 	.word	0x0800b289
 800b184:	0800b289 	.word	0x0800b289
 800b188:	0800b289 	.word	0x0800b289
 800b18c:	0800b289 	.word	0x0800b289
 800b190:	0800b289 	.word	0x0800b289
 800b194:	0800b289 	.word	0x0800b289
 800b198:	0800b289 	.word	0x0800b289
 800b19c:	0800b289 	.word	0x0800b289
 800b1a0:	0800b27b 	.word	0x0800b27b
 800b1a4:	0800b289 	.word	0x0800b289
 800b1a8:	0800b289 	.word	0x0800b289
 800b1ac:	0800b289 	.word	0x0800b289
 800b1b0:	0800b289 	.word	0x0800b289
 800b1b4:	0800b289 	.word	0x0800b289
 800b1b8:	0800b289 	.word	0x0800b289
 800b1bc:	0800b289 	.word	0x0800b289
 800b1c0:	0800b289 	.word	0x0800b289
 800b1c4:	0800b289 	.word	0x0800b289
 800b1c8:	0800b289 	.word	0x0800b289
 800b1cc:	0800b289 	.word	0x0800b289
 800b1d0:	0800b289 	.word	0x0800b289
 800b1d4:	0800b289 	.word	0x0800b289
 800b1d8:	0800b289 	.word	0x0800b289
 800b1dc:	0800b289 	.word	0x0800b289
 800b1e0:	0800b289 	.word	0x0800b289
 800b1e4:	0800b289 	.word	0x0800b289
 800b1e8:	0800b289 	.word	0x0800b289
 800b1ec:	0800b289 	.word	0x0800b289
 800b1f0:	0800b289 	.word	0x0800b289
 800b1f4:	0800b289 	.word	0x0800b289
 800b1f8:	0800b289 	.word	0x0800b289
 800b1fc:	0800b289 	.word	0x0800b289
 800b200:	0800b289 	.word	0x0800b289
 800b204:	0800b289 	.word	0x0800b289
 800b208:	0800b289 	.word	0x0800b289
 800b20c:	0800b289 	.word	0x0800b289
 800b210:	0800b289 	.word	0x0800b289
 800b214:	0800b289 	.word	0x0800b289
 800b218:	0800b289 	.word	0x0800b289
 800b21c:	0800b289 	.word	0x0800b289
 800b220:	0800b281 	.word	0x0800b281
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b224:	f7fe f84c 	bl	80092c0 <HAL_RCC_GetPCLK1Freq>
 800b228:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b22a:	e033      	b.n	800b294 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b22c:	f7fe f85e 	bl	80092ec <HAL_RCC_GetPCLK2Freq>
 800b230:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b232:	e02f      	b.n	800b294 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b234:	f107 0314 	add.w	r3, r7, #20
 800b238:	4618      	mov	r0, r3
 800b23a:	f7fe ff71 	bl	800a120 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b23e:	69bb      	ldr	r3, [r7, #24]
 800b240:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b242:	e027      	b.n	800b294 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b244:	f107 0308 	add.w	r3, r7, #8
 800b248:	4618      	mov	r0, r3
 800b24a:	f7ff f8b5 	bl	800a3b8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b252:	e01f      	b.n	800b294 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b254:	4b2b      	ldr	r3, [pc, #172]	; (800b304 <UART_SetConfig+0x94c>)
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	f003 0320 	and.w	r3, r3, #32
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d009      	beq.n	800b274 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b260:	4b28      	ldr	r3, [pc, #160]	; (800b304 <UART_SetConfig+0x94c>)
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	08db      	lsrs	r3, r3, #3
 800b266:	f003 0303 	and.w	r3, r3, #3
 800b26a:	4a27      	ldr	r2, [pc, #156]	; (800b308 <UART_SetConfig+0x950>)
 800b26c:	fa22 f303 	lsr.w	r3, r2, r3
 800b270:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b272:	e00f      	b.n	800b294 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 800b274:	4b24      	ldr	r3, [pc, #144]	; (800b308 <UART_SetConfig+0x950>)
 800b276:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b278:	e00c      	b.n	800b294 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b27a:	4b24      	ldr	r3, [pc, #144]	; (800b30c <UART_SetConfig+0x954>)
 800b27c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b27e:	e009      	b.n	800b294 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b280:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b284:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b286:	e005      	b.n	800b294 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 800b288:	2300      	movs	r3, #0
 800b28a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b28c:	2301      	movs	r3, #1
 800b28e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b292:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b296:	2b00      	cmp	r3, #0
 800b298:	f000 8121 	beq.w	800b4de <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2a0:	4a17      	ldr	r2, [pc, #92]	; (800b300 <UART_SetConfig+0x948>)
 800b2a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b2a6:	461a      	mov	r2, r3
 800b2a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2aa:	fbb3 f3f2 	udiv	r3, r3, r2
 800b2ae:	005a      	lsls	r2, r3, #1
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	685b      	ldr	r3, [r3, #4]
 800b2b4:	085b      	lsrs	r3, r3, #1
 800b2b6:	441a      	add	r2, r3
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	685b      	ldr	r3, [r3, #4]
 800b2bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2c0:	b29b      	uxth	r3, r3
 800b2c2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b2c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2c6:	2b0f      	cmp	r3, #15
 800b2c8:	d916      	bls.n	800b2f8 <UART_SetConfig+0x940>
 800b2ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b2d0:	d212      	bcs.n	800b2f8 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b2d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2d4:	b29b      	uxth	r3, r3
 800b2d6:	f023 030f 	bic.w	r3, r3, #15
 800b2da:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b2dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2de:	085b      	lsrs	r3, r3, #1
 800b2e0:	b29b      	uxth	r3, r3
 800b2e2:	f003 0307 	and.w	r3, r3, #7
 800b2e6:	b29a      	uxth	r2, r3
 800b2e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b2ea:	4313      	orrs	r3, r2
 800b2ec:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b2f4:	60da      	str	r2, [r3, #12]
 800b2f6:	e0f2      	b.n	800b4de <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800b2f8:	2301      	movs	r3, #1
 800b2fa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b2fe:	e0ee      	b.n	800b4de <UART_SetConfig+0xb26>
 800b300:	080157cc 	.word	0x080157cc
 800b304:	58024400 	.word	0x58024400
 800b308:	03d09000 	.word	0x03d09000
 800b30c:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 800b310:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b314:	2b40      	cmp	r3, #64	; 0x40
 800b316:	f200 80b7 	bhi.w	800b488 <UART_SetConfig+0xad0>
 800b31a:	a201      	add	r2, pc, #4	; (adr r2, 800b320 <UART_SetConfig+0x968>)
 800b31c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b320:	0800b425 	.word	0x0800b425
 800b324:	0800b42d 	.word	0x0800b42d
 800b328:	0800b489 	.word	0x0800b489
 800b32c:	0800b489 	.word	0x0800b489
 800b330:	0800b435 	.word	0x0800b435
 800b334:	0800b489 	.word	0x0800b489
 800b338:	0800b489 	.word	0x0800b489
 800b33c:	0800b489 	.word	0x0800b489
 800b340:	0800b445 	.word	0x0800b445
 800b344:	0800b489 	.word	0x0800b489
 800b348:	0800b489 	.word	0x0800b489
 800b34c:	0800b489 	.word	0x0800b489
 800b350:	0800b489 	.word	0x0800b489
 800b354:	0800b489 	.word	0x0800b489
 800b358:	0800b489 	.word	0x0800b489
 800b35c:	0800b489 	.word	0x0800b489
 800b360:	0800b455 	.word	0x0800b455
 800b364:	0800b489 	.word	0x0800b489
 800b368:	0800b489 	.word	0x0800b489
 800b36c:	0800b489 	.word	0x0800b489
 800b370:	0800b489 	.word	0x0800b489
 800b374:	0800b489 	.word	0x0800b489
 800b378:	0800b489 	.word	0x0800b489
 800b37c:	0800b489 	.word	0x0800b489
 800b380:	0800b489 	.word	0x0800b489
 800b384:	0800b489 	.word	0x0800b489
 800b388:	0800b489 	.word	0x0800b489
 800b38c:	0800b489 	.word	0x0800b489
 800b390:	0800b489 	.word	0x0800b489
 800b394:	0800b489 	.word	0x0800b489
 800b398:	0800b489 	.word	0x0800b489
 800b39c:	0800b489 	.word	0x0800b489
 800b3a0:	0800b47b 	.word	0x0800b47b
 800b3a4:	0800b489 	.word	0x0800b489
 800b3a8:	0800b489 	.word	0x0800b489
 800b3ac:	0800b489 	.word	0x0800b489
 800b3b0:	0800b489 	.word	0x0800b489
 800b3b4:	0800b489 	.word	0x0800b489
 800b3b8:	0800b489 	.word	0x0800b489
 800b3bc:	0800b489 	.word	0x0800b489
 800b3c0:	0800b489 	.word	0x0800b489
 800b3c4:	0800b489 	.word	0x0800b489
 800b3c8:	0800b489 	.word	0x0800b489
 800b3cc:	0800b489 	.word	0x0800b489
 800b3d0:	0800b489 	.word	0x0800b489
 800b3d4:	0800b489 	.word	0x0800b489
 800b3d8:	0800b489 	.word	0x0800b489
 800b3dc:	0800b489 	.word	0x0800b489
 800b3e0:	0800b489 	.word	0x0800b489
 800b3e4:	0800b489 	.word	0x0800b489
 800b3e8:	0800b489 	.word	0x0800b489
 800b3ec:	0800b489 	.word	0x0800b489
 800b3f0:	0800b489 	.word	0x0800b489
 800b3f4:	0800b489 	.word	0x0800b489
 800b3f8:	0800b489 	.word	0x0800b489
 800b3fc:	0800b489 	.word	0x0800b489
 800b400:	0800b489 	.word	0x0800b489
 800b404:	0800b489 	.word	0x0800b489
 800b408:	0800b489 	.word	0x0800b489
 800b40c:	0800b489 	.word	0x0800b489
 800b410:	0800b489 	.word	0x0800b489
 800b414:	0800b489 	.word	0x0800b489
 800b418:	0800b489 	.word	0x0800b489
 800b41c:	0800b489 	.word	0x0800b489
 800b420:	0800b481 	.word	0x0800b481
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b424:	f7fd ff4c 	bl	80092c0 <HAL_RCC_GetPCLK1Freq>
 800b428:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b42a:	e033      	b.n	800b494 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b42c:	f7fd ff5e 	bl	80092ec <HAL_RCC_GetPCLK2Freq>
 800b430:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b432:	e02f      	b.n	800b494 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b434:	f107 0314 	add.w	r3, r7, #20
 800b438:	4618      	mov	r0, r3
 800b43a:	f7fe fe71 	bl	800a120 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b43e:	69bb      	ldr	r3, [r7, #24]
 800b440:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b442:	e027      	b.n	800b494 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b444:	f107 0308 	add.w	r3, r7, #8
 800b448:	4618      	mov	r0, r3
 800b44a:	f7fe ffb5 	bl	800a3b8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b452:	e01f      	b.n	800b494 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b454:	4b2c      	ldr	r3, [pc, #176]	; (800b508 <UART_SetConfig+0xb50>)
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	f003 0320 	and.w	r3, r3, #32
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d009      	beq.n	800b474 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b460:	4b29      	ldr	r3, [pc, #164]	; (800b508 <UART_SetConfig+0xb50>)
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	08db      	lsrs	r3, r3, #3
 800b466:	f003 0303 	and.w	r3, r3, #3
 800b46a:	4a28      	ldr	r2, [pc, #160]	; (800b50c <UART_SetConfig+0xb54>)
 800b46c:	fa22 f303 	lsr.w	r3, r2, r3
 800b470:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b472:	e00f      	b.n	800b494 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 800b474:	4b25      	ldr	r3, [pc, #148]	; (800b50c <UART_SetConfig+0xb54>)
 800b476:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b478:	e00c      	b.n	800b494 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b47a:	4b25      	ldr	r3, [pc, #148]	; (800b510 <UART_SetConfig+0xb58>)
 800b47c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b47e:	e009      	b.n	800b494 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b480:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b484:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b486:	e005      	b.n	800b494 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 800b488:	2300      	movs	r3, #0
 800b48a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b48c:	2301      	movs	r3, #1
 800b48e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b492:	bf00      	nop
    }

    if (pclk != 0U)
 800b494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b496:	2b00      	cmp	r3, #0
 800b498:	d021      	beq.n	800b4de <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b49e:	4a1d      	ldr	r2, [pc, #116]	; (800b514 <UART_SetConfig+0xb5c>)
 800b4a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b4a4:	461a      	mov	r2, r3
 800b4a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4a8:	fbb3 f2f2 	udiv	r2, r3, r2
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	685b      	ldr	r3, [r3, #4]
 800b4b0:	085b      	lsrs	r3, r3, #1
 800b4b2:	441a      	add	r2, r3
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	685b      	ldr	r3, [r3, #4]
 800b4b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4bc:	b29b      	uxth	r3, r3
 800b4be:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b4c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4c2:	2b0f      	cmp	r3, #15
 800b4c4:	d908      	bls.n	800b4d8 <UART_SetConfig+0xb20>
 800b4c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b4cc:	d204      	bcs.n	800b4d8 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b4d4:	60da      	str	r2, [r3, #12]
 800b4d6:	e002      	b.n	800b4de <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800b4d8:	2301      	movs	r3, #1
 800b4da:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	2201      	movs	r2, #1
 800b4e2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	2201      	movs	r2, #1
 800b4ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800b4fa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800b4fe:	4618      	mov	r0, r3
 800b500:	3738      	adds	r7, #56	; 0x38
 800b502:	46bd      	mov	sp, r7
 800b504:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800b508:	58024400 	.word	0x58024400
 800b50c:	03d09000 	.word	0x03d09000
 800b510:	003d0900 	.word	0x003d0900
 800b514:	080157cc 	.word	0x080157cc

0800b518 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b518:	b480      	push	{r7}
 800b51a:	b083      	sub	sp, #12
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b524:	f003 0301 	and.w	r3, r3, #1
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d00a      	beq.n	800b542 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	685b      	ldr	r3, [r3, #4]
 800b532:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	430a      	orrs	r2, r1
 800b540:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b546:	f003 0302 	and.w	r3, r3, #2
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d00a      	beq.n	800b564 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	685b      	ldr	r3, [r3, #4]
 800b554:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	430a      	orrs	r2, r1
 800b562:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b568:	f003 0304 	and.w	r3, r3, #4
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d00a      	beq.n	800b586 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	685b      	ldr	r3, [r3, #4]
 800b576:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	430a      	orrs	r2, r1
 800b584:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b58a:	f003 0308 	and.w	r3, r3, #8
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d00a      	beq.n	800b5a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	685b      	ldr	r3, [r3, #4]
 800b598:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	430a      	orrs	r2, r1
 800b5a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5ac:	f003 0310 	and.w	r3, r3, #16
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d00a      	beq.n	800b5ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	689b      	ldr	r3, [r3, #8]
 800b5ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	430a      	orrs	r2, r1
 800b5c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5ce:	f003 0320 	and.w	r3, r3, #32
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d00a      	beq.n	800b5ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	689b      	ldr	r3, [r3, #8]
 800b5dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	430a      	orrs	r2, r1
 800b5ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d01a      	beq.n	800b62e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	685b      	ldr	r3, [r3, #4]
 800b5fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	430a      	orrs	r2, r1
 800b60c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b612:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b616:	d10a      	bne.n	800b62e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	685b      	ldr	r3, [r3, #4]
 800b61e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	430a      	orrs	r2, r1
 800b62c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b636:	2b00      	cmp	r3, #0
 800b638:	d00a      	beq.n	800b650 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	685b      	ldr	r3, [r3, #4]
 800b640:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	430a      	orrs	r2, r1
 800b64e:	605a      	str	r2, [r3, #4]
  }
}
 800b650:	bf00      	nop
 800b652:	370c      	adds	r7, #12
 800b654:	46bd      	mov	sp, r7
 800b656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65a:	4770      	bx	lr

0800b65c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b086      	sub	sp, #24
 800b660:	af02      	add	r7, sp, #8
 800b662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	2200      	movs	r2, #0
 800b668:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800b66c:	f7fa fa48 	bl	8005b00 <HAL_GetTick>
 800b670:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	f003 0308 	and.w	r3, r3, #8
 800b67c:	2b08      	cmp	r3, #8
 800b67e:	d10e      	bne.n	800b69e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b680:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b684:	9300      	str	r3, [sp, #0]
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	2200      	movs	r2, #0
 800b68a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b68e:	6878      	ldr	r0, [r7, #4]
 800b690:	f000 f82c 	bl	800b6ec <UART_WaitOnFlagUntilTimeout>
 800b694:	4603      	mov	r3, r0
 800b696:	2b00      	cmp	r3, #0
 800b698:	d001      	beq.n	800b69e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b69a:	2303      	movs	r3, #3
 800b69c:	e022      	b.n	800b6e4 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	f003 0304 	and.w	r3, r3, #4
 800b6a8:	2b04      	cmp	r3, #4
 800b6aa:	d10e      	bne.n	800b6ca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b6ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b6b0:	9300      	str	r3, [sp, #0]
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b6ba:	6878      	ldr	r0, [r7, #4]
 800b6bc:	f000 f816 	bl	800b6ec <UART_WaitOnFlagUntilTimeout>
 800b6c0:	4603      	mov	r3, r0
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d001      	beq.n	800b6ca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b6c6:	2303      	movs	r3, #3
 800b6c8:	e00c      	b.n	800b6e4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	2220      	movs	r2, #32
 800b6ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	2220      	movs	r2, #32
 800b6d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	2200      	movs	r2, #0
 800b6de:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b6e2:	2300      	movs	r3, #0
}
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	3710      	adds	r7, #16
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd80      	pop	{r7, pc}

0800b6ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b084      	sub	sp, #16
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	60f8      	str	r0, [r7, #12]
 800b6f4:	60b9      	str	r1, [r7, #8]
 800b6f6:	603b      	str	r3, [r7, #0]
 800b6f8:	4613      	mov	r3, r2
 800b6fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b6fc:	e062      	b.n	800b7c4 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b6fe:	69bb      	ldr	r3, [r7, #24]
 800b700:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b704:	d05e      	beq.n	800b7c4 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b706:	f7fa f9fb 	bl	8005b00 <HAL_GetTick>
 800b70a:	4602      	mov	r2, r0
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	1ad3      	subs	r3, r2, r3
 800b710:	69ba      	ldr	r2, [r7, #24]
 800b712:	429a      	cmp	r2, r3
 800b714:	d302      	bcc.n	800b71c <UART_WaitOnFlagUntilTimeout+0x30>
 800b716:	69bb      	ldr	r3, [r7, #24]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d11d      	bne.n	800b758 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	681a      	ldr	r2, [r3, #0]
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b72a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	689a      	ldr	r2, [r3, #8]
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	f022 0201 	bic.w	r2, r2, #1
 800b73a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	2220      	movs	r2, #32
 800b740:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	2220      	movs	r2, #32
 800b748:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	2200      	movs	r2, #0
 800b750:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800b754:	2303      	movs	r3, #3
 800b756:	e045      	b.n	800b7e4 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	f003 0304 	and.w	r3, r3, #4
 800b762:	2b00      	cmp	r3, #0
 800b764:	d02e      	beq.n	800b7c4 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	69db      	ldr	r3, [r3, #28]
 800b76c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b770:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b774:	d126      	bne.n	800b7c4 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b77e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	681a      	ldr	r2, [r3, #0]
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b78e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	689a      	ldr	r2, [r3, #8]
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	f022 0201 	bic.w	r2, r2, #1
 800b79e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	2220      	movs	r2, #32
 800b7a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	2220      	movs	r2, #32
 800b7ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	2220      	movs	r2, #32
 800b7b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800b7c0:	2303      	movs	r3, #3
 800b7c2:	e00f      	b.n	800b7e4 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	69da      	ldr	r2, [r3, #28]
 800b7ca:	68bb      	ldr	r3, [r7, #8]
 800b7cc:	4013      	ands	r3, r2
 800b7ce:	68ba      	ldr	r2, [r7, #8]
 800b7d0:	429a      	cmp	r2, r3
 800b7d2:	bf0c      	ite	eq
 800b7d4:	2301      	moveq	r3, #1
 800b7d6:	2300      	movne	r3, #0
 800b7d8:	b2db      	uxtb	r3, r3
 800b7da:	461a      	mov	r2, r3
 800b7dc:	79fb      	ldrb	r3, [r7, #7]
 800b7de:	429a      	cmp	r2, r3
 800b7e0:	d08d      	beq.n	800b6fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b7e2:	2300      	movs	r3, #0
}
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	3710      	adds	r7, #16
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	bd80      	pop	{r7, pc}

0800b7ec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b7ec:	b480      	push	{r7}
 800b7ee:	b085      	sub	sp, #20
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b7fa:	2b01      	cmp	r3, #1
 800b7fc:	d101      	bne.n	800b802 <HAL_UARTEx_DisableFifoMode+0x16>
 800b7fe:	2302      	movs	r3, #2
 800b800:	e027      	b.n	800b852 <HAL_UARTEx_DisableFifoMode+0x66>
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	2201      	movs	r2, #1
 800b806:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	2224      	movs	r2, #36	; 0x24
 800b80e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	681a      	ldr	r2, [r3, #0]
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	f022 0201 	bic.w	r2, r2, #1
 800b828:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b830:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	2200      	movs	r2, #0
 800b836:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	68fa      	ldr	r2, [r7, #12]
 800b83e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	2220      	movs	r2, #32
 800b844:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	2200      	movs	r2, #0
 800b84c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b850:	2300      	movs	r3, #0
}
 800b852:	4618      	mov	r0, r3
 800b854:	3714      	adds	r7, #20
 800b856:	46bd      	mov	sp, r7
 800b858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85c:	4770      	bx	lr

0800b85e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b85e:	b580      	push	{r7, lr}
 800b860:	b084      	sub	sp, #16
 800b862:	af00      	add	r7, sp, #0
 800b864:	6078      	str	r0, [r7, #4]
 800b866:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b86e:	2b01      	cmp	r3, #1
 800b870:	d101      	bne.n	800b876 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b872:	2302      	movs	r3, #2
 800b874:	e02d      	b.n	800b8d2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	2201      	movs	r2, #1
 800b87a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	2224      	movs	r2, #36	; 0x24
 800b882:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	681a      	ldr	r2, [r3, #0]
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	f022 0201 	bic.w	r2, r2, #1
 800b89c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	689b      	ldr	r3, [r3, #8]
 800b8a4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	683a      	ldr	r2, [r7, #0]
 800b8ae:	430a      	orrs	r2, r1
 800b8b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b8b2:	6878      	ldr	r0, [r7, #4]
 800b8b4:	f000 f850 	bl	800b958 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	68fa      	ldr	r2, [r7, #12]
 800b8be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	2220      	movs	r2, #32
 800b8c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b8d0:	2300      	movs	r3, #0
}
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	3710      	adds	r7, #16
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	bd80      	pop	{r7, pc}

0800b8da <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b8da:	b580      	push	{r7, lr}
 800b8dc:	b084      	sub	sp, #16
 800b8de:	af00      	add	r7, sp, #0
 800b8e0:	6078      	str	r0, [r7, #4]
 800b8e2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b8ea:	2b01      	cmp	r3, #1
 800b8ec:	d101      	bne.n	800b8f2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b8ee:	2302      	movs	r3, #2
 800b8f0:	e02d      	b.n	800b94e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	2201      	movs	r2, #1
 800b8f6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	2224      	movs	r2, #36	; 0x24
 800b8fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	681a      	ldr	r2, [r3, #0]
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	f022 0201 	bic.w	r2, r2, #1
 800b918:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	689b      	ldr	r3, [r3, #8]
 800b920:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	683a      	ldr	r2, [r7, #0]
 800b92a:	430a      	orrs	r2, r1
 800b92c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b92e:	6878      	ldr	r0, [r7, #4]
 800b930:	f000 f812 	bl	800b958 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	68fa      	ldr	r2, [r7, #12]
 800b93a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	2220      	movs	r2, #32
 800b940:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2200      	movs	r2, #0
 800b948:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b94c:	2300      	movs	r3, #0
}
 800b94e:	4618      	mov	r0, r3
 800b950:	3710      	adds	r7, #16
 800b952:	46bd      	mov	sp, r7
 800b954:	bd80      	pop	{r7, pc}
	...

0800b958 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b958:	b480      	push	{r7}
 800b95a:	b089      	sub	sp, #36	; 0x24
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800b960:	4a2f      	ldr	r2, [pc, #188]	; (800ba20 <UARTEx_SetNbDataToProcess+0xc8>)
 800b962:	f107 0314 	add.w	r3, r7, #20
 800b966:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b96a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800b96e:	4a2d      	ldr	r2, [pc, #180]	; (800ba24 <UARTEx_SetNbDataToProcess+0xcc>)
 800b970:	f107 030c 	add.w	r3, r7, #12
 800b974:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b978:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b980:	2b00      	cmp	r3, #0
 800b982:	d108      	bne.n	800b996 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	2201      	movs	r2, #1
 800b988:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	2201      	movs	r2, #1
 800b990:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b994:	e03d      	b.n	800ba12 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b996:	2310      	movs	r3, #16
 800b998:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b99a:	2310      	movs	r3, #16
 800b99c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	689b      	ldr	r3, [r3, #8]
 800b9a4:	0e5b      	lsrs	r3, r3, #25
 800b9a6:	b2db      	uxtb	r3, r3
 800b9a8:	f003 0307 	and.w	r3, r3, #7
 800b9ac:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	689b      	ldr	r3, [r3, #8]
 800b9b4:	0f5b      	lsrs	r3, r3, #29
 800b9b6:	b2db      	uxtb	r3, r3
 800b9b8:	f003 0307 	and.w	r3, r3, #7
 800b9bc:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800b9be:	7fbb      	ldrb	r3, [r7, #30]
 800b9c0:	7f3a      	ldrb	r2, [r7, #28]
 800b9c2:	f107 0120 	add.w	r1, r7, #32
 800b9c6:	440a      	add	r2, r1
 800b9c8:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800b9cc:	fb02 f303 	mul.w	r3, r2, r3
 800b9d0:	7f3a      	ldrb	r2, [r7, #28]
 800b9d2:	f107 0120 	add.w	r1, r7, #32
 800b9d6:	440a      	add	r2, r1
 800b9d8:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800b9dc:	fb93 f3f2 	sdiv	r3, r3, r2
 800b9e0:	b29a      	uxth	r2, r3
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800b9e8:	7ffb      	ldrb	r3, [r7, #31]
 800b9ea:	7f7a      	ldrb	r2, [r7, #29]
 800b9ec:	f107 0120 	add.w	r1, r7, #32
 800b9f0:	440a      	add	r2, r1
 800b9f2:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800b9f6:	fb02 f303 	mul.w	r3, r2, r3
 800b9fa:	7f7a      	ldrb	r2, [r7, #29]
 800b9fc:	f107 0120 	add.w	r1, r7, #32
 800ba00:	440a      	add	r2, r1
 800ba02:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800ba06:	fb93 f3f2 	sdiv	r3, r3, r2
 800ba0a:	b29a      	uxth	r2, r3
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ba12:	bf00      	nop
 800ba14:	3724      	adds	r7, #36	; 0x24
 800ba16:	46bd      	mov	sp, r7
 800ba18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1c:	4770      	bx	lr
 800ba1e:	bf00      	nop
 800ba20:	08015764 	.word	0x08015764
 800ba24:	0801576c 	.word	0x0801576c

0800ba28 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ba28:	b084      	sub	sp, #16
 800ba2a:	b580      	push	{r7, lr}
 800ba2c:	b084      	sub	sp, #16
 800ba2e:	af00      	add	r7, sp, #0
 800ba30:	6078      	str	r0, [r7, #4]
 800ba32:	f107 001c 	add.w	r0, r7, #28
 800ba36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ba3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba3c:	2b01      	cmp	r3, #1
 800ba3e:	d120      	bne.n	800ba82 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba44:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	68da      	ldr	r2, [r3, #12]
 800ba50:	4b25      	ldr	r3, [pc, #148]	; (800bae8 <USB_CoreInit+0xc0>)
 800ba52:	4013      	ands	r3, r2
 800ba54:	687a      	ldr	r2, [r7, #4]
 800ba56:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	68db      	ldr	r3, [r3, #12]
 800ba5c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ba64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba66:	2b01      	cmp	r3, #1
 800ba68:	d105      	bne.n	800ba76 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	68db      	ldr	r3, [r3, #12]
 800ba6e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800ba76:	6878      	ldr	r0, [r7, #4]
 800ba78:	f000 f94c 	bl	800bd14 <USB_CoreReset>
 800ba7c:	4603      	mov	r3, r0
 800ba7e:	73fb      	strb	r3, [r7, #15]
 800ba80:	e01a      	b.n	800bab8 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	68db      	ldr	r3, [r3, #12]
 800ba86:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800ba8e:	6878      	ldr	r0, [r7, #4]
 800ba90:	f000 f940 	bl	800bd14 <USB_CoreReset>
 800ba94:	4603      	mov	r3, r0
 800ba96:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ba98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d106      	bne.n	800baac <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800baa2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	639a      	str	r2, [r3, #56]	; 0x38
 800baaa:	e005      	b.n	800bab8 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bab0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800bab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baba:	2b01      	cmp	r3, #1
 800babc:	d10b      	bne.n	800bad6 <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	689b      	ldr	r3, [r3, #8]
 800bac2:	f043 0206 	orr.w	r2, r3, #6
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	689b      	ldr	r3, [r3, #8]
 800bace:	f043 0220 	orr.w	r2, r3, #32
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800bad6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bad8:	4618      	mov	r0, r3
 800bada:	3710      	adds	r7, #16
 800badc:	46bd      	mov	sp, r7
 800bade:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bae2:	b004      	add	sp, #16
 800bae4:	4770      	bx	lr
 800bae6:	bf00      	nop
 800bae8:	ffbdffbf 	.word	0xffbdffbf

0800baec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800baec:	b480      	push	{r7}
 800baee:	b083      	sub	sp, #12
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	689b      	ldr	r3, [r3, #8]
 800baf8:	f043 0201 	orr.w	r2, r3, #1
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bb00:	2300      	movs	r3, #0
}
 800bb02:	4618      	mov	r0, r3
 800bb04:	370c      	adds	r7, #12
 800bb06:	46bd      	mov	sp, r7
 800bb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0c:	4770      	bx	lr

0800bb0e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bb0e:	b480      	push	{r7}
 800bb10:	b083      	sub	sp, #12
 800bb12:	af00      	add	r7, sp, #0
 800bb14:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	689b      	ldr	r3, [r3, #8]
 800bb1a:	f023 0201 	bic.w	r2, r3, #1
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bb22:	2300      	movs	r3, #0
}
 800bb24:	4618      	mov	r0, r3
 800bb26:	370c      	adds	r7, #12
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2e:	4770      	bx	lr

0800bb30 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b082      	sub	sp, #8
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
 800bb38:	460b      	mov	r3, r1
 800bb3a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	68db      	ldr	r3, [r3, #12]
 800bb40:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800bb48:	78fb      	ldrb	r3, [r7, #3]
 800bb4a:	2b01      	cmp	r3, #1
 800bb4c:	d106      	bne.n	800bb5c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	68db      	ldr	r3, [r3, #12]
 800bb52:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	60da      	str	r2, [r3, #12]
 800bb5a:	e00b      	b.n	800bb74 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800bb5c:	78fb      	ldrb	r3, [r7, #3]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d106      	bne.n	800bb70 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	68db      	ldr	r3, [r3, #12]
 800bb66:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	60da      	str	r2, [r3, #12]
 800bb6e:	e001      	b.n	800bb74 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800bb70:	2301      	movs	r3, #1
 800bb72:	e003      	b.n	800bb7c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800bb74:	2032      	movs	r0, #50	; 0x32
 800bb76:	f7f9 ffcf 	bl	8005b18 <HAL_Delay>

  return HAL_OK;
 800bb7a:	2300      	movs	r3, #0
}
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	3708      	adds	r7, #8
 800bb80:	46bd      	mov	sp, r7
 800bb82:	bd80      	pop	{r7, pc}

0800bb84 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800bb84:	b480      	push	{r7}
 800bb86:	b085      	sub	sp, #20
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
 800bb8c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800bb8e:	2300      	movs	r3, #0
 800bb90:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	019b      	lsls	r3, r3, #6
 800bb96:	f043 0220 	orr.w	r2, r3, #32
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	3301      	adds	r3, #1
 800bba2:	60fb      	str	r3, [r7, #12]
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	4a09      	ldr	r2, [pc, #36]	; (800bbcc <USB_FlushTxFifo+0x48>)
 800bba8:	4293      	cmp	r3, r2
 800bbaa:	d901      	bls.n	800bbb0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800bbac:	2303      	movs	r3, #3
 800bbae:	e006      	b.n	800bbbe <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	691b      	ldr	r3, [r3, #16]
 800bbb4:	f003 0320 	and.w	r3, r3, #32
 800bbb8:	2b20      	cmp	r3, #32
 800bbba:	d0f0      	beq.n	800bb9e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800bbbc:	2300      	movs	r3, #0
}
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	3714      	adds	r7, #20
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc8:	4770      	bx	lr
 800bbca:	bf00      	nop
 800bbcc:	00030d40 	.word	0x00030d40

0800bbd0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bbd0:	b480      	push	{r7}
 800bbd2:	b085      	sub	sp, #20
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800bbd8:	2300      	movs	r3, #0
 800bbda:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	2210      	movs	r2, #16
 800bbe0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	3301      	adds	r3, #1
 800bbe6:	60fb      	str	r3, [r7, #12]
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	4a09      	ldr	r2, [pc, #36]	; (800bc10 <USB_FlushRxFifo+0x40>)
 800bbec:	4293      	cmp	r3, r2
 800bbee:	d901      	bls.n	800bbf4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800bbf0:	2303      	movs	r3, #3
 800bbf2:	e006      	b.n	800bc02 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	691b      	ldr	r3, [r3, #16]
 800bbf8:	f003 0310 	and.w	r3, r3, #16
 800bbfc:	2b10      	cmp	r3, #16
 800bbfe:	d0f0      	beq.n	800bbe2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800bc00:	2300      	movs	r3, #0
}
 800bc02:	4618      	mov	r0, r3
 800bc04:	3714      	adds	r7, #20
 800bc06:	46bd      	mov	sp, r7
 800bc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0c:	4770      	bx	lr
 800bc0e:	bf00      	nop
 800bc10:	00030d40 	.word	0x00030d40

0800bc14 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800bc14:	b480      	push	{r7}
 800bc16:	b089      	sub	sp, #36	; 0x24
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	60f8      	str	r0, [r7, #12]
 800bc1c:	60b9      	str	r1, [r7, #8]
 800bc1e:	4611      	mov	r1, r2
 800bc20:	461a      	mov	r2, r3
 800bc22:	460b      	mov	r3, r1
 800bc24:	71fb      	strb	r3, [r7, #7]
 800bc26:	4613      	mov	r3, r2
 800bc28:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800bc2e:	68bb      	ldr	r3, [r7, #8]
 800bc30:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800bc32:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d11a      	bne.n	800bc70 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800bc3a:	88bb      	ldrh	r3, [r7, #4]
 800bc3c:	3303      	adds	r3, #3
 800bc3e:	089b      	lsrs	r3, r3, #2
 800bc40:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800bc42:	2300      	movs	r3, #0
 800bc44:	61bb      	str	r3, [r7, #24]
 800bc46:	e00f      	b.n	800bc68 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800bc48:	79fb      	ldrb	r3, [r7, #7]
 800bc4a:	031a      	lsls	r2, r3, #12
 800bc4c:	697b      	ldr	r3, [r7, #20]
 800bc4e:	4413      	add	r3, r2
 800bc50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc54:	461a      	mov	r2, r3
 800bc56:	69fb      	ldr	r3, [r7, #28]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800bc5c:	69fb      	ldr	r3, [r7, #28]
 800bc5e:	3304      	adds	r3, #4
 800bc60:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800bc62:	69bb      	ldr	r3, [r7, #24]
 800bc64:	3301      	adds	r3, #1
 800bc66:	61bb      	str	r3, [r7, #24]
 800bc68:	69ba      	ldr	r2, [r7, #24]
 800bc6a:	693b      	ldr	r3, [r7, #16]
 800bc6c:	429a      	cmp	r2, r3
 800bc6e:	d3eb      	bcc.n	800bc48 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800bc70:	2300      	movs	r3, #0
}
 800bc72:	4618      	mov	r0, r3
 800bc74:	3724      	adds	r7, #36	; 0x24
 800bc76:	46bd      	mov	sp, r7
 800bc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7c:	4770      	bx	lr

0800bc7e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800bc7e:	b480      	push	{r7}
 800bc80:	b089      	sub	sp, #36	; 0x24
 800bc82:	af00      	add	r7, sp, #0
 800bc84:	60f8      	str	r0, [r7, #12]
 800bc86:	60b9      	str	r1, [r7, #8]
 800bc88:	4613      	mov	r3, r2
 800bc8a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800bc90:	68bb      	ldr	r3, [r7, #8]
 800bc92:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800bc94:	88fb      	ldrh	r3, [r7, #6]
 800bc96:	3303      	adds	r3, #3
 800bc98:	089b      	lsrs	r3, r3, #2
 800bc9a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	61bb      	str	r3, [r7, #24]
 800bca0:	e00b      	b.n	800bcba <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800bca2:	697b      	ldr	r3, [r7, #20]
 800bca4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bca8:	681a      	ldr	r2, [r3, #0]
 800bcaa:	69fb      	ldr	r3, [r7, #28]
 800bcac:	601a      	str	r2, [r3, #0]
    pDest++;
 800bcae:	69fb      	ldr	r3, [r7, #28]
 800bcb0:	3304      	adds	r3, #4
 800bcb2:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800bcb4:	69bb      	ldr	r3, [r7, #24]
 800bcb6:	3301      	adds	r3, #1
 800bcb8:	61bb      	str	r3, [r7, #24]
 800bcba:	69ba      	ldr	r2, [r7, #24]
 800bcbc:	693b      	ldr	r3, [r7, #16]
 800bcbe:	429a      	cmp	r2, r3
 800bcc0:	d3ef      	bcc.n	800bca2 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800bcc2:	69fb      	ldr	r3, [r7, #28]
}
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	3724      	adds	r7, #36	; 0x24
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcce:	4770      	bx	lr

0800bcd0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800bcd0:	b480      	push	{r7}
 800bcd2:	b085      	sub	sp, #20
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	695b      	ldr	r3, [r3, #20]
 800bcdc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	699b      	ldr	r3, [r3, #24]
 800bce2:	68fa      	ldr	r2, [r7, #12]
 800bce4:	4013      	ands	r3, r2
 800bce6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800bce8:	68fb      	ldr	r3, [r7, #12]
}
 800bcea:	4618      	mov	r0, r3
 800bcec:	3714      	adds	r7, #20
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf4:	4770      	bx	lr

0800bcf6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800bcf6:	b480      	push	{r7}
 800bcf8:	b083      	sub	sp, #12
 800bcfa:	af00      	add	r7, sp, #0
 800bcfc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	695b      	ldr	r3, [r3, #20]
 800bd02:	f003 0301 	and.w	r3, r3, #1
}
 800bd06:	4618      	mov	r0, r3
 800bd08:	370c      	adds	r7, #12
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd10:	4770      	bx	lr
	...

0800bd14 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bd14:	b480      	push	{r7}
 800bd16:	b085      	sub	sp, #20
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	3301      	adds	r3, #1
 800bd24:	60fb      	str	r3, [r7, #12]
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	4a13      	ldr	r2, [pc, #76]	; (800bd78 <USB_CoreReset+0x64>)
 800bd2a:	4293      	cmp	r3, r2
 800bd2c:	d901      	bls.n	800bd32 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800bd2e:	2303      	movs	r3, #3
 800bd30:	e01b      	b.n	800bd6a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	691b      	ldr	r3, [r3, #16]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	daf2      	bge.n	800bd20 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	691b      	ldr	r3, [r3, #16]
 800bd42:	f043 0201 	orr.w	r2, r3, #1
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	3301      	adds	r3, #1
 800bd4e:	60fb      	str	r3, [r7, #12]
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	4a09      	ldr	r2, [pc, #36]	; (800bd78 <USB_CoreReset+0x64>)
 800bd54:	4293      	cmp	r3, r2
 800bd56:	d901      	bls.n	800bd5c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800bd58:	2303      	movs	r3, #3
 800bd5a:	e006      	b.n	800bd6a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	691b      	ldr	r3, [r3, #16]
 800bd60:	f003 0301 	and.w	r3, r3, #1
 800bd64:	2b01      	cmp	r3, #1
 800bd66:	d0f0      	beq.n	800bd4a <USB_CoreReset+0x36>

  return HAL_OK;
 800bd68:	2300      	movs	r3, #0
}
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	3714      	adds	r7, #20
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd74:	4770      	bx	lr
 800bd76:	bf00      	nop
 800bd78:	00030d40 	.word	0x00030d40

0800bd7c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bd7c:	b084      	sub	sp, #16
 800bd7e:	b580      	push	{r7, lr}
 800bd80:	b084      	sub	sp, #16
 800bd82:	af00      	add	r7, sp, #0
 800bd84:	6078      	str	r0, [r7, #4]
 800bd86:	f107 001c 	add.w	r0, r7, #28
 800bd8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800bd92:	68bb      	ldr	r3, [r7, #8]
 800bd94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bd98:	461a      	mov	r2, r3
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bda2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	639a      	str	r2, [r3, #56]	; 0x38


  if ((USBx->CID & (0x1U << 8)) != 0U)
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d018      	beq.n	800bdf4 <USB_HostInit+0x78>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800bdc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdc4:	2b01      	cmp	r3, #1
 800bdc6:	d10a      	bne.n	800bdde <USB_HostInit+0x62>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800bdc8:	68bb      	ldr	r3, [r7, #8]
 800bdca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	68ba      	ldr	r2, [r7, #8]
 800bdd2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bdd6:	f043 0304 	orr.w	r3, r3, #4
 800bdda:	6013      	str	r3, [r2, #0]
 800bddc:	e014      	b.n	800be08 <USB_HostInit+0x8c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800bdde:	68bb      	ldr	r3, [r7, #8]
 800bde0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	68ba      	ldr	r2, [r7, #8]
 800bde8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bdec:	f023 0304 	bic.w	r3, r3, #4
 800bdf0:	6013      	str	r3, [r2, #0]
 800bdf2:	e009      	b.n	800be08 <USB_HostInit+0x8c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800bdf4:	68bb      	ldr	r3, [r7, #8]
 800bdf6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	68ba      	ldr	r2, [r7, #8]
 800bdfe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800be02:	f023 0304 	bic.w	r3, r3, #4
 800be06:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800be08:	2110      	movs	r1, #16
 800be0a:	6878      	ldr	r0, [r7, #4]
 800be0c:	f7ff feba 	bl	800bb84 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800be10:	6878      	ldr	r0, [r7, #4]
 800be12:	f7ff fedd 	bl	800bbd0 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800be16:	2300      	movs	r3, #0
 800be18:	60fb      	str	r3, [r7, #12]
 800be1a:	e015      	b.n	800be48 <USB_HostInit+0xcc>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	015a      	lsls	r2, r3, #5
 800be20:	68bb      	ldr	r3, [r7, #8]
 800be22:	4413      	add	r3, r2
 800be24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800be28:	461a      	mov	r2, r3
 800be2a:	f04f 33ff 	mov.w	r3, #4294967295
 800be2e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	015a      	lsls	r2, r3, #5
 800be34:	68bb      	ldr	r3, [r7, #8]
 800be36:	4413      	add	r3, r2
 800be38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800be3c:	461a      	mov	r2, r3
 800be3e:	2300      	movs	r3, #0
 800be40:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	3301      	adds	r3, #1
 800be46:	60fb      	str	r3, [r7, #12]
 800be48:	6a3b      	ldr	r3, [r7, #32]
 800be4a:	68fa      	ldr	r2, [r7, #12]
 800be4c:	429a      	cmp	r2, r3
 800be4e:	d3e5      	bcc.n	800be1c <USB_HostInit+0xa0>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800be50:	2101      	movs	r1, #1
 800be52:	6878      	ldr	r0, [r7, #4]
 800be54:	f000 f8ac 	bl	800bfb0 <USB_DriveVbus>

  HAL_Delay(200U);
 800be58:	20c8      	movs	r0, #200	; 0xc8
 800be5a:	f7f9 fe5d 	bl	8005b18 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	2200      	movs	r2, #0
 800be62:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	f04f 32ff 	mov.w	r2, #4294967295
 800be6a:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be74:	2b00      	cmp	r3, #0
 800be76:	d00b      	beq.n	800be90 <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800be7e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	4a14      	ldr	r2, [pc, #80]	; (800bed4 <USB_HostInit+0x158>)
 800be84:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	4a13      	ldr	r2, [pc, #76]	; (800bed8 <USB_HostInit+0x15c>)
 800be8a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800be8e:	e009      	b.n	800bea4 <USB_HostInit+0x128>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	2280      	movs	r2, #128	; 0x80
 800be94:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	4a10      	ldr	r2, [pc, #64]	; (800bedc <USB_HostInit+0x160>)
 800be9a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	4a10      	ldr	r2, [pc, #64]	; (800bee0 <USB_HostInit+0x164>)
 800bea0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800bea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d105      	bne.n	800beb6 <USB_HostInit+0x13a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	699b      	ldr	r3, [r3, #24]
 800beae:	f043 0210 	orr.w	r2, r3, #16
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	699a      	ldr	r2, [r3, #24]
 800beba:	4b0a      	ldr	r3, [pc, #40]	; (800bee4 <USB_HostInit+0x168>)
 800bebc:	4313      	orrs	r3, r2
 800bebe:	687a      	ldr	r2, [r7, #4]
 800bec0:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800bec2:	2300      	movs	r3, #0
}
 800bec4:	4618      	mov	r0, r3
 800bec6:	3710      	adds	r7, #16
 800bec8:	46bd      	mov	sp, r7
 800beca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bece:	b004      	add	sp, #16
 800bed0:	4770      	bx	lr
 800bed2:	bf00      	nop
 800bed4:	01000200 	.word	0x01000200
 800bed8:	00e00300 	.word	0x00e00300
 800bedc:	00600080 	.word	0x00600080
 800bee0:	004000e0 	.word	0x004000e0
 800bee4:	a3200008 	.word	0xa3200008

0800bee8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800bee8:	b480      	push	{r7}
 800beea:	b085      	sub	sp, #20
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
 800bef0:	460b      	mov	r3, r1
 800bef2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	68fa      	ldr	r2, [r7, #12]
 800bf02:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bf06:	f023 0303 	bic.w	r3, r3, #3
 800bf0a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bf12:	681a      	ldr	r2, [r3, #0]
 800bf14:	78fb      	ldrb	r3, [r7, #3]
 800bf16:	f003 0303 	and.w	r3, r3, #3
 800bf1a:	68f9      	ldr	r1, [r7, #12]
 800bf1c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800bf20:	4313      	orrs	r3, r2
 800bf22:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800bf24:	78fb      	ldrb	r3, [r7, #3]
 800bf26:	2b01      	cmp	r3, #1
 800bf28:	d107      	bne.n	800bf3a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bf30:	461a      	mov	r2, r3
 800bf32:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800bf36:	6053      	str	r3, [r2, #4]
 800bf38:	e009      	b.n	800bf4e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800bf3a:	78fb      	ldrb	r3, [r7, #3]
 800bf3c:	2b02      	cmp	r3, #2
 800bf3e:	d106      	bne.n	800bf4e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bf46:	461a      	mov	r2, r3
 800bf48:	f241 7370 	movw	r3, #6000	; 0x1770
 800bf4c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800bf4e:	2300      	movs	r3, #0
}
 800bf50:	4618      	mov	r0, r3
 800bf52:	3714      	adds	r7, #20
 800bf54:	46bd      	mov	sp, r7
 800bf56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5a:	4770      	bx	lr

0800bf5c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b084      	sub	sp, #16
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800bf68:	2300      	movs	r3, #0
 800bf6a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800bf76:	68bb      	ldr	r3, [r7, #8]
 800bf78:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800bf7c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800bf7e:	68bb      	ldr	r3, [r7, #8]
 800bf80:	68fa      	ldr	r2, [r7, #12]
 800bf82:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800bf86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bf8a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800bf8c:	2064      	movs	r0, #100	; 0x64
 800bf8e:	f7f9 fdc3 	bl	8005b18 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800bf92:	68bb      	ldr	r3, [r7, #8]
 800bf94:	68fa      	ldr	r2, [r7, #12]
 800bf96:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800bf9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bf9e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800bfa0:	200a      	movs	r0, #10
 800bfa2:	f7f9 fdb9 	bl	8005b18 <HAL_Delay>

  return HAL_OK;
 800bfa6:	2300      	movs	r3, #0
}
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	3710      	adds	r7, #16
 800bfac:	46bd      	mov	sp, r7
 800bfae:	bd80      	pop	{r7, pc}

0800bfb0 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800bfb0:	b480      	push	{r7}
 800bfb2:	b085      	sub	sp, #20
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
 800bfb8:	460b      	mov	r3, r1
 800bfba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800bfce:	68bb      	ldr	r3, [r7, #8]
 800bfd0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800bfd4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800bfd6:	68bb      	ldr	r3, [r7, #8]
 800bfd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d109      	bne.n	800bff4 <USB_DriveVbus+0x44>
 800bfe0:	78fb      	ldrb	r3, [r7, #3]
 800bfe2:	2b01      	cmp	r3, #1
 800bfe4:	d106      	bne.n	800bff4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800bfe6:	68bb      	ldr	r3, [r7, #8]
 800bfe8:	68fa      	ldr	r2, [r7, #12]
 800bfea:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800bfee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800bff2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800bff4:	68bb      	ldr	r3, [r7, #8]
 800bff6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bffa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bffe:	d109      	bne.n	800c014 <USB_DriveVbus+0x64>
 800c000:	78fb      	ldrb	r3, [r7, #3]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d106      	bne.n	800c014 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800c006:	68bb      	ldr	r3, [r7, #8]
 800c008:	68fa      	ldr	r2, [r7, #12]
 800c00a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c00e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c012:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800c014:	2300      	movs	r3, #0
}
 800c016:	4618      	mov	r0, r3
 800c018:	3714      	adds	r7, #20
 800c01a:	46bd      	mov	sp, r7
 800c01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c020:	4770      	bx	lr

0800c022 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800c022:	b480      	push	{r7}
 800c024:	b085      	sub	sp, #20
 800c026:	af00      	add	r7, sp, #0
 800c028:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800c02e:	2300      	movs	r3, #0
 800c030:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800c03c:	68bb      	ldr	r3, [r7, #8]
 800c03e:	0c5b      	lsrs	r3, r3, #17
 800c040:	f003 0303 	and.w	r3, r3, #3
}
 800c044:	4618      	mov	r0, r3
 800c046:	3714      	adds	r7, #20
 800c048:	46bd      	mov	sp, r7
 800c04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04e:	4770      	bx	lr

0800c050 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800c050:	b480      	push	{r7}
 800c052:	b085      	sub	sp, #20
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c062:	689b      	ldr	r3, [r3, #8]
 800c064:	b29b      	uxth	r3, r3
}
 800c066:	4618      	mov	r0, r3
 800c068:	3714      	adds	r7, #20
 800c06a:	46bd      	mov	sp, r7
 800c06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c070:	4770      	bx	lr
	...

0800c074 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 800c074:	b480      	push	{r7}
 800c076:	b087      	sub	sp, #28
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
 800c07c:	4608      	mov	r0, r1
 800c07e:	4611      	mov	r1, r2
 800c080:	461a      	mov	r2, r3
 800c082:	4603      	mov	r3, r0
 800c084:	70fb      	strb	r3, [r7, #3]
 800c086:	460b      	mov	r3, r1
 800c088:	70bb      	strb	r3, [r7, #2]
 800c08a:	4613      	mov	r3, r2
 800c08c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800c08e:	2300      	movs	r3, #0
 800c090:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800c096:	78fb      	ldrb	r3, [r7, #3]
 800c098:	015a      	lsls	r2, r3, #5
 800c09a:	68bb      	ldr	r3, [r7, #8]
 800c09c:	4413      	add	r3, r2
 800c09e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c0a2:	461a      	mov	r2, r3
 800c0a4:	f04f 33ff 	mov.w	r3, #4294967295
 800c0a8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800c0aa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c0ae:	2b03      	cmp	r3, #3
 800c0b0:	d87e      	bhi.n	800c1b0 <USB_HC_Init+0x13c>
 800c0b2:	a201      	add	r2, pc, #4	; (adr r2, 800c0b8 <USB_HC_Init+0x44>)
 800c0b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0b8:	0800c0c9 	.word	0x0800c0c9
 800c0bc:	0800c173 	.word	0x0800c173
 800c0c0:	0800c0c9 	.word	0x0800c0c9
 800c0c4:	0800c135 	.word	0x0800c135
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c0c8:	78fb      	ldrb	r3, [r7, #3]
 800c0ca:	015a      	lsls	r2, r3, #5
 800c0cc:	68bb      	ldr	r3, [r7, #8]
 800c0ce:	4413      	add	r3, r2
 800c0d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c0d4:	461a      	mov	r2, r3
 800c0d6:	f240 439d 	movw	r3, #1181	; 0x49d
 800c0da:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800c0dc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	da10      	bge.n	800c106 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800c0e4:	78fb      	ldrb	r3, [r7, #3]
 800c0e6:	015a      	lsls	r2, r3, #5
 800c0e8:	68bb      	ldr	r3, [r7, #8]
 800c0ea:	4413      	add	r3, r2
 800c0ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c0f0:	68db      	ldr	r3, [r3, #12]
 800c0f2:	78fa      	ldrb	r2, [r7, #3]
 800c0f4:	0151      	lsls	r1, r2, #5
 800c0f6:	68ba      	ldr	r2, [r7, #8]
 800c0f8:	440a      	add	r2, r1
 800c0fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c0fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c102:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 800c104:	e057      	b.n	800c1b6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c10a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d051      	beq.n	800c1b6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800c112:	78fb      	ldrb	r3, [r7, #3]
 800c114:	015a      	lsls	r2, r3, #5
 800c116:	68bb      	ldr	r3, [r7, #8]
 800c118:	4413      	add	r3, r2
 800c11a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c11e:	68db      	ldr	r3, [r3, #12]
 800c120:	78fa      	ldrb	r2, [r7, #3]
 800c122:	0151      	lsls	r1, r2, #5
 800c124:	68ba      	ldr	r2, [r7, #8]
 800c126:	440a      	add	r2, r1
 800c128:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c12c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800c130:	60d3      	str	r3, [r2, #12]
      break;
 800c132:	e040      	b.n	800c1b6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c134:	78fb      	ldrb	r3, [r7, #3]
 800c136:	015a      	lsls	r2, r3, #5
 800c138:	68bb      	ldr	r3, [r7, #8]
 800c13a:	4413      	add	r3, r2
 800c13c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c140:	461a      	mov	r2, r3
 800c142:	f240 639d 	movw	r3, #1693	; 0x69d
 800c146:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800c148:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	da34      	bge.n	800c1ba <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800c150:	78fb      	ldrb	r3, [r7, #3]
 800c152:	015a      	lsls	r2, r3, #5
 800c154:	68bb      	ldr	r3, [r7, #8]
 800c156:	4413      	add	r3, r2
 800c158:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c15c:	68db      	ldr	r3, [r3, #12]
 800c15e:	78fa      	ldrb	r2, [r7, #3]
 800c160:	0151      	lsls	r1, r2, #5
 800c162:	68ba      	ldr	r2, [r7, #8]
 800c164:	440a      	add	r2, r1
 800c166:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c16a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c16e:	60d3      	str	r3, [r2, #12]
      }

      break;
 800c170:	e023      	b.n	800c1ba <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c172:	78fb      	ldrb	r3, [r7, #3]
 800c174:	015a      	lsls	r2, r3, #5
 800c176:	68bb      	ldr	r3, [r7, #8]
 800c178:	4413      	add	r3, r2
 800c17a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c17e:	461a      	mov	r2, r3
 800c180:	f240 2325 	movw	r3, #549	; 0x225
 800c184:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800c186:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	da17      	bge.n	800c1be <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800c18e:	78fb      	ldrb	r3, [r7, #3]
 800c190:	015a      	lsls	r2, r3, #5
 800c192:	68bb      	ldr	r3, [r7, #8]
 800c194:	4413      	add	r3, r2
 800c196:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c19a:	68db      	ldr	r3, [r3, #12]
 800c19c:	78fa      	ldrb	r2, [r7, #3]
 800c19e:	0151      	lsls	r1, r2, #5
 800c1a0:	68ba      	ldr	r2, [r7, #8]
 800c1a2:	440a      	add	r2, r1
 800c1a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c1a8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800c1ac:	60d3      	str	r3, [r2, #12]
      }
      break;
 800c1ae:	e006      	b.n	800c1be <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800c1b0:	2301      	movs	r3, #1
 800c1b2:	75fb      	strb	r3, [r7, #23]
      break;
 800c1b4:	e004      	b.n	800c1c0 <USB_HC_Init+0x14c>
      break;
 800c1b6:	bf00      	nop
 800c1b8:	e002      	b.n	800c1c0 <USB_HC_Init+0x14c>
      break;
 800c1ba:	bf00      	nop
 800c1bc:	e000      	b.n	800c1c0 <USB_HC_Init+0x14c>
      break;
 800c1be:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800c1c0:	68bb      	ldr	r3, [r7, #8]
 800c1c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c1c6:	699a      	ldr	r2, [r3, #24]
 800c1c8:	78fb      	ldrb	r3, [r7, #3]
 800c1ca:	f003 030f 	and.w	r3, r3, #15
 800c1ce:	2101      	movs	r1, #1
 800c1d0:	fa01 f303 	lsl.w	r3, r1, r3
 800c1d4:	68b9      	ldr	r1, [r7, #8]
 800c1d6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c1da:	4313      	orrs	r3, r2
 800c1dc:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	699b      	ldr	r3, [r3, #24]
 800c1e2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800c1ea:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	da03      	bge.n	800c1fa <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800c1f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c1f6:	613b      	str	r3, [r7, #16]
 800c1f8:	e001      	b.n	800c1fe <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800c1fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c202:	2b02      	cmp	r3, #2
 800c204:	d103      	bne.n	800c20e <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800c206:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c20a:	60fb      	str	r3, [r7, #12]
 800c20c:	e001      	b.n	800c212 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800c20e:	2300      	movs	r3, #0
 800c210:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c212:	787b      	ldrb	r3, [r7, #1]
 800c214:	059b      	lsls	r3, r3, #22
 800c216:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800c21a:	78bb      	ldrb	r3, [r7, #2]
 800c21c:	02db      	lsls	r3, r3, #11
 800c21e:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c222:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800c224:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c228:	049b      	lsls	r3, r3, #18
 800c22a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800c22e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c230:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c232:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800c236:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c238:	693b      	ldr	r3, [r7, #16]
 800c23a:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c23c:	78fb      	ldrb	r3, [r7, #3]
 800c23e:	0159      	lsls	r1, r3, #5
 800c240:	68bb      	ldr	r3, [r7, #8]
 800c242:	440b      	add	r3, r1
 800c244:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c248:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c24e:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800c250:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c254:	2b03      	cmp	r3, #3
 800c256:	d10f      	bne.n	800c278 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800c258:	78fb      	ldrb	r3, [r7, #3]
 800c25a:	015a      	lsls	r2, r3, #5
 800c25c:	68bb      	ldr	r3, [r7, #8]
 800c25e:	4413      	add	r3, r2
 800c260:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	78fa      	ldrb	r2, [r7, #3]
 800c268:	0151      	lsls	r1, r2, #5
 800c26a:	68ba      	ldr	r2, [r7, #8]
 800c26c:	440a      	add	r2, r1
 800c26e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c272:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c276:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800c278:	7dfb      	ldrb	r3, [r7, #23]
}
 800c27a:	4618      	mov	r0, r3
 800c27c:	371c      	adds	r7, #28
 800c27e:	46bd      	mov	sp, r7
 800c280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c284:	4770      	bx	lr
 800c286:	bf00      	nop

0800c288 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b08c      	sub	sp, #48	; 0x30
 800c28c:	af02      	add	r7, sp, #8
 800c28e:	60f8      	str	r0, [r7, #12]
 800c290:	60b9      	str	r1, [r7, #8]
 800c292:	4613      	mov	r3, r2
 800c294:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800c29a:	68bb      	ldr	r3, [r7, #8]
 800c29c:	785b      	ldrb	r3, [r3, #1]
 800c29e:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800c2a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c2a4:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d028      	beq.n	800c304 <USB_HC_StartXfer+0x7c>
 800c2b2:	68bb      	ldr	r3, [r7, #8]
 800c2b4:	791b      	ldrb	r3, [r3, #4]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d124      	bne.n	800c304 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800c2ba:	79fb      	ldrb	r3, [r7, #7]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d10b      	bne.n	800c2d8 <USB_HC_StartXfer+0x50>
 800c2c0:	68bb      	ldr	r3, [r7, #8]
 800c2c2:	795b      	ldrb	r3, [r3, #5]
 800c2c4:	2b01      	cmp	r3, #1
 800c2c6:	d107      	bne.n	800c2d8 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800c2c8:	68bb      	ldr	r3, [r7, #8]
 800c2ca:	785b      	ldrb	r3, [r3, #1]
 800c2cc:	4619      	mov	r1, r3
 800c2ce:	68f8      	ldr	r0, [r7, #12]
 800c2d0:	f000 fa2e 	bl	800c730 <USB_DoPing>
      return HAL_OK;
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	e112      	b.n	800c4fe <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 800c2d8:	79fb      	ldrb	r3, [r7, #7]
 800c2da:	2b01      	cmp	r3, #1
 800c2dc:	d112      	bne.n	800c304 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800c2de:	69fb      	ldr	r3, [r7, #28]
 800c2e0:	015a      	lsls	r2, r3, #5
 800c2e2:	6a3b      	ldr	r3, [r7, #32]
 800c2e4:	4413      	add	r3, r2
 800c2e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c2ea:	68db      	ldr	r3, [r3, #12]
 800c2ec:	69fa      	ldr	r2, [r7, #28]
 800c2ee:	0151      	lsls	r1, r2, #5
 800c2f0:	6a3a      	ldr	r2, [r7, #32]
 800c2f2:	440a      	add	r2, r1
 800c2f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c2f8:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800c2fc:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800c2fe:	68bb      	ldr	r3, [r7, #8]
 800c300:	2200      	movs	r2, #0
 800c302:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800c304:	68bb      	ldr	r3, [r7, #8]
 800c306:	691b      	ldr	r3, [r3, #16]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d018      	beq.n	800c33e <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800c30c:	68bb      	ldr	r3, [r7, #8]
 800c30e:	691b      	ldr	r3, [r3, #16]
 800c310:	68ba      	ldr	r2, [r7, #8]
 800c312:	8912      	ldrh	r2, [r2, #8]
 800c314:	4413      	add	r3, r2
 800c316:	3b01      	subs	r3, #1
 800c318:	68ba      	ldr	r2, [r7, #8]
 800c31a:	8912      	ldrh	r2, [r2, #8]
 800c31c:	fbb3 f3f2 	udiv	r3, r3, r2
 800c320:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800c322:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c324:	8b7b      	ldrh	r3, [r7, #26]
 800c326:	429a      	cmp	r2, r3
 800c328:	d90b      	bls.n	800c342 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800c32a:	8b7b      	ldrh	r3, [r7, #26]
 800c32c:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800c32e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c330:	68ba      	ldr	r2, [r7, #8]
 800c332:	8912      	ldrh	r2, [r2, #8]
 800c334:	fb02 f203 	mul.w	r2, r2, r3
 800c338:	68bb      	ldr	r3, [r7, #8]
 800c33a:	611a      	str	r2, [r3, #16]
 800c33c:	e001      	b.n	800c342 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800c33e:	2301      	movs	r3, #1
 800c340:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800c342:	68bb      	ldr	r3, [r7, #8]
 800c344:	78db      	ldrb	r3, [r3, #3]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d006      	beq.n	800c358 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800c34a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c34c:	68ba      	ldr	r2, [r7, #8]
 800c34e:	8912      	ldrh	r2, [r2, #8]
 800c350:	fb02 f203 	mul.w	r2, r2, r3
 800c354:	68bb      	ldr	r3, [r7, #8]
 800c356:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800c358:	68bb      	ldr	r3, [r7, #8]
 800c35a:	691b      	ldr	r3, [r3, #16]
 800c35c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c360:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c362:	04d9      	lsls	r1, r3, #19
 800c364:	4b68      	ldr	r3, [pc, #416]	; (800c508 <USB_HC_StartXfer+0x280>)
 800c366:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800c368:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800c36a:	68bb      	ldr	r3, [r7, #8]
 800c36c:	7a9b      	ldrb	r3, [r3, #10]
 800c36e:	075b      	lsls	r3, r3, #29
 800c370:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800c374:	69f9      	ldr	r1, [r7, #28]
 800c376:	0148      	lsls	r0, r1, #5
 800c378:	6a39      	ldr	r1, [r7, #32]
 800c37a:	4401      	add	r1, r0
 800c37c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c380:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800c382:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800c384:	79fb      	ldrb	r3, [r7, #7]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d009      	beq.n	800c39e <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800c38a:	68bb      	ldr	r3, [r7, #8]
 800c38c:	68d9      	ldr	r1, [r3, #12]
 800c38e:	69fb      	ldr	r3, [r7, #28]
 800c390:	015a      	lsls	r2, r3, #5
 800c392:	6a3b      	ldr	r3, [r7, #32]
 800c394:	4413      	add	r3, r2
 800c396:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c39a:	460a      	mov	r2, r1
 800c39c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800c39e:	6a3b      	ldr	r3, [r7, #32]
 800c3a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c3a4:	689b      	ldr	r3, [r3, #8]
 800c3a6:	f003 0301 	and.w	r3, r3, #1
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	bf0c      	ite	eq
 800c3ae:	2301      	moveq	r3, #1
 800c3b0:	2300      	movne	r3, #0
 800c3b2:	b2db      	uxtb	r3, r3
 800c3b4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800c3b6:	69fb      	ldr	r3, [r7, #28]
 800c3b8:	015a      	lsls	r2, r3, #5
 800c3ba:	6a3b      	ldr	r3, [r7, #32]
 800c3bc:	4413      	add	r3, r2
 800c3be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	69fa      	ldr	r2, [r7, #28]
 800c3c6:	0151      	lsls	r1, r2, #5
 800c3c8:	6a3a      	ldr	r2, [r7, #32]
 800c3ca:	440a      	add	r2, r1
 800c3cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c3d0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c3d4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800c3d6:	69fb      	ldr	r3, [r7, #28]
 800c3d8:	015a      	lsls	r2, r3, #5
 800c3da:	6a3b      	ldr	r3, [r7, #32]
 800c3dc:	4413      	add	r3, r2
 800c3de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c3e2:	681a      	ldr	r2, [r3, #0]
 800c3e4:	7e7b      	ldrb	r3, [r7, #25]
 800c3e6:	075b      	lsls	r3, r3, #29
 800c3e8:	69f9      	ldr	r1, [r7, #28]
 800c3ea:	0148      	lsls	r0, r1, #5
 800c3ec:	6a39      	ldr	r1, [r7, #32]
 800c3ee:	4401      	add	r1, r0
 800c3f0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800c3f4:	4313      	orrs	r3, r2
 800c3f6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800c3f8:	69fb      	ldr	r3, [r7, #28]
 800c3fa:	015a      	lsls	r2, r3, #5
 800c3fc:	6a3b      	ldr	r3, [r7, #32]
 800c3fe:	4413      	add	r3, r2
 800c400:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	4a41      	ldr	r2, [pc, #260]	; (800c50c <USB_HC_StartXfer+0x284>)
 800c408:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800c40a:	4b40      	ldr	r3, [pc, #256]	; (800c50c <USB_HC_StartXfer+0x284>)
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c412:	4a3e      	ldr	r2, [pc, #248]	; (800c50c <USB_HC_StartXfer+0x284>)
 800c414:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800c416:	68bb      	ldr	r3, [r7, #8]
 800c418:	78db      	ldrb	r3, [r3, #3]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d006      	beq.n	800c42c <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800c41e:	4b3b      	ldr	r3, [pc, #236]	; (800c50c <USB_HC_StartXfer+0x284>)
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c426:	4a39      	ldr	r2, [pc, #228]	; (800c50c <USB_HC_StartXfer+0x284>)
 800c428:	6013      	str	r3, [r2, #0]
 800c42a:	e005      	b.n	800c438 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800c42c:	4b37      	ldr	r3, [pc, #220]	; (800c50c <USB_HC_StartXfer+0x284>)
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c434:	4a35      	ldr	r2, [pc, #212]	; (800c50c <USB_HC_StartXfer+0x284>)
 800c436:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800c438:	4b34      	ldr	r3, [pc, #208]	; (800c50c <USB_HC_StartXfer+0x284>)
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c440:	4a32      	ldr	r2, [pc, #200]	; (800c50c <USB_HC_StartXfer+0x284>)
 800c442:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800c444:	69fb      	ldr	r3, [r7, #28]
 800c446:	015a      	lsls	r2, r3, #5
 800c448:	6a3b      	ldr	r3, [r7, #32]
 800c44a:	4413      	add	r3, r2
 800c44c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c450:	461a      	mov	r2, r3
 800c452:	4b2e      	ldr	r3, [pc, #184]	; (800c50c <USB_HC_StartXfer+0x284>)
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 800c458:	79fb      	ldrb	r3, [r7, #7]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d14e      	bne.n	800c4fc <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800c45e:	68bb      	ldr	r3, [r7, #8]
 800c460:	78db      	ldrb	r3, [r3, #3]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d14a      	bne.n	800c4fc <USB_HC_StartXfer+0x274>
 800c466:	68bb      	ldr	r3, [r7, #8]
 800c468:	691b      	ldr	r3, [r3, #16]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d046      	beq.n	800c4fc <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 800c46e:	68bb      	ldr	r3, [r7, #8]
 800c470:	79db      	ldrb	r3, [r3, #7]
 800c472:	2b03      	cmp	r3, #3
 800c474:	d830      	bhi.n	800c4d8 <USB_HC_StartXfer+0x250>
 800c476:	a201      	add	r2, pc, #4	; (adr r2, 800c47c <USB_HC_StartXfer+0x1f4>)
 800c478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c47c:	0800c48d 	.word	0x0800c48d
 800c480:	0800c4b1 	.word	0x0800c4b1
 800c484:	0800c48d 	.word	0x0800c48d
 800c488:	0800c4b1 	.word	0x0800c4b1
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800c48c:	68bb      	ldr	r3, [r7, #8]
 800c48e:	691b      	ldr	r3, [r3, #16]
 800c490:	3303      	adds	r3, #3
 800c492:	089b      	lsrs	r3, r3, #2
 800c494:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800c496:	8afa      	ldrh	r2, [r7, #22]
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c49c:	b29b      	uxth	r3, r3
 800c49e:	429a      	cmp	r2, r3
 800c4a0:	d91c      	bls.n	800c4dc <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	699b      	ldr	r3, [r3, #24]
 800c4a6:	f043 0220 	orr.w	r2, r3, #32
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	619a      	str	r2, [r3, #24]
          }
          break;
 800c4ae:	e015      	b.n	800c4dc <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800c4b0:	68bb      	ldr	r3, [r7, #8]
 800c4b2:	691b      	ldr	r3, [r3, #16]
 800c4b4:	3303      	adds	r3, #3
 800c4b6:	089b      	lsrs	r3, r3, #2
 800c4b8:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800c4ba:	8afa      	ldrh	r2, [r7, #22]
 800c4bc:	6a3b      	ldr	r3, [r7, #32]
 800c4be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c4c2:	691b      	ldr	r3, [r3, #16]
 800c4c4:	b29b      	uxth	r3, r3
 800c4c6:	429a      	cmp	r2, r3
 800c4c8:	d90a      	bls.n	800c4e0 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	699b      	ldr	r3, [r3, #24]
 800c4ce:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	619a      	str	r2, [r3, #24]
          }
          break;
 800c4d6:	e003      	b.n	800c4e0 <USB_HC_StartXfer+0x258>

        default:
          break;
 800c4d8:	bf00      	nop
 800c4da:	e002      	b.n	800c4e2 <USB_HC_StartXfer+0x25a>
          break;
 800c4dc:	bf00      	nop
 800c4de:	e000      	b.n	800c4e2 <USB_HC_StartXfer+0x25a>
          break;
 800c4e0:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800c4e2:	68bb      	ldr	r3, [r7, #8]
 800c4e4:	68d9      	ldr	r1, [r3, #12]
 800c4e6:	68bb      	ldr	r3, [r7, #8]
 800c4e8:	785a      	ldrb	r2, [r3, #1]
 800c4ea:	68bb      	ldr	r3, [r7, #8]
 800c4ec:	691b      	ldr	r3, [r3, #16]
 800c4ee:	b298      	uxth	r0, r3
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	9300      	str	r3, [sp, #0]
 800c4f4:	4603      	mov	r3, r0
 800c4f6:	68f8      	ldr	r0, [r7, #12]
 800c4f8:	f7ff fb8c 	bl	800bc14 <USB_WritePacket>
    }
  }

  return HAL_OK;
 800c4fc:	2300      	movs	r3, #0
}
 800c4fe:	4618      	mov	r0, r3
 800c500:	3728      	adds	r7, #40	; 0x28
 800c502:	46bd      	mov	sp, r7
 800c504:	bd80      	pop	{r7, pc}
 800c506:	bf00      	nop
 800c508:	1ff80000 	.word	0x1ff80000
 800c50c:	240002e4 	.word	0x240002e4

0800c510 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c510:	b480      	push	{r7}
 800c512:	b085      	sub	sp, #20
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c522:	695b      	ldr	r3, [r3, #20]
 800c524:	b29b      	uxth	r3, r3
}
 800c526:	4618      	mov	r0, r3
 800c528:	3714      	adds	r7, #20
 800c52a:	46bd      	mov	sp, r7
 800c52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c530:	4770      	bx	lr

0800c532 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800c532:	b480      	push	{r7}
 800c534:	b087      	sub	sp, #28
 800c536:	af00      	add	r7, sp, #0
 800c538:	6078      	str	r0, [r7, #4]
 800c53a:	460b      	mov	r3, r1
 800c53c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800c542:	78fb      	ldrb	r3, [r7, #3]
 800c544:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800c546:	2300      	movs	r3, #0
 800c548:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	015a      	lsls	r2, r3, #5
 800c54e:	693b      	ldr	r3, [r7, #16]
 800c550:	4413      	add	r3, r2
 800c552:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	0c9b      	lsrs	r3, r3, #18
 800c55a:	f003 0303 	and.w	r3, r3, #3
 800c55e:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800c560:	68bb      	ldr	r3, [r7, #8]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d002      	beq.n	800c56c <USB_HC_Halt+0x3a>
 800c566:	68bb      	ldr	r3, [r7, #8]
 800c568:	2b02      	cmp	r3, #2
 800c56a:	d16c      	bne.n	800c646 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	015a      	lsls	r2, r3, #5
 800c570:	693b      	ldr	r3, [r7, #16]
 800c572:	4413      	add	r3, r2
 800c574:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	68fa      	ldr	r2, [r7, #12]
 800c57c:	0151      	lsls	r1, r2, #5
 800c57e:	693a      	ldr	r2, [r7, #16]
 800c580:	440a      	add	r2, r1
 800c582:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c586:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c58a:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c590:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c594:	2b00      	cmp	r3, #0
 800c596:	d143      	bne.n	800c620 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	015a      	lsls	r2, r3, #5
 800c59c:	693b      	ldr	r3, [r7, #16]
 800c59e:	4413      	add	r3, r2
 800c5a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	68fa      	ldr	r2, [r7, #12]
 800c5a8:	0151      	lsls	r1, r2, #5
 800c5aa:	693a      	ldr	r2, [r7, #16]
 800c5ac:	440a      	add	r2, r1
 800c5ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c5b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c5b6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	015a      	lsls	r2, r3, #5
 800c5bc:	693b      	ldr	r3, [r7, #16]
 800c5be:	4413      	add	r3, r2
 800c5c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	68fa      	ldr	r2, [r7, #12]
 800c5c8:	0151      	lsls	r1, r2, #5
 800c5ca:	693a      	ldr	r2, [r7, #16]
 800c5cc:	440a      	add	r2, r1
 800c5ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c5d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c5d6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	015a      	lsls	r2, r3, #5
 800c5dc:	693b      	ldr	r3, [r7, #16]
 800c5de:	4413      	add	r3, r2
 800c5e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	68fa      	ldr	r2, [r7, #12]
 800c5e8:	0151      	lsls	r1, r2, #5
 800c5ea:	693a      	ldr	r2, [r7, #16]
 800c5ec:	440a      	add	r2, r1
 800c5ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c5f2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c5f6:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800c5f8:	697b      	ldr	r3, [r7, #20]
 800c5fa:	3301      	adds	r3, #1
 800c5fc:	617b      	str	r3, [r7, #20]
 800c5fe:	697b      	ldr	r3, [r7, #20]
 800c600:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c604:	d81d      	bhi.n	800c642 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	015a      	lsls	r2, r3, #5
 800c60a:	693b      	ldr	r3, [r7, #16]
 800c60c:	4413      	add	r3, r2
 800c60e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c618:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c61c:	d0ec      	beq.n	800c5f8 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800c61e:	e080      	b.n	800c722 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	015a      	lsls	r2, r3, #5
 800c624:	693b      	ldr	r3, [r7, #16]
 800c626:	4413      	add	r3, r2
 800c628:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	68fa      	ldr	r2, [r7, #12]
 800c630:	0151      	lsls	r1, r2, #5
 800c632:	693a      	ldr	r2, [r7, #16]
 800c634:	440a      	add	r2, r1
 800c636:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c63a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c63e:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800c640:	e06f      	b.n	800c722 <USB_HC_Halt+0x1f0>
          break;
 800c642:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800c644:	e06d      	b.n	800c722 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	015a      	lsls	r2, r3, #5
 800c64a:	693b      	ldr	r3, [r7, #16]
 800c64c:	4413      	add	r3, r2
 800c64e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	68fa      	ldr	r2, [r7, #12]
 800c656:	0151      	lsls	r1, r2, #5
 800c658:	693a      	ldr	r2, [r7, #16]
 800c65a:	440a      	add	r2, r1
 800c65c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c660:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c664:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800c666:	693b      	ldr	r3, [r7, #16]
 800c668:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c66c:	691b      	ldr	r3, [r3, #16]
 800c66e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c672:	2b00      	cmp	r3, #0
 800c674:	d143      	bne.n	800c6fe <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	015a      	lsls	r2, r3, #5
 800c67a:	693b      	ldr	r3, [r7, #16]
 800c67c:	4413      	add	r3, r2
 800c67e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	68fa      	ldr	r2, [r7, #12]
 800c686:	0151      	lsls	r1, r2, #5
 800c688:	693a      	ldr	r2, [r7, #16]
 800c68a:	440a      	add	r2, r1
 800c68c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c690:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c694:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	015a      	lsls	r2, r3, #5
 800c69a:	693b      	ldr	r3, [r7, #16]
 800c69c:	4413      	add	r3, r2
 800c69e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	68fa      	ldr	r2, [r7, #12]
 800c6a6:	0151      	lsls	r1, r2, #5
 800c6a8:	693a      	ldr	r2, [r7, #16]
 800c6aa:	440a      	add	r2, r1
 800c6ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c6b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c6b4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	015a      	lsls	r2, r3, #5
 800c6ba:	693b      	ldr	r3, [r7, #16]
 800c6bc:	4413      	add	r3, r2
 800c6be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	68fa      	ldr	r2, [r7, #12]
 800c6c6:	0151      	lsls	r1, r2, #5
 800c6c8:	693a      	ldr	r2, [r7, #16]
 800c6ca:	440a      	add	r2, r1
 800c6cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c6d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c6d4:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800c6d6:	697b      	ldr	r3, [r7, #20]
 800c6d8:	3301      	adds	r3, #1
 800c6da:	617b      	str	r3, [r7, #20]
 800c6dc:	697b      	ldr	r3, [r7, #20]
 800c6de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c6e2:	d81d      	bhi.n	800c720 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	015a      	lsls	r2, r3, #5
 800c6e8:	693b      	ldr	r3, [r7, #16]
 800c6ea:	4413      	add	r3, r2
 800c6ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c6f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c6fa:	d0ec      	beq.n	800c6d6 <USB_HC_Halt+0x1a4>
 800c6fc:	e011      	b.n	800c722 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	015a      	lsls	r2, r3, #5
 800c702:	693b      	ldr	r3, [r7, #16]
 800c704:	4413      	add	r3, r2
 800c706:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	68fa      	ldr	r2, [r7, #12]
 800c70e:	0151      	lsls	r1, r2, #5
 800c710:	693a      	ldr	r2, [r7, #16]
 800c712:	440a      	add	r2, r1
 800c714:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c718:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c71c:	6013      	str	r3, [r2, #0]
 800c71e:	e000      	b.n	800c722 <USB_HC_Halt+0x1f0>
          break;
 800c720:	bf00      	nop
    }
  }

  return HAL_OK;
 800c722:	2300      	movs	r3, #0
}
 800c724:	4618      	mov	r0, r3
 800c726:	371c      	adds	r7, #28
 800c728:	46bd      	mov	sp, r7
 800c72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72e:	4770      	bx	lr

0800c730 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800c730:	b480      	push	{r7}
 800c732:	b087      	sub	sp, #28
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
 800c738:	460b      	mov	r3, r1
 800c73a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800c740:	78fb      	ldrb	r3, [r7, #3]
 800c742:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800c744:	2301      	movs	r3, #1
 800c746:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	04da      	lsls	r2, r3, #19
 800c74c:	4b15      	ldr	r3, [pc, #84]	; (800c7a4 <USB_DoPing+0x74>)
 800c74e:	4013      	ands	r3, r2
 800c750:	693a      	ldr	r2, [r7, #16]
 800c752:	0151      	lsls	r1, r2, #5
 800c754:	697a      	ldr	r2, [r7, #20]
 800c756:	440a      	add	r2, r1
 800c758:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c75c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c760:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800c762:	693b      	ldr	r3, [r7, #16]
 800c764:	015a      	lsls	r2, r3, #5
 800c766:	697b      	ldr	r3, [r7, #20]
 800c768:	4413      	add	r3, r2
 800c76a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800c772:	68bb      	ldr	r3, [r7, #8]
 800c774:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c778:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800c77a:	68bb      	ldr	r3, [r7, #8]
 800c77c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c780:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800c782:	693b      	ldr	r3, [r7, #16]
 800c784:	015a      	lsls	r2, r3, #5
 800c786:	697b      	ldr	r3, [r7, #20]
 800c788:	4413      	add	r3, r2
 800c78a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c78e:	461a      	mov	r2, r3
 800c790:	68bb      	ldr	r3, [r7, #8]
 800c792:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800c794:	2300      	movs	r3, #0
}
 800c796:	4618      	mov	r0, r3
 800c798:	371c      	adds	r7, #28
 800c79a:	46bd      	mov	sp, r7
 800c79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a0:	4770      	bx	lr
 800c7a2:	bf00      	nop
 800c7a4:	1ff80000 	.word	0x1ff80000

0800c7a8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800c7a8:	b580      	push	{r7, lr}
 800c7aa:	b086      	sub	sp, #24
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800c7b8:	6878      	ldr	r0, [r7, #4]
 800c7ba:	f7ff f9a8 	bl	800bb0e <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800c7be:	2110      	movs	r1, #16
 800c7c0:	6878      	ldr	r0, [r7, #4]
 800c7c2:	f7ff f9df 	bl	800bb84 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800c7c6:	6878      	ldr	r0, [r7, #4]
 800c7c8:	f7ff fa02 	bl	800bbd0 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	613b      	str	r3, [r7, #16]
 800c7d0:	e01f      	b.n	800c812 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800c7d2:	693b      	ldr	r3, [r7, #16]
 800c7d4:	015a      	lsls	r2, r3, #5
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	4413      	add	r3, r2
 800c7da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800c7e2:	68bb      	ldr	r3, [r7, #8]
 800c7e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c7e8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800c7ea:	68bb      	ldr	r3, [r7, #8]
 800c7ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c7f0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c7f2:	68bb      	ldr	r3, [r7, #8]
 800c7f4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c7f8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800c7fa:	693b      	ldr	r3, [r7, #16]
 800c7fc:	015a      	lsls	r2, r3, #5
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	4413      	add	r3, r2
 800c802:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c806:	461a      	mov	r2, r3
 800c808:	68bb      	ldr	r3, [r7, #8]
 800c80a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800c80c:	693b      	ldr	r3, [r7, #16]
 800c80e:	3301      	adds	r3, #1
 800c810:	613b      	str	r3, [r7, #16]
 800c812:	693b      	ldr	r3, [r7, #16]
 800c814:	2b0f      	cmp	r3, #15
 800c816:	d9dc      	bls.n	800c7d2 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800c818:	2300      	movs	r3, #0
 800c81a:	613b      	str	r3, [r7, #16]
 800c81c:	e034      	b.n	800c888 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800c81e:	693b      	ldr	r3, [r7, #16]
 800c820:	015a      	lsls	r2, r3, #5
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	4413      	add	r3, r2
 800c826:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800c82e:	68bb      	ldr	r3, [r7, #8]
 800c830:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c834:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800c836:	68bb      	ldr	r3, [r7, #8]
 800c838:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c83c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c83e:	68bb      	ldr	r3, [r7, #8]
 800c840:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c844:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800c846:	693b      	ldr	r3, [r7, #16]
 800c848:	015a      	lsls	r2, r3, #5
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	4413      	add	r3, r2
 800c84e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c852:	461a      	mov	r2, r3
 800c854:	68bb      	ldr	r3, [r7, #8]
 800c856:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800c858:	697b      	ldr	r3, [r7, #20]
 800c85a:	3301      	adds	r3, #1
 800c85c:	617b      	str	r3, [r7, #20]
 800c85e:	697b      	ldr	r3, [r7, #20]
 800c860:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c864:	d80c      	bhi.n	800c880 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c866:	693b      	ldr	r3, [r7, #16]
 800c868:	015a      	lsls	r2, r3, #5
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	4413      	add	r3, r2
 800c86e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c878:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c87c:	d0ec      	beq.n	800c858 <USB_StopHost+0xb0>
 800c87e:	e000      	b.n	800c882 <USB_StopHost+0xda>
        break;
 800c880:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800c882:	693b      	ldr	r3, [r7, #16]
 800c884:	3301      	adds	r3, #1
 800c886:	613b      	str	r3, [r7, #16]
 800c888:	693b      	ldr	r3, [r7, #16]
 800c88a:	2b0f      	cmp	r3, #15
 800c88c:	d9c7      	bls.n	800c81e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c894:	461a      	mov	r2, r3
 800c896:	f04f 33ff 	mov.w	r3, #4294967295
 800c89a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	f04f 32ff 	mov.w	r2, #4294967295
 800c8a2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800c8a4:	6878      	ldr	r0, [r7, #4]
 800c8a6:	f7ff f921 	bl	800baec <USB_EnableGlobalInt>

  return HAL_OK;
 800c8aa:	2300      	movs	r3, #0
}
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	3718      	adds	r7, #24
 800c8b0:	46bd      	mov	sp, r7
 800c8b2:	bd80      	pop	{r7, pc}

0800c8b4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 800c8b8:	4904      	ldr	r1, [pc, #16]	; (800c8cc <MX_FATFS_Init+0x18>)
 800c8ba:	4805      	ldr	r0, [pc, #20]	; (800c8d0 <MX_FATFS_Init+0x1c>)
 800c8bc:	f005 fb24 	bl	8011f08 <FATFS_LinkDriver>
 800c8c0:	4603      	mov	r3, r0
 800c8c2:	461a      	mov	r2, r3
 800c8c4:	4b03      	ldr	r3, [pc, #12]	; (800c8d4 <MX_FATFS_Init+0x20>)
 800c8c6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800c8c8:	bf00      	nop
 800c8ca:	bd80      	pop	{r7, pc}
 800c8cc:	24000460 	.word	0x24000460
 800c8d0:	080157e4 	.word	0x080157e4
 800c8d4:	240008c4 	.word	0x240008c4

0800c8d8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800c8d8:	b480      	push	{r7}
 800c8da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800c8dc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800c8de:	4618      	mov	r0, r3
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e6:	4770      	bx	lr

0800c8e8 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 800c8e8:	b480      	push	{r7}
 800c8ea:	b083      	sub	sp, #12
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	4603      	mov	r3, r0
 800c8f0:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 800c8f2:	2300      	movs	r3, #0
}
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	370c      	adds	r7, #12
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8fe:	4770      	bx	lr

0800c900 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 800c900:	b580      	push	{r7, lr}
 800c902:	b084      	sub	sp, #16
 800c904:	af00      	add	r7, sp, #0
 800c906:	4603      	mov	r3, r0
 800c908:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 800c90a:	2301      	movs	r3, #1
 800c90c:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 800c90e:	79fb      	ldrb	r3, [r7, #7]
 800c910:	4619      	mov	r1, r3
 800c912:	4808      	ldr	r0, [pc, #32]	; (800c934 <USBH_status+0x34>)
 800c914:	f000 fe11 	bl	800d53a <USBH_MSC_UnitIsReady>
 800c918:	4603      	mov	r3, r0
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d002      	beq.n	800c924 <USBH_status+0x24>
  {
    res = RES_OK;
 800c91e:	2300      	movs	r3, #0
 800c920:	73fb      	strb	r3, [r7, #15]
 800c922:	e001      	b.n	800c928 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 800c924:	2301      	movs	r3, #1
 800c926:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800c928:	7bfb      	ldrb	r3, [r7, #15]
}
 800c92a:	4618      	mov	r0, r3
 800c92c:	3710      	adds	r7, #16
 800c92e:	46bd      	mov	sp, r7
 800c930:	bd80      	pop	{r7, pc}
 800c932:	bf00      	nop
 800c934:	24000afc 	.word	0x24000afc

0800c938 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800c938:	b580      	push	{r7, lr}
 800c93a:	b094      	sub	sp, #80	; 0x50
 800c93c:	af02      	add	r7, sp, #8
 800c93e:	60b9      	str	r1, [r7, #8]
 800c940:	607a      	str	r2, [r7, #4]
 800c942:	603b      	str	r3, [r7, #0]
 800c944:	4603      	mov	r3, r0
 800c946:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c948:	2301      	movs	r3, #1
 800c94a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800c94e:	7bf9      	ldrb	r1, [r7, #15]
 800c950:	683b      	ldr	r3, [r7, #0]
 800c952:	9300      	str	r3, [sp, #0]
 800c954:	68bb      	ldr	r3, [r7, #8]
 800c956:	687a      	ldr	r2, [r7, #4]
 800c958:	4812      	ldr	r0, [pc, #72]	; (800c9a4 <USBH_read+0x6c>)
 800c95a:	f000 fe38 	bl	800d5ce <USBH_MSC_Read>
 800c95e:	4603      	mov	r3, r0
 800c960:	2b00      	cmp	r3, #0
 800c962:	d103      	bne.n	800c96c <USBH_read+0x34>
  {
    res = RES_OK;
 800c964:	2300      	movs	r3, #0
 800c966:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800c96a:	e015      	b.n	800c998 <USBH_read+0x60>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800c96c:	f107 0210 	add.w	r2, r7, #16
 800c970:	7bfb      	ldrb	r3, [r7, #15]
 800c972:	4619      	mov	r1, r3
 800c974:	480b      	ldr	r0, [pc, #44]	; (800c9a4 <USBH_read+0x6c>)
 800c976:	f000 fe06 	bl	800d586 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800c97a:	7f7b      	ldrb	r3, [r7, #29]
 800c97c:	2b28      	cmp	r3, #40	; 0x28
 800c97e:	d003      	beq.n	800c988 <USBH_read+0x50>
 800c980:	2b3a      	cmp	r3, #58	; 0x3a
 800c982:	d001      	beq.n	800c988 <USBH_read+0x50>
 800c984:	2b04      	cmp	r3, #4
 800c986:	d103      	bne.n	800c990 <USBH_read+0x58>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 800c988:	2303      	movs	r3, #3
 800c98a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800c98e:	e003      	b.n	800c998 <USBH_read+0x60>

    default:
      res = RES_ERROR;
 800c990:	2301      	movs	r3, #1
 800c992:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800c996:	bf00      	nop
    }
  }

  return res;
 800c998:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800c99c:	4618      	mov	r0, r3
 800c99e:	3748      	adds	r7, #72	; 0x48
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	bd80      	pop	{r7, pc}
 800c9a4:	24000afc 	.word	0x24000afc

0800c9a8 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b094      	sub	sp, #80	; 0x50
 800c9ac:	af02      	add	r7, sp, #8
 800c9ae:	60b9      	str	r1, [r7, #8]
 800c9b0:	607a      	str	r2, [r7, #4]
 800c9b2:	603b      	str	r3, [r7, #0]
 800c9b4:	4603      	mov	r3, r0
 800c9b6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c9b8:	2301      	movs	r3, #1
 800c9ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 800c9be:	7bf9      	ldrb	r1, [r7, #15]
 800c9c0:	683b      	ldr	r3, [r7, #0]
 800c9c2:	9300      	str	r3, [sp, #0]
 800c9c4:	68bb      	ldr	r3, [r7, #8]
 800c9c6:	687a      	ldr	r2, [r7, #4]
 800c9c8:	4817      	ldr	r0, [pc, #92]	; (800ca28 <USBH_write+0x80>)
 800c9ca:	f000 fe69 	bl	800d6a0 <USBH_MSC_Write>
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d103      	bne.n	800c9dc <USBH_write+0x34>
  {
    res = RES_OK;
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800c9da:	e01f      	b.n	800ca1c <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800c9dc:	f107 0210 	add.w	r2, r7, #16
 800c9e0:	7bfb      	ldrb	r3, [r7, #15]
 800c9e2:	4619      	mov	r1, r3
 800c9e4:	4810      	ldr	r0, [pc, #64]	; (800ca28 <USBH_write+0x80>)
 800c9e6:	f000 fdce 	bl	800d586 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800c9ea:	7f7b      	ldrb	r3, [r7, #29]
 800c9ec:	2b27      	cmp	r3, #39	; 0x27
 800c9ee:	d009      	beq.n	800ca04 <USBH_write+0x5c>
 800c9f0:	2b27      	cmp	r3, #39	; 0x27
 800c9f2:	dc02      	bgt.n	800c9fa <USBH_write+0x52>
 800c9f4:	2b04      	cmp	r3, #4
 800c9f6:	d009      	beq.n	800ca0c <USBH_write+0x64>
 800c9f8:	e00c      	b.n	800ca14 <USBH_write+0x6c>
 800c9fa:	2b28      	cmp	r3, #40	; 0x28
 800c9fc:	d006      	beq.n	800ca0c <USBH_write+0x64>
 800c9fe:	2b3a      	cmp	r3, #58	; 0x3a
 800ca00:	d004      	beq.n	800ca0c <USBH_write+0x64>
 800ca02:	e007      	b.n	800ca14 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 800ca04:	2302      	movs	r3, #2
 800ca06:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800ca0a:	e007      	b.n	800ca1c <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 800ca0c:	2303      	movs	r3, #3
 800ca0e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800ca12:	e003      	b.n	800ca1c <USBH_write+0x74>

    default:
      res = RES_ERROR;
 800ca14:	2301      	movs	r3, #1
 800ca16:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800ca1a:	bf00      	nop
    }
  }

  return res;
 800ca1c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800ca20:	4618      	mov	r0, r3
 800ca22:	3748      	adds	r7, #72	; 0x48
 800ca24:	46bd      	mov	sp, r7
 800ca26:	bd80      	pop	{r7, pc}
 800ca28:	24000afc 	.word	0x24000afc

0800ca2c <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	b090      	sub	sp, #64	; 0x40
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	4603      	mov	r3, r0
 800ca34:	603a      	str	r2, [r7, #0]
 800ca36:	71fb      	strb	r3, [r7, #7]
 800ca38:	460b      	mov	r3, r1
 800ca3a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800ca3c:	2301      	movs	r3, #1
 800ca3e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 800ca42:	79bb      	ldrb	r3, [r7, #6]
 800ca44:	2b03      	cmp	r3, #3
 800ca46:	d852      	bhi.n	800caee <USBH_ioctl+0xc2>
 800ca48:	a201      	add	r2, pc, #4	; (adr r2, 800ca50 <USBH_ioctl+0x24>)
 800ca4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca4e:	bf00      	nop
 800ca50:	0800ca61 	.word	0x0800ca61
 800ca54:	0800ca69 	.word	0x0800ca69
 800ca58:	0800ca93 	.word	0x0800ca93
 800ca5c:	0800cabf 	.word	0x0800cabf
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 800ca60:	2300      	movs	r3, #0
 800ca62:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800ca66:	e045      	b.n	800caf4 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800ca68:	f107 0208 	add.w	r2, r7, #8
 800ca6c:	79fb      	ldrb	r3, [r7, #7]
 800ca6e:	4619      	mov	r1, r3
 800ca70:	4823      	ldr	r0, [pc, #140]	; (800cb00 <USBH_ioctl+0xd4>)
 800ca72:	f000 fd88 	bl	800d586 <USBH_MSC_GetLUNInfo>
 800ca76:	4603      	mov	r3, r0
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d106      	bne.n	800ca8a <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 800ca7c:	68fa      	ldr	r2, [r7, #12]
 800ca7e:	683b      	ldr	r3, [r7, #0]
 800ca80:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800ca82:	2300      	movs	r3, #0
 800ca84:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800ca88:	e034      	b.n	800caf4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800ca8a:	2301      	movs	r3, #1
 800ca8c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800ca90:	e030      	b.n	800caf4 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800ca92:	f107 0208 	add.w	r2, r7, #8
 800ca96:	79fb      	ldrb	r3, [r7, #7]
 800ca98:	4619      	mov	r1, r3
 800ca9a:	4819      	ldr	r0, [pc, #100]	; (800cb00 <USBH_ioctl+0xd4>)
 800ca9c:	f000 fd73 	bl	800d586 <USBH_MSC_GetLUNInfo>
 800caa0:	4603      	mov	r3, r0
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d107      	bne.n	800cab6 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 800caa6:	8a3b      	ldrh	r3, [r7, #16]
 800caa8:	461a      	mov	r2, r3
 800caaa:	683b      	ldr	r3, [r7, #0]
 800caac:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800caae:	2300      	movs	r3, #0
 800cab0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800cab4:	e01e      	b.n	800caf4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800cab6:	2301      	movs	r3, #1
 800cab8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800cabc:	e01a      	b.n	800caf4 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800cabe:	f107 0208 	add.w	r2, r7, #8
 800cac2:	79fb      	ldrb	r3, [r7, #7]
 800cac4:	4619      	mov	r1, r3
 800cac6:	480e      	ldr	r0, [pc, #56]	; (800cb00 <USBH_ioctl+0xd4>)
 800cac8:	f000 fd5d 	bl	800d586 <USBH_MSC_GetLUNInfo>
 800cacc:	4603      	mov	r3, r0
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d109      	bne.n	800cae6 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 800cad2:	8a3b      	ldrh	r3, [r7, #16]
 800cad4:	0a5b      	lsrs	r3, r3, #9
 800cad6:	b29b      	uxth	r3, r3
 800cad8:	461a      	mov	r2, r3
 800cada:	683b      	ldr	r3, [r7, #0]
 800cadc:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800cade:	2300      	movs	r3, #0
 800cae0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800cae4:	e006      	b.n	800caf4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800cae6:	2301      	movs	r3, #1
 800cae8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800caec:	e002      	b.n	800caf4 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 800caee:	2304      	movs	r3, #4
 800caf0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 800caf4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800caf8:	4618      	mov	r0, r3
 800cafa:	3740      	adds	r7, #64	; 0x40
 800cafc:	46bd      	mov	sp, r7
 800cafe:	bd80      	pop	{r7, pc}
 800cb00:	24000afc 	.word	0x24000afc

0800cb04 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800cb04:	b590      	push	{r4, r7, lr}
 800cb06:	b089      	sub	sp, #36	; 0x24
 800cb08:	af04      	add	r7, sp, #16
 800cb0a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cb12:	7919      	ldrb	r1, [r3, #4]
 800cb14:	2350      	movs	r3, #80	; 0x50
 800cb16:	2206      	movs	r2, #6
 800cb18:	6878      	ldr	r0, [r7, #4]
 800cb1a:	f001 fc4f 	bl	800e3bc <USBH_FindInterface>
 800cb1e:	4603      	mov	r3, r0
 800cb20:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800cb22:	7bfb      	ldrb	r3, [r7, #15]
 800cb24:	2bff      	cmp	r3, #255	; 0xff
 800cb26:	d002      	beq.n	800cb2e <USBH_MSC_InterfaceInit+0x2a>
 800cb28:	7bfb      	ldrb	r3, [r7, #15]
 800cb2a:	2b01      	cmp	r3, #1
 800cb2c:	d901      	bls.n	800cb32 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800cb2e:	2302      	movs	r3, #2
 800cb30:	e0ef      	b.n	800cd12 <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 800cb32:	7bfb      	ldrb	r3, [r7, #15]
 800cb34:	4619      	mov	r1, r3
 800cb36:	6878      	ldr	r0, [r7, #4]
 800cb38:	f001 fc24 	bl	800e384 <USBH_SelectInterface>
 800cb3c:	4603      	mov	r3, r0
 800cb3e:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800cb40:	7bbb      	ldrb	r3, [r7, #14]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d001      	beq.n	800cb4a <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 800cb46:	2302      	movs	r3, #2
 800cb48:	e0e3      	b.n	800cd12 <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800cb50:	f44f 7080 	mov.w	r0, #256	; 0x100
 800cb54:	f005 fe6a 	bl	801282c <malloc>
 800cb58:	4603      	mov	r3, r0
 800cb5a:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cb62:	69db      	ldr	r3, [r3, #28]
 800cb64:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 800cb66:	68bb      	ldr	r3, [r7, #8]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d101      	bne.n	800cb70 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 800cb6c:	2302      	movs	r3, #2
 800cb6e:	e0d0      	b.n	800cd12 <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 800cb70:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cb74:	2100      	movs	r1, #0
 800cb76:	68b8      	ldr	r0, [r7, #8]
 800cb78:	f005 fe73 	bl	8012862 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800cb7c:	7bfb      	ldrb	r3, [r7, #15]
 800cb7e:	687a      	ldr	r2, [r7, #4]
 800cb80:	211a      	movs	r1, #26
 800cb82:	fb01 f303 	mul.w	r3, r1, r3
 800cb86:	4413      	add	r3, r2
 800cb88:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800cb8c:	781b      	ldrb	r3, [r3, #0]
 800cb8e:	b25b      	sxtb	r3, r3
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	da16      	bge.n	800cbc2 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800cb94:	7bfb      	ldrb	r3, [r7, #15]
 800cb96:	687a      	ldr	r2, [r7, #4]
 800cb98:	211a      	movs	r1, #26
 800cb9a:	fb01 f303 	mul.w	r3, r1, r3
 800cb9e:	4413      	add	r3, r2
 800cba0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800cba4:	781a      	ldrb	r2, [r3, #0]
 800cba6:	68bb      	ldr	r3, [r7, #8]
 800cba8:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800cbaa:	7bfb      	ldrb	r3, [r7, #15]
 800cbac:	687a      	ldr	r2, [r7, #4]
 800cbae:	211a      	movs	r1, #26
 800cbb0:	fb01 f303 	mul.w	r3, r1, r3
 800cbb4:	4413      	add	r3, r2
 800cbb6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800cbba:	881a      	ldrh	r2, [r3, #0]
 800cbbc:	68bb      	ldr	r3, [r7, #8]
 800cbbe:	815a      	strh	r2, [r3, #10]
 800cbc0:	e015      	b.n	800cbee <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800cbc2:	7bfb      	ldrb	r3, [r7, #15]
 800cbc4:	687a      	ldr	r2, [r7, #4]
 800cbc6:	211a      	movs	r1, #26
 800cbc8:	fb01 f303 	mul.w	r3, r1, r3
 800cbcc:	4413      	add	r3, r2
 800cbce:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800cbd2:	781a      	ldrb	r2, [r3, #0]
 800cbd4:	68bb      	ldr	r3, [r7, #8]
 800cbd6:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800cbd8:	7bfb      	ldrb	r3, [r7, #15]
 800cbda:	687a      	ldr	r2, [r7, #4]
 800cbdc:	211a      	movs	r1, #26
 800cbde:	fb01 f303 	mul.w	r3, r1, r3
 800cbe2:	4413      	add	r3, r2
 800cbe4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800cbe8:	881a      	ldrh	r2, [r3, #0]
 800cbea:	68bb      	ldr	r3, [r7, #8]
 800cbec:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800cbee:	7bfb      	ldrb	r3, [r7, #15]
 800cbf0:	687a      	ldr	r2, [r7, #4]
 800cbf2:	211a      	movs	r1, #26
 800cbf4:	fb01 f303 	mul.w	r3, r1, r3
 800cbf8:	4413      	add	r3, r2
 800cbfa:	f203 3356 	addw	r3, r3, #854	; 0x356
 800cbfe:	781b      	ldrb	r3, [r3, #0]
 800cc00:	b25b      	sxtb	r3, r3
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	da16      	bge.n	800cc34 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800cc06:	7bfb      	ldrb	r3, [r7, #15]
 800cc08:	687a      	ldr	r2, [r7, #4]
 800cc0a:	211a      	movs	r1, #26
 800cc0c:	fb01 f303 	mul.w	r3, r1, r3
 800cc10:	4413      	add	r3, r2
 800cc12:	f203 3356 	addw	r3, r3, #854	; 0x356
 800cc16:	781a      	ldrb	r2, [r3, #0]
 800cc18:	68bb      	ldr	r3, [r7, #8]
 800cc1a:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800cc1c:	7bfb      	ldrb	r3, [r7, #15]
 800cc1e:	687a      	ldr	r2, [r7, #4]
 800cc20:	211a      	movs	r1, #26
 800cc22:	fb01 f303 	mul.w	r3, r1, r3
 800cc26:	4413      	add	r3, r2
 800cc28:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800cc2c:	881a      	ldrh	r2, [r3, #0]
 800cc2e:	68bb      	ldr	r3, [r7, #8]
 800cc30:	815a      	strh	r2, [r3, #10]
 800cc32:	e015      	b.n	800cc60 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800cc34:	7bfb      	ldrb	r3, [r7, #15]
 800cc36:	687a      	ldr	r2, [r7, #4]
 800cc38:	211a      	movs	r1, #26
 800cc3a:	fb01 f303 	mul.w	r3, r1, r3
 800cc3e:	4413      	add	r3, r2
 800cc40:	f203 3356 	addw	r3, r3, #854	; 0x356
 800cc44:	781a      	ldrb	r2, [r3, #0]
 800cc46:	68bb      	ldr	r3, [r7, #8]
 800cc48:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800cc4a:	7bfb      	ldrb	r3, [r7, #15]
 800cc4c:	687a      	ldr	r2, [r7, #4]
 800cc4e:	211a      	movs	r1, #26
 800cc50:	fb01 f303 	mul.w	r3, r1, r3
 800cc54:	4413      	add	r3, r2
 800cc56:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800cc5a:	881a      	ldrh	r2, [r3, #0]
 800cc5c:	68bb      	ldr	r3, [r7, #8]
 800cc5e:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 800cc60:	68bb      	ldr	r3, [r7, #8]
 800cc62:	2200      	movs	r2, #0
 800cc64:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 800cc66:	68bb      	ldr	r3, [r7, #8]
 800cc68:	2200      	movs	r2, #0
 800cc6a:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 800cc6c:	68bb      	ldr	r3, [r7, #8]
 800cc6e:	2200      	movs	r2, #0
 800cc70:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800cc72:	68bb      	ldr	r3, [r7, #8]
 800cc74:	799b      	ldrb	r3, [r3, #6]
 800cc76:	4619      	mov	r1, r3
 800cc78:	6878      	ldr	r0, [r7, #4]
 800cc7a:	f002 fdc2 	bl	800f802 <USBH_AllocPipe>
 800cc7e:	4603      	mov	r3, r0
 800cc80:	461a      	mov	r2, r3
 800cc82:	68bb      	ldr	r3, [r7, #8]
 800cc84:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800cc86:	68bb      	ldr	r3, [r7, #8]
 800cc88:	79db      	ldrb	r3, [r3, #7]
 800cc8a:	4619      	mov	r1, r3
 800cc8c:	6878      	ldr	r0, [r7, #4]
 800cc8e:	f002 fdb8 	bl	800f802 <USBH_AllocPipe>
 800cc92:	4603      	mov	r3, r0
 800cc94:	461a      	mov	r2, r3
 800cc96:	68bb      	ldr	r3, [r7, #8]
 800cc98:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 800cc9a:	6878      	ldr	r0, [r7, #4]
 800cc9c:	f000 fda4 	bl	800d7e8 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 800cca0:	68bb      	ldr	r3, [r7, #8]
 800cca2:	7959      	ldrb	r1, [r3, #5]
 800cca4:	68bb      	ldr	r3, [r7, #8]
 800cca6:	7998      	ldrb	r0, [r3, #6]
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ccb4:	68ba      	ldr	r2, [r7, #8]
 800ccb6:	8912      	ldrh	r2, [r2, #8]
 800ccb8:	9202      	str	r2, [sp, #8]
 800ccba:	2202      	movs	r2, #2
 800ccbc:	9201      	str	r2, [sp, #4]
 800ccbe:	9300      	str	r3, [sp, #0]
 800ccc0:	4623      	mov	r3, r4
 800ccc2:	4602      	mov	r2, r0
 800ccc4:	6878      	ldr	r0, [r7, #4]
 800ccc6:	f002 fd6d 	bl	800f7a4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800ccca:	68bb      	ldr	r3, [r7, #8]
 800cccc:	7919      	ldrb	r1, [r3, #4]
 800ccce:	68bb      	ldr	r3, [r7, #8]
 800ccd0:	79d8      	ldrb	r0, [r3, #7]
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ccde:	68ba      	ldr	r2, [r7, #8]
 800cce0:	8952      	ldrh	r2, [r2, #10]
 800cce2:	9202      	str	r2, [sp, #8]
 800cce4:	2202      	movs	r2, #2
 800cce6:	9201      	str	r2, [sp, #4]
 800cce8:	9300      	str	r3, [sp, #0]
 800ccea:	4623      	mov	r3, r4
 800ccec:	4602      	mov	r2, r0
 800ccee:	6878      	ldr	r0, [r7, #4]
 800ccf0:	f002 fd58 	bl	800f7a4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800ccf4:	68bb      	ldr	r3, [r7, #8]
 800ccf6:	791b      	ldrb	r3, [r3, #4]
 800ccf8:	2200      	movs	r2, #0
 800ccfa:	4619      	mov	r1, r3
 800ccfc:	6878      	ldr	r0, [r7, #4]
 800ccfe:	f005 fcad 	bl	801265c <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 800cd02:	68bb      	ldr	r3, [r7, #8]
 800cd04:	795b      	ldrb	r3, [r3, #5]
 800cd06:	2200      	movs	r2, #0
 800cd08:	4619      	mov	r1, r3
 800cd0a:	6878      	ldr	r0, [r7, #4]
 800cd0c:	f005 fca6 	bl	801265c <USBH_LL_SetToggle>

  return USBH_OK;
 800cd10:	2300      	movs	r3, #0
}
 800cd12:	4618      	mov	r0, r3
 800cd14:	3714      	adds	r7, #20
 800cd16:	46bd      	mov	sp, r7
 800cd18:	bd90      	pop	{r4, r7, pc}

0800cd1a <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800cd1a:	b580      	push	{r7, lr}
 800cd1c:	b084      	sub	sp, #16
 800cd1e:	af00      	add	r7, sp, #0
 800cd20:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cd28:	69db      	ldr	r3, [r3, #28]
 800cd2a:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	795b      	ldrb	r3, [r3, #5]
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d00e      	beq.n	800cd52 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	795b      	ldrb	r3, [r3, #5]
 800cd38:	4619      	mov	r1, r3
 800cd3a:	6878      	ldr	r0, [r7, #4]
 800cd3c:	f002 fd51 	bl	800f7e2 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	795b      	ldrb	r3, [r3, #5]
 800cd44:	4619      	mov	r1, r3
 800cd46:	6878      	ldr	r0, [r7, #4]
 800cd48:	f002 fd7c 	bl	800f844 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	2200      	movs	r2, #0
 800cd50:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	791b      	ldrb	r3, [r3, #4]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d00e      	beq.n	800cd78 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	791b      	ldrb	r3, [r3, #4]
 800cd5e:	4619      	mov	r1, r3
 800cd60:	6878      	ldr	r0, [r7, #4]
 800cd62:	f002 fd3e 	bl	800f7e2 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	791b      	ldrb	r3, [r3, #4]
 800cd6a:	4619      	mov	r1, r3
 800cd6c:	6878      	ldr	r0, [r7, #4]
 800cd6e:	f002 fd69 	bl	800f844 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	2200      	movs	r2, #0
 800cd76:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cd7e:	69db      	ldr	r3, [r3, #28]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d00b      	beq.n	800cd9c <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cd8a:	69db      	ldr	r3, [r3, #28]
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	f005 fd55 	bl	801283c <free>
    phost->pActiveClass->pData = 0U;
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cd98:	2200      	movs	r2, #0
 800cd9a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800cd9c:	2300      	movs	r3, #0
}
 800cd9e:	4618      	mov	r0, r3
 800cda0:	3710      	adds	r7, #16
 800cda2:	46bd      	mov	sp, r7
 800cda4:	bd80      	pop	{r7, pc}

0800cda6 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800cda6:	b580      	push	{r7, lr}
 800cda8:	b084      	sub	sp, #16
 800cdaa:	af00      	add	r7, sp, #0
 800cdac:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cdb4:	69db      	ldr	r3, [r3, #28]
 800cdb6:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 800cdb8:	2301      	movs	r3, #1
 800cdba:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 800cdbc:	68bb      	ldr	r3, [r7, #8]
 800cdbe:	7b9b      	ldrb	r3, [r3, #14]
 800cdc0:	2b02      	cmp	r3, #2
 800cdc2:	d004      	beq.n	800cdce <USBH_MSC_ClassRequest+0x28>
 800cdc4:	2b03      	cmp	r3, #3
 800cdc6:	d03e      	beq.n	800ce46 <USBH_MSC_ClassRequest+0xa0>
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d000      	beq.n	800cdce <USBH_MSC_ClassRequest+0x28>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
      }
      break;

    default:
      break;
 800cdcc:	e04a      	b.n	800ce64 <USBH_MSC_ClassRequest+0xbe>
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 800cdce:	68bb      	ldr	r3, [r7, #8]
 800cdd0:	4619      	mov	r1, r3
 800cdd2:	6878      	ldr	r0, [r7, #4]
 800cdd4:	f000 fcea 	bl	800d7ac <USBH_MSC_BOT_REQ_GetMaxLUN>
 800cdd8:	4603      	mov	r3, r0
 800cdda:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_NOT_SUPPORTED)
 800cddc:	7bfb      	ldrb	r3, [r7, #15]
 800cdde:	2b03      	cmp	r3, #3
 800cde0:	d104      	bne.n	800cdec <USBH_MSC_ClassRequest+0x46>
        MSC_Handle->max_lun = 0U;
 800cde2:	68bb      	ldr	r3, [r7, #8]
 800cde4:	2200      	movs	r2, #0
 800cde6:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 800cde8:	2300      	movs	r3, #0
 800cdea:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_OK)
 800cdec:	7bfb      	ldrb	r3, [r7, #15]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d135      	bne.n	800ce5e <USBH_MSC_ClassRequest+0xb8>
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800cdf2:	68bb      	ldr	r3, [r7, #8]
 800cdf4:	781b      	ldrb	r3, [r3, #0]
 800cdf6:	2b02      	cmp	r3, #2
 800cdf8:	d804      	bhi.n	800ce04 <USBH_MSC_ClassRequest+0x5e>
 800cdfa:	68bb      	ldr	r3, [r7, #8]
 800cdfc:	781b      	ldrb	r3, [r3, #0]
 800cdfe:	3301      	adds	r3, #1
 800ce00:	b2da      	uxtb	r2, r3
 800ce02:	e000      	b.n	800ce06 <USBH_MSC_ClassRequest+0x60>
 800ce04:	2202      	movs	r2, #2
 800ce06:	68bb      	ldr	r3, [r7, #8]
 800ce08:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	73bb      	strb	r3, [r7, #14]
 800ce0e:	e014      	b.n	800ce3a <USBH_MSC_ClassRequest+0x94>
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800ce10:	7bbb      	ldrb	r3, [r7, #14]
 800ce12:	68ba      	ldr	r2, [r7, #8]
 800ce14:	2134      	movs	r1, #52	; 0x34
 800ce16:	fb01 f303 	mul.w	r3, r1, r3
 800ce1a:	4413      	add	r3, r2
 800ce1c:	3392      	adds	r3, #146	; 0x92
 800ce1e:	2202      	movs	r2, #2
 800ce20:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 800ce22:	7bbb      	ldrb	r3, [r7, #14]
 800ce24:	68ba      	ldr	r2, [r7, #8]
 800ce26:	2134      	movs	r1, #52	; 0x34
 800ce28:	fb01 f303 	mul.w	r3, r1, r3
 800ce2c:	4413      	add	r3, r2
 800ce2e:	33c1      	adds	r3, #193	; 0xc1
 800ce30:	2200      	movs	r2, #0
 800ce32:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800ce34:	7bbb      	ldrb	r3, [r7, #14]
 800ce36:	3301      	adds	r3, #1
 800ce38:	73bb      	strb	r3, [r7, #14]
 800ce3a:	68bb      	ldr	r3, [r7, #8]
 800ce3c:	781b      	ldrb	r3, [r3, #0]
 800ce3e:	7bba      	ldrb	r2, [r7, #14]
 800ce40:	429a      	cmp	r2, r3
 800ce42:	d3e5      	bcc.n	800ce10 <USBH_MSC_ClassRequest+0x6a>
      break;
 800ce44:	e00b      	b.n	800ce5e <USBH_MSC_ClassRequest+0xb8>
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800ce46:	2100      	movs	r1, #0
 800ce48:	6878      	ldr	r0, [r7, #4]
 800ce4a:	f002 f878 	bl	800ef3e <USBH_ClrFeature>
 800ce4e:	4603      	mov	r3, r0
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d106      	bne.n	800ce62 <USBH_MSC_ClassRequest+0xbc>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 800ce54:	68bb      	ldr	r3, [r7, #8]
 800ce56:	7bda      	ldrb	r2, [r3, #15]
 800ce58:	68bb      	ldr	r3, [r7, #8]
 800ce5a:	739a      	strb	r2, [r3, #14]
      break;
 800ce5c:	e001      	b.n	800ce62 <USBH_MSC_ClassRequest+0xbc>
      break;
 800ce5e:	bf00      	nop
 800ce60:	e000      	b.n	800ce64 <USBH_MSC_ClassRequest+0xbe>
      break;
 800ce62:	bf00      	nop
  }

  return status;
 800ce64:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce66:	4618      	mov	r0, r3
 800ce68:	3710      	adds	r7, #16
 800ce6a:	46bd      	mov	sp, r7
 800ce6c:	bd80      	pop	{r7, pc}
	...

0800ce70 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b086      	sub	sp, #24
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ce7e:	69db      	ldr	r3, [r3, #28]
 800ce80:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800ce82:	2301      	movs	r3, #1
 800ce84:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800ce86:	2301      	movs	r3, #1
 800ce88:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 800ce8a:	2301      	movs	r3, #1
 800ce8c:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 800ce8e:	693b      	ldr	r3, [r7, #16]
 800ce90:	7b1b      	ldrb	r3, [r3, #12]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d003      	beq.n	800ce9e <USBH_MSC_Process+0x2e>
 800ce96:	2b01      	cmp	r3, #1
 800ce98:	f000 8271 	beq.w	800d37e <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 800ce9c:	e272      	b.n	800d384 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 800ce9e:	693b      	ldr	r3, [r7, #16]
 800cea0:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 800cea4:	693b      	ldr	r3, [r7, #16]
 800cea6:	781b      	ldrb	r3, [r3, #0]
 800cea8:	b29b      	uxth	r3, r3
 800ceaa:	429a      	cmp	r2, r3
 800ceac:	f080 824f 	bcs.w	800d34e <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800ceb0:	693b      	ldr	r3, [r7, #16]
 800ceb2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ceb6:	4619      	mov	r1, r3
 800ceb8:	693a      	ldr	r2, [r7, #16]
 800ceba:	2334      	movs	r3, #52	; 0x34
 800cebc:	fb03 f301 	mul.w	r3, r3, r1
 800cec0:	4413      	add	r3, r2
 800cec2:	3391      	adds	r3, #145	; 0x91
 800cec4:	2201      	movs	r2, #1
 800cec6:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800cec8:	693b      	ldr	r3, [r7, #16]
 800ceca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cece:	4619      	mov	r1, r3
 800ced0:	693a      	ldr	r2, [r7, #16]
 800ced2:	2334      	movs	r3, #52	; 0x34
 800ced4:	fb03 f301 	mul.w	r3, r3, r1
 800ced8:	4413      	add	r3, r2
 800ceda:	3390      	adds	r3, #144	; 0x90
 800cedc:	781b      	ldrb	r3, [r3, #0]
 800cede:	2b08      	cmp	r3, #8
 800cee0:	f200 8243 	bhi.w	800d36a <USBH_MSC_Process+0x4fa>
 800cee4:	a201      	add	r2, pc, #4	; (adr r2, 800ceec <USBH_MSC_Process+0x7c>)
 800cee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ceea:	bf00      	nop
 800ceec:	0800cf11 	.word	0x0800cf11
 800cef0:	0800d36b 	.word	0x0800d36b
 800cef4:	0800cfd9 	.word	0x0800cfd9
 800cef8:	0800d15d 	.word	0x0800d15d
 800cefc:	0800cf37 	.word	0x0800cf37
 800cf00:	0800d229 	.word	0x0800d229
 800cf04:	0800d36b 	.word	0x0800d36b
 800cf08:	0800d36b 	.word	0x0800d36b
 800cf0c:	0800d33d 	.word	0x0800d33d
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800cf10:	693b      	ldr	r3, [r7, #16]
 800cf12:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cf16:	4619      	mov	r1, r3
 800cf18:	693a      	ldr	r2, [r7, #16]
 800cf1a:	2334      	movs	r3, #52	; 0x34
 800cf1c:	fb03 f301 	mul.w	r3, r3, r1
 800cf20:	4413      	add	r3, r2
 800cf22:	3390      	adds	r3, #144	; 0x90
 800cf24:	2204      	movs	r2, #4
 800cf26:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800cf2e:	693b      	ldr	r3, [r7, #16]
 800cf30:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 800cf34:	e222      	b.n	800d37c <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800cf36:	693b      	ldr	r3, [r7, #16]
 800cf38:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cf3c:	b2d9      	uxtb	r1, r3
 800cf3e:	693b      	ldr	r3, [r7, #16]
 800cf40:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cf44:	461a      	mov	r2, r3
 800cf46:	2334      	movs	r3, #52	; 0x34
 800cf48:	fb03 f302 	mul.w	r3, r3, r2
 800cf4c:	3398      	adds	r3, #152	; 0x98
 800cf4e:	693a      	ldr	r2, [r7, #16]
 800cf50:	4413      	add	r3, r2
 800cf52:	3307      	adds	r3, #7
 800cf54:	461a      	mov	r2, r3
 800cf56:	6878      	ldr	r0, [r7, #4]
 800cf58:	f000 ff68 	bl	800de2c <USBH_MSC_SCSI_Inquiry>
 800cf5c:	4603      	mov	r3, r0
 800cf5e:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800cf60:	7bfb      	ldrb	r3, [r7, #15]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d10b      	bne.n	800cf7e <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800cf66:	693b      	ldr	r3, [r7, #16]
 800cf68:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cf6c:	4619      	mov	r1, r3
 800cf6e:	693a      	ldr	r2, [r7, #16]
 800cf70:	2334      	movs	r3, #52	; 0x34
 800cf72:	fb03 f301 	mul.w	r3, r3, r1
 800cf76:	4413      	add	r3, r2
 800cf78:	3390      	adds	r3, #144	; 0x90
 800cf7a:	2202      	movs	r2, #2
 800cf7c:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 800cf7e:	7bfb      	ldrb	r3, [r7, #15]
 800cf80:	2b02      	cmp	r3, #2
 800cf82:	d10c      	bne.n	800cf9e <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800cf84:	693b      	ldr	r3, [r7, #16]
 800cf86:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cf8a:	4619      	mov	r1, r3
 800cf8c:	693a      	ldr	r2, [r7, #16]
 800cf8e:	2334      	movs	r3, #52	; 0x34
 800cf90:	fb03 f301 	mul.w	r3, r3, r1
 800cf94:	4413      	add	r3, r2
 800cf96:	3390      	adds	r3, #144	; 0x90
 800cf98:	2205      	movs	r2, #5
 800cf9a:	701a      	strb	r2, [r3, #0]
            break;
 800cf9c:	e1e7      	b.n	800d36e <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800cf9e:	7bfb      	ldrb	r3, [r7, #15]
 800cfa0:	2b04      	cmp	r3, #4
 800cfa2:	f040 81e4 	bne.w	800d36e <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800cfa6:	693b      	ldr	r3, [r7, #16]
 800cfa8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cfac:	4619      	mov	r1, r3
 800cfae:	693a      	ldr	r2, [r7, #16]
 800cfb0:	2334      	movs	r3, #52	; 0x34
 800cfb2:	fb03 f301 	mul.w	r3, r3, r1
 800cfb6:	4413      	add	r3, r2
 800cfb8:	3390      	adds	r3, #144	; 0x90
 800cfba:	2201      	movs	r2, #1
 800cfbc:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800cfbe:	693b      	ldr	r3, [r7, #16]
 800cfc0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cfc4:	4619      	mov	r1, r3
 800cfc6:	693a      	ldr	r2, [r7, #16]
 800cfc8:	2334      	movs	r3, #52	; 0x34
 800cfca:	fb03 f301 	mul.w	r3, r3, r1
 800cfce:	4413      	add	r3, r2
 800cfd0:	3391      	adds	r3, #145	; 0x91
 800cfd2:	2202      	movs	r2, #2
 800cfd4:	701a      	strb	r2, [r3, #0]
            break;
 800cfd6:	e1ca      	b.n	800d36e <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 800cfd8:	693b      	ldr	r3, [r7, #16]
 800cfda:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cfde:	b2db      	uxtb	r3, r3
 800cfe0:	4619      	mov	r1, r3
 800cfe2:	6878      	ldr	r0, [r7, #4]
 800cfe4:	f000 fe64 	bl	800dcb0 <USBH_MSC_SCSI_TestUnitReady>
 800cfe8:	4603      	mov	r3, r0
 800cfea:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 800cfec:	7bbb      	ldrb	r3, [r7, #14]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d149      	bne.n	800d086 <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800cff2:	693b      	ldr	r3, [r7, #16]
 800cff4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cff8:	4619      	mov	r1, r3
 800cffa:	693a      	ldr	r2, [r7, #16]
 800cffc:	2334      	movs	r3, #52	; 0x34
 800cffe:	fb03 f301 	mul.w	r3, r3, r1
 800d002:	4413      	add	r3, r2
 800d004:	3392      	adds	r3, #146	; 0x92
 800d006:	781b      	ldrb	r3, [r3, #0]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d00c      	beq.n	800d026 <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800d00c:	693b      	ldr	r3, [r7, #16]
 800d00e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d012:	4619      	mov	r1, r3
 800d014:	693a      	ldr	r2, [r7, #16]
 800d016:	2334      	movs	r3, #52	; 0x34
 800d018:	fb03 f301 	mul.w	r3, r3, r1
 800d01c:	4413      	add	r3, r2
 800d01e:	33c1      	adds	r3, #193	; 0xc1
 800d020:	2201      	movs	r2, #1
 800d022:	701a      	strb	r2, [r3, #0]
 800d024:	e00b      	b.n	800d03e <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800d026:	693b      	ldr	r3, [r7, #16]
 800d028:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d02c:	4619      	mov	r1, r3
 800d02e:	693a      	ldr	r2, [r7, #16]
 800d030:	2334      	movs	r3, #52	; 0x34
 800d032:	fb03 f301 	mul.w	r3, r3, r1
 800d036:	4413      	add	r3, r2
 800d038:	33c1      	adds	r3, #193	; 0xc1
 800d03a:	2200      	movs	r2, #0
 800d03c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800d03e:	693b      	ldr	r3, [r7, #16]
 800d040:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d044:	4619      	mov	r1, r3
 800d046:	693a      	ldr	r2, [r7, #16]
 800d048:	2334      	movs	r3, #52	; 0x34
 800d04a:	fb03 f301 	mul.w	r3, r3, r1
 800d04e:	4413      	add	r3, r2
 800d050:	3390      	adds	r3, #144	; 0x90
 800d052:	2203      	movs	r2, #3
 800d054:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800d056:	693b      	ldr	r3, [r7, #16]
 800d058:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d05c:	4619      	mov	r1, r3
 800d05e:	693a      	ldr	r2, [r7, #16]
 800d060:	2334      	movs	r3, #52	; 0x34
 800d062:	fb03 f301 	mul.w	r3, r3, r1
 800d066:	4413      	add	r3, r2
 800d068:	3391      	adds	r3, #145	; 0x91
 800d06a:	2200      	movs	r2, #0
 800d06c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800d06e:	693b      	ldr	r3, [r7, #16]
 800d070:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d074:	4619      	mov	r1, r3
 800d076:	693a      	ldr	r2, [r7, #16]
 800d078:	2334      	movs	r3, #52	; 0x34
 800d07a:	fb03 f301 	mul.w	r3, r3, r1
 800d07e:	4413      	add	r3, r2
 800d080:	3392      	adds	r3, #146	; 0x92
 800d082:	2200      	movs	r2, #0
 800d084:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800d086:	7bbb      	ldrb	r3, [r7, #14]
 800d088:	2b02      	cmp	r3, #2
 800d08a:	d14a      	bne.n	800d122 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 800d08c:	693b      	ldr	r3, [r7, #16]
 800d08e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d092:	4619      	mov	r1, r3
 800d094:	693a      	ldr	r2, [r7, #16]
 800d096:	2334      	movs	r3, #52	; 0x34
 800d098:	fb03 f301 	mul.w	r3, r3, r1
 800d09c:	4413      	add	r3, r2
 800d09e:	3392      	adds	r3, #146	; 0x92
 800d0a0:	781b      	ldrb	r3, [r3, #0]
 800d0a2:	2b02      	cmp	r3, #2
 800d0a4:	d00c      	beq.n	800d0c0 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800d0a6:	693b      	ldr	r3, [r7, #16]
 800d0a8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d0ac:	4619      	mov	r1, r3
 800d0ae:	693a      	ldr	r2, [r7, #16]
 800d0b0:	2334      	movs	r3, #52	; 0x34
 800d0b2:	fb03 f301 	mul.w	r3, r3, r1
 800d0b6:	4413      	add	r3, r2
 800d0b8:	33c1      	adds	r3, #193	; 0xc1
 800d0ba:	2201      	movs	r2, #1
 800d0bc:	701a      	strb	r2, [r3, #0]
 800d0be:	e00b      	b.n	800d0d8 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800d0c0:	693b      	ldr	r3, [r7, #16]
 800d0c2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d0c6:	4619      	mov	r1, r3
 800d0c8:	693a      	ldr	r2, [r7, #16]
 800d0ca:	2334      	movs	r3, #52	; 0x34
 800d0cc:	fb03 f301 	mul.w	r3, r3, r1
 800d0d0:	4413      	add	r3, r2
 800d0d2:	33c1      	adds	r3, #193	; 0xc1
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800d0d8:	693b      	ldr	r3, [r7, #16]
 800d0da:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d0de:	4619      	mov	r1, r3
 800d0e0:	693a      	ldr	r2, [r7, #16]
 800d0e2:	2334      	movs	r3, #52	; 0x34
 800d0e4:	fb03 f301 	mul.w	r3, r3, r1
 800d0e8:	4413      	add	r3, r2
 800d0ea:	3390      	adds	r3, #144	; 0x90
 800d0ec:	2205      	movs	r2, #5
 800d0ee:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800d0f0:	693b      	ldr	r3, [r7, #16]
 800d0f2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d0f6:	4619      	mov	r1, r3
 800d0f8:	693a      	ldr	r2, [r7, #16]
 800d0fa:	2334      	movs	r3, #52	; 0x34
 800d0fc:	fb03 f301 	mul.w	r3, r3, r1
 800d100:	4413      	add	r3, r2
 800d102:	3391      	adds	r3, #145	; 0x91
 800d104:	2201      	movs	r2, #1
 800d106:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800d108:	693b      	ldr	r3, [r7, #16]
 800d10a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d10e:	4619      	mov	r1, r3
 800d110:	693a      	ldr	r2, [r7, #16]
 800d112:	2334      	movs	r3, #52	; 0x34
 800d114:	fb03 f301 	mul.w	r3, r3, r1
 800d118:	4413      	add	r3, r2
 800d11a:	3392      	adds	r3, #146	; 0x92
 800d11c:	2202      	movs	r2, #2
 800d11e:	701a      	strb	r2, [r3, #0]
            break;
 800d120:	e127      	b.n	800d372 <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800d122:	7bbb      	ldrb	r3, [r7, #14]
 800d124:	2b04      	cmp	r3, #4
 800d126:	f040 8124 	bne.w	800d372 <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800d12a:	693b      	ldr	r3, [r7, #16]
 800d12c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d130:	4619      	mov	r1, r3
 800d132:	693a      	ldr	r2, [r7, #16]
 800d134:	2334      	movs	r3, #52	; 0x34
 800d136:	fb03 f301 	mul.w	r3, r3, r1
 800d13a:	4413      	add	r3, r2
 800d13c:	3390      	adds	r3, #144	; 0x90
 800d13e:	2201      	movs	r2, #1
 800d140:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800d142:	693b      	ldr	r3, [r7, #16]
 800d144:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d148:	4619      	mov	r1, r3
 800d14a:	693a      	ldr	r2, [r7, #16]
 800d14c:	2334      	movs	r3, #52	; 0x34
 800d14e:	fb03 f301 	mul.w	r3, r3, r1
 800d152:	4413      	add	r3, r2
 800d154:	3391      	adds	r3, #145	; 0x91
 800d156:	2202      	movs	r2, #2
 800d158:	701a      	strb	r2, [r3, #0]
            break;
 800d15a:	e10a      	b.n	800d372 <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 800d15c:	693b      	ldr	r3, [r7, #16]
 800d15e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d162:	b2d9      	uxtb	r1, r3
 800d164:	693b      	ldr	r3, [r7, #16]
 800d166:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d16a:	461a      	mov	r2, r3
 800d16c:	2334      	movs	r3, #52	; 0x34
 800d16e:	fb03 f302 	mul.w	r3, r3, r2
 800d172:	3390      	adds	r3, #144	; 0x90
 800d174:	693a      	ldr	r2, [r7, #16]
 800d176:	4413      	add	r3, r2
 800d178:	3304      	adds	r3, #4
 800d17a:	461a      	mov	r2, r3
 800d17c:	6878      	ldr	r0, [r7, #4]
 800d17e:	f000 fdda 	bl	800dd36 <USBH_MSC_SCSI_ReadCapacity>
 800d182:	4603      	mov	r3, r0
 800d184:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800d186:	7bfb      	ldrb	r3, [r7, #15]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d120      	bne.n	800d1ce <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800d18c:	693b      	ldr	r3, [r7, #16]
 800d18e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d192:	4619      	mov	r1, r3
 800d194:	693a      	ldr	r2, [r7, #16]
 800d196:	2334      	movs	r3, #52	; 0x34
 800d198:	fb03 f301 	mul.w	r3, r3, r1
 800d19c:	4413      	add	r3, r2
 800d19e:	3390      	adds	r3, #144	; 0x90
 800d1a0:	2201      	movs	r2, #1
 800d1a2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800d1a4:	693b      	ldr	r3, [r7, #16]
 800d1a6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d1aa:	4619      	mov	r1, r3
 800d1ac:	693a      	ldr	r2, [r7, #16]
 800d1ae:	2334      	movs	r3, #52	; 0x34
 800d1b0:	fb03 f301 	mul.w	r3, r3, r1
 800d1b4:	4413      	add	r3, r2
 800d1b6:	3391      	adds	r3, #145	; 0x91
 800d1b8:	2200      	movs	r2, #0
 800d1ba:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800d1bc:	693b      	ldr	r3, [r7, #16]
 800d1be:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d1c2:	3301      	adds	r3, #1
 800d1c4:	b29a      	uxth	r2, r3
 800d1c6:	693b      	ldr	r3, [r7, #16]
 800d1c8:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800d1cc:	e0d3      	b.n	800d376 <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 800d1ce:	7bfb      	ldrb	r3, [r7, #15]
 800d1d0:	2b02      	cmp	r3, #2
 800d1d2:	d10c      	bne.n	800d1ee <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800d1d4:	693b      	ldr	r3, [r7, #16]
 800d1d6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d1da:	4619      	mov	r1, r3
 800d1dc:	693a      	ldr	r2, [r7, #16]
 800d1de:	2334      	movs	r3, #52	; 0x34
 800d1e0:	fb03 f301 	mul.w	r3, r3, r1
 800d1e4:	4413      	add	r3, r2
 800d1e6:	3390      	adds	r3, #144	; 0x90
 800d1e8:	2205      	movs	r2, #5
 800d1ea:	701a      	strb	r2, [r3, #0]
            break;
 800d1ec:	e0c3      	b.n	800d376 <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800d1ee:	7bfb      	ldrb	r3, [r7, #15]
 800d1f0:	2b04      	cmp	r3, #4
 800d1f2:	f040 80c0 	bne.w	800d376 <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800d1f6:	693b      	ldr	r3, [r7, #16]
 800d1f8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d1fc:	4619      	mov	r1, r3
 800d1fe:	693a      	ldr	r2, [r7, #16]
 800d200:	2334      	movs	r3, #52	; 0x34
 800d202:	fb03 f301 	mul.w	r3, r3, r1
 800d206:	4413      	add	r3, r2
 800d208:	3390      	adds	r3, #144	; 0x90
 800d20a:	2201      	movs	r2, #1
 800d20c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800d20e:	693b      	ldr	r3, [r7, #16]
 800d210:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d214:	4619      	mov	r1, r3
 800d216:	693a      	ldr	r2, [r7, #16]
 800d218:	2334      	movs	r3, #52	; 0x34
 800d21a:	fb03 f301 	mul.w	r3, r3, r1
 800d21e:	4413      	add	r3, r2
 800d220:	3391      	adds	r3, #145	; 0x91
 800d222:	2202      	movs	r2, #2
 800d224:	701a      	strb	r2, [r3, #0]
            break;
 800d226:	e0a6      	b.n	800d376 <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800d228:	693b      	ldr	r3, [r7, #16]
 800d22a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d22e:	b2d9      	uxtb	r1, r3
 800d230:	693b      	ldr	r3, [r7, #16]
 800d232:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d236:	461a      	mov	r2, r3
 800d238:	2334      	movs	r3, #52	; 0x34
 800d23a:	fb03 f302 	mul.w	r3, r3, r2
 800d23e:	3398      	adds	r3, #152	; 0x98
 800d240:	693a      	ldr	r2, [r7, #16]
 800d242:	4413      	add	r3, r2
 800d244:	3304      	adds	r3, #4
 800d246:	461a      	mov	r2, r3
 800d248:	6878      	ldr	r0, [r7, #4]
 800d24a:	f000 fe94 	bl	800df76 <USBH_MSC_SCSI_RequestSense>
 800d24e:	4603      	mov	r3, r0
 800d250:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800d252:	7bfb      	ldrb	r3, [r7, #15]
 800d254:	2b00      	cmp	r3, #0
 800d256:	d145      	bne.n	800d2e4 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800d258:	693b      	ldr	r3, [r7, #16]
 800d25a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d25e:	4619      	mov	r1, r3
 800d260:	693a      	ldr	r2, [r7, #16]
 800d262:	2334      	movs	r3, #52	; 0x34
 800d264:	fb03 f301 	mul.w	r3, r3, r1
 800d268:	4413      	add	r3, r2
 800d26a:	339c      	adds	r3, #156	; 0x9c
 800d26c:	781b      	ldrb	r3, [r3, #0]
 800d26e:	2b06      	cmp	r3, #6
 800d270:	d00c      	beq.n	800d28c <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800d272:	693b      	ldr	r3, [r7, #16]
 800d274:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d278:	4619      	mov	r1, r3
 800d27a:	693a      	ldr	r2, [r7, #16]
 800d27c:	2334      	movs	r3, #52	; 0x34
 800d27e:	fb03 f301 	mul.w	r3, r3, r1
 800d282:	4413      	add	r3, r2
 800d284:	339c      	adds	r3, #156	; 0x9c
 800d286:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800d288:	2b02      	cmp	r3, #2
 800d28a:	d117      	bne.n	800d2bc <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800d292:	693b      	ldr	r3, [r7, #16]
 800d294:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800d298:	1ad3      	subs	r3, r2, r3
 800d29a:	f242 720f 	movw	r2, #9999	; 0x270f
 800d29e:	4293      	cmp	r3, r2
 800d2a0:	d80c      	bhi.n	800d2bc <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800d2a2:	693b      	ldr	r3, [r7, #16]
 800d2a4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d2a8:	4619      	mov	r1, r3
 800d2aa:	693a      	ldr	r2, [r7, #16]
 800d2ac:	2334      	movs	r3, #52	; 0x34
 800d2ae:	fb03 f301 	mul.w	r3, r3, r1
 800d2b2:	4413      	add	r3, r2
 800d2b4:	3390      	adds	r3, #144	; 0x90
 800d2b6:	2202      	movs	r2, #2
 800d2b8:	701a      	strb	r2, [r3, #0]
                  break;
 800d2ba:	e05f      	b.n	800d37c <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800d2bc:	693b      	ldr	r3, [r7, #16]
 800d2be:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d2c2:	4619      	mov	r1, r3
 800d2c4:	693a      	ldr	r2, [r7, #16]
 800d2c6:	2334      	movs	r3, #52	; 0x34
 800d2c8:	fb03 f301 	mul.w	r3, r3, r1
 800d2cc:	4413      	add	r3, r2
 800d2ce:	3390      	adds	r3, #144	; 0x90
 800d2d0:	2201      	movs	r2, #1
 800d2d2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800d2d4:	693b      	ldr	r3, [r7, #16]
 800d2d6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d2da:	3301      	adds	r3, #1
 800d2dc:	b29a      	uxth	r2, r3
 800d2de:	693b      	ldr	r3, [r7, #16]
 800d2e0:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 800d2e4:	7bfb      	ldrb	r3, [r7, #15]
 800d2e6:	2b02      	cmp	r3, #2
 800d2e8:	d10c      	bne.n	800d304 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800d2ea:	693b      	ldr	r3, [r7, #16]
 800d2ec:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d2f0:	4619      	mov	r1, r3
 800d2f2:	693a      	ldr	r2, [r7, #16]
 800d2f4:	2334      	movs	r3, #52	; 0x34
 800d2f6:	fb03 f301 	mul.w	r3, r3, r1
 800d2fa:	4413      	add	r3, r2
 800d2fc:	3390      	adds	r3, #144	; 0x90
 800d2fe:	2208      	movs	r2, #8
 800d300:	701a      	strb	r2, [r3, #0]
            break;
 800d302:	e03a      	b.n	800d37a <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800d304:	7bfb      	ldrb	r3, [r7, #15]
 800d306:	2b04      	cmp	r3, #4
 800d308:	d137      	bne.n	800d37a <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800d30a:	693b      	ldr	r3, [r7, #16]
 800d30c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d310:	4619      	mov	r1, r3
 800d312:	693a      	ldr	r2, [r7, #16]
 800d314:	2334      	movs	r3, #52	; 0x34
 800d316:	fb03 f301 	mul.w	r3, r3, r1
 800d31a:	4413      	add	r3, r2
 800d31c:	3390      	adds	r3, #144	; 0x90
 800d31e:	2201      	movs	r2, #1
 800d320:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800d322:	693b      	ldr	r3, [r7, #16]
 800d324:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d328:	4619      	mov	r1, r3
 800d32a:	693a      	ldr	r2, [r7, #16]
 800d32c:	2334      	movs	r3, #52	; 0x34
 800d32e:	fb03 f301 	mul.w	r3, r3, r1
 800d332:	4413      	add	r3, r2
 800d334:	3391      	adds	r3, #145	; 0x91
 800d336:	2202      	movs	r2, #2
 800d338:	701a      	strb	r2, [r3, #0]
            break;
 800d33a:	e01e      	b.n	800d37a <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 800d33c:	693b      	ldr	r3, [r7, #16]
 800d33e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d342:	3301      	adds	r3, #1
 800d344:	b29a      	uxth	r2, r3
 800d346:	693b      	ldr	r3, [r7, #16]
 800d348:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800d34c:	e016      	b.n	800d37c <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 800d34e:	693b      	ldr	r3, [r7, #16]
 800d350:	2200      	movs	r2, #0
 800d352:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800d356:	693b      	ldr	r3, [r7, #16]
 800d358:	2201      	movs	r2, #1
 800d35a:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d362:	2102      	movs	r1, #2
 800d364:	6878      	ldr	r0, [r7, #4]
 800d366:	4798      	blx	r3
      break;
 800d368:	e00c      	b.n	800d384 <USBH_MSC_Process+0x514>
            break;
 800d36a:	bf00      	nop
 800d36c:	e00a      	b.n	800d384 <USBH_MSC_Process+0x514>
            break;
 800d36e:	bf00      	nop
 800d370:	e008      	b.n	800d384 <USBH_MSC_Process+0x514>
            break;
 800d372:	bf00      	nop
 800d374:	e006      	b.n	800d384 <USBH_MSC_Process+0x514>
            break;
 800d376:	bf00      	nop
 800d378:	e004      	b.n	800d384 <USBH_MSC_Process+0x514>
            break;
 800d37a:	bf00      	nop
      break;
 800d37c:	e002      	b.n	800d384 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 800d37e:	2300      	movs	r3, #0
 800d380:	75fb      	strb	r3, [r7, #23]
      break;
 800d382:	bf00      	nop
  }
  return error;
 800d384:	7dfb      	ldrb	r3, [r7, #23]
}
 800d386:	4618      	mov	r0, r3
 800d388:	3718      	adds	r7, #24
 800d38a:	46bd      	mov	sp, r7
 800d38c:	bd80      	pop	{r7, pc}
 800d38e:	bf00      	nop

0800d390 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800d390:	b480      	push	{r7}
 800d392:	b083      	sub	sp, #12
 800d394:	af00      	add	r7, sp, #0
 800d396:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800d398:	2300      	movs	r3, #0
}
 800d39a:	4618      	mov	r0, r3
 800d39c:	370c      	adds	r7, #12
 800d39e:	46bd      	mov	sp, r7
 800d3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a4:	4770      	bx	lr

0800d3a6 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800d3a6:	b580      	push	{r7, lr}
 800d3a8:	b088      	sub	sp, #32
 800d3aa:	af02      	add	r7, sp, #8
 800d3ac:	6078      	str	r0, [r7, #4]
 800d3ae:	460b      	mov	r3, r1
 800d3b0:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d3b8:	69db      	ldr	r3, [r3, #28]
 800d3ba:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 800d3bc:	2301      	movs	r3, #1
 800d3be:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 800d3c0:	2301      	movs	r3, #1
 800d3c2:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800d3c4:	78fb      	ldrb	r3, [r7, #3]
 800d3c6:	693a      	ldr	r2, [r7, #16]
 800d3c8:	2134      	movs	r1, #52	; 0x34
 800d3ca:	fb01 f303 	mul.w	r3, r1, r3
 800d3ce:	4413      	add	r3, r2
 800d3d0:	3390      	adds	r3, #144	; 0x90
 800d3d2:	781b      	ldrb	r3, [r3, #0]
 800d3d4:	2b06      	cmp	r3, #6
 800d3d6:	d004      	beq.n	800d3e2 <USBH_MSC_RdWrProcess+0x3c>
 800d3d8:	2b07      	cmp	r3, #7
 800d3da:	d037      	beq.n	800d44c <USBH_MSC_RdWrProcess+0xa6>
 800d3dc:	2b05      	cmp	r3, #5
 800d3de:	d06a      	beq.n	800d4b6 <USBH_MSC_RdWrProcess+0x110>
#endif
#endif
      break;

    default:
      break;
 800d3e0:	e0a6      	b.n	800d530 <USBH_MSC_RdWrProcess+0x18a>
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800d3e2:	78f9      	ldrb	r1, [r7, #3]
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	9300      	str	r3, [sp, #0]
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	2200      	movs	r2, #0
 800d3ec:	6878      	ldr	r0, [r7, #4]
 800d3ee:	f000 fea6 	bl	800e13e <USBH_MSC_SCSI_Read>
 800d3f2:	4603      	mov	r3, r0
 800d3f4:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 800d3f6:	7bfb      	ldrb	r3, [r7, #15]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d10b      	bne.n	800d414 <USBH_MSC_RdWrProcess+0x6e>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800d3fc:	78fb      	ldrb	r3, [r7, #3]
 800d3fe:	693a      	ldr	r2, [r7, #16]
 800d400:	2134      	movs	r1, #52	; 0x34
 800d402:	fb01 f303 	mul.w	r3, r1, r3
 800d406:	4413      	add	r3, r2
 800d408:	3390      	adds	r3, #144	; 0x90
 800d40a:	2201      	movs	r2, #1
 800d40c:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800d40e:	2300      	movs	r3, #0
 800d410:	75fb      	strb	r3, [r7, #23]
      break;
 800d412:	e088      	b.n	800d526 <USBH_MSC_RdWrProcess+0x180>
      else if (scsi_status == USBH_FAIL)
 800d414:	7bfb      	ldrb	r3, [r7, #15]
 800d416:	2b02      	cmp	r3, #2
 800d418:	d109      	bne.n	800d42e <USBH_MSC_RdWrProcess+0x88>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800d41a:	78fb      	ldrb	r3, [r7, #3]
 800d41c:	693a      	ldr	r2, [r7, #16]
 800d41e:	2134      	movs	r1, #52	; 0x34
 800d420:	fb01 f303 	mul.w	r3, r1, r3
 800d424:	4413      	add	r3, r2
 800d426:	3390      	adds	r3, #144	; 0x90
 800d428:	2205      	movs	r2, #5
 800d42a:	701a      	strb	r2, [r3, #0]
      break;
 800d42c:	e07b      	b.n	800d526 <USBH_MSC_RdWrProcess+0x180>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800d42e:	7bfb      	ldrb	r3, [r7, #15]
 800d430:	2b04      	cmp	r3, #4
 800d432:	d178      	bne.n	800d526 <USBH_MSC_RdWrProcess+0x180>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800d434:	78fb      	ldrb	r3, [r7, #3]
 800d436:	693a      	ldr	r2, [r7, #16]
 800d438:	2134      	movs	r1, #52	; 0x34
 800d43a:	fb01 f303 	mul.w	r3, r1, r3
 800d43e:	4413      	add	r3, r2
 800d440:	3390      	adds	r3, #144	; 0x90
 800d442:	2208      	movs	r2, #8
 800d444:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800d446:	2302      	movs	r3, #2
 800d448:	75fb      	strb	r3, [r7, #23]
      break;
 800d44a:	e06c      	b.n	800d526 <USBH_MSC_RdWrProcess+0x180>
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800d44c:	78f9      	ldrb	r1, [r7, #3]
 800d44e:	2300      	movs	r3, #0
 800d450:	9300      	str	r3, [sp, #0]
 800d452:	2300      	movs	r3, #0
 800d454:	2200      	movs	r2, #0
 800d456:	6878      	ldr	r0, [r7, #4]
 800d458:	f000 fe06 	bl	800e068 <USBH_MSC_SCSI_Write>
 800d45c:	4603      	mov	r3, r0
 800d45e:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 800d460:	7bfb      	ldrb	r3, [r7, #15]
 800d462:	2b00      	cmp	r3, #0
 800d464:	d10b      	bne.n	800d47e <USBH_MSC_RdWrProcess+0xd8>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800d466:	78fb      	ldrb	r3, [r7, #3]
 800d468:	693a      	ldr	r2, [r7, #16]
 800d46a:	2134      	movs	r1, #52	; 0x34
 800d46c:	fb01 f303 	mul.w	r3, r1, r3
 800d470:	4413      	add	r3, r2
 800d472:	3390      	adds	r3, #144	; 0x90
 800d474:	2201      	movs	r2, #1
 800d476:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800d478:	2300      	movs	r3, #0
 800d47a:	75fb      	strb	r3, [r7, #23]
      break;
 800d47c:	e055      	b.n	800d52a <USBH_MSC_RdWrProcess+0x184>
      else if (scsi_status == USBH_FAIL)
 800d47e:	7bfb      	ldrb	r3, [r7, #15]
 800d480:	2b02      	cmp	r3, #2
 800d482:	d109      	bne.n	800d498 <USBH_MSC_RdWrProcess+0xf2>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800d484:	78fb      	ldrb	r3, [r7, #3]
 800d486:	693a      	ldr	r2, [r7, #16]
 800d488:	2134      	movs	r1, #52	; 0x34
 800d48a:	fb01 f303 	mul.w	r3, r1, r3
 800d48e:	4413      	add	r3, r2
 800d490:	3390      	adds	r3, #144	; 0x90
 800d492:	2205      	movs	r2, #5
 800d494:	701a      	strb	r2, [r3, #0]
      break;
 800d496:	e048      	b.n	800d52a <USBH_MSC_RdWrProcess+0x184>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800d498:	7bfb      	ldrb	r3, [r7, #15]
 800d49a:	2b04      	cmp	r3, #4
 800d49c:	d145      	bne.n	800d52a <USBH_MSC_RdWrProcess+0x184>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800d49e:	78fb      	ldrb	r3, [r7, #3]
 800d4a0:	693a      	ldr	r2, [r7, #16]
 800d4a2:	2134      	movs	r1, #52	; 0x34
 800d4a4:	fb01 f303 	mul.w	r3, r1, r3
 800d4a8:	4413      	add	r3, r2
 800d4aa:	3390      	adds	r3, #144	; 0x90
 800d4ac:	2208      	movs	r2, #8
 800d4ae:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800d4b0:	2302      	movs	r3, #2
 800d4b2:	75fb      	strb	r3, [r7, #23]
      break;
 800d4b4:	e039      	b.n	800d52a <USBH_MSC_RdWrProcess+0x184>
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800d4b6:	78fb      	ldrb	r3, [r7, #3]
 800d4b8:	2234      	movs	r2, #52	; 0x34
 800d4ba:	fb02 f303 	mul.w	r3, r2, r3
 800d4be:	3398      	adds	r3, #152	; 0x98
 800d4c0:	693a      	ldr	r2, [r7, #16]
 800d4c2:	4413      	add	r3, r2
 800d4c4:	1d1a      	adds	r2, r3, #4
 800d4c6:	78fb      	ldrb	r3, [r7, #3]
 800d4c8:	4619      	mov	r1, r3
 800d4ca:	6878      	ldr	r0, [r7, #4]
 800d4cc:	f000 fd53 	bl	800df76 <USBH_MSC_SCSI_RequestSense>
 800d4d0:	4603      	mov	r3, r0
 800d4d2:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 800d4d4:	7bfb      	ldrb	r3, [r7, #15]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d113      	bne.n	800d502 <USBH_MSC_RdWrProcess+0x15c>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800d4da:	78fb      	ldrb	r3, [r7, #3]
 800d4dc:	693a      	ldr	r2, [r7, #16]
 800d4de:	2134      	movs	r1, #52	; 0x34
 800d4e0:	fb01 f303 	mul.w	r3, r1, r3
 800d4e4:	4413      	add	r3, r2
 800d4e6:	3390      	adds	r3, #144	; 0x90
 800d4e8:	2201      	movs	r2, #1
 800d4ea:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800d4ec:	78fb      	ldrb	r3, [r7, #3]
 800d4ee:	693a      	ldr	r2, [r7, #16]
 800d4f0:	2134      	movs	r1, #52	; 0x34
 800d4f2:	fb01 f303 	mul.w	r3, r1, r3
 800d4f6:	4413      	add	r3, r2
 800d4f8:	3391      	adds	r3, #145	; 0x91
 800d4fa:	2202      	movs	r2, #2
 800d4fc:	701a      	strb	r2, [r3, #0]
        error = USBH_FAIL;
 800d4fe:	2302      	movs	r3, #2
 800d500:	75fb      	strb	r3, [r7, #23]
      if (scsi_status == USBH_FAIL)
 800d502:	7bfb      	ldrb	r3, [r7, #15]
 800d504:	2b02      	cmp	r3, #2
 800d506:	d012      	beq.n	800d52e <USBH_MSC_RdWrProcess+0x188>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800d508:	7bfb      	ldrb	r3, [r7, #15]
 800d50a:	2b04      	cmp	r3, #4
 800d50c:	d10f      	bne.n	800d52e <USBH_MSC_RdWrProcess+0x188>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800d50e:	78fb      	ldrb	r3, [r7, #3]
 800d510:	693a      	ldr	r2, [r7, #16]
 800d512:	2134      	movs	r1, #52	; 0x34
 800d514:	fb01 f303 	mul.w	r3, r1, r3
 800d518:	4413      	add	r3, r2
 800d51a:	3390      	adds	r3, #144	; 0x90
 800d51c:	2208      	movs	r2, #8
 800d51e:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800d520:	2302      	movs	r3, #2
 800d522:	75fb      	strb	r3, [r7, #23]
      break;
 800d524:	e003      	b.n	800d52e <USBH_MSC_RdWrProcess+0x188>
      break;
 800d526:	bf00      	nop
 800d528:	e002      	b.n	800d530 <USBH_MSC_RdWrProcess+0x18a>
      break;
 800d52a:	bf00      	nop
 800d52c:	e000      	b.n	800d530 <USBH_MSC_RdWrProcess+0x18a>
      break;
 800d52e:	bf00      	nop

  }
  return error;
 800d530:	7dfb      	ldrb	r3, [r7, #23]
}
 800d532:	4618      	mov	r0, r3
 800d534:	3718      	adds	r7, #24
 800d536:	46bd      	mov	sp, r7
 800d538:	bd80      	pop	{r7, pc}

0800d53a <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800d53a:	b480      	push	{r7}
 800d53c:	b085      	sub	sp, #20
 800d53e:	af00      	add	r7, sp, #0
 800d540:	6078      	str	r0, [r7, #4]
 800d542:	460b      	mov	r3, r1
 800d544:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d54c:	69db      	ldr	r3, [r3, #28]
 800d54e:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	781b      	ldrb	r3, [r3, #0]
 800d554:	b2db      	uxtb	r3, r3
 800d556:	2b0b      	cmp	r3, #11
 800d558:	d10c      	bne.n	800d574 <USBH_MSC_UnitIsReady+0x3a>
 800d55a:	78fb      	ldrb	r3, [r7, #3]
 800d55c:	68ba      	ldr	r2, [r7, #8]
 800d55e:	2134      	movs	r1, #52	; 0x34
 800d560:	fb01 f303 	mul.w	r3, r1, r3
 800d564:	4413      	add	r3, r2
 800d566:	3391      	adds	r3, #145	; 0x91
 800d568:	781b      	ldrb	r3, [r3, #0]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d102      	bne.n	800d574 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800d56e:	2301      	movs	r3, #1
 800d570:	73fb      	strb	r3, [r7, #15]
 800d572:	e001      	b.n	800d578 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800d574:	2300      	movs	r3, #0
 800d576:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800d578:	7bfb      	ldrb	r3, [r7, #15]
}
 800d57a:	4618      	mov	r0, r3
 800d57c:	3714      	adds	r7, #20
 800d57e:	46bd      	mov	sp, r7
 800d580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d584:	4770      	bx	lr

0800d586 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800d586:	b580      	push	{r7, lr}
 800d588:	b086      	sub	sp, #24
 800d58a:	af00      	add	r7, sp, #0
 800d58c:	60f8      	str	r0, [r7, #12]
 800d58e:	460b      	mov	r3, r1
 800d590:	607a      	str	r2, [r7, #4]
 800d592:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d59a:	69db      	ldr	r3, [r3, #28]
 800d59c:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	781b      	ldrb	r3, [r3, #0]
 800d5a2:	b2db      	uxtb	r3, r3
 800d5a4:	2b0b      	cmp	r3, #11
 800d5a6:	d10d      	bne.n	800d5c4 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800d5a8:	7afb      	ldrb	r3, [r7, #11]
 800d5aa:	2234      	movs	r2, #52	; 0x34
 800d5ac:	fb02 f303 	mul.w	r3, r2, r3
 800d5b0:	3390      	adds	r3, #144	; 0x90
 800d5b2:	697a      	ldr	r2, [r7, #20]
 800d5b4:	4413      	add	r3, r2
 800d5b6:	2234      	movs	r2, #52	; 0x34
 800d5b8:	4619      	mov	r1, r3
 800d5ba:	6878      	ldr	r0, [r7, #4]
 800d5bc:	f005 f946 	bl	801284c <memcpy>
    return USBH_OK;
 800d5c0:	2300      	movs	r3, #0
 800d5c2:	e000      	b.n	800d5c6 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800d5c4:	2302      	movs	r3, #2
  }
}
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	3718      	adds	r7, #24
 800d5ca:	46bd      	mov	sp, r7
 800d5cc:	bd80      	pop	{r7, pc}

0800d5ce <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800d5ce:	b580      	push	{r7, lr}
 800d5d0:	b088      	sub	sp, #32
 800d5d2:	af02      	add	r7, sp, #8
 800d5d4:	60f8      	str	r0, [r7, #12]
 800d5d6:	607a      	str	r2, [r7, #4]
 800d5d8:	603b      	str	r3, [r7, #0]
 800d5da:	460b      	mov	r3, r1
 800d5dc:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d5e4:	69db      	ldr	r3, [r3, #28]
 800d5e6:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800d5ee:	b2db      	uxtb	r3, r3
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d00e      	beq.n	800d612 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	781b      	ldrb	r3, [r3, #0]
 800d5f8:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800d5fa:	2b0b      	cmp	r3, #11
 800d5fc:	d109      	bne.n	800d612 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800d5fe:	7afb      	ldrb	r3, [r7, #11]
 800d600:	697a      	ldr	r2, [r7, #20]
 800d602:	2134      	movs	r1, #52	; 0x34
 800d604:	fb01 f303 	mul.w	r3, r1, r3
 800d608:	4413      	add	r3, r2
 800d60a:	3390      	adds	r3, #144	; 0x90
 800d60c:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800d60e:	2b01      	cmp	r3, #1
 800d610:	d001      	beq.n	800d616 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800d612:	2302      	movs	r3, #2
 800d614:	e040      	b.n	800d698 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800d616:	697b      	ldr	r3, [r7, #20]
 800d618:	2206      	movs	r2, #6
 800d61a:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800d61c:	7afb      	ldrb	r3, [r7, #11]
 800d61e:	697a      	ldr	r2, [r7, #20]
 800d620:	2134      	movs	r1, #52	; 0x34
 800d622:	fb01 f303 	mul.w	r3, r1, r3
 800d626:	4413      	add	r3, r2
 800d628:	3390      	adds	r3, #144	; 0x90
 800d62a:	2206      	movs	r2, #6
 800d62c:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800d62e:	7afb      	ldrb	r3, [r7, #11]
 800d630:	b29a      	uxth	r2, r3
 800d632:	697b      	ldr	r3, [r7, #20]
 800d634:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800d638:	7af9      	ldrb	r1, [r7, #11]
 800d63a:	6a3b      	ldr	r3, [r7, #32]
 800d63c:	9300      	str	r3, [sp, #0]
 800d63e:	683b      	ldr	r3, [r7, #0]
 800d640:	687a      	ldr	r2, [r7, #4]
 800d642:	68f8      	ldr	r0, [r7, #12]
 800d644:	f000 fd7b 	bl	800e13e <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d64e:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800d650:	e016      	b.n	800d680 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800d658:	693b      	ldr	r3, [r7, #16]
 800d65a:	1ad2      	subs	r2, r2, r3
 800d65c:	6a3b      	ldr	r3, [r7, #32]
 800d65e:	f242 7110 	movw	r1, #10000	; 0x2710
 800d662:	fb01 f303 	mul.w	r3, r1, r3
 800d666:	429a      	cmp	r2, r3
 800d668:	d805      	bhi.n	800d676 <USBH_MSC_Read+0xa8>
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800d670:	b2db      	uxtb	r3, r3
 800d672:	2b00      	cmp	r3, #0
 800d674:	d104      	bne.n	800d680 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800d676:	697b      	ldr	r3, [r7, #20]
 800d678:	2201      	movs	r2, #1
 800d67a:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800d67c:	2302      	movs	r3, #2
 800d67e:	e00b      	b.n	800d698 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800d680:	7afb      	ldrb	r3, [r7, #11]
 800d682:	4619      	mov	r1, r3
 800d684:	68f8      	ldr	r0, [r7, #12]
 800d686:	f7ff fe8e 	bl	800d3a6 <USBH_MSC_RdWrProcess>
 800d68a:	4603      	mov	r3, r0
 800d68c:	2b01      	cmp	r3, #1
 800d68e:	d0e0      	beq.n	800d652 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800d690:	697b      	ldr	r3, [r7, #20]
 800d692:	2201      	movs	r2, #1
 800d694:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 800d696:	2300      	movs	r3, #0
}
 800d698:	4618      	mov	r0, r3
 800d69a:	3718      	adds	r7, #24
 800d69c:	46bd      	mov	sp, r7
 800d69e:	bd80      	pop	{r7, pc}

0800d6a0 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	b088      	sub	sp, #32
 800d6a4:	af02      	add	r7, sp, #8
 800d6a6:	60f8      	str	r0, [r7, #12]
 800d6a8:	607a      	str	r2, [r7, #4]
 800d6aa:	603b      	str	r3, [r7, #0]
 800d6ac:	460b      	mov	r3, r1
 800d6ae:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d6b6:	69db      	ldr	r3, [r3, #28]
 800d6b8:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800d6c0:	b2db      	uxtb	r3, r3
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d00e      	beq.n	800d6e4 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	781b      	ldrb	r3, [r3, #0]
 800d6ca:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800d6cc:	2b0b      	cmp	r3, #11
 800d6ce:	d109      	bne.n	800d6e4 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800d6d0:	7afb      	ldrb	r3, [r7, #11]
 800d6d2:	697a      	ldr	r2, [r7, #20]
 800d6d4:	2134      	movs	r1, #52	; 0x34
 800d6d6:	fb01 f303 	mul.w	r3, r1, r3
 800d6da:	4413      	add	r3, r2
 800d6dc:	3390      	adds	r3, #144	; 0x90
 800d6de:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800d6e0:	2b01      	cmp	r3, #1
 800d6e2:	d001      	beq.n	800d6e8 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800d6e4:	2302      	movs	r3, #2
 800d6e6:	e040      	b.n	800d76a <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800d6e8:	697b      	ldr	r3, [r7, #20]
 800d6ea:	2207      	movs	r2, #7
 800d6ec:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800d6ee:	7afb      	ldrb	r3, [r7, #11]
 800d6f0:	697a      	ldr	r2, [r7, #20]
 800d6f2:	2134      	movs	r1, #52	; 0x34
 800d6f4:	fb01 f303 	mul.w	r3, r1, r3
 800d6f8:	4413      	add	r3, r2
 800d6fa:	3390      	adds	r3, #144	; 0x90
 800d6fc:	2207      	movs	r2, #7
 800d6fe:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800d700:	7afb      	ldrb	r3, [r7, #11]
 800d702:	b29a      	uxth	r2, r3
 800d704:	697b      	ldr	r3, [r7, #20]
 800d706:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800d70a:	7af9      	ldrb	r1, [r7, #11]
 800d70c:	6a3b      	ldr	r3, [r7, #32]
 800d70e:	9300      	str	r3, [sp, #0]
 800d710:	683b      	ldr	r3, [r7, #0]
 800d712:	687a      	ldr	r2, [r7, #4]
 800d714:	68f8      	ldr	r0, [r7, #12]
 800d716:	f000 fca7 	bl	800e068 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d720:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800d722:	e016      	b.n	800d752 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800d72a:	693b      	ldr	r3, [r7, #16]
 800d72c:	1ad2      	subs	r2, r2, r3
 800d72e:	6a3b      	ldr	r3, [r7, #32]
 800d730:	f242 7110 	movw	r1, #10000	; 0x2710
 800d734:	fb01 f303 	mul.w	r3, r1, r3
 800d738:	429a      	cmp	r2, r3
 800d73a:	d805      	bhi.n	800d748 <USBH_MSC_Write+0xa8>
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800d742:	b2db      	uxtb	r3, r3
 800d744:	2b00      	cmp	r3, #0
 800d746:	d104      	bne.n	800d752 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800d748:	697b      	ldr	r3, [r7, #20]
 800d74a:	2201      	movs	r2, #1
 800d74c:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800d74e:	2302      	movs	r3, #2
 800d750:	e00b      	b.n	800d76a <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800d752:	7afb      	ldrb	r3, [r7, #11]
 800d754:	4619      	mov	r1, r3
 800d756:	68f8      	ldr	r0, [r7, #12]
 800d758:	f7ff fe25 	bl	800d3a6 <USBH_MSC_RdWrProcess>
 800d75c:	4603      	mov	r3, r0
 800d75e:	2b01      	cmp	r3, #1
 800d760:	d0e0      	beq.n	800d724 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800d762:	697b      	ldr	r3, [r7, #20]
 800d764:	2201      	movs	r2, #1
 800d766:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800d768:	2300      	movs	r3, #0
}
 800d76a:	4618      	mov	r0, r3
 800d76c:	3718      	adds	r7, #24
 800d76e:	46bd      	mov	sp, r7
 800d770:	bd80      	pop	{r7, pc}

0800d772 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800d772:	b580      	push	{r7, lr}
 800d774:	b082      	sub	sp, #8
 800d776:	af00      	add	r7, sp, #0
 800d778:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	2221      	movs	r2, #33	; 0x21
 800d77e:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	22ff      	movs	r2, #255	; 0xff
 800d784:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	2200      	movs	r2, #0
 800d78a:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	2200      	movs	r2, #0
 800d790:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	2200      	movs	r2, #0
 800d796:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 800d798:	2200      	movs	r2, #0
 800d79a:	2100      	movs	r1, #0
 800d79c:	6878      	ldr	r0, [r7, #4]
 800d79e:	f001 fdae 	bl	800f2fe <USBH_CtlReq>
 800d7a2:	4603      	mov	r3, r0
}
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	3708      	adds	r7, #8
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	bd80      	pop	{r7, pc}

0800d7ac <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b082      	sub	sp, #8
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]
 800d7b4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	22a1      	movs	r2, #161	; 0xa1
 800d7ba:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	22fe      	movs	r2, #254	; 0xfe
 800d7c0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	2200      	movs	r2, #0
 800d7c6:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	2201      	movs	r2, #1
 800d7d2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800d7d4:	2201      	movs	r2, #1
 800d7d6:	6839      	ldr	r1, [r7, #0]
 800d7d8:	6878      	ldr	r0, [r7, #4]
 800d7da:	f001 fd90 	bl	800f2fe <USBH_CtlReq>
 800d7de:	4603      	mov	r3, r0
}
 800d7e0:	4618      	mov	r0, r3
 800d7e2:	3708      	adds	r7, #8
 800d7e4:	46bd      	mov	sp, r7
 800d7e6:	bd80      	pop	{r7, pc}

0800d7e8 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800d7e8:	b480      	push	{r7}
 800d7ea:	b085      	sub	sp, #20
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d7f6:	69db      	ldr	r3, [r3, #28]
 800d7f8:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	4a09      	ldr	r2, [pc, #36]	; (800d824 <USBH_MSC_BOT_Init+0x3c>)
 800d7fe:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	4a09      	ldr	r2, [pc, #36]	; (800d828 <USBH_MSC_BOT_Init+0x40>)
 800d804:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	2201      	movs	r2, #1
 800d80a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	2201      	movs	r2, #1
 800d812:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800d816:	2300      	movs	r3, #0
}
 800d818:	4618      	mov	r0, r3
 800d81a:	3714      	adds	r7, #20
 800d81c:	46bd      	mov	sp, r7
 800d81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d822:	4770      	bx	lr
 800d824:	43425355 	.word	0x43425355
 800d828:	20304050 	.word	0x20304050

0800d82c <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800d82c:	b580      	push	{r7, lr}
 800d82e:	b088      	sub	sp, #32
 800d830:	af02      	add	r7, sp, #8
 800d832:	6078      	str	r0, [r7, #4]
 800d834:	460b      	mov	r3, r1
 800d836:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800d838:	2301      	movs	r3, #1
 800d83a:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800d83c:	2301      	movs	r3, #1
 800d83e:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800d840:	2301      	movs	r3, #1
 800d842:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800d844:	2300      	movs	r3, #0
 800d846:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d84e:	69db      	ldr	r3, [r3, #28]
 800d850:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800d852:	2300      	movs	r3, #0
 800d854:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800d856:	693b      	ldr	r3, [r7, #16]
 800d858:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d85c:	3b01      	subs	r3, #1
 800d85e:	2b0a      	cmp	r3, #10
 800d860:	f200 81a1 	bhi.w	800dba6 <USBH_MSC_BOT_Process+0x37a>
 800d864:	a201      	add	r2, pc, #4	; (adr r2, 800d86c <USBH_MSC_BOT_Process+0x40>)
 800d866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d86a:	bf00      	nop
 800d86c:	0800d899 	.word	0x0800d899
 800d870:	0800d8c3 	.word	0x0800d8c3
 800d874:	0800d92d 	.word	0x0800d92d
 800d878:	0800d94b 	.word	0x0800d94b
 800d87c:	0800d9cf 	.word	0x0800d9cf
 800d880:	0800d9f3 	.word	0x0800d9f3
 800d884:	0800da8d 	.word	0x0800da8d
 800d888:	0800daa9 	.word	0x0800daa9
 800d88c:	0800dafb 	.word	0x0800dafb
 800d890:	0800db2b 	.word	0x0800db2b
 800d894:	0800db8d 	.word	0x0800db8d
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800d898:	693b      	ldr	r3, [r7, #16]
 800d89a:	78fa      	ldrb	r2, [r7, #3]
 800d89c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800d8a0:	693b      	ldr	r3, [r7, #16]
 800d8a2:	2202      	movs	r2, #2
 800d8a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800d8a8:	693b      	ldr	r3, [r7, #16]
 800d8aa:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800d8ae:	693b      	ldr	r3, [r7, #16]
 800d8b0:	795a      	ldrb	r2, [r3, #5]
 800d8b2:	2301      	movs	r3, #1
 800d8b4:	9300      	str	r3, [sp, #0]
 800d8b6:	4613      	mov	r3, r2
 800d8b8:	221f      	movs	r2, #31
 800d8ba:	6878      	ldr	r0, [r7, #4]
 800d8bc:	f001 ff2f 	bl	800f71e <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800d8c0:	e180      	b.n	800dbc4 <USBH_MSC_BOT_Process+0x398>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800d8c2:	693b      	ldr	r3, [r7, #16]
 800d8c4:	795b      	ldrb	r3, [r3, #5]
 800d8c6:	4619      	mov	r1, r3
 800d8c8:	6878      	ldr	r0, [r7, #4]
 800d8ca:	f004 fe9d 	bl	8012608 <USBH_LL_GetURBState>
 800d8ce:	4603      	mov	r3, r0
 800d8d0:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800d8d2:	7d3b      	ldrb	r3, [r7, #20]
 800d8d4:	2b01      	cmp	r3, #1
 800d8d6:	d118      	bne.n	800d90a <USBH_MSC_BOT_Process+0xde>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800d8d8:	693b      	ldr	r3, [r7, #16]
 800d8da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d00f      	beq.n	800d900 <USBH_MSC_BOT_Process+0xd4>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800d8e0:	693b      	ldr	r3, [r7, #16]
 800d8e2:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800d8e6:	b25b      	sxtb	r3, r3
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	da04      	bge.n	800d8f6 <USBH_MSC_BOT_Process+0xca>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800d8ec:	693b      	ldr	r3, [r7, #16]
 800d8ee:	2203      	movs	r2, #3
 800d8f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d8f4:	e159      	b.n	800dbaa <USBH_MSC_BOT_Process+0x37e>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800d8f6:	693b      	ldr	r3, [r7, #16]
 800d8f8:	2205      	movs	r2, #5
 800d8fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800d8fe:	e154      	b.n	800dbaa <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800d900:	693b      	ldr	r3, [r7, #16]
 800d902:	2207      	movs	r2, #7
 800d904:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800d908:	e14f      	b.n	800dbaa <USBH_MSC_BOT_Process+0x37e>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d90a:	7d3b      	ldrb	r3, [r7, #20]
 800d90c:	2b02      	cmp	r3, #2
 800d90e:	d104      	bne.n	800d91a <USBH_MSC_BOT_Process+0xee>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800d910:	693b      	ldr	r3, [r7, #16]
 800d912:	2201      	movs	r2, #1
 800d914:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800d918:	e147      	b.n	800dbaa <USBH_MSC_BOT_Process+0x37e>
        if (URB_Status == USBH_URB_STALL)
 800d91a:	7d3b      	ldrb	r3, [r7, #20]
 800d91c:	2b05      	cmp	r3, #5
 800d91e:	f040 8144 	bne.w	800dbaa <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800d922:	693b      	ldr	r3, [r7, #16]
 800d924:	220a      	movs	r2, #10
 800d926:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800d92a:	e13e      	b.n	800dbaa <USBH_MSC_BOT_Process+0x37e>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800d92c:	693b      	ldr	r3, [r7, #16]
 800d92e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800d932:	693b      	ldr	r3, [r7, #16]
 800d934:	895a      	ldrh	r2, [r3, #10]
 800d936:	693b      	ldr	r3, [r7, #16]
 800d938:	791b      	ldrb	r3, [r3, #4]
 800d93a:	6878      	ldr	r0, [r7, #4]
 800d93c:	f001 ff14 	bl	800f768 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800d940:	693b      	ldr	r3, [r7, #16]
 800d942:	2204      	movs	r2, #4
 800d944:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 800d948:	e13c      	b.n	800dbc4 <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800d94a:	693b      	ldr	r3, [r7, #16]
 800d94c:	791b      	ldrb	r3, [r3, #4]
 800d94e:	4619      	mov	r1, r3
 800d950:	6878      	ldr	r0, [r7, #4]
 800d952:	f004 fe59 	bl	8012608 <USBH_LL_GetURBState>
 800d956:	4603      	mov	r3, r0
 800d958:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800d95a:	7d3b      	ldrb	r3, [r7, #20]
 800d95c:	2b01      	cmp	r3, #1
 800d95e:	d12d      	bne.n	800d9bc <USBH_MSC_BOT_Process+0x190>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800d960:	693b      	ldr	r3, [r7, #16]
 800d962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d964:	693a      	ldr	r2, [r7, #16]
 800d966:	8952      	ldrh	r2, [r2, #10]
 800d968:	4293      	cmp	r3, r2
 800d96a:	d910      	bls.n	800d98e <USBH_MSC_BOT_Process+0x162>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800d96c:	693b      	ldr	r3, [r7, #16]
 800d96e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d972:	693a      	ldr	r2, [r7, #16]
 800d974:	8952      	ldrh	r2, [r2, #10]
 800d976:	441a      	add	r2, r3
 800d978:	693b      	ldr	r3, [r7, #16]
 800d97a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800d97e:	693b      	ldr	r3, [r7, #16]
 800d980:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d982:	693a      	ldr	r2, [r7, #16]
 800d984:	8952      	ldrh	r2, [r2, #10]
 800d986:	1a9a      	subs	r2, r3, r2
 800d988:	693b      	ldr	r3, [r7, #16]
 800d98a:	65da      	str	r2, [r3, #92]	; 0x5c
 800d98c:	e002      	b.n	800d994 <USBH_MSC_BOT_Process+0x168>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800d98e:	693b      	ldr	r3, [r7, #16]
 800d990:	2200      	movs	r2, #0
 800d992:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800d994:	693b      	ldr	r3, [r7, #16]
 800d996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d00a      	beq.n	800d9b2 <USBH_MSC_BOT_Process+0x186>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800d99c:	693b      	ldr	r3, [r7, #16]
 800d99e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800d9a2:	693b      	ldr	r3, [r7, #16]
 800d9a4:	895a      	ldrh	r2, [r3, #10]
 800d9a6:	693b      	ldr	r3, [r7, #16]
 800d9a8:	791b      	ldrb	r3, [r3, #4]
 800d9aa:	6878      	ldr	r0, [r7, #4]
 800d9ac:	f001 fedc 	bl	800f768 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800d9b0:	e0fd      	b.n	800dbae <USBH_MSC_BOT_Process+0x382>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800d9b2:	693b      	ldr	r3, [r7, #16]
 800d9b4:	2207      	movs	r2, #7
 800d9b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800d9ba:	e0f8      	b.n	800dbae <USBH_MSC_BOT_Process+0x382>
      else if (URB_Status == USBH_URB_STALL)
 800d9bc:	7d3b      	ldrb	r3, [r7, #20]
 800d9be:	2b05      	cmp	r3, #5
 800d9c0:	f040 80f5 	bne.w	800dbae <USBH_MSC_BOT_Process+0x382>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800d9c4:	693b      	ldr	r3, [r7, #16]
 800d9c6:	2209      	movs	r2, #9
 800d9c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800d9cc:	e0ef      	b.n	800dbae <USBH_MSC_BOT_Process+0x382>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800d9ce:	693b      	ldr	r3, [r7, #16]
 800d9d0:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800d9d4:	693b      	ldr	r3, [r7, #16]
 800d9d6:	891a      	ldrh	r2, [r3, #8]
 800d9d8:	693b      	ldr	r3, [r7, #16]
 800d9da:	7958      	ldrb	r0, [r3, #5]
 800d9dc:	2301      	movs	r3, #1
 800d9de:	9300      	str	r3, [sp, #0]
 800d9e0:	4603      	mov	r3, r0
 800d9e2:	6878      	ldr	r0, [r7, #4]
 800d9e4:	f001 fe9b 	bl	800f71e <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800d9e8:	693b      	ldr	r3, [r7, #16]
 800d9ea:	2206      	movs	r2, #6
 800d9ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800d9f0:	e0e8      	b.n	800dbc4 <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800d9f2:	693b      	ldr	r3, [r7, #16]
 800d9f4:	795b      	ldrb	r3, [r3, #5]
 800d9f6:	4619      	mov	r1, r3
 800d9f8:	6878      	ldr	r0, [r7, #4]
 800d9fa:	f004 fe05 	bl	8012608 <USBH_LL_GetURBState>
 800d9fe:	4603      	mov	r3, r0
 800da00:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800da02:	7d3b      	ldrb	r3, [r7, #20]
 800da04:	2b01      	cmp	r3, #1
 800da06:	d130      	bne.n	800da6a <USBH_MSC_BOT_Process+0x23e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800da08:	693b      	ldr	r3, [r7, #16]
 800da0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800da0c:	693a      	ldr	r2, [r7, #16]
 800da0e:	8912      	ldrh	r2, [r2, #8]
 800da10:	4293      	cmp	r3, r2
 800da12:	d910      	bls.n	800da36 <USBH_MSC_BOT_Process+0x20a>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800da14:	693b      	ldr	r3, [r7, #16]
 800da16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800da1a:	693a      	ldr	r2, [r7, #16]
 800da1c:	8912      	ldrh	r2, [r2, #8]
 800da1e:	441a      	add	r2, r3
 800da20:	693b      	ldr	r3, [r7, #16]
 800da22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800da26:	693b      	ldr	r3, [r7, #16]
 800da28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800da2a:	693a      	ldr	r2, [r7, #16]
 800da2c:	8912      	ldrh	r2, [r2, #8]
 800da2e:	1a9a      	subs	r2, r3, r2
 800da30:	693b      	ldr	r3, [r7, #16]
 800da32:	65da      	str	r2, [r3, #92]	; 0x5c
 800da34:	e002      	b.n	800da3c <USBH_MSC_BOT_Process+0x210>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800da36:	693b      	ldr	r3, [r7, #16]
 800da38:	2200      	movs	r2, #0
 800da3a:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800da3c:	693b      	ldr	r3, [r7, #16]
 800da3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800da40:	2b00      	cmp	r3, #0
 800da42:	d00d      	beq.n	800da60 <USBH_MSC_BOT_Process+0x234>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800da44:	693b      	ldr	r3, [r7, #16]
 800da46:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800da4a:	693b      	ldr	r3, [r7, #16]
 800da4c:	891a      	ldrh	r2, [r3, #8]
 800da4e:	693b      	ldr	r3, [r7, #16]
 800da50:	7958      	ldrb	r0, [r3, #5]
 800da52:	2301      	movs	r3, #1
 800da54:	9300      	str	r3, [sp, #0]
 800da56:	4603      	mov	r3, r0
 800da58:	6878      	ldr	r0, [r7, #4]
 800da5a:	f001 fe60 	bl	800f71e <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800da5e:	e0a8      	b.n	800dbb2 <USBH_MSC_BOT_Process+0x386>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800da60:	693b      	ldr	r3, [r7, #16]
 800da62:	2207      	movs	r2, #7
 800da64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800da68:	e0a3      	b.n	800dbb2 <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_NOTREADY)
 800da6a:	7d3b      	ldrb	r3, [r7, #20]
 800da6c:	2b02      	cmp	r3, #2
 800da6e:	d104      	bne.n	800da7a <USBH_MSC_BOT_Process+0x24e>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800da70:	693b      	ldr	r3, [r7, #16]
 800da72:	2205      	movs	r2, #5
 800da74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800da78:	e09b      	b.n	800dbb2 <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_STALL)
 800da7a:	7d3b      	ldrb	r3, [r7, #20]
 800da7c:	2b05      	cmp	r3, #5
 800da7e:	f040 8098 	bne.w	800dbb2 <USBH_MSC_BOT_Process+0x386>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800da82:	693b      	ldr	r3, [r7, #16]
 800da84:	220a      	movs	r2, #10
 800da86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800da8a:	e092      	b.n	800dbb2 <USBH_MSC_BOT_Process+0x386>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800da8c:	693b      	ldr	r3, [r7, #16]
 800da8e:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800da92:	693b      	ldr	r3, [r7, #16]
 800da94:	791b      	ldrb	r3, [r3, #4]
 800da96:	220d      	movs	r2, #13
 800da98:	6878      	ldr	r0, [r7, #4]
 800da9a:	f001 fe65 	bl	800f768 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800da9e:	693b      	ldr	r3, [r7, #16]
 800daa0:	2208      	movs	r2, #8
 800daa2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800daa6:	e08d      	b.n	800dbc4 <USBH_MSC_BOT_Process+0x398>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800daa8:	693b      	ldr	r3, [r7, #16]
 800daaa:	791b      	ldrb	r3, [r3, #4]
 800daac:	4619      	mov	r1, r3
 800daae:	6878      	ldr	r0, [r7, #4]
 800dab0:	f004 fdaa 	bl	8012608 <USBH_LL_GetURBState>
 800dab4:	4603      	mov	r3, r0
 800dab6:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800dab8:	7d3b      	ldrb	r3, [r7, #20]
 800daba:	2b01      	cmp	r3, #1
 800dabc:	d115      	bne.n	800daea <USBH_MSC_BOT_Process+0x2be>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800dabe:	693b      	ldr	r3, [r7, #16]
 800dac0:	2201      	movs	r2, #1
 800dac2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800dac6:	693b      	ldr	r3, [r7, #16]
 800dac8:	2201      	movs	r2, #1
 800daca:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800dace:	6878      	ldr	r0, [r7, #4]
 800dad0:	f000 f8aa 	bl	800dc28 <USBH_MSC_DecodeCSW>
 800dad4:	4603      	mov	r3, r0
 800dad6:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800dad8:	7d7b      	ldrb	r3, [r7, #21]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d102      	bne.n	800dae4 <USBH_MSC_BOT_Process+0x2b8>
        {
          status = USBH_OK;
 800dade:	2300      	movs	r3, #0
 800dae0:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 800dae2:	e068      	b.n	800dbb6 <USBH_MSC_BOT_Process+0x38a>
          status = USBH_FAIL;
 800dae4:	2302      	movs	r3, #2
 800dae6:	75fb      	strb	r3, [r7, #23]
      break;
 800dae8:	e065      	b.n	800dbb6 <USBH_MSC_BOT_Process+0x38a>
      else if (URB_Status == USBH_URB_STALL)
 800daea:	7d3b      	ldrb	r3, [r7, #20]
 800daec:	2b05      	cmp	r3, #5
 800daee:	d162      	bne.n	800dbb6 <USBH_MSC_BOT_Process+0x38a>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800daf0:	693b      	ldr	r3, [r7, #16]
 800daf2:	2209      	movs	r2, #9
 800daf4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800daf8:	e05d      	b.n	800dbb6 <USBH_MSC_BOT_Process+0x38a>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800dafa:	78fb      	ldrb	r3, [r7, #3]
 800dafc:	2200      	movs	r2, #0
 800dafe:	4619      	mov	r1, r3
 800db00:	6878      	ldr	r0, [r7, #4]
 800db02:	f000 f865 	bl	800dbd0 <USBH_MSC_BOT_Abort>
 800db06:	4603      	mov	r3, r0
 800db08:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800db0a:	7dbb      	ldrb	r3, [r7, #22]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d104      	bne.n	800db1a <USBH_MSC_BOT_Process+0x2ee>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800db10:	693b      	ldr	r3, [r7, #16]
 800db12:	2207      	movs	r2, #7
 800db14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800db18:	e04f      	b.n	800dbba <USBH_MSC_BOT_Process+0x38e>
      else if (error == USBH_UNRECOVERED_ERROR)
 800db1a:	7dbb      	ldrb	r3, [r7, #22]
 800db1c:	2b04      	cmp	r3, #4
 800db1e:	d14c      	bne.n	800dbba <USBH_MSC_BOT_Process+0x38e>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800db20:	693b      	ldr	r3, [r7, #16]
 800db22:	220b      	movs	r2, #11
 800db24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800db28:	e047      	b.n	800dbba <USBH_MSC_BOT_Process+0x38e>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800db2a:	78fb      	ldrb	r3, [r7, #3]
 800db2c:	2201      	movs	r2, #1
 800db2e:	4619      	mov	r1, r3
 800db30:	6878      	ldr	r0, [r7, #4]
 800db32:	f000 f84d 	bl	800dbd0 <USBH_MSC_BOT_Abort>
 800db36:	4603      	mov	r3, r0
 800db38:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800db3a:	7dbb      	ldrb	r3, [r7, #22]
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d11d      	bne.n	800db7c <USBH_MSC_BOT_Process+0x350>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800db40:	693b      	ldr	r3, [r7, #16]
 800db42:	795b      	ldrb	r3, [r3, #5]
 800db44:	4619      	mov	r1, r3
 800db46:	6878      	ldr	r0, [r7, #4]
 800db48:	f004 fdbb 	bl	80126c2 <USBH_LL_GetToggle>
 800db4c:	4603      	mov	r3, r0
 800db4e:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800db50:	693b      	ldr	r3, [r7, #16]
 800db52:	7959      	ldrb	r1, [r3, #5]
 800db54:	7bfb      	ldrb	r3, [r7, #15]
 800db56:	f1c3 0301 	rsb	r3, r3, #1
 800db5a:	b2db      	uxtb	r3, r3
 800db5c:	461a      	mov	r2, r3
 800db5e:	6878      	ldr	r0, [r7, #4]
 800db60:	f004 fd7c 	bl	801265c <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800db64:	693b      	ldr	r3, [r7, #16]
 800db66:	791b      	ldrb	r3, [r3, #4]
 800db68:	2200      	movs	r2, #0
 800db6a:	4619      	mov	r1, r3
 800db6c:	6878      	ldr	r0, [r7, #4]
 800db6e:	f004 fd75 	bl	801265c <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800db72:	693b      	ldr	r3, [r7, #16]
 800db74:	2209      	movs	r2, #9
 800db76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800db7a:	e020      	b.n	800dbbe <USBH_MSC_BOT_Process+0x392>
        if (error == USBH_UNRECOVERED_ERROR)
 800db7c:	7dbb      	ldrb	r3, [r7, #22]
 800db7e:	2b04      	cmp	r3, #4
 800db80:	d11d      	bne.n	800dbbe <USBH_MSC_BOT_Process+0x392>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800db82:	693b      	ldr	r3, [r7, #16]
 800db84:	220b      	movs	r2, #11
 800db86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800db8a:	e018      	b.n	800dbbe <USBH_MSC_BOT_Process+0x392>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800db8c:	6878      	ldr	r0, [r7, #4]
 800db8e:	f7ff fdf0 	bl	800d772 <USBH_MSC_BOT_REQ_Reset>
 800db92:	4603      	mov	r3, r0
 800db94:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800db96:	7dfb      	ldrb	r3, [r7, #23]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d112      	bne.n	800dbc2 <USBH_MSC_BOT_Process+0x396>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800db9c:	693b      	ldr	r3, [r7, #16]
 800db9e:	2201      	movs	r2, #1
 800dba0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800dba4:	e00d      	b.n	800dbc2 <USBH_MSC_BOT_Process+0x396>

    default:
      break;
 800dba6:	bf00      	nop
 800dba8:	e00c      	b.n	800dbc4 <USBH_MSC_BOT_Process+0x398>
      break;
 800dbaa:	bf00      	nop
 800dbac:	e00a      	b.n	800dbc4 <USBH_MSC_BOT_Process+0x398>
      break;
 800dbae:	bf00      	nop
 800dbb0:	e008      	b.n	800dbc4 <USBH_MSC_BOT_Process+0x398>
      break;
 800dbb2:	bf00      	nop
 800dbb4:	e006      	b.n	800dbc4 <USBH_MSC_BOT_Process+0x398>
      break;
 800dbb6:	bf00      	nop
 800dbb8:	e004      	b.n	800dbc4 <USBH_MSC_BOT_Process+0x398>
      break;
 800dbba:	bf00      	nop
 800dbbc:	e002      	b.n	800dbc4 <USBH_MSC_BOT_Process+0x398>
      break;
 800dbbe:	bf00      	nop
 800dbc0:	e000      	b.n	800dbc4 <USBH_MSC_BOT_Process+0x398>
      break;
 800dbc2:	bf00      	nop
  }
  return status;
 800dbc4:	7dfb      	ldrb	r3, [r7, #23]
}
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	3718      	adds	r7, #24
 800dbca:	46bd      	mov	sp, r7
 800dbcc:	bd80      	pop	{r7, pc}
 800dbce:	bf00      	nop

0800dbd0 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800dbd0:	b580      	push	{r7, lr}
 800dbd2:	b084      	sub	sp, #16
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	6078      	str	r0, [r7, #4]
 800dbd8:	460b      	mov	r3, r1
 800dbda:	70fb      	strb	r3, [r7, #3]
 800dbdc:	4613      	mov	r3, r2
 800dbde:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800dbe0:	2302      	movs	r3, #2
 800dbe2:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dbea:	69db      	ldr	r3, [r3, #28]
 800dbec:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800dbee:	78bb      	ldrb	r3, [r7, #2]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d002      	beq.n	800dbfa <USBH_MSC_BOT_Abort+0x2a>
 800dbf4:	2b01      	cmp	r3, #1
 800dbf6:	d009      	beq.n	800dc0c <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800dbf8:	e011      	b.n	800dc1e <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800dbfa:	68bb      	ldr	r3, [r7, #8]
 800dbfc:	79db      	ldrb	r3, [r3, #7]
 800dbfe:	4619      	mov	r1, r3
 800dc00:	6878      	ldr	r0, [r7, #4]
 800dc02:	f001 f99c 	bl	800ef3e <USBH_ClrFeature>
 800dc06:	4603      	mov	r3, r0
 800dc08:	73fb      	strb	r3, [r7, #15]
      break;
 800dc0a:	e008      	b.n	800dc1e <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800dc0c:	68bb      	ldr	r3, [r7, #8]
 800dc0e:	799b      	ldrb	r3, [r3, #6]
 800dc10:	4619      	mov	r1, r3
 800dc12:	6878      	ldr	r0, [r7, #4]
 800dc14:	f001 f993 	bl	800ef3e <USBH_ClrFeature>
 800dc18:	4603      	mov	r3, r0
 800dc1a:	73fb      	strb	r3, [r7, #15]
      break;
 800dc1c:	bf00      	nop
  }
  return status;
 800dc1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc20:	4618      	mov	r0, r3
 800dc22:	3710      	adds	r7, #16
 800dc24:	46bd      	mov	sp, r7
 800dc26:	bd80      	pop	{r7, pc}

0800dc28 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800dc28:	b580      	push	{r7, lr}
 800dc2a:	b084      	sub	sp, #16
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dc36:	69db      	ldr	r3, [r3, #28]
 800dc38:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800dc3a:	2301      	movs	r3, #1
 800dc3c:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800dc3e:	68bb      	ldr	r3, [r7, #8]
 800dc40:	791b      	ldrb	r3, [r3, #4]
 800dc42:	4619      	mov	r1, r3
 800dc44:	6878      	ldr	r0, [r7, #4]
 800dc46:	f004 fc4d 	bl	80124e4 <USBH_LL_GetLastXferSize>
 800dc4a:	4603      	mov	r3, r0
 800dc4c:	2b0d      	cmp	r3, #13
 800dc4e:	d002      	beq.n	800dc56 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800dc50:	2302      	movs	r3, #2
 800dc52:	73fb      	strb	r3, [r7, #15]
 800dc54:	e024      	b.n	800dca0 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800dc56:	68bb      	ldr	r3, [r7, #8]
 800dc58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dc5a:	4a14      	ldr	r2, [pc, #80]	; (800dcac <USBH_MSC_DecodeCSW+0x84>)
 800dc5c:	4293      	cmp	r3, r2
 800dc5e:	d11d      	bne.n	800dc9c <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800dc60:	68bb      	ldr	r3, [r7, #8]
 800dc62:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800dc64:	68bb      	ldr	r3, [r7, #8]
 800dc66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dc68:	429a      	cmp	r2, r3
 800dc6a:	d119      	bne.n	800dca0 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800dc6c:	68bb      	ldr	r3, [r7, #8]
 800dc6e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d102      	bne.n	800dc7c <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800dc76:	2300      	movs	r3, #0
 800dc78:	73fb      	strb	r3, [r7, #15]
 800dc7a:	e011      	b.n	800dca0 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800dc7c:	68bb      	ldr	r3, [r7, #8]
 800dc7e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800dc82:	2b01      	cmp	r3, #1
 800dc84:	d102      	bne.n	800dc8c <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800dc86:	2301      	movs	r3, #1
 800dc88:	73fb      	strb	r3, [r7, #15]
 800dc8a:	e009      	b.n	800dca0 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800dc8c:	68bb      	ldr	r3, [r7, #8]
 800dc8e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800dc92:	2b02      	cmp	r3, #2
 800dc94:	d104      	bne.n	800dca0 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800dc96:	2302      	movs	r3, #2
 800dc98:	73fb      	strb	r3, [r7, #15]
 800dc9a:	e001      	b.n	800dca0 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800dc9c:	2302      	movs	r3, #2
 800dc9e:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800dca0:	7bfb      	ldrb	r3, [r7, #15]
}
 800dca2:	4618      	mov	r0, r3
 800dca4:	3710      	adds	r7, #16
 800dca6:	46bd      	mov	sp, r7
 800dca8:	bd80      	pop	{r7, pc}
 800dcaa:	bf00      	nop
 800dcac:	53425355 	.word	0x53425355

0800dcb0 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800dcb0:	b580      	push	{r7, lr}
 800dcb2:	b084      	sub	sp, #16
 800dcb4:	af00      	add	r7, sp, #0
 800dcb6:	6078      	str	r0, [r7, #4]
 800dcb8:	460b      	mov	r3, r1
 800dcba:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800dcbc:	2302      	movs	r3, #2
 800dcbe:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dcc6:	69db      	ldr	r3, [r3, #28]
 800dcc8:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800dcca:	68bb      	ldr	r3, [r7, #8]
 800dccc:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800dcd0:	2b01      	cmp	r3, #1
 800dcd2:	d002      	beq.n	800dcda <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800dcd4:	2b02      	cmp	r3, #2
 800dcd6:	d021      	beq.n	800dd1c <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800dcd8:	e028      	b.n	800dd2c <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800dcda:	68bb      	ldr	r3, [r7, #8]
 800dcdc:	2200      	movs	r2, #0
 800dcde:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800dce0:	68bb      	ldr	r3, [r7, #8]
 800dce2:	2200      	movs	r2, #0
 800dce4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800dce8:	68bb      	ldr	r3, [r7, #8]
 800dcea:	220a      	movs	r2, #10
 800dcec:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800dcf0:	68bb      	ldr	r3, [r7, #8]
 800dcf2:	3363      	adds	r3, #99	; 0x63
 800dcf4:	2210      	movs	r2, #16
 800dcf6:	2100      	movs	r1, #0
 800dcf8:	4618      	mov	r0, r3
 800dcfa:	f004 fdb2 	bl	8012862 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800dcfe:	68bb      	ldr	r3, [r7, #8]
 800dd00:	2200      	movs	r2, #0
 800dd02:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800dd06:	68bb      	ldr	r3, [r7, #8]
 800dd08:	2201      	movs	r2, #1
 800dd0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800dd0e:	68bb      	ldr	r3, [r7, #8]
 800dd10:	2202      	movs	r2, #2
 800dd12:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800dd16:	2301      	movs	r3, #1
 800dd18:	73fb      	strb	r3, [r7, #15]
      break;
 800dd1a:	e007      	b.n	800dd2c <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800dd1c:	78fb      	ldrb	r3, [r7, #3]
 800dd1e:	4619      	mov	r1, r3
 800dd20:	6878      	ldr	r0, [r7, #4]
 800dd22:	f7ff fd83 	bl	800d82c <USBH_MSC_BOT_Process>
 800dd26:	4603      	mov	r3, r0
 800dd28:	73fb      	strb	r3, [r7, #15]
      break;
 800dd2a:	bf00      	nop
  }

  return error;
 800dd2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd2e:	4618      	mov	r0, r3
 800dd30:	3710      	adds	r7, #16
 800dd32:	46bd      	mov	sp, r7
 800dd34:	bd80      	pop	{r7, pc}

0800dd36 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800dd36:	b580      	push	{r7, lr}
 800dd38:	b086      	sub	sp, #24
 800dd3a:	af00      	add	r7, sp, #0
 800dd3c:	60f8      	str	r0, [r7, #12]
 800dd3e:	460b      	mov	r3, r1
 800dd40:	607a      	str	r2, [r7, #4]
 800dd42:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800dd44:	2301      	movs	r3, #1
 800dd46:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dd4e:	69db      	ldr	r3, [r3, #28]
 800dd50:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800dd52:	693b      	ldr	r3, [r7, #16]
 800dd54:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800dd58:	2b01      	cmp	r3, #1
 800dd5a:	d002      	beq.n	800dd62 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800dd5c:	2b02      	cmp	r3, #2
 800dd5e:	d027      	beq.n	800ddb0 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800dd60:	e05f      	b.n	800de22 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800dd62:	693b      	ldr	r3, [r7, #16]
 800dd64:	2208      	movs	r2, #8
 800dd66:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800dd68:	693b      	ldr	r3, [r7, #16]
 800dd6a:	2280      	movs	r2, #128	; 0x80
 800dd6c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800dd70:	693b      	ldr	r3, [r7, #16]
 800dd72:	220a      	movs	r2, #10
 800dd74:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800dd78:	693b      	ldr	r3, [r7, #16]
 800dd7a:	3363      	adds	r3, #99	; 0x63
 800dd7c:	2210      	movs	r2, #16
 800dd7e:	2100      	movs	r1, #0
 800dd80:	4618      	mov	r0, r3
 800dd82:	f004 fd6e 	bl	8012862 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800dd86:	693b      	ldr	r3, [r7, #16]
 800dd88:	2225      	movs	r2, #37	; 0x25
 800dd8a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800dd8e:	693b      	ldr	r3, [r7, #16]
 800dd90:	2201      	movs	r2, #1
 800dd92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800dd96:	693b      	ldr	r3, [r7, #16]
 800dd98:	2202      	movs	r2, #2
 800dd9a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800dd9e:	693b      	ldr	r3, [r7, #16]
 800dda0:	f103 0210 	add.w	r2, r3, #16
 800dda4:	693b      	ldr	r3, [r7, #16]
 800dda6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800ddaa:	2301      	movs	r3, #1
 800ddac:	75fb      	strb	r3, [r7, #23]
      break;
 800ddae:	e038      	b.n	800de22 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800ddb0:	7afb      	ldrb	r3, [r7, #11]
 800ddb2:	4619      	mov	r1, r3
 800ddb4:	68f8      	ldr	r0, [r7, #12]
 800ddb6:	f7ff fd39 	bl	800d82c <USBH_MSC_BOT_Process>
 800ddba:	4603      	mov	r3, r0
 800ddbc:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800ddbe:	7dfb      	ldrb	r3, [r7, #23]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d12d      	bne.n	800de20 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800ddc4:	693b      	ldr	r3, [r7, #16]
 800ddc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ddca:	3303      	adds	r3, #3
 800ddcc:	781b      	ldrb	r3, [r3, #0]
 800ddce:	461a      	mov	r2, r3
 800ddd0:	693b      	ldr	r3, [r7, #16]
 800ddd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ddd6:	3302      	adds	r3, #2
 800ddd8:	781b      	ldrb	r3, [r3, #0]
 800ddda:	021b      	lsls	r3, r3, #8
 800dddc:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800ddde:	693b      	ldr	r3, [r7, #16]
 800dde0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dde4:	3301      	adds	r3, #1
 800dde6:	781b      	ldrb	r3, [r3, #0]
 800dde8:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800ddea:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800ddec:	693b      	ldr	r3, [r7, #16]
 800ddee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ddf2:	781b      	ldrb	r3, [r3, #0]
 800ddf4:	061b      	lsls	r3, r3, #24
 800ddf6:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800ddfc:	693b      	ldr	r3, [r7, #16]
 800ddfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800de02:	3307      	adds	r3, #7
 800de04:	781b      	ldrb	r3, [r3, #0]
 800de06:	b29a      	uxth	r2, r3
 800de08:	693b      	ldr	r3, [r7, #16]
 800de0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800de0e:	3306      	adds	r3, #6
 800de10:	781b      	ldrb	r3, [r3, #0]
 800de12:	b29b      	uxth	r3, r3
 800de14:	021b      	lsls	r3, r3, #8
 800de16:	b29b      	uxth	r3, r3
 800de18:	4313      	orrs	r3, r2
 800de1a:	b29a      	uxth	r2, r3
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	809a      	strh	r2, [r3, #4]
      break;
 800de20:	bf00      	nop
  }

  return error;
 800de22:	7dfb      	ldrb	r3, [r7, #23]
}
 800de24:	4618      	mov	r0, r3
 800de26:	3718      	adds	r7, #24
 800de28:	46bd      	mov	sp, r7
 800de2a:	bd80      	pop	{r7, pc}

0800de2c <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800de2c:	b580      	push	{r7, lr}
 800de2e:	b086      	sub	sp, #24
 800de30:	af00      	add	r7, sp, #0
 800de32:	60f8      	str	r0, [r7, #12]
 800de34:	460b      	mov	r3, r1
 800de36:	607a      	str	r2, [r7, #4]
 800de38:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800de3a:	2302      	movs	r3, #2
 800de3c:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800de44:	69db      	ldr	r3, [r3, #28]
 800de46:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800de48:	693b      	ldr	r3, [r7, #16]
 800de4a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800de4e:	2b01      	cmp	r3, #1
 800de50:	d002      	beq.n	800de58 <USBH_MSC_SCSI_Inquiry+0x2c>
 800de52:	2b02      	cmp	r3, #2
 800de54:	d03d      	beq.n	800ded2 <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800de56:	e089      	b.n	800df6c <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800de58:	693b      	ldr	r3, [r7, #16]
 800de5a:	2224      	movs	r2, #36	; 0x24
 800de5c:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800de5e:	693b      	ldr	r3, [r7, #16]
 800de60:	2280      	movs	r2, #128	; 0x80
 800de62:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800de66:	693b      	ldr	r3, [r7, #16]
 800de68:	220a      	movs	r2, #10
 800de6a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800de6e:	693b      	ldr	r3, [r7, #16]
 800de70:	3363      	adds	r3, #99	; 0x63
 800de72:	220a      	movs	r2, #10
 800de74:	2100      	movs	r1, #0
 800de76:	4618      	mov	r0, r3
 800de78:	f004 fcf3 	bl	8012862 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800de7c:	693b      	ldr	r3, [r7, #16]
 800de7e:	2212      	movs	r2, #18
 800de80:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800de84:	7afb      	ldrb	r3, [r7, #11]
 800de86:	015b      	lsls	r3, r3, #5
 800de88:	b2da      	uxtb	r2, r3
 800de8a:	693b      	ldr	r3, [r7, #16]
 800de8c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800de90:	693b      	ldr	r3, [r7, #16]
 800de92:	2200      	movs	r2, #0
 800de94:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800de98:	693b      	ldr	r3, [r7, #16]
 800de9a:	2200      	movs	r2, #0
 800de9c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800dea0:	693b      	ldr	r3, [r7, #16]
 800dea2:	2224      	movs	r2, #36	; 0x24
 800dea4:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800dea8:	693b      	ldr	r3, [r7, #16]
 800deaa:	2200      	movs	r2, #0
 800deac:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800deb0:	693b      	ldr	r3, [r7, #16]
 800deb2:	2201      	movs	r2, #1
 800deb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800deb8:	693b      	ldr	r3, [r7, #16]
 800deba:	2202      	movs	r2, #2
 800debc:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800dec0:	693b      	ldr	r3, [r7, #16]
 800dec2:	f103 0210 	add.w	r2, r3, #16
 800dec6:	693b      	ldr	r3, [r7, #16]
 800dec8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800decc:	2301      	movs	r3, #1
 800dece:	75fb      	strb	r3, [r7, #23]
      break;
 800ded0:	e04c      	b.n	800df6c <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800ded2:	7afb      	ldrb	r3, [r7, #11]
 800ded4:	4619      	mov	r1, r3
 800ded6:	68f8      	ldr	r0, [r7, #12]
 800ded8:	f7ff fca8 	bl	800d82c <USBH_MSC_BOT_Process>
 800dedc:	4603      	mov	r3, r0
 800dede:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800dee0:	7dfb      	ldrb	r3, [r7, #23]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d141      	bne.n	800df6a <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800dee6:	2222      	movs	r2, #34	; 0x22
 800dee8:	2100      	movs	r1, #0
 800deea:	6878      	ldr	r0, [r7, #4]
 800deec:	f004 fcb9 	bl	8012862 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800def0:	693b      	ldr	r3, [r7, #16]
 800def2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800def6:	781b      	ldrb	r3, [r3, #0]
 800def8:	f003 031f 	and.w	r3, r3, #31
 800defc:	b2da      	uxtb	r2, r3
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800df02:	693b      	ldr	r3, [r7, #16]
 800df04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800df08:	781b      	ldrb	r3, [r3, #0]
 800df0a:	095b      	lsrs	r3, r3, #5
 800df0c:	b2da      	uxtb	r2, r3
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800df12:	693b      	ldr	r3, [r7, #16]
 800df14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800df18:	3301      	adds	r3, #1
 800df1a:	781b      	ldrb	r3, [r3, #0]
 800df1c:	b25b      	sxtb	r3, r3
 800df1e:	2b00      	cmp	r3, #0
 800df20:	da03      	bge.n	800df2a <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	2201      	movs	r2, #1
 800df26:	709a      	strb	r2, [r3, #2]
 800df28:	e002      	b.n	800df30 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	2200      	movs	r2, #0
 800df2e:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	1cd8      	adds	r0, r3, #3
 800df34:	693b      	ldr	r3, [r7, #16]
 800df36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800df3a:	3308      	adds	r3, #8
 800df3c:	2208      	movs	r2, #8
 800df3e:	4619      	mov	r1, r3
 800df40:	f004 fc84 	bl	801284c <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	f103 000c 	add.w	r0, r3, #12
 800df4a:	693b      	ldr	r3, [r7, #16]
 800df4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800df50:	3310      	adds	r3, #16
 800df52:	2210      	movs	r2, #16
 800df54:	4619      	mov	r1, r3
 800df56:	f004 fc79 	bl	801284c <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	331d      	adds	r3, #29
 800df5e:	693a      	ldr	r2, [r7, #16]
 800df60:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800df64:	3220      	adds	r2, #32
 800df66:	6812      	ldr	r2, [r2, #0]
 800df68:	601a      	str	r2, [r3, #0]
      break;
 800df6a:	bf00      	nop
  }

  return error;
 800df6c:	7dfb      	ldrb	r3, [r7, #23]
}
 800df6e:	4618      	mov	r0, r3
 800df70:	3718      	adds	r7, #24
 800df72:	46bd      	mov	sp, r7
 800df74:	bd80      	pop	{r7, pc}

0800df76 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800df76:	b580      	push	{r7, lr}
 800df78:	b086      	sub	sp, #24
 800df7a:	af00      	add	r7, sp, #0
 800df7c:	60f8      	str	r0, [r7, #12]
 800df7e:	460b      	mov	r3, r1
 800df80:	607a      	str	r2, [r7, #4]
 800df82:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800df84:	2302      	movs	r3, #2
 800df86:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800df8e:	69db      	ldr	r3, [r3, #28]
 800df90:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800df92:	693b      	ldr	r3, [r7, #16]
 800df94:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800df98:	2b01      	cmp	r3, #1
 800df9a:	d002      	beq.n	800dfa2 <USBH_MSC_SCSI_RequestSense+0x2c>
 800df9c:	2b02      	cmp	r3, #2
 800df9e:	d03d      	beq.n	800e01c <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800dfa0:	e05d      	b.n	800e05e <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800dfa2:	693b      	ldr	r3, [r7, #16]
 800dfa4:	220e      	movs	r2, #14
 800dfa6:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800dfa8:	693b      	ldr	r3, [r7, #16]
 800dfaa:	2280      	movs	r2, #128	; 0x80
 800dfac:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800dfb0:	693b      	ldr	r3, [r7, #16]
 800dfb2:	220a      	movs	r2, #10
 800dfb4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800dfb8:	693b      	ldr	r3, [r7, #16]
 800dfba:	3363      	adds	r3, #99	; 0x63
 800dfbc:	2210      	movs	r2, #16
 800dfbe:	2100      	movs	r1, #0
 800dfc0:	4618      	mov	r0, r3
 800dfc2:	f004 fc4e 	bl	8012862 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800dfc6:	693b      	ldr	r3, [r7, #16]
 800dfc8:	2203      	movs	r2, #3
 800dfca:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800dfce:	7afb      	ldrb	r3, [r7, #11]
 800dfd0:	015b      	lsls	r3, r3, #5
 800dfd2:	b2da      	uxtb	r2, r3
 800dfd4:	693b      	ldr	r3, [r7, #16]
 800dfd6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800dfda:	693b      	ldr	r3, [r7, #16]
 800dfdc:	2200      	movs	r2, #0
 800dfde:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800dfe2:	693b      	ldr	r3, [r7, #16]
 800dfe4:	2200      	movs	r2, #0
 800dfe6:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800dfea:	693b      	ldr	r3, [r7, #16]
 800dfec:	220e      	movs	r2, #14
 800dfee:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800dff2:	693b      	ldr	r3, [r7, #16]
 800dff4:	2200      	movs	r2, #0
 800dff6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800dffa:	693b      	ldr	r3, [r7, #16]
 800dffc:	2201      	movs	r2, #1
 800dffe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800e002:	693b      	ldr	r3, [r7, #16]
 800e004:	2202      	movs	r2, #2
 800e006:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800e00a:	693b      	ldr	r3, [r7, #16]
 800e00c:	f103 0210 	add.w	r2, r3, #16
 800e010:	693b      	ldr	r3, [r7, #16]
 800e012:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800e016:	2301      	movs	r3, #1
 800e018:	75fb      	strb	r3, [r7, #23]
      break;
 800e01a:	e020      	b.n	800e05e <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800e01c:	7afb      	ldrb	r3, [r7, #11]
 800e01e:	4619      	mov	r1, r3
 800e020:	68f8      	ldr	r0, [r7, #12]
 800e022:	f7ff fc03 	bl	800d82c <USBH_MSC_BOT_Process>
 800e026:	4603      	mov	r3, r0
 800e028:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800e02a:	7dfb      	ldrb	r3, [r7, #23]
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d115      	bne.n	800e05c <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800e030:	693b      	ldr	r3, [r7, #16]
 800e032:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e036:	3302      	adds	r3, #2
 800e038:	781b      	ldrb	r3, [r3, #0]
 800e03a:	f003 030f 	and.w	r3, r3, #15
 800e03e:	b2da      	uxtb	r2, r3
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800e044:	693b      	ldr	r3, [r7, #16]
 800e046:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e04a:	7b1a      	ldrb	r2, [r3, #12]
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800e050:	693b      	ldr	r3, [r7, #16]
 800e052:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e056:	7b5a      	ldrb	r2, [r3, #13]
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	709a      	strb	r2, [r3, #2]
      break;
 800e05c:	bf00      	nop
  }

  return error;
 800e05e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e060:	4618      	mov	r0, r3
 800e062:	3718      	adds	r7, #24
 800e064:	46bd      	mov	sp, r7
 800e066:	bd80      	pop	{r7, pc}

0800e068 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800e068:	b580      	push	{r7, lr}
 800e06a:	b086      	sub	sp, #24
 800e06c:	af00      	add	r7, sp, #0
 800e06e:	60f8      	str	r0, [r7, #12]
 800e070:	607a      	str	r2, [r7, #4]
 800e072:	603b      	str	r3, [r7, #0]
 800e074:	460b      	mov	r3, r1
 800e076:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800e078:	2302      	movs	r3, #2
 800e07a:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e082:	69db      	ldr	r3, [r3, #28]
 800e084:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800e086:	693b      	ldr	r3, [r7, #16]
 800e088:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800e08c:	2b01      	cmp	r3, #1
 800e08e:	d002      	beq.n	800e096 <USBH_MSC_SCSI_Write+0x2e>
 800e090:	2b02      	cmp	r3, #2
 800e092:	d047      	beq.n	800e124 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800e094:	e04e      	b.n	800e134 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800e096:	693b      	ldr	r3, [r7, #16]
 800e098:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800e09c:	461a      	mov	r2, r3
 800e09e:	6a3b      	ldr	r3, [r7, #32]
 800e0a0:	fb03 f202 	mul.w	r2, r3, r2
 800e0a4:	693b      	ldr	r3, [r7, #16]
 800e0a6:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800e0a8:	693b      	ldr	r3, [r7, #16]
 800e0aa:	2200      	movs	r2, #0
 800e0ac:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800e0b0:	693b      	ldr	r3, [r7, #16]
 800e0b2:	220a      	movs	r2, #10
 800e0b4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800e0b8:	693b      	ldr	r3, [r7, #16]
 800e0ba:	3363      	adds	r3, #99	; 0x63
 800e0bc:	2210      	movs	r2, #16
 800e0be:	2100      	movs	r1, #0
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	f004 fbce 	bl	8012862 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800e0c6:	693b      	ldr	r3, [r7, #16]
 800e0c8:	222a      	movs	r2, #42	; 0x2a
 800e0ca:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800e0ce:	79fa      	ldrb	r2, [r7, #7]
 800e0d0:	693b      	ldr	r3, [r7, #16]
 800e0d2:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800e0d6:	79ba      	ldrb	r2, [r7, #6]
 800e0d8:	693b      	ldr	r3, [r7, #16]
 800e0da:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800e0de:	797a      	ldrb	r2, [r7, #5]
 800e0e0:	693b      	ldr	r3, [r7, #16]
 800e0e2:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800e0e6:	1d3b      	adds	r3, r7, #4
 800e0e8:	781a      	ldrb	r2, [r3, #0]
 800e0ea:	693b      	ldr	r3, [r7, #16]
 800e0ec:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800e0f0:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800e0f4:	693b      	ldr	r3, [r7, #16]
 800e0f6:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800e0fa:	f107 0320 	add.w	r3, r7, #32
 800e0fe:	781a      	ldrb	r2, [r3, #0]
 800e100:	693b      	ldr	r3, [r7, #16]
 800e102:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800e106:	693b      	ldr	r3, [r7, #16]
 800e108:	2201      	movs	r2, #1
 800e10a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800e10e:	693b      	ldr	r3, [r7, #16]
 800e110:	2202      	movs	r2, #2
 800e112:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800e116:	693b      	ldr	r3, [r7, #16]
 800e118:	683a      	ldr	r2, [r7, #0]
 800e11a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800e11e:	2301      	movs	r3, #1
 800e120:	75fb      	strb	r3, [r7, #23]
      break;
 800e122:	e007      	b.n	800e134 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800e124:	7afb      	ldrb	r3, [r7, #11]
 800e126:	4619      	mov	r1, r3
 800e128:	68f8      	ldr	r0, [r7, #12]
 800e12a:	f7ff fb7f 	bl	800d82c <USBH_MSC_BOT_Process>
 800e12e:	4603      	mov	r3, r0
 800e130:	75fb      	strb	r3, [r7, #23]
      break;
 800e132:	bf00      	nop
  }

  return error;
 800e134:	7dfb      	ldrb	r3, [r7, #23]
}
 800e136:	4618      	mov	r0, r3
 800e138:	3718      	adds	r7, #24
 800e13a:	46bd      	mov	sp, r7
 800e13c:	bd80      	pop	{r7, pc}

0800e13e <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800e13e:	b580      	push	{r7, lr}
 800e140:	b086      	sub	sp, #24
 800e142:	af00      	add	r7, sp, #0
 800e144:	60f8      	str	r0, [r7, #12]
 800e146:	607a      	str	r2, [r7, #4]
 800e148:	603b      	str	r3, [r7, #0]
 800e14a:	460b      	mov	r3, r1
 800e14c:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800e14e:	2302      	movs	r3, #2
 800e150:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e158:	69db      	ldr	r3, [r3, #28]
 800e15a:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800e15c:	693b      	ldr	r3, [r7, #16]
 800e15e:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800e162:	2b01      	cmp	r3, #1
 800e164:	d002      	beq.n	800e16c <USBH_MSC_SCSI_Read+0x2e>
 800e166:	2b02      	cmp	r3, #2
 800e168:	d047      	beq.n	800e1fa <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800e16a:	e04e      	b.n	800e20a <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800e16c:	693b      	ldr	r3, [r7, #16]
 800e16e:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800e172:	461a      	mov	r2, r3
 800e174:	6a3b      	ldr	r3, [r7, #32]
 800e176:	fb03 f202 	mul.w	r2, r3, r2
 800e17a:	693b      	ldr	r3, [r7, #16]
 800e17c:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800e17e:	693b      	ldr	r3, [r7, #16]
 800e180:	2280      	movs	r2, #128	; 0x80
 800e182:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800e186:	693b      	ldr	r3, [r7, #16]
 800e188:	220a      	movs	r2, #10
 800e18a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800e18e:	693b      	ldr	r3, [r7, #16]
 800e190:	3363      	adds	r3, #99	; 0x63
 800e192:	2210      	movs	r2, #16
 800e194:	2100      	movs	r1, #0
 800e196:	4618      	mov	r0, r3
 800e198:	f004 fb63 	bl	8012862 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800e19c:	693b      	ldr	r3, [r7, #16]
 800e19e:	2228      	movs	r2, #40	; 0x28
 800e1a0:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800e1a4:	79fa      	ldrb	r2, [r7, #7]
 800e1a6:	693b      	ldr	r3, [r7, #16]
 800e1a8:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800e1ac:	79ba      	ldrb	r2, [r7, #6]
 800e1ae:	693b      	ldr	r3, [r7, #16]
 800e1b0:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800e1b4:	797a      	ldrb	r2, [r7, #5]
 800e1b6:	693b      	ldr	r3, [r7, #16]
 800e1b8:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800e1bc:	1d3b      	adds	r3, r7, #4
 800e1be:	781a      	ldrb	r2, [r3, #0]
 800e1c0:	693b      	ldr	r3, [r7, #16]
 800e1c2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800e1c6:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800e1ca:	693b      	ldr	r3, [r7, #16]
 800e1cc:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800e1d0:	f107 0320 	add.w	r3, r7, #32
 800e1d4:	781a      	ldrb	r2, [r3, #0]
 800e1d6:	693b      	ldr	r3, [r7, #16]
 800e1d8:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800e1dc:	693b      	ldr	r3, [r7, #16]
 800e1de:	2201      	movs	r2, #1
 800e1e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800e1e4:	693b      	ldr	r3, [r7, #16]
 800e1e6:	2202      	movs	r2, #2
 800e1e8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800e1ec:	693b      	ldr	r3, [r7, #16]
 800e1ee:	683a      	ldr	r2, [r7, #0]
 800e1f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800e1f4:	2301      	movs	r3, #1
 800e1f6:	75fb      	strb	r3, [r7, #23]
      break;
 800e1f8:	e007      	b.n	800e20a <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800e1fa:	7afb      	ldrb	r3, [r7, #11]
 800e1fc:	4619      	mov	r1, r3
 800e1fe:	68f8      	ldr	r0, [r7, #12]
 800e200:	f7ff fb14 	bl	800d82c <USBH_MSC_BOT_Process>
 800e204:	4603      	mov	r3, r0
 800e206:	75fb      	strb	r3, [r7, #23]
      break;
 800e208:	bf00      	nop
  }

  return error;
 800e20a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e20c:	4618      	mov	r0, r3
 800e20e:	3718      	adds	r7, #24
 800e210:	46bd      	mov	sp, r7
 800e212:	bd80      	pop	{r7, pc}

0800e214 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800e214:	b580      	push	{r7, lr}
 800e216:	b084      	sub	sp, #16
 800e218:	af00      	add	r7, sp, #0
 800e21a:	60f8      	str	r0, [r7, #12]
 800e21c:	60b9      	str	r1, [r7, #8]
 800e21e:	4613      	mov	r3, r2
 800e220:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	2b00      	cmp	r3, #0
 800e226:	d101      	bne.n	800e22c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800e228:	2302      	movs	r3, #2
 800e22a:	e029      	b.n	800e280 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	79fa      	ldrb	r2, [r7, #7]
 800e230:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	2200      	movs	r2, #0
 800e238:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	2200      	movs	r2, #0
 800e240:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800e244:	68f8      	ldr	r0, [r7, #12]
 800e246:	f000 f81f 	bl	800e288 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	2200      	movs	r2, #0
 800e24e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	2200      	movs	r2, #0
 800e256:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	2200      	movs	r2, #0
 800e25e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	2200      	movs	r2, #0
 800e266:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800e26a:	68bb      	ldr	r3, [r7, #8]
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d003      	beq.n	800e278 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	68ba      	ldr	r2, [r7, #8]
 800e274:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800e278:	68f8      	ldr	r0, [r7, #12]
 800e27a:	f004 f881 	bl	8012380 <USBH_LL_Init>

  return USBH_OK;
 800e27e:	2300      	movs	r3, #0
}
 800e280:	4618      	mov	r0, r3
 800e282:	3710      	adds	r7, #16
 800e284:	46bd      	mov	sp, r7
 800e286:	bd80      	pop	{r7, pc}

0800e288 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800e288:	b480      	push	{r7}
 800e28a:	b085      	sub	sp, #20
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800e290:	2300      	movs	r3, #0
 800e292:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800e294:	2300      	movs	r3, #0
 800e296:	60fb      	str	r3, [r7, #12]
 800e298:	e009      	b.n	800e2ae <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800e29a:	687a      	ldr	r2, [r7, #4]
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	33e0      	adds	r3, #224	; 0xe0
 800e2a0:	009b      	lsls	r3, r3, #2
 800e2a2:	4413      	add	r3, r2
 800e2a4:	2200      	movs	r2, #0
 800e2a6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	3301      	adds	r3, #1
 800e2ac:	60fb      	str	r3, [r7, #12]
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	2b0e      	cmp	r3, #14
 800e2b2:	d9f2      	bls.n	800e29a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800e2b4:	2300      	movs	r3, #0
 800e2b6:	60fb      	str	r3, [r7, #12]
 800e2b8:	e009      	b.n	800e2ce <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800e2ba:	687a      	ldr	r2, [r7, #4]
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	4413      	add	r3, r2
 800e2c0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800e2c4:	2200      	movs	r2, #0
 800e2c6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	3301      	adds	r3, #1
 800e2cc:	60fb      	str	r3, [r7, #12]
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e2d4:	d3f1      	bcc.n	800e2ba <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	2200      	movs	r2, #0
 800e2da:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	2200      	movs	r2, #0
 800e2e0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	2201      	movs	r2, #1
 800e2e6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	2200      	movs	r2, #0
 800e2ec:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	2201      	movs	r2, #1
 800e2f4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	2240      	movs	r2, #64	; 0x40
 800e2fa:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	2200      	movs	r2, #0
 800e300:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	2200      	movs	r2, #0
 800e306:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	2201      	movs	r2, #1
 800e30e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	2200      	movs	r2, #0
 800e316:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	2200      	movs	r2, #0
 800e31e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800e322:	2300      	movs	r3, #0
}
 800e324:	4618      	mov	r0, r3
 800e326:	3714      	adds	r7, #20
 800e328:	46bd      	mov	sp, r7
 800e32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e32e:	4770      	bx	lr

0800e330 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800e330:	b480      	push	{r7}
 800e332:	b085      	sub	sp, #20
 800e334:	af00      	add	r7, sp, #0
 800e336:	6078      	str	r0, [r7, #4]
 800e338:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800e33a:	2300      	movs	r3, #0
 800e33c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800e33e:	683b      	ldr	r3, [r7, #0]
 800e340:	2b00      	cmp	r3, #0
 800e342:	d016      	beq.n	800e372 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d10e      	bne.n	800e36c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800e354:	1c59      	adds	r1, r3, #1
 800e356:	687a      	ldr	r2, [r7, #4]
 800e358:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800e35c:	687a      	ldr	r2, [r7, #4]
 800e35e:	33de      	adds	r3, #222	; 0xde
 800e360:	6839      	ldr	r1, [r7, #0]
 800e362:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800e366:	2300      	movs	r3, #0
 800e368:	73fb      	strb	r3, [r7, #15]
 800e36a:	e004      	b.n	800e376 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800e36c:	2302      	movs	r3, #2
 800e36e:	73fb      	strb	r3, [r7, #15]
 800e370:	e001      	b.n	800e376 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800e372:	2302      	movs	r3, #2
 800e374:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e376:	7bfb      	ldrb	r3, [r7, #15]
}
 800e378:	4618      	mov	r0, r3
 800e37a:	3714      	adds	r7, #20
 800e37c:	46bd      	mov	sp, r7
 800e37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e382:	4770      	bx	lr

0800e384 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800e384:	b480      	push	{r7}
 800e386:	b085      	sub	sp, #20
 800e388:	af00      	add	r7, sp, #0
 800e38a:	6078      	str	r0, [r7, #4]
 800e38c:	460b      	mov	r3, r1
 800e38e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800e390:	2300      	movs	r3, #0
 800e392:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800e39a:	78fa      	ldrb	r2, [r7, #3]
 800e39c:	429a      	cmp	r2, r3
 800e39e:	d204      	bcs.n	800e3aa <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	78fa      	ldrb	r2, [r7, #3]
 800e3a4:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800e3a8:	e001      	b.n	800e3ae <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800e3aa:	2302      	movs	r3, #2
 800e3ac:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e3ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	3714      	adds	r7, #20
 800e3b4:	46bd      	mov	sp, r7
 800e3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ba:	4770      	bx	lr

0800e3bc <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800e3bc:	b480      	push	{r7}
 800e3be:	b087      	sub	sp, #28
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	6078      	str	r0, [r7, #4]
 800e3c4:	4608      	mov	r0, r1
 800e3c6:	4611      	mov	r1, r2
 800e3c8:	461a      	mov	r2, r3
 800e3ca:	4603      	mov	r3, r0
 800e3cc:	70fb      	strb	r3, [r7, #3]
 800e3ce:	460b      	mov	r3, r1
 800e3d0:	70bb      	strb	r3, [r7, #2]
 800e3d2:	4613      	mov	r3, r2
 800e3d4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800e3da:	2300      	movs	r3, #0
 800e3dc:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800e3e4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800e3e6:	e025      	b.n	800e434 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800e3e8:	7dfb      	ldrb	r3, [r7, #23]
 800e3ea:	221a      	movs	r2, #26
 800e3ec:	fb02 f303 	mul.w	r3, r2, r3
 800e3f0:	3308      	adds	r3, #8
 800e3f2:	68fa      	ldr	r2, [r7, #12]
 800e3f4:	4413      	add	r3, r2
 800e3f6:	3302      	adds	r3, #2
 800e3f8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800e3fa:	693b      	ldr	r3, [r7, #16]
 800e3fc:	795b      	ldrb	r3, [r3, #5]
 800e3fe:	78fa      	ldrb	r2, [r7, #3]
 800e400:	429a      	cmp	r2, r3
 800e402:	d002      	beq.n	800e40a <USBH_FindInterface+0x4e>
 800e404:	78fb      	ldrb	r3, [r7, #3]
 800e406:	2bff      	cmp	r3, #255	; 0xff
 800e408:	d111      	bne.n	800e42e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e40a:	693b      	ldr	r3, [r7, #16]
 800e40c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800e40e:	78ba      	ldrb	r2, [r7, #2]
 800e410:	429a      	cmp	r2, r3
 800e412:	d002      	beq.n	800e41a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e414:	78bb      	ldrb	r3, [r7, #2]
 800e416:	2bff      	cmp	r3, #255	; 0xff
 800e418:	d109      	bne.n	800e42e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800e41a:	693b      	ldr	r3, [r7, #16]
 800e41c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e41e:	787a      	ldrb	r2, [r7, #1]
 800e420:	429a      	cmp	r2, r3
 800e422:	d002      	beq.n	800e42a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800e424:	787b      	ldrb	r3, [r7, #1]
 800e426:	2bff      	cmp	r3, #255	; 0xff
 800e428:	d101      	bne.n	800e42e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800e42a:	7dfb      	ldrb	r3, [r7, #23]
 800e42c:	e006      	b.n	800e43c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800e42e:	7dfb      	ldrb	r3, [r7, #23]
 800e430:	3301      	adds	r3, #1
 800e432:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800e434:	7dfb      	ldrb	r3, [r7, #23]
 800e436:	2b01      	cmp	r3, #1
 800e438:	d9d6      	bls.n	800e3e8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800e43a:	23ff      	movs	r3, #255	; 0xff
}
 800e43c:	4618      	mov	r0, r3
 800e43e:	371c      	adds	r7, #28
 800e440:	46bd      	mov	sp, r7
 800e442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e446:	4770      	bx	lr

0800e448 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800e448:	b580      	push	{r7, lr}
 800e44a:	b082      	sub	sp, #8
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800e450:	6878      	ldr	r0, [r7, #4]
 800e452:	f003 ffd1 	bl	80123f8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800e456:	2101      	movs	r1, #1
 800e458:	6878      	ldr	r0, [r7, #4]
 800e45a:	f004 f8e8 	bl	801262e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800e45e:	2300      	movs	r3, #0
}
 800e460:	4618      	mov	r0, r3
 800e462:	3708      	adds	r7, #8
 800e464:	46bd      	mov	sp, r7
 800e466:	bd80      	pop	{r7, pc}

0800e468 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800e468:	b580      	push	{r7, lr}
 800e46a:	b088      	sub	sp, #32
 800e46c:	af04      	add	r7, sp, #16
 800e46e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800e470:	2302      	movs	r3, #2
 800e472:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800e474:	2300      	movs	r3, #0
 800e476:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800e47e:	b2db      	uxtb	r3, r3
 800e480:	2b01      	cmp	r3, #1
 800e482:	d102      	bne.n	800e48a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	2203      	movs	r2, #3
 800e488:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	781b      	ldrb	r3, [r3, #0]
 800e48e:	b2db      	uxtb	r3, r3
 800e490:	2b0b      	cmp	r3, #11
 800e492:	f200 81b3 	bhi.w	800e7fc <USBH_Process+0x394>
 800e496:	a201      	add	r2, pc, #4	; (adr r2, 800e49c <USBH_Process+0x34>)
 800e498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e49c:	0800e4cd 	.word	0x0800e4cd
 800e4a0:	0800e4ff 	.word	0x0800e4ff
 800e4a4:	0800e567 	.word	0x0800e567
 800e4a8:	0800e797 	.word	0x0800e797
 800e4ac:	0800e7fd 	.word	0x0800e7fd
 800e4b0:	0800e60b 	.word	0x0800e60b
 800e4b4:	0800e73d 	.word	0x0800e73d
 800e4b8:	0800e641 	.word	0x0800e641
 800e4bc:	0800e661 	.word	0x0800e661
 800e4c0:	0800e681 	.word	0x0800e681
 800e4c4:	0800e6af 	.word	0x0800e6af
 800e4c8:	0800e77f 	.word	0x0800e77f
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800e4d2:	b2db      	uxtb	r3, r3
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	f000 8193 	beq.w	800e800 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	2201      	movs	r2, #1
 800e4de:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800e4e0:	20c8      	movs	r0, #200	; 0xc8
 800e4e2:	f004 f921 	bl	8012728 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800e4e6:	6878      	ldr	r0, [r7, #4]
 800e4e8:	f003 ffe1 	bl	80124ae <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	2200      	movs	r2, #0
 800e4f0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	2200      	movs	r2, #0
 800e4f8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800e4fc:	e180      	b.n	800e800 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800e504:	2b01      	cmp	r3, #1
 800e506:	d107      	bne.n	800e518 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	2200      	movs	r2, #0
 800e50c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	2202      	movs	r2, #2
 800e514:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e516:	e182      	b.n	800e81e <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e51e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e522:	d914      	bls.n	800e54e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800e52a:	3301      	adds	r3, #1
 800e52c:	b2da      	uxtb	r2, r3
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800e53a:	2b03      	cmp	r3, #3
 800e53c:	d903      	bls.n	800e546 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	220d      	movs	r2, #13
 800e542:	701a      	strb	r2, [r3, #0]
      break;
 800e544:	e16b      	b.n	800e81e <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	2200      	movs	r2, #0
 800e54a:	701a      	strb	r2, [r3, #0]
      break;
 800e54c:	e167      	b.n	800e81e <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e554:	f103 020a 	add.w	r2, r3, #10
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800e55e:	200a      	movs	r0, #10
 800e560:	f004 f8e2 	bl	8012728 <USBH_Delay>
      break;
 800e564:	e15b      	b.n	800e81e <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d005      	beq.n	800e57c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e576:	2104      	movs	r1, #4
 800e578:	6878      	ldr	r0, [r7, #4]
 800e57a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800e57c:	2064      	movs	r0, #100	; 0x64
 800e57e:	f004 f8d3 	bl	8012728 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800e582:	6878      	ldr	r0, [r7, #4]
 800e584:	f003 ff6e 	bl	8012464 <USBH_LL_GetSpeed>
 800e588:	4603      	mov	r3, r0
 800e58a:	461a      	mov	r2, r3
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	2205      	movs	r2, #5
 800e596:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800e598:	2100      	movs	r1, #0
 800e59a:	6878      	ldr	r0, [r7, #4]
 800e59c:	f001 f931 	bl	800f802 <USBH_AllocPipe>
 800e5a0:	4603      	mov	r3, r0
 800e5a2:	461a      	mov	r2, r3
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800e5a8:	2180      	movs	r1, #128	; 0x80
 800e5aa:	6878      	ldr	r0, [r7, #4]
 800e5ac:	f001 f929 	bl	800f802 <USBH_AllocPipe>
 800e5b0:	4603      	mov	r3, r0
 800e5b2:	461a      	mov	r2, r3
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	7919      	ldrb	r1, [r3, #4]
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800e5c8:	687a      	ldr	r2, [r7, #4]
 800e5ca:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800e5cc:	b292      	uxth	r2, r2
 800e5ce:	9202      	str	r2, [sp, #8]
 800e5d0:	2200      	movs	r2, #0
 800e5d2:	9201      	str	r2, [sp, #4]
 800e5d4:	9300      	str	r3, [sp, #0]
 800e5d6:	4603      	mov	r3, r0
 800e5d8:	2280      	movs	r2, #128	; 0x80
 800e5da:	6878      	ldr	r0, [r7, #4]
 800e5dc:	f001 f8e2 	bl	800f7a4 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	7959      	ldrb	r1, [r3, #5]
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800e5f0:	687a      	ldr	r2, [r7, #4]
 800e5f2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800e5f4:	b292      	uxth	r2, r2
 800e5f6:	9202      	str	r2, [sp, #8]
 800e5f8:	2200      	movs	r2, #0
 800e5fa:	9201      	str	r2, [sp, #4]
 800e5fc:	9300      	str	r3, [sp, #0]
 800e5fe:	4603      	mov	r3, r0
 800e600:	2200      	movs	r2, #0
 800e602:	6878      	ldr	r0, [r7, #4]
 800e604:	f001 f8ce 	bl	800f7a4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e608:	e109      	b.n	800e81e <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800e60a:	6878      	ldr	r0, [r7, #4]
 800e60c:	f000 f90c 	bl	800e828 <USBH_HandleEnum>
 800e610:	4603      	mov	r3, r0
 800e612:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800e614:	7bbb      	ldrb	r3, [r7, #14]
 800e616:	b2db      	uxtb	r3, r3
 800e618:	2b00      	cmp	r3, #0
 800e61a:	f040 80f3 	bne.w	800e804 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	2200      	movs	r2, #0
 800e622:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800e62c:	2b01      	cmp	r3, #1
 800e62e:	d103      	bne.n	800e638 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	2208      	movs	r2, #8
 800e634:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800e636:	e0e5      	b.n	800e804 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	2207      	movs	r2, #7
 800e63c:	701a      	strb	r2, [r3, #0]
      break;
 800e63e:	e0e1      	b.n	800e804 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e646:	2b00      	cmp	r3, #0
 800e648:	f000 80de 	beq.w	800e808 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e652:	2101      	movs	r1, #1
 800e654:	6878      	ldr	r0, [r7, #4]
 800e656:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	2208      	movs	r2, #8
 800e65c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800e65e:	e0d3      	b.n	800e808 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800e666:	b29b      	uxth	r3, r3
 800e668:	4619      	mov	r1, r3
 800e66a:	6878      	ldr	r0, [r7, #4]
 800e66c:	f000 fc20 	bl	800eeb0 <USBH_SetCfg>
 800e670:	4603      	mov	r3, r0
 800e672:	2b00      	cmp	r3, #0
 800e674:	f040 80ca 	bne.w	800e80c <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	2209      	movs	r2, #9
 800e67c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e67e:	e0c5      	b.n	800e80c <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800e686:	f003 0320 	and.w	r3, r3, #32
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d00b      	beq.n	800e6a6 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800e68e:	2101      	movs	r1, #1
 800e690:	6878      	ldr	r0, [r7, #4]
 800e692:	f000 fc30 	bl	800eef6 <USBH_SetFeature>
 800e696:	4603      	mov	r3, r0
 800e698:	2b00      	cmp	r3, #0
 800e69a:	f040 80b9 	bne.w	800e810 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	220a      	movs	r2, #10
 800e6a2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e6a4:	e0b4      	b.n	800e810 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	220a      	movs	r2, #10
 800e6aa:	701a      	strb	r2, [r3, #0]
      break;
 800e6ac:	e0b0      	b.n	800e810 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	f000 80ad 	beq.w	800e814 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	2200      	movs	r2, #0
 800e6be:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	73fb      	strb	r3, [r7, #15]
 800e6c6:	e016      	b.n	800e6f6 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800e6c8:	7bfa      	ldrb	r2, [r7, #15]
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	32de      	adds	r2, #222	; 0xde
 800e6ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6d2:	791a      	ldrb	r2, [r3, #4]
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800e6da:	429a      	cmp	r2, r3
 800e6dc:	d108      	bne.n	800e6f0 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800e6de:	7bfa      	ldrb	r2, [r7, #15]
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	32de      	adds	r2, #222	; 0xde
 800e6e4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800e6ee:	e005      	b.n	800e6fc <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800e6f0:	7bfb      	ldrb	r3, [r7, #15]
 800e6f2:	3301      	adds	r3, #1
 800e6f4:	73fb      	strb	r3, [r7, #15]
 800e6f6:	7bfb      	ldrb	r3, [r7, #15]
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d0e5      	beq.n	800e6c8 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e702:	2b00      	cmp	r3, #0
 800e704:	d016      	beq.n	800e734 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e70c:	689b      	ldr	r3, [r3, #8]
 800e70e:	6878      	ldr	r0, [r7, #4]
 800e710:	4798      	blx	r3
 800e712:	4603      	mov	r3, r0
 800e714:	2b00      	cmp	r3, #0
 800e716:	d109      	bne.n	800e72c <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	2206      	movs	r2, #6
 800e71c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e724:	2103      	movs	r1, #3
 800e726:	6878      	ldr	r0, [r7, #4]
 800e728:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e72a:	e073      	b.n	800e814 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	220d      	movs	r2, #13
 800e730:	701a      	strb	r2, [r3, #0]
      break;
 800e732:	e06f      	b.n	800e814 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	220d      	movs	r2, #13
 800e738:	701a      	strb	r2, [r3, #0]
      break;
 800e73a:	e06b      	b.n	800e814 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e742:	2b00      	cmp	r3, #0
 800e744:	d017      	beq.n	800e776 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e74c:	691b      	ldr	r3, [r3, #16]
 800e74e:	6878      	ldr	r0, [r7, #4]
 800e750:	4798      	blx	r3
 800e752:	4603      	mov	r3, r0
 800e754:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800e756:	7bbb      	ldrb	r3, [r7, #14]
 800e758:	b2db      	uxtb	r3, r3
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d103      	bne.n	800e766 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	220b      	movs	r2, #11
 800e762:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e764:	e058      	b.n	800e818 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800e766:	7bbb      	ldrb	r3, [r7, #14]
 800e768:	b2db      	uxtb	r3, r3
 800e76a:	2b02      	cmp	r3, #2
 800e76c:	d154      	bne.n	800e818 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	220d      	movs	r2, #13
 800e772:	701a      	strb	r2, [r3, #0]
      break;
 800e774:	e050      	b.n	800e818 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	220d      	movs	r2, #13
 800e77a:	701a      	strb	r2, [r3, #0]
      break;
 800e77c:	e04c      	b.n	800e818 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e784:	2b00      	cmp	r3, #0
 800e786:	d049      	beq.n	800e81c <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e78e:	695b      	ldr	r3, [r3, #20]
 800e790:	6878      	ldr	r0, [r7, #4]
 800e792:	4798      	blx	r3
      }
      break;
 800e794:	e042      	b.n	800e81c <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	2200      	movs	r2, #0
 800e79a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800e79e:	6878      	ldr	r0, [r7, #4]
 800e7a0:	f7ff fd72 	bl	800e288 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d009      	beq.n	800e7c2 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e7b4:	68db      	ldr	r3, [r3, #12]
 800e7b6:	6878      	ldr	r0, [r7, #4]
 800e7b8:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	2200      	movs	r2, #0
 800e7be:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d005      	beq.n	800e7d8 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e7d2:	2105      	movs	r1, #5
 800e7d4:	6878      	ldr	r0, [r7, #4]
 800e7d6:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800e7de:	b2db      	uxtb	r3, r3
 800e7e0:	2b01      	cmp	r3, #1
 800e7e2:	d107      	bne.n	800e7f4 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	2200      	movs	r2, #0
 800e7e8:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800e7ec:	6878      	ldr	r0, [r7, #4]
 800e7ee:	f7ff fe2b 	bl	800e448 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e7f2:	e014      	b.n	800e81e <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800e7f4:	6878      	ldr	r0, [r7, #4]
 800e7f6:	f003 fdff 	bl	80123f8 <USBH_LL_Start>
      break;
 800e7fa:	e010      	b.n	800e81e <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800e7fc:	bf00      	nop
 800e7fe:	e00e      	b.n	800e81e <USBH_Process+0x3b6>
      break;
 800e800:	bf00      	nop
 800e802:	e00c      	b.n	800e81e <USBH_Process+0x3b6>
      break;
 800e804:	bf00      	nop
 800e806:	e00a      	b.n	800e81e <USBH_Process+0x3b6>
    break;
 800e808:	bf00      	nop
 800e80a:	e008      	b.n	800e81e <USBH_Process+0x3b6>
      break;
 800e80c:	bf00      	nop
 800e80e:	e006      	b.n	800e81e <USBH_Process+0x3b6>
      break;
 800e810:	bf00      	nop
 800e812:	e004      	b.n	800e81e <USBH_Process+0x3b6>
      break;
 800e814:	bf00      	nop
 800e816:	e002      	b.n	800e81e <USBH_Process+0x3b6>
      break;
 800e818:	bf00      	nop
 800e81a:	e000      	b.n	800e81e <USBH_Process+0x3b6>
      break;
 800e81c:	bf00      	nop
  }
  return USBH_OK;
 800e81e:	2300      	movs	r3, #0
}
 800e820:	4618      	mov	r0, r3
 800e822:	3710      	adds	r7, #16
 800e824:	46bd      	mov	sp, r7
 800e826:	bd80      	pop	{r7, pc}

0800e828 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800e828:	b580      	push	{r7, lr}
 800e82a:	b088      	sub	sp, #32
 800e82c:	af04      	add	r7, sp, #16
 800e82e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800e830:	2301      	movs	r3, #1
 800e832:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800e834:	2301      	movs	r3, #1
 800e836:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	785b      	ldrb	r3, [r3, #1]
 800e83c:	2b07      	cmp	r3, #7
 800e83e:	f200 81c1 	bhi.w	800ebc4 <USBH_HandleEnum+0x39c>
 800e842:	a201      	add	r2, pc, #4	; (adr r2, 800e848 <USBH_HandleEnum+0x20>)
 800e844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e848:	0800e869 	.word	0x0800e869
 800e84c:	0800e927 	.word	0x0800e927
 800e850:	0800e991 	.word	0x0800e991
 800e854:	0800ea1f 	.word	0x0800ea1f
 800e858:	0800ea89 	.word	0x0800ea89
 800e85c:	0800eaf9 	.word	0x0800eaf9
 800e860:	0800eb3f 	.word	0x0800eb3f
 800e864:	0800eb85 	.word	0x0800eb85
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800e868:	2108      	movs	r1, #8
 800e86a:	6878      	ldr	r0, [r7, #4]
 800e86c:	f000 fa50 	bl	800ed10 <USBH_Get_DevDesc>
 800e870:	4603      	mov	r3, r0
 800e872:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e874:	7bbb      	ldrb	r3, [r7, #14]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d130      	bne.n	800e8dc <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	2201      	movs	r2, #1
 800e888:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	7919      	ldrb	r1, [r3, #4]
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800e89a:	687a      	ldr	r2, [r7, #4]
 800e89c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800e89e:	b292      	uxth	r2, r2
 800e8a0:	9202      	str	r2, [sp, #8]
 800e8a2:	2200      	movs	r2, #0
 800e8a4:	9201      	str	r2, [sp, #4]
 800e8a6:	9300      	str	r3, [sp, #0]
 800e8a8:	4603      	mov	r3, r0
 800e8aa:	2280      	movs	r2, #128	; 0x80
 800e8ac:	6878      	ldr	r0, [r7, #4]
 800e8ae:	f000 ff79 	bl	800f7a4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	7959      	ldrb	r1, [r3, #5]
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800e8c2:	687a      	ldr	r2, [r7, #4]
 800e8c4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e8c6:	b292      	uxth	r2, r2
 800e8c8:	9202      	str	r2, [sp, #8]
 800e8ca:	2200      	movs	r2, #0
 800e8cc:	9201      	str	r2, [sp, #4]
 800e8ce:	9300      	str	r3, [sp, #0]
 800e8d0:	4603      	mov	r3, r0
 800e8d2:	2200      	movs	r2, #0
 800e8d4:	6878      	ldr	r0, [r7, #4]
 800e8d6:	f000 ff65 	bl	800f7a4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800e8da:	e175      	b.n	800ebc8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e8dc:	7bbb      	ldrb	r3, [r7, #14]
 800e8de:	2b03      	cmp	r3, #3
 800e8e0:	f040 8172 	bne.w	800ebc8 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e8ea:	3301      	adds	r3, #1
 800e8ec:	b2da      	uxtb	r2, r3
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e8fa:	2b03      	cmp	r3, #3
 800e8fc:	d903      	bls.n	800e906 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	220d      	movs	r2, #13
 800e902:	701a      	strb	r2, [r3, #0]
      break;
 800e904:	e160      	b.n	800ebc8 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	795b      	ldrb	r3, [r3, #5]
 800e90a:	4619      	mov	r1, r3
 800e90c:	6878      	ldr	r0, [r7, #4]
 800e90e:	f000 ff99 	bl	800f844 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	791b      	ldrb	r3, [r3, #4]
 800e916:	4619      	mov	r1, r3
 800e918:	6878      	ldr	r0, [r7, #4]
 800e91a:	f000 ff93 	bl	800f844 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	2200      	movs	r2, #0
 800e922:	701a      	strb	r2, [r3, #0]
      break;
 800e924:	e150      	b.n	800ebc8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800e926:	2112      	movs	r1, #18
 800e928:	6878      	ldr	r0, [r7, #4]
 800e92a:	f000 f9f1 	bl	800ed10 <USBH_Get_DevDesc>
 800e92e:	4603      	mov	r3, r0
 800e930:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e932:	7bbb      	ldrb	r3, [r7, #14]
 800e934:	2b00      	cmp	r3, #0
 800e936:	d103      	bne.n	800e940 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	2202      	movs	r2, #2
 800e93c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800e93e:	e145      	b.n	800ebcc <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e940:	7bbb      	ldrb	r3, [r7, #14]
 800e942:	2b03      	cmp	r3, #3
 800e944:	f040 8142 	bne.w	800ebcc <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e94e:	3301      	adds	r3, #1
 800e950:	b2da      	uxtb	r2, r3
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e95e:	2b03      	cmp	r3, #3
 800e960:	d903      	bls.n	800e96a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	220d      	movs	r2, #13
 800e966:	701a      	strb	r2, [r3, #0]
      break;
 800e968:	e130      	b.n	800ebcc <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	795b      	ldrb	r3, [r3, #5]
 800e96e:	4619      	mov	r1, r3
 800e970:	6878      	ldr	r0, [r7, #4]
 800e972:	f000 ff67 	bl	800f844 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	791b      	ldrb	r3, [r3, #4]
 800e97a:	4619      	mov	r1, r3
 800e97c:	6878      	ldr	r0, [r7, #4]
 800e97e:	f000 ff61 	bl	800f844 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	2200      	movs	r2, #0
 800e986:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	2200      	movs	r2, #0
 800e98c:	701a      	strb	r2, [r3, #0]
      break;
 800e98e:	e11d      	b.n	800ebcc <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800e990:	2101      	movs	r1, #1
 800e992:	6878      	ldr	r0, [r7, #4]
 800e994:	f000 fa68 	bl	800ee68 <USBH_SetAddress>
 800e998:	4603      	mov	r3, r0
 800e99a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e99c:	7bbb      	ldrb	r3, [r7, #14]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d132      	bne.n	800ea08 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800e9a2:	2002      	movs	r0, #2
 800e9a4:	f003 fec0 	bl	8012728 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	2201      	movs	r2, #1
 800e9ac:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	2203      	movs	r2, #3
 800e9b4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	7919      	ldrb	r1, [r3, #4]
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800e9c6:	687a      	ldr	r2, [r7, #4]
 800e9c8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800e9ca:	b292      	uxth	r2, r2
 800e9cc:	9202      	str	r2, [sp, #8]
 800e9ce:	2200      	movs	r2, #0
 800e9d0:	9201      	str	r2, [sp, #4]
 800e9d2:	9300      	str	r3, [sp, #0]
 800e9d4:	4603      	mov	r3, r0
 800e9d6:	2280      	movs	r2, #128	; 0x80
 800e9d8:	6878      	ldr	r0, [r7, #4]
 800e9da:	f000 fee3 	bl	800f7a4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	7959      	ldrb	r1, [r3, #5]
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800e9ee:	687a      	ldr	r2, [r7, #4]
 800e9f0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e9f2:	b292      	uxth	r2, r2
 800e9f4:	9202      	str	r2, [sp, #8]
 800e9f6:	2200      	movs	r2, #0
 800e9f8:	9201      	str	r2, [sp, #4]
 800e9fa:	9300      	str	r3, [sp, #0]
 800e9fc:	4603      	mov	r3, r0
 800e9fe:	2200      	movs	r2, #0
 800ea00:	6878      	ldr	r0, [r7, #4]
 800ea02:	f000 fecf 	bl	800f7a4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ea06:	e0e3      	b.n	800ebd0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ea08:	7bbb      	ldrb	r3, [r7, #14]
 800ea0a:	2b03      	cmp	r3, #3
 800ea0c:	f040 80e0 	bne.w	800ebd0 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	220d      	movs	r2, #13
 800ea14:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	2200      	movs	r2, #0
 800ea1a:	705a      	strb	r2, [r3, #1]
      break;
 800ea1c:	e0d8      	b.n	800ebd0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800ea1e:	2109      	movs	r1, #9
 800ea20:	6878      	ldr	r0, [r7, #4]
 800ea22:	f000 f99d 	bl	800ed60 <USBH_Get_CfgDesc>
 800ea26:	4603      	mov	r3, r0
 800ea28:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ea2a:	7bbb      	ldrb	r3, [r7, #14]
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d103      	bne.n	800ea38 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	2204      	movs	r2, #4
 800ea34:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ea36:	e0cd      	b.n	800ebd4 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ea38:	7bbb      	ldrb	r3, [r7, #14]
 800ea3a:	2b03      	cmp	r3, #3
 800ea3c:	f040 80ca 	bne.w	800ebd4 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ea46:	3301      	adds	r3, #1
 800ea48:	b2da      	uxtb	r2, r3
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ea56:	2b03      	cmp	r3, #3
 800ea58:	d903      	bls.n	800ea62 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	220d      	movs	r2, #13
 800ea5e:	701a      	strb	r2, [r3, #0]
      break;
 800ea60:	e0b8      	b.n	800ebd4 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	795b      	ldrb	r3, [r3, #5]
 800ea66:	4619      	mov	r1, r3
 800ea68:	6878      	ldr	r0, [r7, #4]
 800ea6a:	f000 feeb 	bl	800f844 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	791b      	ldrb	r3, [r3, #4]
 800ea72:	4619      	mov	r1, r3
 800ea74:	6878      	ldr	r0, [r7, #4]
 800ea76:	f000 fee5 	bl	800f844 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	2200      	movs	r2, #0
 800ea7e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	2200      	movs	r2, #0
 800ea84:	701a      	strb	r2, [r3, #0]
      break;
 800ea86:	e0a5      	b.n	800ebd4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800ea8e:	4619      	mov	r1, r3
 800ea90:	6878      	ldr	r0, [r7, #4]
 800ea92:	f000 f965 	bl	800ed60 <USBH_Get_CfgDesc>
 800ea96:	4603      	mov	r3, r0
 800ea98:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ea9a:	7bbb      	ldrb	r3, [r7, #14]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d103      	bne.n	800eaa8 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	2205      	movs	r2, #5
 800eaa4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800eaa6:	e097      	b.n	800ebd8 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800eaa8:	7bbb      	ldrb	r3, [r7, #14]
 800eaaa:	2b03      	cmp	r3, #3
 800eaac:	f040 8094 	bne.w	800ebd8 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800eab6:	3301      	adds	r3, #1
 800eab8:	b2da      	uxtb	r2, r3
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800eac6:	2b03      	cmp	r3, #3
 800eac8:	d903      	bls.n	800ead2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	220d      	movs	r2, #13
 800eace:	701a      	strb	r2, [r3, #0]
      break;
 800ead0:	e082      	b.n	800ebd8 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	795b      	ldrb	r3, [r3, #5]
 800ead6:	4619      	mov	r1, r3
 800ead8:	6878      	ldr	r0, [r7, #4]
 800eada:	f000 feb3 	bl	800f844 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	791b      	ldrb	r3, [r3, #4]
 800eae2:	4619      	mov	r1, r3
 800eae4:	6878      	ldr	r0, [r7, #4]
 800eae6:	f000 fead 	bl	800f844 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	2200      	movs	r2, #0
 800eaee:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	2200      	movs	r2, #0
 800eaf4:	701a      	strb	r2, [r3, #0]
      break;
 800eaf6:	e06f      	b.n	800ebd8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d019      	beq.n	800eb36 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800eb0e:	23ff      	movs	r3, #255	; 0xff
 800eb10:	6878      	ldr	r0, [r7, #4]
 800eb12:	f000 f949 	bl	800eda8 <USBH_Get_StringDesc>
 800eb16:	4603      	mov	r3, r0
 800eb18:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800eb1a:	7bbb      	ldrb	r3, [r7, #14]
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d103      	bne.n	800eb28 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	2206      	movs	r2, #6
 800eb24:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800eb26:	e059      	b.n	800ebdc <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800eb28:	7bbb      	ldrb	r3, [r7, #14]
 800eb2a:	2b03      	cmp	r3, #3
 800eb2c:	d156      	bne.n	800ebdc <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	2206      	movs	r2, #6
 800eb32:	705a      	strb	r2, [r3, #1]
      break;
 800eb34:	e052      	b.n	800ebdc <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	2206      	movs	r2, #6
 800eb3a:	705a      	strb	r2, [r3, #1]
      break;
 800eb3c:	e04e      	b.n	800ebdc <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d019      	beq.n	800eb7c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800eb54:	23ff      	movs	r3, #255	; 0xff
 800eb56:	6878      	ldr	r0, [r7, #4]
 800eb58:	f000 f926 	bl	800eda8 <USBH_Get_StringDesc>
 800eb5c:	4603      	mov	r3, r0
 800eb5e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800eb60:	7bbb      	ldrb	r3, [r7, #14]
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d103      	bne.n	800eb6e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	2207      	movs	r2, #7
 800eb6a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800eb6c:	e038      	b.n	800ebe0 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800eb6e:	7bbb      	ldrb	r3, [r7, #14]
 800eb70:	2b03      	cmp	r3, #3
 800eb72:	d135      	bne.n	800ebe0 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	2207      	movs	r2, #7
 800eb78:	705a      	strb	r2, [r3, #1]
      break;
 800eb7a:	e031      	b.n	800ebe0 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	2207      	movs	r2, #7
 800eb80:	705a      	strb	r2, [r3, #1]
      break;
 800eb82:	e02d      	b.n	800ebe0 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d017      	beq.n	800ebbe <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800eb9a:	23ff      	movs	r3, #255	; 0xff
 800eb9c:	6878      	ldr	r0, [r7, #4]
 800eb9e:	f000 f903 	bl	800eda8 <USBH_Get_StringDesc>
 800eba2:	4603      	mov	r3, r0
 800eba4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800eba6:	7bbb      	ldrb	r3, [r7, #14]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d102      	bne.n	800ebb2 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800ebac:	2300      	movs	r3, #0
 800ebae:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800ebb0:	e018      	b.n	800ebe4 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ebb2:	7bbb      	ldrb	r3, [r7, #14]
 800ebb4:	2b03      	cmp	r3, #3
 800ebb6:	d115      	bne.n	800ebe4 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800ebb8:	2300      	movs	r3, #0
 800ebba:	73fb      	strb	r3, [r7, #15]
      break;
 800ebbc:	e012      	b.n	800ebe4 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800ebbe:	2300      	movs	r3, #0
 800ebc0:	73fb      	strb	r3, [r7, #15]
      break;
 800ebc2:	e00f      	b.n	800ebe4 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800ebc4:	bf00      	nop
 800ebc6:	e00e      	b.n	800ebe6 <USBH_HandleEnum+0x3be>
      break;
 800ebc8:	bf00      	nop
 800ebca:	e00c      	b.n	800ebe6 <USBH_HandleEnum+0x3be>
      break;
 800ebcc:	bf00      	nop
 800ebce:	e00a      	b.n	800ebe6 <USBH_HandleEnum+0x3be>
      break;
 800ebd0:	bf00      	nop
 800ebd2:	e008      	b.n	800ebe6 <USBH_HandleEnum+0x3be>
      break;
 800ebd4:	bf00      	nop
 800ebd6:	e006      	b.n	800ebe6 <USBH_HandleEnum+0x3be>
      break;
 800ebd8:	bf00      	nop
 800ebda:	e004      	b.n	800ebe6 <USBH_HandleEnum+0x3be>
      break;
 800ebdc:	bf00      	nop
 800ebde:	e002      	b.n	800ebe6 <USBH_HandleEnum+0x3be>
      break;
 800ebe0:	bf00      	nop
 800ebe2:	e000      	b.n	800ebe6 <USBH_HandleEnum+0x3be>
      break;
 800ebe4:	bf00      	nop
  }
  return Status;
 800ebe6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebe8:	4618      	mov	r0, r3
 800ebea:	3710      	adds	r7, #16
 800ebec:	46bd      	mov	sp, r7
 800ebee:	bd80      	pop	{r7, pc}

0800ebf0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800ebf0:	b480      	push	{r7}
 800ebf2:	b083      	sub	sp, #12
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	6078      	str	r0, [r7, #4]
 800ebf8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	683a      	ldr	r2, [r7, #0]
 800ebfe:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800ec02:	bf00      	nop
 800ec04:	370c      	adds	r7, #12
 800ec06:	46bd      	mov	sp, r7
 800ec08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec0c:	4770      	bx	lr

0800ec0e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800ec0e:	b580      	push	{r7, lr}
 800ec10:	b082      	sub	sp, #8
 800ec12:	af00      	add	r7, sp, #0
 800ec14:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ec1c:	1c5a      	adds	r2, r3, #1
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800ec24:	6878      	ldr	r0, [r7, #4]
 800ec26:	f000 f804 	bl	800ec32 <USBH_HandleSof>
}
 800ec2a:	bf00      	nop
 800ec2c:	3708      	adds	r7, #8
 800ec2e:	46bd      	mov	sp, r7
 800ec30:	bd80      	pop	{r7, pc}

0800ec32 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800ec32:	b580      	push	{r7, lr}
 800ec34:	b082      	sub	sp, #8
 800ec36:	af00      	add	r7, sp, #0
 800ec38:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	781b      	ldrb	r3, [r3, #0]
 800ec3e:	b2db      	uxtb	r3, r3
 800ec40:	2b0b      	cmp	r3, #11
 800ec42:	d10a      	bne.n	800ec5a <USBH_HandleSof+0x28>
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d005      	beq.n	800ec5a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ec54:	699b      	ldr	r3, [r3, #24]
 800ec56:	6878      	ldr	r0, [r7, #4]
 800ec58:	4798      	blx	r3
  }
}
 800ec5a:	bf00      	nop
 800ec5c:	3708      	adds	r7, #8
 800ec5e:	46bd      	mov	sp, r7
 800ec60:	bd80      	pop	{r7, pc}

0800ec62 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800ec62:	b480      	push	{r7}
 800ec64:	b083      	sub	sp, #12
 800ec66:	af00      	add	r7, sp, #0
 800ec68:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	2201      	movs	r2, #1
 800ec6e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800ec72:	bf00      	nop
}
 800ec74:	370c      	adds	r7, #12
 800ec76:	46bd      	mov	sp, r7
 800ec78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec7c:	4770      	bx	lr

0800ec7e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800ec7e:	b480      	push	{r7}
 800ec80:	b083      	sub	sp, #12
 800ec82:	af00      	add	r7, sp, #0
 800ec84:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	2200      	movs	r2, #0
 800ec8a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800ec8e:	bf00      	nop
}
 800ec90:	370c      	adds	r7, #12
 800ec92:	46bd      	mov	sp, r7
 800ec94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec98:	4770      	bx	lr

0800ec9a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800ec9a:	b480      	push	{r7}
 800ec9c:	b083      	sub	sp, #12
 800ec9e:	af00      	add	r7, sp, #0
 800eca0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	2201      	movs	r2, #1
 800eca6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	2200      	movs	r2, #0
 800ecae:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	2200      	movs	r2, #0
 800ecb6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800ecba:	2300      	movs	r3, #0
}
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	370c      	adds	r7, #12
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc6:	4770      	bx	lr

0800ecc8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800ecc8:	b580      	push	{r7, lr}
 800ecca:	b082      	sub	sp, #8
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	2201      	movs	r2, #1
 800ecd4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	2200      	movs	r2, #0
 800ecdc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	2200      	movs	r2, #0
 800ece4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800ece8:	6878      	ldr	r0, [r7, #4]
 800ecea:	f003 fba0 	bl	801242e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	791b      	ldrb	r3, [r3, #4]
 800ecf2:	4619      	mov	r1, r3
 800ecf4:	6878      	ldr	r0, [r7, #4]
 800ecf6:	f000 fda5 	bl	800f844 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	795b      	ldrb	r3, [r3, #5]
 800ecfe:	4619      	mov	r1, r3
 800ed00:	6878      	ldr	r0, [r7, #4]
 800ed02:	f000 fd9f 	bl	800f844 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800ed06:	2300      	movs	r3, #0
}
 800ed08:	4618      	mov	r0, r3
 800ed0a:	3708      	adds	r7, #8
 800ed0c:	46bd      	mov	sp, r7
 800ed0e:	bd80      	pop	{r7, pc}

0800ed10 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800ed10:	b580      	push	{r7, lr}
 800ed12:	b086      	sub	sp, #24
 800ed14:	af02      	add	r7, sp, #8
 800ed16:	6078      	str	r0, [r7, #4]
 800ed18:	460b      	mov	r3, r1
 800ed1a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800ed22:	78fb      	ldrb	r3, [r7, #3]
 800ed24:	b29b      	uxth	r3, r3
 800ed26:	9300      	str	r3, [sp, #0]
 800ed28:	4613      	mov	r3, r2
 800ed2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ed2e:	2100      	movs	r1, #0
 800ed30:	6878      	ldr	r0, [r7, #4]
 800ed32:	f000 f864 	bl	800edfe <USBH_GetDescriptor>
 800ed36:	4603      	mov	r3, r0
 800ed38:	73fb      	strb	r3, [r7, #15]
 800ed3a:	7bfb      	ldrb	r3, [r7, #15]
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d10a      	bne.n	800ed56 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	f203 3026 	addw	r0, r3, #806	; 0x326
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ed4c:	78fa      	ldrb	r2, [r7, #3]
 800ed4e:	b292      	uxth	r2, r2
 800ed50:	4619      	mov	r1, r3
 800ed52:	f000 f918 	bl	800ef86 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800ed56:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed58:	4618      	mov	r0, r3
 800ed5a:	3710      	adds	r7, #16
 800ed5c:	46bd      	mov	sp, r7
 800ed5e:	bd80      	pop	{r7, pc}

0800ed60 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800ed60:	b580      	push	{r7, lr}
 800ed62:	b086      	sub	sp, #24
 800ed64:	af02      	add	r7, sp, #8
 800ed66:	6078      	str	r0, [r7, #4]
 800ed68:	460b      	mov	r3, r1
 800ed6a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	331c      	adds	r3, #28
 800ed70:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800ed72:	887b      	ldrh	r3, [r7, #2]
 800ed74:	9300      	str	r3, [sp, #0]
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ed7c:	2100      	movs	r1, #0
 800ed7e:	6878      	ldr	r0, [r7, #4]
 800ed80:	f000 f83d 	bl	800edfe <USBH_GetDescriptor>
 800ed84:	4603      	mov	r3, r0
 800ed86:	72fb      	strb	r3, [r7, #11]
 800ed88:	7afb      	ldrb	r3, [r7, #11]
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d107      	bne.n	800ed9e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800ed94:	887a      	ldrh	r2, [r7, #2]
 800ed96:	68f9      	ldr	r1, [r7, #12]
 800ed98:	4618      	mov	r0, r3
 800ed9a:	f000 f964 	bl	800f066 <USBH_ParseCfgDesc>
  }

  return status;
 800ed9e:	7afb      	ldrb	r3, [r7, #11]
}
 800eda0:	4618      	mov	r0, r3
 800eda2:	3710      	adds	r7, #16
 800eda4:	46bd      	mov	sp, r7
 800eda6:	bd80      	pop	{r7, pc}

0800eda8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800eda8:	b580      	push	{r7, lr}
 800edaa:	b088      	sub	sp, #32
 800edac:	af02      	add	r7, sp, #8
 800edae:	60f8      	str	r0, [r7, #12]
 800edb0:	607a      	str	r2, [r7, #4]
 800edb2:	461a      	mov	r2, r3
 800edb4:	460b      	mov	r3, r1
 800edb6:	72fb      	strb	r3, [r7, #11]
 800edb8:	4613      	mov	r3, r2
 800edba:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800edbc:	7afb      	ldrb	r3, [r7, #11]
 800edbe:	b29b      	uxth	r3, r3
 800edc0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800edc4:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800edcc:	893b      	ldrh	r3, [r7, #8]
 800edce:	9300      	str	r3, [sp, #0]
 800edd0:	460b      	mov	r3, r1
 800edd2:	2100      	movs	r1, #0
 800edd4:	68f8      	ldr	r0, [r7, #12]
 800edd6:	f000 f812 	bl	800edfe <USBH_GetDescriptor>
 800edda:	4603      	mov	r3, r0
 800eddc:	75fb      	strb	r3, [r7, #23]
 800edde:	7dfb      	ldrb	r3, [r7, #23]
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d107      	bne.n	800edf4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800edea:	893a      	ldrh	r2, [r7, #8]
 800edec:	6879      	ldr	r1, [r7, #4]
 800edee:	4618      	mov	r0, r3
 800edf0:	f000 fa37 	bl	800f262 <USBH_ParseStringDesc>
  }

  return status;
 800edf4:	7dfb      	ldrb	r3, [r7, #23]
}
 800edf6:	4618      	mov	r0, r3
 800edf8:	3718      	adds	r7, #24
 800edfa:	46bd      	mov	sp, r7
 800edfc:	bd80      	pop	{r7, pc}

0800edfe <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800edfe:	b580      	push	{r7, lr}
 800ee00:	b084      	sub	sp, #16
 800ee02:	af00      	add	r7, sp, #0
 800ee04:	60f8      	str	r0, [r7, #12]
 800ee06:	607b      	str	r3, [r7, #4]
 800ee08:	460b      	mov	r3, r1
 800ee0a:	72fb      	strb	r3, [r7, #11]
 800ee0c:	4613      	mov	r3, r2
 800ee0e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	789b      	ldrb	r3, [r3, #2]
 800ee14:	2b01      	cmp	r3, #1
 800ee16:	d11c      	bne.n	800ee52 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800ee18:	7afb      	ldrb	r3, [r7, #11]
 800ee1a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ee1e:	b2da      	uxtb	r2, r3
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	2206      	movs	r2, #6
 800ee28:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	893a      	ldrh	r2, [r7, #8]
 800ee2e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800ee30:	893b      	ldrh	r3, [r7, #8]
 800ee32:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ee36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ee3a:	d104      	bne.n	800ee46 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	f240 4209 	movw	r2, #1033	; 0x409
 800ee42:	829a      	strh	r2, [r3, #20]
 800ee44:	e002      	b.n	800ee4c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	2200      	movs	r2, #0
 800ee4a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	8b3a      	ldrh	r2, [r7, #24]
 800ee50:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800ee52:	8b3b      	ldrh	r3, [r7, #24]
 800ee54:	461a      	mov	r2, r3
 800ee56:	6879      	ldr	r1, [r7, #4]
 800ee58:	68f8      	ldr	r0, [r7, #12]
 800ee5a:	f000 fa50 	bl	800f2fe <USBH_CtlReq>
 800ee5e:	4603      	mov	r3, r0
}
 800ee60:	4618      	mov	r0, r3
 800ee62:	3710      	adds	r7, #16
 800ee64:	46bd      	mov	sp, r7
 800ee66:	bd80      	pop	{r7, pc}

0800ee68 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	b082      	sub	sp, #8
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	6078      	str	r0, [r7, #4]
 800ee70:	460b      	mov	r3, r1
 800ee72:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	789b      	ldrb	r3, [r3, #2]
 800ee78:	2b01      	cmp	r3, #1
 800ee7a:	d10f      	bne.n	800ee9c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	2200      	movs	r2, #0
 800ee80:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	2205      	movs	r2, #5
 800ee86:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800ee88:	78fb      	ldrb	r3, [r7, #3]
 800ee8a:	b29a      	uxth	r2, r3
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	2200      	movs	r2, #0
 800ee94:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	2200      	movs	r2, #0
 800ee9a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800ee9c:	2200      	movs	r2, #0
 800ee9e:	2100      	movs	r1, #0
 800eea0:	6878      	ldr	r0, [r7, #4]
 800eea2:	f000 fa2c 	bl	800f2fe <USBH_CtlReq>
 800eea6:	4603      	mov	r3, r0
}
 800eea8:	4618      	mov	r0, r3
 800eeaa:	3708      	adds	r7, #8
 800eeac:	46bd      	mov	sp, r7
 800eeae:	bd80      	pop	{r7, pc}

0800eeb0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800eeb0:	b580      	push	{r7, lr}
 800eeb2:	b082      	sub	sp, #8
 800eeb4:	af00      	add	r7, sp, #0
 800eeb6:	6078      	str	r0, [r7, #4]
 800eeb8:	460b      	mov	r3, r1
 800eeba:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	789b      	ldrb	r3, [r3, #2]
 800eec0:	2b01      	cmp	r3, #1
 800eec2:	d10e      	bne.n	800eee2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	2200      	movs	r2, #0
 800eec8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	2209      	movs	r2, #9
 800eece:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	887a      	ldrh	r2, [r7, #2]
 800eed4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	2200      	movs	r2, #0
 800eeda:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	2200      	movs	r2, #0
 800eee0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800eee2:	2200      	movs	r2, #0
 800eee4:	2100      	movs	r1, #0
 800eee6:	6878      	ldr	r0, [r7, #4]
 800eee8:	f000 fa09 	bl	800f2fe <USBH_CtlReq>
 800eeec:	4603      	mov	r3, r0
}
 800eeee:	4618      	mov	r0, r3
 800eef0:	3708      	adds	r7, #8
 800eef2:	46bd      	mov	sp, r7
 800eef4:	bd80      	pop	{r7, pc}

0800eef6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800eef6:	b580      	push	{r7, lr}
 800eef8:	b082      	sub	sp, #8
 800eefa:	af00      	add	r7, sp, #0
 800eefc:	6078      	str	r0, [r7, #4]
 800eefe:	460b      	mov	r3, r1
 800ef00:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	789b      	ldrb	r3, [r3, #2]
 800ef06:	2b01      	cmp	r3, #1
 800ef08:	d10f      	bne.n	800ef2a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	2200      	movs	r2, #0
 800ef0e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	2203      	movs	r2, #3
 800ef14:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800ef16:	78fb      	ldrb	r3, [r7, #3]
 800ef18:	b29a      	uxth	r2, r3
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	2200      	movs	r2, #0
 800ef22:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	2200      	movs	r2, #0
 800ef28:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800ef2a:	2200      	movs	r2, #0
 800ef2c:	2100      	movs	r1, #0
 800ef2e:	6878      	ldr	r0, [r7, #4]
 800ef30:	f000 f9e5 	bl	800f2fe <USBH_CtlReq>
 800ef34:	4603      	mov	r3, r0
}
 800ef36:	4618      	mov	r0, r3
 800ef38:	3708      	adds	r7, #8
 800ef3a:	46bd      	mov	sp, r7
 800ef3c:	bd80      	pop	{r7, pc}

0800ef3e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800ef3e:	b580      	push	{r7, lr}
 800ef40:	b082      	sub	sp, #8
 800ef42:	af00      	add	r7, sp, #0
 800ef44:	6078      	str	r0, [r7, #4]
 800ef46:	460b      	mov	r3, r1
 800ef48:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	789b      	ldrb	r3, [r3, #2]
 800ef4e:	2b01      	cmp	r3, #1
 800ef50:	d10f      	bne.n	800ef72 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	2202      	movs	r2, #2
 800ef56:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	2201      	movs	r2, #1
 800ef5c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	2200      	movs	r2, #0
 800ef62:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800ef64:	78fb      	ldrb	r3, [r7, #3]
 800ef66:	b29a      	uxth	r2, r3
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	2200      	movs	r2, #0
 800ef70:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800ef72:	2200      	movs	r2, #0
 800ef74:	2100      	movs	r1, #0
 800ef76:	6878      	ldr	r0, [r7, #4]
 800ef78:	f000 f9c1 	bl	800f2fe <USBH_CtlReq>
 800ef7c:	4603      	mov	r3, r0
}
 800ef7e:	4618      	mov	r0, r3
 800ef80:	3708      	adds	r7, #8
 800ef82:	46bd      	mov	sp, r7
 800ef84:	bd80      	pop	{r7, pc}

0800ef86 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800ef86:	b480      	push	{r7}
 800ef88:	b085      	sub	sp, #20
 800ef8a:	af00      	add	r7, sp, #0
 800ef8c:	60f8      	str	r0, [r7, #12]
 800ef8e:	60b9      	str	r1, [r7, #8]
 800ef90:	4613      	mov	r3, r2
 800ef92:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800ef94:	68bb      	ldr	r3, [r7, #8]
 800ef96:	781a      	ldrb	r2, [r3, #0]
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800ef9c:	68bb      	ldr	r3, [r7, #8]
 800ef9e:	785a      	ldrb	r2, [r3, #1]
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800efa4:	68bb      	ldr	r3, [r7, #8]
 800efa6:	3302      	adds	r3, #2
 800efa8:	781b      	ldrb	r3, [r3, #0]
 800efaa:	b29a      	uxth	r2, r3
 800efac:	68bb      	ldr	r3, [r7, #8]
 800efae:	3303      	adds	r3, #3
 800efb0:	781b      	ldrb	r3, [r3, #0]
 800efb2:	b29b      	uxth	r3, r3
 800efb4:	021b      	lsls	r3, r3, #8
 800efb6:	b29b      	uxth	r3, r3
 800efb8:	4313      	orrs	r3, r2
 800efba:	b29a      	uxth	r2, r3
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800efc0:	68bb      	ldr	r3, [r7, #8]
 800efc2:	791a      	ldrb	r2, [r3, #4]
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800efc8:	68bb      	ldr	r3, [r7, #8]
 800efca:	795a      	ldrb	r2, [r3, #5]
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800efd0:	68bb      	ldr	r3, [r7, #8]
 800efd2:	799a      	ldrb	r2, [r3, #6]
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800efd8:	68bb      	ldr	r3, [r7, #8]
 800efda:	79da      	ldrb	r2, [r3, #7]
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800efe0:	88fb      	ldrh	r3, [r7, #6]
 800efe2:	2b08      	cmp	r3, #8
 800efe4:	d939      	bls.n	800f05a <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800efe6:	68bb      	ldr	r3, [r7, #8]
 800efe8:	3308      	adds	r3, #8
 800efea:	781b      	ldrb	r3, [r3, #0]
 800efec:	b29a      	uxth	r2, r3
 800efee:	68bb      	ldr	r3, [r7, #8]
 800eff0:	3309      	adds	r3, #9
 800eff2:	781b      	ldrb	r3, [r3, #0]
 800eff4:	b29b      	uxth	r3, r3
 800eff6:	021b      	lsls	r3, r3, #8
 800eff8:	b29b      	uxth	r3, r3
 800effa:	4313      	orrs	r3, r2
 800effc:	b29a      	uxth	r2, r3
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800f002:	68bb      	ldr	r3, [r7, #8]
 800f004:	330a      	adds	r3, #10
 800f006:	781b      	ldrb	r3, [r3, #0]
 800f008:	b29a      	uxth	r2, r3
 800f00a:	68bb      	ldr	r3, [r7, #8]
 800f00c:	330b      	adds	r3, #11
 800f00e:	781b      	ldrb	r3, [r3, #0]
 800f010:	b29b      	uxth	r3, r3
 800f012:	021b      	lsls	r3, r3, #8
 800f014:	b29b      	uxth	r3, r3
 800f016:	4313      	orrs	r3, r2
 800f018:	b29a      	uxth	r2, r3
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800f01e:	68bb      	ldr	r3, [r7, #8]
 800f020:	330c      	adds	r3, #12
 800f022:	781b      	ldrb	r3, [r3, #0]
 800f024:	b29a      	uxth	r2, r3
 800f026:	68bb      	ldr	r3, [r7, #8]
 800f028:	330d      	adds	r3, #13
 800f02a:	781b      	ldrb	r3, [r3, #0]
 800f02c:	b29b      	uxth	r3, r3
 800f02e:	021b      	lsls	r3, r3, #8
 800f030:	b29b      	uxth	r3, r3
 800f032:	4313      	orrs	r3, r2
 800f034:	b29a      	uxth	r2, r3
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800f03a:	68bb      	ldr	r3, [r7, #8]
 800f03c:	7b9a      	ldrb	r2, [r3, #14]
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800f042:	68bb      	ldr	r3, [r7, #8]
 800f044:	7bda      	ldrb	r2, [r3, #15]
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800f04a:	68bb      	ldr	r3, [r7, #8]
 800f04c:	7c1a      	ldrb	r2, [r3, #16]
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800f052:	68bb      	ldr	r3, [r7, #8]
 800f054:	7c5a      	ldrb	r2, [r3, #17]
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	745a      	strb	r2, [r3, #17]
  }
}
 800f05a:	bf00      	nop
 800f05c:	3714      	adds	r7, #20
 800f05e:	46bd      	mov	sp, r7
 800f060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f064:	4770      	bx	lr

0800f066 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800f066:	b580      	push	{r7, lr}
 800f068:	b08a      	sub	sp, #40	; 0x28
 800f06a:	af00      	add	r7, sp, #0
 800f06c:	60f8      	str	r0, [r7, #12]
 800f06e:	60b9      	str	r1, [r7, #8]
 800f070:	4613      	mov	r3, r2
 800f072:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800f074:	68bb      	ldr	r3, [r7, #8]
 800f076:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800f078:	2300      	movs	r3, #0
 800f07a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800f07e:	2300      	movs	r3, #0
 800f080:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800f084:	68bb      	ldr	r3, [r7, #8]
 800f086:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800f088:	68bb      	ldr	r3, [r7, #8]
 800f08a:	781a      	ldrb	r2, [r3, #0]
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800f090:	68bb      	ldr	r3, [r7, #8]
 800f092:	785a      	ldrb	r2, [r3, #1]
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800f098:	68bb      	ldr	r3, [r7, #8]
 800f09a:	3302      	adds	r3, #2
 800f09c:	781b      	ldrb	r3, [r3, #0]
 800f09e:	b29a      	uxth	r2, r3
 800f0a0:	68bb      	ldr	r3, [r7, #8]
 800f0a2:	3303      	adds	r3, #3
 800f0a4:	781b      	ldrb	r3, [r3, #0]
 800f0a6:	b29b      	uxth	r3, r3
 800f0a8:	021b      	lsls	r3, r3, #8
 800f0aa:	b29b      	uxth	r3, r3
 800f0ac:	4313      	orrs	r3, r2
 800f0ae:	b29a      	uxth	r2, r3
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800f0b4:	68bb      	ldr	r3, [r7, #8]
 800f0b6:	791a      	ldrb	r2, [r3, #4]
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800f0bc:	68bb      	ldr	r3, [r7, #8]
 800f0be:	795a      	ldrb	r2, [r3, #5]
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800f0c4:	68bb      	ldr	r3, [r7, #8]
 800f0c6:	799a      	ldrb	r2, [r3, #6]
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800f0cc:	68bb      	ldr	r3, [r7, #8]
 800f0ce:	79da      	ldrb	r2, [r3, #7]
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800f0d4:	68bb      	ldr	r3, [r7, #8]
 800f0d6:	7a1a      	ldrb	r2, [r3, #8]
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800f0dc:	88fb      	ldrh	r3, [r7, #6]
 800f0de:	2b09      	cmp	r3, #9
 800f0e0:	d95f      	bls.n	800f1a2 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800f0e2:	2309      	movs	r3, #9
 800f0e4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800f0e6:	2300      	movs	r3, #0
 800f0e8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800f0ea:	e051      	b.n	800f190 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800f0ec:	f107 0316 	add.w	r3, r7, #22
 800f0f0:	4619      	mov	r1, r3
 800f0f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f0f4:	f000 f8e8 	bl	800f2c8 <USBH_GetNextDesc>
 800f0f8:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800f0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0fc:	785b      	ldrb	r3, [r3, #1]
 800f0fe:	2b04      	cmp	r3, #4
 800f100:	d146      	bne.n	800f190 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800f102:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f106:	221a      	movs	r2, #26
 800f108:	fb02 f303 	mul.w	r3, r2, r3
 800f10c:	3308      	adds	r3, #8
 800f10e:	68fa      	ldr	r2, [r7, #12]
 800f110:	4413      	add	r3, r2
 800f112:	3302      	adds	r3, #2
 800f114:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800f116:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f118:	69f8      	ldr	r0, [r7, #28]
 800f11a:	f000 f846 	bl	800f1aa <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800f11e:	2300      	movs	r3, #0
 800f120:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800f124:	2300      	movs	r3, #0
 800f126:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800f128:	e022      	b.n	800f170 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800f12a:	f107 0316 	add.w	r3, r7, #22
 800f12e:	4619      	mov	r1, r3
 800f130:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f132:	f000 f8c9 	bl	800f2c8 <USBH_GetNextDesc>
 800f136:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800f138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f13a:	785b      	ldrb	r3, [r3, #1]
 800f13c:	2b05      	cmp	r3, #5
 800f13e:	d117      	bne.n	800f170 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800f140:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f144:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800f148:	3201      	adds	r2, #1
 800f14a:	00d2      	lsls	r2, r2, #3
 800f14c:	211a      	movs	r1, #26
 800f14e:	fb01 f303 	mul.w	r3, r1, r3
 800f152:	4413      	add	r3, r2
 800f154:	3308      	adds	r3, #8
 800f156:	68fa      	ldr	r2, [r7, #12]
 800f158:	4413      	add	r3, r2
 800f15a:	3304      	adds	r3, #4
 800f15c:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800f15e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f160:	69b8      	ldr	r0, [r7, #24]
 800f162:	f000 f851 	bl	800f208 <USBH_ParseEPDesc>
            ep_ix++;
 800f166:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800f16a:	3301      	adds	r3, #1
 800f16c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800f170:	69fb      	ldr	r3, [r7, #28]
 800f172:	791b      	ldrb	r3, [r3, #4]
 800f174:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800f178:	429a      	cmp	r2, r3
 800f17a:	d204      	bcs.n	800f186 <USBH_ParseCfgDesc+0x120>
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	885a      	ldrh	r2, [r3, #2]
 800f180:	8afb      	ldrh	r3, [r7, #22]
 800f182:	429a      	cmp	r2, r3
 800f184:	d8d1      	bhi.n	800f12a <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800f186:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f18a:	3301      	adds	r3, #1
 800f18c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800f190:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f194:	2b01      	cmp	r3, #1
 800f196:	d804      	bhi.n	800f1a2 <USBH_ParseCfgDesc+0x13c>
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	885a      	ldrh	r2, [r3, #2]
 800f19c:	8afb      	ldrh	r3, [r7, #22]
 800f19e:	429a      	cmp	r2, r3
 800f1a0:	d8a4      	bhi.n	800f0ec <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800f1a2:	bf00      	nop
 800f1a4:	3728      	adds	r7, #40	; 0x28
 800f1a6:	46bd      	mov	sp, r7
 800f1a8:	bd80      	pop	{r7, pc}

0800f1aa <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800f1aa:	b480      	push	{r7}
 800f1ac:	b083      	sub	sp, #12
 800f1ae:	af00      	add	r7, sp, #0
 800f1b0:	6078      	str	r0, [r7, #4]
 800f1b2:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800f1b4:	683b      	ldr	r3, [r7, #0]
 800f1b6:	781a      	ldrb	r2, [r3, #0]
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800f1bc:	683b      	ldr	r3, [r7, #0]
 800f1be:	785a      	ldrb	r2, [r3, #1]
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800f1c4:	683b      	ldr	r3, [r7, #0]
 800f1c6:	789a      	ldrb	r2, [r3, #2]
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800f1cc:	683b      	ldr	r3, [r7, #0]
 800f1ce:	78da      	ldrb	r2, [r3, #3]
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800f1d4:	683b      	ldr	r3, [r7, #0]
 800f1d6:	791a      	ldrb	r2, [r3, #4]
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800f1dc:	683b      	ldr	r3, [r7, #0]
 800f1de:	795a      	ldrb	r2, [r3, #5]
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800f1e4:	683b      	ldr	r3, [r7, #0]
 800f1e6:	799a      	ldrb	r2, [r3, #6]
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800f1ec:	683b      	ldr	r3, [r7, #0]
 800f1ee:	79da      	ldrb	r2, [r3, #7]
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800f1f4:	683b      	ldr	r3, [r7, #0]
 800f1f6:	7a1a      	ldrb	r2, [r3, #8]
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	721a      	strb	r2, [r3, #8]
}
 800f1fc:	bf00      	nop
 800f1fe:	370c      	adds	r7, #12
 800f200:	46bd      	mov	sp, r7
 800f202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f206:	4770      	bx	lr

0800f208 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800f208:	b480      	push	{r7}
 800f20a:	b083      	sub	sp, #12
 800f20c:	af00      	add	r7, sp, #0
 800f20e:	6078      	str	r0, [r7, #4]
 800f210:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800f212:	683b      	ldr	r3, [r7, #0]
 800f214:	781a      	ldrb	r2, [r3, #0]
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800f21a:	683b      	ldr	r3, [r7, #0]
 800f21c:	785a      	ldrb	r2, [r3, #1]
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800f222:	683b      	ldr	r3, [r7, #0]
 800f224:	789a      	ldrb	r2, [r3, #2]
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800f22a:	683b      	ldr	r3, [r7, #0]
 800f22c:	78da      	ldrb	r2, [r3, #3]
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800f232:	683b      	ldr	r3, [r7, #0]
 800f234:	3304      	adds	r3, #4
 800f236:	781b      	ldrb	r3, [r3, #0]
 800f238:	b29a      	uxth	r2, r3
 800f23a:	683b      	ldr	r3, [r7, #0]
 800f23c:	3305      	adds	r3, #5
 800f23e:	781b      	ldrb	r3, [r3, #0]
 800f240:	b29b      	uxth	r3, r3
 800f242:	021b      	lsls	r3, r3, #8
 800f244:	b29b      	uxth	r3, r3
 800f246:	4313      	orrs	r3, r2
 800f248:	b29a      	uxth	r2, r3
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800f24e:	683b      	ldr	r3, [r7, #0]
 800f250:	799a      	ldrb	r2, [r3, #6]
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	719a      	strb	r2, [r3, #6]
}
 800f256:	bf00      	nop
 800f258:	370c      	adds	r7, #12
 800f25a:	46bd      	mov	sp, r7
 800f25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f260:	4770      	bx	lr

0800f262 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800f262:	b480      	push	{r7}
 800f264:	b087      	sub	sp, #28
 800f266:	af00      	add	r7, sp, #0
 800f268:	60f8      	str	r0, [r7, #12]
 800f26a:	60b9      	str	r1, [r7, #8]
 800f26c:	4613      	mov	r3, r2
 800f26e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	3301      	adds	r3, #1
 800f274:	781b      	ldrb	r3, [r3, #0]
 800f276:	2b03      	cmp	r3, #3
 800f278:	d120      	bne.n	800f2bc <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	781b      	ldrb	r3, [r3, #0]
 800f27e:	1e9a      	subs	r2, r3, #2
 800f280:	88fb      	ldrh	r3, [r7, #6]
 800f282:	4293      	cmp	r3, r2
 800f284:	bf28      	it	cs
 800f286:	4613      	movcs	r3, r2
 800f288:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	3302      	adds	r3, #2
 800f28e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800f290:	2300      	movs	r3, #0
 800f292:	82fb      	strh	r3, [r7, #22]
 800f294:	e00b      	b.n	800f2ae <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800f296:	8afb      	ldrh	r3, [r7, #22]
 800f298:	68fa      	ldr	r2, [r7, #12]
 800f29a:	4413      	add	r3, r2
 800f29c:	781a      	ldrb	r2, [r3, #0]
 800f29e:	68bb      	ldr	r3, [r7, #8]
 800f2a0:	701a      	strb	r2, [r3, #0]
      pdest++;
 800f2a2:	68bb      	ldr	r3, [r7, #8]
 800f2a4:	3301      	adds	r3, #1
 800f2a6:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800f2a8:	8afb      	ldrh	r3, [r7, #22]
 800f2aa:	3302      	adds	r3, #2
 800f2ac:	82fb      	strh	r3, [r7, #22]
 800f2ae:	8afa      	ldrh	r2, [r7, #22]
 800f2b0:	8abb      	ldrh	r3, [r7, #20]
 800f2b2:	429a      	cmp	r2, r3
 800f2b4:	d3ef      	bcc.n	800f296 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800f2b6:	68bb      	ldr	r3, [r7, #8]
 800f2b8:	2200      	movs	r2, #0
 800f2ba:	701a      	strb	r2, [r3, #0]
  }
}
 800f2bc:	bf00      	nop
 800f2be:	371c      	adds	r7, #28
 800f2c0:	46bd      	mov	sp, r7
 800f2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c6:	4770      	bx	lr

0800f2c8 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800f2c8:	b480      	push	{r7}
 800f2ca:	b085      	sub	sp, #20
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	6078      	str	r0, [r7, #4]
 800f2d0:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800f2d2:	683b      	ldr	r3, [r7, #0]
 800f2d4:	881a      	ldrh	r2, [r3, #0]
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	781b      	ldrb	r3, [r3, #0]
 800f2da:	b29b      	uxth	r3, r3
 800f2dc:	4413      	add	r3, r2
 800f2de:	b29a      	uxth	r2, r3
 800f2e0:	683b      	ldr	r3, [r7, #0]
 800f2e2:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	781b      	ldrb	r3, [r3, #0]
 800f2e8:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	4413      	add	r3, r2
 800f2ee:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800f2f0:	68fb      	ldr	r3, [r7, #12]
}
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	3714      	adds	r7, #20
 800f2f6:	46bd      	mov	sp, r7
 800f2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2fc:	4770      	bx	lr

0800f2fe <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800f2fe:	b580      	push	{r7, lr}
 800f300:	b086      	sub	sp, #24
 800f302:	af00      	add	r7, sp, #0
 800f304:	60f8      	str	r0, [r7, #12]
 800f306:	60b9      	str	r1, [r7, #8]
 800f308:	4613      	mov	r3, r2
 800f30a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800f30c:	2301      	movs	r3, #1
 800f30e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	789b      	ldrb	r3, [r3, #2]
 800f314:	2b01      	cmp	r3, #1
 800f316:	d002      	beq.n	800f31e <USBH_CtlReq+0x20>
 800f318:	2b02      	cmp	r3, #2
 800f31a:	d00f      	beq.n	800f33c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800f31c:	e027      	b.n	800f36e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	68ba      	ldr	r2, [r7, #8]
 800f322:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	88fa      	ldrh	r2, [r7, #6]
 800f328:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	2201      	movs	r2, #1
 800f32e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	2202      	movs	r2, #2
 800f334:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800f336:	2301      	movs	r3, #1
 800f338:	75fb      	strb	r3, [r7, #23]
      break;
 800f33a:	e018      	b.n	800f36e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800f33c:	68f8      	ldr	r0, [r7, #12]
 800f33e:	f000 f81b 	bl	800f378 <USBH_HandleControl>
 800f342:	4603      	mov	r3, r0
 800f344:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800f346:	7dfb      	ldrb	r3, [r7, #23]
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d002      	beq.n	800f352 <USBH_CtlReq+0x54>
 800f34c:	7dfb      	ldrb	r3, [r7, #23]
 800f34e:	2b03      	cmp	r3, #3
 800f350:	d106      	bne.n	800f360 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	2201      	movs	r2, #1
 800f356:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	2200      	movs	r2, #0
 800f35c:	761a      	strb	r2, [r3, #24]
      break;
 800f35e:	e005      	b.n	800f36c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800f360:	7dfb      	ldrb	r3, [r7, #23]
 800f362:	2b02      	cmp	r3, #2
 800f364:	d102      	bne.n	800f36c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	2201      	movs	r2, #1
 800f36a:	709a      	strb	r2, [r3, #2]
      break;
 800f36c:	bf00      	nop
  }
  return status;
 800f36e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f370:	4618      	mov	r0, r3
 800f372:	3718      	adds	r7, #24
 800f374:	46bd      	mov	sp, r7
 800f376:	bd80      	pop	{r7, pc}

0800f378 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800f378:	b580      	push	{r7, lr}
 800f37a:	b086      	sub	sp, #24
 800f37c:	af02      	add	r7, sp, #8
 800f37e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800f380:	2301      	movs	r3, #1
 800f382:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800f384:	2300      	movs	r3, #0
 800f386:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	7e1b      	ldrb	r3, [r3, #24]
 800f38c:	3b01      	subs	r3, #1
 800f38e:	2b0a      	cmp	r3, #10
 800f390:	f200 8158 	bhi.w	800f644 <USBH_HandleControl+0x2cc>
 800f394:	a201      	add	r2, pc, #4	; (adr r2, 800f39c <USBH_HandleControl+0x24>)
 800f396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f39a:	bf00      	nop
 800f39c:	0800f3c9 	.word	0x0800f3c9
 800f3a0:	0800f3e3 	.word	0x0800f3e3
 800f3a4:	0800f44d 	.word	0x0800f44d
 800f3a8:	0800f473 	.word	0x0800f473
 800f3ac:	0800f4ab 	.word	0x0800f4ab
 800f3b0:	0800f4d7 	.word	0x0800f4d7
 800f3b4:	0800f529 	.word	0x0800f529
 800f3b8:	0800f54b 	.word	0x0800f54b
 800f3bc:	0800f587 	.word	0x0800f587
 800f3c0:	0800f5af 	.word	0x0800f5af
 800f3c4:	0800f5ed 	.word	0x0800f5ed
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	f103 0110 	add.w	r1, r3, #16
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	795b      	ldrb	r3, [r3, #5]
 800f3d2:	461a      	mov	r2, r3
 800f3d4:	6878      	ldr	r0, [r7, #4]
 800f3d6:	f000 f945 	bl	800f664 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	2202      	movs	r2, #2
 800f3de:	761a      	strb	r2, [r3, #24]
      break;
 800f3e0:	e13b      	b.n	800f65a <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	795b      	ldrb	r3, [r3, #5]
 800f3e6:	4619      	mov	r1, r3
 800f3e8:	6878      	ldr	r0, [r7, #4]
 800f3ea:	f003 f90d 	bl	8012608 <USBH_LL_GetURBState>
 800f3ee:	4603      	mov	r3, r0
 800f3f0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800f3f2:	7bbb      	ldrb	r3, [r7, #14]
 800f3f4:	2b01      	cmp	r3, #1
 800f3f6:	d11e      	bne.n	800f436 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	7c1b      	ldrb	r3, [r3, #16]
 800f3fc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f400:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	8adb      	ldrh	r3, [r3, #22]
 800f406:	2b00      	cmp	r3, #0
 800f408:	d00a      	beq.n	800f420 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800f40a:	7b7b      	ldrb	r3, [r7, #13]
 800f40c:	2b80      	cmp	r3, #128	; 0x80
 800f40e:	d103      	bne.n	800f418 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	2203      	movs	r2, #3
 800f414:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800f416:	e117      	b.n	800f648 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	2205      	movs	r2, #5
 800f41c:	761a      	strb	r2, [r3, #24]
      break;
 800f41e:	e113      	b.n	800f648 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 800f420:	7b7b      	ldrb	r3, [r7, #13]
 800f422:	2b80      	cmp	r3, #128	; 0x80
 800f424:	d103      	bne.n	800f42e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	2209      	movs	r2, #9
 800f42a:	761a      	strb	r2, [r3, #24]
      break;
 800f42c:	e10c      	b.n	800f648 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	2207      	movs	r2, #7
 800f432:	761a      	strb	r2, [r3, #24]
      break;
 800f434:	e108      	b.n	800f648 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800f436:	7bbb      	ldrb	r3, [r7, #14]
 800f438:	2b04      	cmp	r3, #4
 800f43a:	d003      	beq.n	800f444 <USBH_HandleControl+0xcc>
 800f43c:	7bbb      	ldrb	r3, [r7, #14]
 800f43e:	2b02      	cmp	r3, #2
 800f440:	f040 8102 	bne.w	800f648 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	220b      	movs	r2, #11
 800f448:	761a      	strb	r2, [r3, #24]
      break;
 800f44a:	e0fd      	b.n	800f648 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f452:	b29a      	uxth	r2, r3
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	6899      	ldr	r1, [r3, #8]
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	899a      	ldrh	r2, [r3, #12]
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	791b      	ldrb	r3, [r3, #4]
 800f464:	6878      	ldr	r0, [r7, #4]
 800f466:	f000 f93c 	bl	800f6e2 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	2204      	movs	r2, #4
 800f46e:	761a      	strb	r2, [r3, #24]
      break;
 800f470:	e0f3      	b.n	800f65a <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	791b      	ldrb	r3, [r3, #4]
 800f476:	4619      	mov	r1, r3
 800f478:	6878      	ldr	r0, [r7, #4]
 800f47a:	f003 f8c5 	bl	8012608 <USBH_LL_GetURBState>
 800f47e:	4603      	mov	r3, r0
 800f480:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800f482:	7bbb      	ldrb	r3, [r7, #14]
 800f484:	2b01      	cmp	r3, #1
 800f486:	d102      	bne.n	800f48e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	2209      	movs	r2, #9
 800f48c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800f48e:	7bbb      	ldrb	r3, [r7, #14]
 800f490:	2b05      	cmp	r3, #5
 800f492:	d102      	bne.n	800f49a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800f494:	2303      	movs	r3, #3
 800f496:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800f498:	e0d8      	b.n	800f64c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800f49a:	7bbb      	ldrb	r3, [r7, #14]
 800f49c:	2b04      	cmp	r3, #4
 800f49e:	f040 80d5 	bne.w	800f64c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	220b      	movs	r2, #11
 800f4a6:	761a      	strb	r2, [r3, #24]
      break;
 800f4a8:	e0d0      	b.n	800f64c <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	6899      	ldr	r1, [r3, #8]
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	899a      	ldrh	r2, [r3, #12]
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	7958      	ldrb	r0, [r3, #5]
 800f4b6:	2301      	movs	r3, #1
 800f4b8:	9300      	str	r3, [sp, #0]
 800f4ba:	4603      	mov	r3, r0
 800f4bc:	6878      	ldr	r0, [r7, #4]
 800f4be:	f000 f8eb 	bl	800f698 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f4c8:	b29a      	uxth	r2, r3
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	2206      	movs	r2, #6
 800f4d2:	761a      	strb	r2, [r3, #24]
      break;
 800f4d4:	e0c1      	b.n	800f65a <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	795b      	ldrb	r3, [r3, #5]
 800f4da:	4619      	mov	r1, r3
 800f4dc:	6878      	ldr	r0, [r7, #4]
 800f4de:	f003 f893 	bl	8012608 <USBH_LL_GetURBState>
 800f4e2:	4603      	mov	r3, r0
 800f4e4:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800f4e6:	7bbb      	ldrb	r3, [r7, #14]
 800f4e8:	2b01      	cmp	r3, #1
 800f4ea:	d103      	bne.n	800f4f4 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	2207      	movs	r2, #7
 800f4f0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800f4f2:	e0ad      	b.n	800f650 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 800f4f4:	7bbb      	ldrb	r3, [r7, #14]
 800f4f6:	2b05      	cmp	r3, #5
 800f4f8:	d105      	bne.n	800f506 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	220c      	movs	r2, #12
 800f4fe:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800f500:	2303      	movs	r3, #3
 800f502:	73fb      	strb	r3, [r7, #15]
      break;
 800f504:	e0a4      	b.n	800f650 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 800f506:	7bbb      	ldrb	r3, [r7, #14]
 800f508:	2b02      	cmp	r3, #2
 800f50a:	d103      	bne.n	800f514 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	2205      	movs	r2, #5
 800f510:	761a      	strb	r2, [r3, #24]
      break;
 800f512:	e09d      	b.n	800f650 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 800f514:	7bbb      	ldrb	r3, [r7, #14]
 800f516:	2b04      	cmp	r3, #4
 800f518:	f040 809a 	bne.w	800f650 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	220b      	movs	r2, #11
 800f520:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800f522:	2302      	movs	r3, #2
 800f524:	73fb      	strb	r3, [r7, #15]
      break;
 800f526:	e093      	b.n	800f650 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	791b      	ldrb	r3, [r3, #4]
 800f52c:	2200      	movs	r2, #0
 800f52e:	2100      	movs	r1, #0
 800f530:	6878      	ldr	r0, [r7, #4]
 800f532:	f000 f8d6 	bl	800f6e2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f53c:	b29a      	uxth	r2, r3
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	2208      	movs	r2, #8
 800f546:	761a      	strb	r2, [r3, #24]

      break;
 800f548:	e087      	b.n	800f65a <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	791b      	ldrb	r3, [r3, #4]
 800f54e:	4619      	mov	r1, r3
 800f550:	6878      	ldr	r0, [r7, #4]
 800f552:	f003 f859 	bl	8012608 <USBH_LL_GetURBState>
 800f556:	4603      	mov	r3, r0
 800f558:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800f55a:	7bbb      	ldrb	r3, [r7, #14]
 800f55c:	2b01      	cmp	r3, #1
 800f55e:	d105      	bne.n	800f56c <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	220d      	movs	r2, #13
 800f564:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800f566:	2300      	movs	r3, #0
 800f568:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800f56a:	e073      	b.n	800f654 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 800f56c:	7bbb      	ldrb	r3, [r7, #14]
 800f56e:	2b04      	cmp	r3, #4
 800f570:	d103      	bne.n	800f57a <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	220b      	movs	r2, #11
 800f576:	761a      	strb	r2, [r3, #24]
      break;
 800f578:	e06c      	b.n	800f654 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 800f57a:	7bbb      	ldrb	r3, [r7, #14]
 800f57c:	2b05      	cmp	r3, #5
 800f57e:	d169      	bne.n	800f654 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 800f580:	2303      	movs	r3, #3
 800f582:	73fb      	strb	r3, [r7, #15]
      break;
 800f584:	e066      	b.n	800f654 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	795a      	ldrb	r2, [r3, #5]
 800f58a:	2301      	movs	r3, #1
 800f58c:	9300      	str	r3, [sp, #0]
 800f58e:	4613      	mov	r3, r2
 800f590:	2200      	movs	r2, #0
 800f592:	2100      	movs	r1, #0
 800f594:	6878      	ldr	r0, [r7, #4]
 800f596:	f000 f87f 	bl	800f698 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f5a0:	b29a      	uxth	r2, r3
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	220a      	movs	r2, #10
 800f5aa:	761a      	strb	r2, [r3, #24]
      break;
 800f5ac:	e055      	b.n	800f65a <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	795b      	ldrb	r3, [r3, #5]
 800f5b2:	4619      	mov	r1, r3
 800f5b4:	6878      	ldr	r0, [r7, #4]
 800f5b6:	f003 f827 	bl	8012608 <USBH_LL_GetURBState>
 800f5ba:	4603      	mov	r3, r0
 800f5bc:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800f5be:	7bbb      	ldrb	r3, [r7, #14]
 800f5c0:	2b01      	cmp	r3, #1
 800f5c2:	d105      	bne.n	800f5d0 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 800f5c4:	2300      	movs	r3, #0
 800f5c6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	220d      	movs	r2, #13
 800f5cc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800f5ce:	e043      	b.n	800f658 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 800f5d0:	7bbb      	ldrb	r3, [r7, #14]
 800f5d2:	2b02      	cmp	r3, #2
 800f5d4:	d103      	bne.n	800f5de <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	2209      	movs	r2, #9
 800f5da:	761a      	strb	r2, [r3, #24]
      break;
 800f5dc:	e03c      	b.n	800f658 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 800f5de:	7bbb      	ldrb	r3, [r7, #14]
 800f5e0:	2b04      	cmp	r3, #4
 800f5e2:	d139      	bne.n	800f658 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	220b      	movs	r2, #11
 800f5e8:	761a      	strb	r2, [r3, #24]
      break;
 800f5ea:	e035      	b.n	800f658 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	7e5b      	ldrb	r3, [r3, #25]
 800f5f0:	3301      	adds	r3, #1
 800f5f2:	b2da      	uxtb	r2, r3
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	765a      	strb	r2, [r3, #25]
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	7e5b      	ldrb	r3, [r3, #25]
 800f5fc:	2b02      	cmp	r3, #2
 800f5fe:	d806      	bhi.n	800f60e <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	2201      	movs	r2, #1
 800f604:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	2201      	movs	r2, #1
 800f60a:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800f60c:	e025      	b.n	800f65a <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f614:	2106      	movs	r1, #6
 800f616:	6878      	ldr	r0, [r7, #4]
 800f618:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	2200      	movs	r2, #0
 800f61e:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	795b      	ldrb	r3, [r3, #5]
 800f624:	4619      	mov	r1, r3
 800f626:	6878      	ldr	r0, [r7, #4]
 800f628:	f000 f90c 	bl	800f844 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	791b      	ldrb	r3, [r3, #4]
 800f630:	4619      	mov	r1, r3
 800f632:	6878      	ldr	r0, [r7, #4]
 800f634:	f000 f906 	bl	800f844 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	2200      	movs	r2, #0
 800f63c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800f63e:	2302      	movs	r3, #2
 800f640:	73fb      	strb	r3, [r7, #15]
      break;
 800f642:	e00a      	b.n	800f65a <USBH_HandleControl+0x2e2>

    default:
      break;
 800f644:	bf00      	nop
 800f646:	e008      	b.n	800f65a <USBH_HandleControl+0x2e2>
      break;
 800f648:	bf00      	nop
 800f64a:	e006      	b.n	800f65a <USBH_HandleControl+0x2e2>
      break;
 800f64c:	bf00      	nop
 800f64e:	e004      	b.n	800f65a <USBH_HandleControl+0x2e2>
      break;
 800f650:	bf00      	nop
 800f652:	e002      	b.n	800f65a <USBH_HandleControl+0x2e2>
      break;
 800f654:	bf00      	nop
 800f656:	e000      	b.n	800f65a <USBH_HandleControl+0x2e2>
      break;
 800f658:	bf00      	nop
  }

  return status;
 800f65a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f65c:	4618      	mov	r0, r3
 800f65e:	3710      	adds	r7, #16
 800f660:	46bd      	mov	sp, r7
 800f662:	bd80      	pop	{r7, pc}

0800f664 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800f664:	b580      	push	{r7, lr}
 800f666:	b088      	sub	sp, #32
 800f668:	af04      	add	r7, sp, #16
 800f66a:	60f8      	str	r0, [r7, #12]
 800f66c:	60b9      	str	r1, [r7, #8]
 800f66e:	4613      	mov	r3, r2
 800f670:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800f672:	79f9      	ldrb	r1, [r7, #7]
 800f674:	2300      	movs	r3, #0
 800f676:	9303      	str	r3, [sp, #12]
 800f678:	2308      	movs	r3, #8
 800f67a:	9302      	str	r3, [sp, #8]
 800f67c:	68bb      	ldr	r3, [r7, #8]
 800f67e:	9301      	str	r3, [sp, #4]
 800f680:	2300      	movs	r3, #0
 800f682:	9300      	str	r3, [sp, #0]
 800f684:	2300      	movs	r3, #0
 800f686:	2200      	movs	r2, #0
 800f688:	68f8      	ldr	r0, [r7, #12]
 800f68a:	f002 ff8c 	bl	80125a6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800f68e:	2300      	movs	r3, #0
}
 800f690:	4618      	mov	r0, r3
 800f692:	3710      	adds	r7, #16
 800f694:	46bd      	mov	sp, r7
 800f696:	bd80      	pop	{r7, pc}

0800f698 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800f698:	b580      	push	{r7, lr}
 800f69a:	b088      	sub	sp, #32
 800f69c:	af04      	add	r7, sp, #16
 800f69e:	60f8      	str	r0, [r7, #12]
 800f6a0:	60b9      	str	r1, [r7, #8]
 800f6a2:	4611      	mov	r1, r2
 800f6a4:	461a      	mov	r2, r3
 800f6a6:	460b      	mov	r3, r1
 800f6a8:	80fb      	strh	r3, [r7, #6]
 800f6aa:	4613      	mov	r3, r2
 800f6ac:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d001      	beq.n	800f6bc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800f6b8:	2300      	movs	r3, #0
 800f6ba:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800f6bc:	7979      	ldrb	r1, [r7, #5]
 800f6be:	7e3b      	ldrb	r3, [r7, #24]
 800f6c0:	9303      	str	r3, [sp, #12]
 800f6c2:	88fb      	ldrh	r3, [r7, #6]
 800f6c4:	9302      	str	r3, [sp, #8]
 800f6c6:	68bb      	ldr	r3, [r7, #8]
 800f6c8:	9301      	str	r3, [sp, #4]
 800f6ca:	2301      	movs	r3, #1
 800f6cc:	9300      	str	r3, [sp, #0]
 800f6ce:	2300      	movs	r3, #0
 800f6d0:	2200      	movs	r2, #0
 800f6d2:	68f8      	ldr	r0, [r7, #12]
 800f6d4:	f002 ff67 	bl	80125a6 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800f6d8:	2300      	movs	r3, #0
}
 800f6da:	4618      	mov	r0, r3
 800f6dc:	3710      	adds	r7, #16
 800f6de:	46bd      	mov	sp, r7
 800f6e0:	bd80      	pop	{r7, pc}

0800f6e2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800f6e2:	b580      	push	{r7, lr}
 800f6e4:	b088      	sub	sp, #32
 800f6e6:	af04      	add	r7, sp, #16
 800f6e8:	60f8      	str	r0, [r7, #12]
 800f6ea:	60b9      	str	r1, [r7, #8]
 800f6ec:	4611      	mov	r1, r2
 800f6ee:	461a      	mov	r2, r3
 800f6f0:	460b      	mov	r3, r1
 800f6f2:	80fb      	strh	r3, [r7, #6]
 800f6f4:	4613      	mov	r3, r2
 800f6f6:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800f6f8:	7979      	ldrb	r1, [r7, #5]
 800f6fa:	2300      	movs	r3, #0
 800f6fc:	9303      	str	r3, [sp, #12]
 800f6fe:	88fb      	ldrh	r3, [r7, #6]
 800f700:	9302      	str	r3, [sp, #8]
 800f702:	68bb      	ldr	r3, [r7, #8]
 800f704:	9301      	str	r3, [sp, #4]
 800f706:	2301      	movs	r3, #1
 800f708:	9300      	str	r3, [sp, #0]
 800f70a:	2300      	movs	r3, #0
 800f70c:	2201      	movs	r2, #1
 800f70e:	68f8      	ldr	r0, [r7, #12]
 800f710:	f002 ff49 	bl	80125a6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800f714:	2300      	movs	r3, #0

}
 800f716:	4618      	mov	r0, r3
 800f718:	3710      	adds	r7, #16
 800f71a:	46bd      	mov	sp, r7
 800f71c:	bd80      	pop	{r7, pc}

0800f71e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800f71e:	b580      	push	{r7, lr}
 800f720:	b088      	sub	sp, #32
 800f722:	af04      	add	r7, sp, #16
 800f724:	60f8      	str	r0, [r7, #12]
 800f726:	60b9      	str	r1, [r7, #8]
 800f728:	4611      	mov	r1, r2
 800f72a:	461a      	mov	r2, r3
 800f72c:	460b      	mov	r3, r1
 800f72e:	80fb      	strh	r3, [r7, #6]
 800f730:	4613      	mov	r3, r2
 800f732:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d001      	beq.n	800f742 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800f73e:	2300      	movs	r3, #0
 800f740:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800f742:	7979      	ldrb	r1, [r7, #5]
 800f744:	7e3b      	ldrb	r3, [r7, #24]
 800f746:	9303      	str	r3, [sp, #12]
 800f748:	88fb      	ldrh	r3, [r7, #6]
 800f74a:	9302      	str	r3, [sp, #8]
 800f74c:	68bb      	ldr	r3, [r7, #8]
 800f74e:	9301      	str	r3, [sp, #4]
 800f750:	2301      	movs	r3, #1
 800f752:	9300      	str	r3, [sp, #0]
 800f754:	2302      	movs	r3, #2
 800f756:	2200      	movs	r2, #0
 800f758:	68f8      	ldr	r0, [r7, #12]
 800f75a:	f002 ff24 	bl	80125a6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800f75e:	2300      	movs	r3, #0
}
 800f760:	4618      	mov	r0, r3
 800f762:	3710      	adds	r7, #16
 800f764:	46bd      	mov	sp, r7
 800f766:	bd80      	pop	{r7, pc}

0800f768 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800f768:	b580      	push	{r7, lr}
 800f76a:	b088      	sub	sp, #32
 800f76c:	af04      	add	r7, sp, #16
 800f76e:	60f8      	str	r0, [r7, #12]
 800f770:	60b9      	str	r1, [r7, #8]
 800f772:	4611      	mov	r1, r2
 800f774:	461a      	mov	r2, r3
 800f776:	460b      	mov	r3, r1
 800f778:	80fb      	strh	r3, [r7, #6]
 800f77a:	4613      	mov	r3, r2
 800f77c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800f77e:	7979      	ldrb	r1, [r7, #5]
 800f780:	2300      	movs	r3, #0
 800f782:	9303      	str	r3, [sp, #12]
 800f784:	88fb      	ldrh	r3, [r7, #6]
 800f786:	9302      	str	r3, [sp, #8]
 800f788:	68bb      	ldr	r3, [r7, #8]
 800f78a:	9301      	str	r3, [sp, #4]
 800f78c:	2301      	movs	r3, #1
 800f78e:	9300      	str	r3, [sp, #0]
 800f790:	2302      	movs	r3, #2
 800f792:	2201      	movs	r2, #1
 800f794:	68f8      	ldr	r0, [r7, #12]
 800f796:	f002 ff06 	bl	80125a6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800f79a:	2300      	movs	r3, #0
}
 800f79c:	4618      	mov	r0, r3
 800f79e:	3710      	adds	r7, #16
 800f7a0:	46bd      	mov	sp, r7
 800f7a2:	bd80      	pop	{r7, pc}

0800f7a4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800f7a4:	b580      	push	{r7, lr}
 800f7a6:	b086      	sub	sp, #24
 800f7a8:	af04      	add	r7, sp, #16
 800f7aa:	6078      	str	r0, [r7, #4]
 800f7ac:	4608      	mov	r0, r1
 800f7ae:	4611      	mov	r1, r2
 800f7b0:	461a      	mov	r2, r3
 800f7b2:	4603      	mov	r3, r0
 800f7b4:	70fb      	strb	r3, [r7, #3]
 800f7b6:	460b      	mov	r3, r1
 800f7b8:	70bb      	strb	r3, [r7, #2]
 800f7ba:	4613      	mov	r3, r2
 800f7bc:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800f7be:	7878      	ldrb	r0, [r7, #1]
 800f7c0:	78ba      	ldrb	r2, [r7, #2]
 800f7c2:	78f9      	ldrb	r1, [r7, #3]
 800f7c4:	8b3b      	ldrh	r3, [r7, #24]
 800f7c6:	9302      	str	r3, [sp, #8]
 800f7c8:	7d3b      	ldrb	r3, [r7, #20]
 800f7ca:	9301      	str	r3, [sp, #4]
 800f7cc:	7c3b      	ldrb	r3, [r7, #16]
 800f7ce:	9300      	str	r3, [sp, #0]
 800f7d0:	4603      	mov	r3, r0
 800f7d2:	6878      	ldr	r0, [r7, #4]
 800f7d4:	f002 fe99 	bl	801250a <USBH_LL_OpenPipe>

  return USBH_OK;
 800f7d8:	2300      	movs	r3, #0
}
 800f7da:	4618      	mov	r0, r3
 800f7dc:	3708      	adds	r7, #8
 800f7de:	46bd      	mov	sp, r7
 800f7e0:	bd80      	pop	{r7, pc}

0800f7e2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800f7e2:	b580      	push	{r7, lr}
 800f7e4:	b082      	sub	sp, #8
 800f7e6:	af00      	add	r7, sp, #0
 800f7e8:	6078      	str	r0, [r7, #4]
 800f7ea:	460b      	mov	r3, r1
 800f7ec:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800f7ee:	78fb      	ldrb	r3, [r7, #3]
 800f7f0:	4619      	mov	r1, r3
 800f7f2:	6878      	ldr	r0, [r7, #4]
 800f7f4:	f002 feb8 	bl	8012568 <USBH_LL_ClosePipe>

  return USBH_OK;
 800f7f8:	2300      	movs	r3, #0
}
 800f7fa:	4618      	mov	r0, r3
 800f7fc:	3708      	adds	r7, #8
 800f7fe:	46bd      	mov	sp, r7
 800f800:	bd80      	pop	{r7, pc}

0800f802 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800f802:	b580      	push	{r7, lr}
 800f804:	b084      	sub	sp, #16
 800f806:	af00      	add	r7, sp, #0
 800f808:	6078      	str	r0, [r7, #4]
 800f80a:	460b      	mov	r3, r1
 800f80c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800f80e:	6878      	ldr	r0, [r7, #4]
 800f810:	f000 f836 	bl	800f880 <USBH_GetFreePipe>
 800f814:	4603      	mov	r3, r0
 800f816:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800f818:	89fb      	ldrh	r3, [r7, #14]
 800f81a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f81e:	4293      	cmp	r3, r2
 800f820:	d00a      	beq.n	800f838 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800f822:	78fa      	ldrb	r2, [r7, #3]
 800f824:	89fb      	ldrh	r3, [r7, #14]
 800f826:	f003 030f 	and.w	r3, r3, #15
 800f82a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f82e:	6879      	ldr	r1, [r7, #4]
 800f830:	33e0      	adds	r3, #224	; 0xe0
 800f832:	009b      	lsls	r3, r3, #2
 800f834:	440b      	add	r3, r1
 800f836:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800f838:	89fb      	ldrh	r3, [r7, #14]
 800f83a:	b2db      	uxtb	r3, r3
}
 800f83c:	4618      	mov	r0, r3
 800f83e:	3710      	adds	r7, #16
 800f840:	46bd      	mov	sp, r7
 800f842:	bd80      	pop	{r7, pc}

0800f844 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800f844:	b480      	push	{r7}
 800f846:	b083      	sub	sp, #12
 800f848:	af00      	add	r7, sp, #0
 800f84a:	6078      	str	r0, [r7, #4]
 800f84c:	460b      	mov	r3, r1
 800f84e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800f850:	78fb      	ldrb	r3, [r7, #3]
 800f852:	2b0a      	cmp	r3, #10
 800f854:	d80d      	bhi.n	800f872 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800f856:	78fb      	ldrb	r3, [r7, #3]
 800f858:	687a      	ldr	r2, [r7, #4]
 800f85a:	33e0      	adds	r3, #224	; 0xe0
 800f85c:	009b      	lsls	r3, r3, #2
 800f85e:	4413      	add	r3, r2
 800f860:	685a      	ldr	r2, [r3, #4]
 800f862:	78fb      	ldrb	r3, [r7, #3]
 800f864:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800f868:	6879      	ldr	r1, [r7, #4]
 800f86a:	33e0      	adds	r3, #224	; 0xe0
 800f86c:	009b      	lsls	r3, r3, #2
 800f86e:	440b      	add	r3, r1
 800f870:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800f872:	2300      	movs	r3, #0
}
 800f874:	4618      	mov	r0, r3
 800f876:	370c      	adds	r7, #12
 800f878:	46bd      	mov	sp, r7
 800f87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f87e:	4770      	bx	lr

0800f880 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800f880:	b480      	push	{r7}
 800f882:	b085      	sub	sp, #20
 800f884:	af00      	add	r7, sp, #0
 800f886:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800f888:	2300      	movs	r3, #0
 800f88a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800f88c:	2300      	movs	r3, #0
 800f88e:	73fb      	strb	r3, [r7, #15]
 800f890:	e00f      	b.n	800f8b2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800f892:	7bfb      	ldrb	r3, [r7, #15]
 800f894:	687a      	ldr	r2, [r7, #4]
 800f896:	33e0      	adds	r3, #224	; 0xe0
 800f898:	009b      	lsls	r3, r3, #2
 800f89a:	4413      	add	r3, r2
 800f89c:	685b      	ldr	r3, [r3, #4]
 800f89e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d102      	bne.n	800f8ac <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800f8a6:	7bfb      	ldrb	r3, [r7, #15]
 800f8a8:	b29b      	uxth	r3, r3
 800f8aa:	e007      	b.n	800f8bc <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800f8ac:	7bfb      	ldrb	r3, [r7, #15]
 800f8ae:	3301      	adds	r3, #1
 800f8b0:	73fb      	strb	r3, [r7, #15]
 800f8b2:	7bfb      	ldrb	r3, [r7, #15]
 800f8b4:	2b0a      	cmp	r3, #10
 800f8b6:	d9ec      	bls.n	800f892 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800f8b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800f8bc:	4618      	mov	r0, r3
 800f8be:	3714      	adds	r7, #20
 800f8c0:	46bd      	mov	sp, r7
 800f8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8c6:	4770      	bx	lr

0800f8c8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800f8c8:	b580      	push	{r7, lr}
 800f8ca:	b084      	sub	sp, #16
 800f8cc:	af00      	add	r7, sp, #0
 800f8ce:	4603      	mov	r3, r0
 800f8d0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800f8d2:	79fb      	ldrb	r3, [r7, #7]
 800f8d4:	4a08      	ldr	r2, [pc, #32]	; (800f8f8 <disk_status+0x30>)
 800f8d6:	009b      	lsls	r3, r3, #2
 800f8d8:	4413      	add	r3, r2
 800f8da:	685b      	ldr	r3, [r3, #4]
 800f8dc:	685b      	ldr	r3, [r3, #4]
 800f8de:	79fa      	ldrb	r2, [r7, #7]
 800f8e0:	4905      	ldr	r1, [pc, #20]	; (800f8f8 <disk_status+0x30>)
 800f8e2:	440a      	add	r2, r1
 800f8e4:	7a12      	ldrb	r2, [r2, #8]
 800f8e6:	4610      	mov	r0, r2
 800f8e8:	4798      	blx	r3
 800f8ea:	4603      	mov	r3, r0
 800f8ec:	73fb      	strb	r3, [r7, #15]
  return stat;
 800f8ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8f0:	4618      	mov	r0, r3
 800f8f2:	3710      	adds	r7, #16
 800f8f4:	46bd      	mov	sp, r7
 800f8f6:	bd80      	pop	{r7, pc}
 800f8f8:	24000310 	.word	0x24000310

0800f8fc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800f8fc:	b580      	push	{r7, lr}
 800f8fe:	b084      	sub	sp, #16
 800f900:	af00      	add	r7, sp, #0
 800f902:	4603      	mov	r3, r0
 800f904:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800f906:	2300      	movs	r3, #0
 800f908:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800f90a:	79fb      	ldrb	r3, [r7, #7]
 800f90c:	4a0d      	ldr	r2, [pc, #52]	; (800f944 <disk_initialize+0x48>)
 800f90e:	5cd3      	ldrb	r3, [r2, r3]
 800f910:	2b00      	cmp	r3, #0
 800f912:	d111      	bne.n	800f938 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800f914:	79fb      	ldrb	r3, [r7, #7]
 800f916:	4a0b      	ldr	r2, [pc, #44]	; (800f944 <disk_initialize+0x48>)
 800f918:	2101      	movs	r1, #1
 800f91a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800f91c:	79fb      	ldrb	r3, [r7, #7]
 800f91e:	4a09      	ldr	r2, [pc, #36]	; (800f944 <disk_initialize+0x48>)
 800f920:	009b      	lsls	r3, r3, #2
 800f922:	4413      	add	r3, r2
 800f924:	685b      	ldr	r3, [r3, #4]
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	79fa      	ldrb	r2, [r7, #7]
 800f92a:	4906      	ldr	r1, [pc, #24]	; (800f944 <disk_initialize+0x48>)
 800f92c:	440a      	add	r2, r1
 800f92e:	7a12      	ldrb	r2, [r2, #8]
 800f930:	4610      	mov	r0, r2
 800f932:	4798      	blx	r3
 800f934:	4603      	mov	r3, r0
 800f936:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800f938:	7bfb      	ldrb	r3, [r7, #15]
}
 800f93a:	4618      	mov	r0, r3
 800f93c:	3710      	adds	r7, #16
 800f93e:	46bd      	mov	sp, r7
 800f940:	bd80      	pop	{r7, pc}
 800f942:	bf00      	nop
 800f944:	24000310 	.word	0x24000310

0800f948 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800f948:	b590      	push	{r4, r7, lr}
 800f94a:	b087      	sub	sp, #28
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	60b9      	str	r1, [r7, #8]
 800f950:	607a      	str	r2, [r7, #4]
 800f952:	603b      	str	r3, [r7, #0]
 800f954:	4603      	mov	r3, r0
 800f956:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800f958:	7bfb      	ldrb	r3, [r7, #15]
 800f95a:	4a0a      	ldr	r2, [pc, #40]	; (800f984 <disk_read+0x3c>)
 800f95c:	009b      	lsls	r3, r3, #2
 800f95e:	4413      	add	r3, r2
 800f960:	685b      	ldr	r3, [r3, #4]
 800f962:	689c      	ldr	r4, [r3, #8]
 800f964:	7bfb      	ldrb	r3, [r7, #15]
 800f966:	4a07      	ldr	r2, [pc, #28]	; (800f984 <disk_read+0x3c>)
 800f968:	4413      	add	r3, r2
 800f96a:	7a18      	ldrb	r0, [r3, #8]
 800f96c:	683b      	ldr	r3, [r7, #0]
 800f96e:	687a      	ldr	r2, [r7, #4]
 800f970:	68b9      	ldr	r1, [r7, #8]
 800f972:	47a0      	blx	r4
 800f974:	4603      	mov	r3, r0
 800f976:	75fb      	strb	r3, [r7, #23]
  return res;
 800f978:	7dfb      	ldrb	r3, [r7, #23]
}
 800f97a:	4618      	mov	r0, r3
 800f97c:	371c      	adds	r7, #28
 800f97e:	46bd      	mov	sp, r7
 800f980:	bd90      	pop	{r4, r7, pc}
 800f982:	bf00      	nop
 800f984:	24000310 	.word	0x24000310

0800f988 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800f988:	b590      	push	{r4, r7, lr}
 800f98a:	b087      	sub	sp, #28
 800f98c:	af00      	add	r7, sp, #0
 800f98e:	60b9      	str	r1, [r7, #8]
 800f990:	607a      	str	r2, [r7, #4]
 800f992:	603b      	str	r3, [r7, #0]
 800f994:	4603      	mov	r3, r0
 800f996:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800f998:	7bfb      	ldrb	r3, [r7, #15]
 800f99a:	4a0a      	ldr	r2, [pc, #40]	; (800f9c4 <disk_write+0x3c>)
 800f99c:	009b      	lsls	r3, r3, #2
 800f99e:	4413      	add	r3, r2
 800f9a0:	685b      	ldr	r3, [r3, #4]
 800f9a2:	68dc      	ldr	r4, [r3, #12]
 800f9a4:	7bfb      	ldrb	r3, [r7, #15]
 800f9a6:	4a07      	ldr	r2, [pc, #28]	; (800f9c4 <disk_write+0x3c>)
 800f9a8:	4413      	add	r3, r2
 800f9aa:	7a18      	ldrb	r0, [r3, #8]
 800f9ac:	683b      	ldr	r3, [r7, #0]
 800f9ae:	687a      	ldr	r2, [r7, #4]
 800f9b0:	68b9      	ldr	r1, [r7, #8]
 800f9b2:	47a0      	blx	r4
 800f9b4:	4603      	mov	r3, r0
 800f9b6:	75fb      	strb	r3, [r7, #23]
  return res;
 800f9b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800f9ba:	4618      	mov	r0, r3
 800f9bc:	371c      	adds	r7, #28
 800f9be:	46bd      	mov	sp, r7
 800f9c0:	bd90      	pop	{r4, r7, pc}
 800f9c2:	bf00      	nop
 800f9c4:	24000310 	.word	0x24000310

0800f9c8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800f9c8:	b580      	push	{r7, lr}
 800f9ca:	b084      	sub	sp, #16
 800f9cc:	af00      	add	r7, sp, #0
 800f9ce:	4603      	mov	r3, r0
 800f9d0:	603a      	str	r2, [r7, #0]
 800f9d2:	71fb      	strb	r3, [r7, #7]
 800f9d4:	460b      	mov	r3, r1
 800f9d6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800f9d8:	79fb      	ldrb	r3, [r7, #7]
 800f9da:	4a09      	ldr	r2, [pc, #36]	; (800fa00 <disk_ioctl+0x38>)
 800f9dc:	009b      	lsls	r3, r3, #2
 800f9de:	4413      	add	r3, r2
 800f9e0:	685b      	ldr	r3, [r3, #4]
 800f9e2:	691b      	ldr	r3, [r3, #16]
 800f9e4:	79fa      	ldrb	r2, [r7, #7]
 800f9e6:	4906      	ldr	r1, [pc, #24]	; (800fa00 <disk_ioctl+0x38>)
 800f9e8:	440a      	add	r2, r1
 800f9ea:	7a10      	ldrb	r0, [r2, #8]
 800f9ec:	79b9      	ldrb	r1, [r7, #6]
 800f9ee:	683a      	ldr	r2, [r7, #0]
 800f9f0:	4798      	blx	r3
 800f9f2:	4603      	mov	r3, r0
 800f9f4:	73fb      	strb	r3, [r7, #15]
  return res;
 800f9f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9f8:	4618      	mov	r0, r3
 800f9fa:	3710      	adds	r7, #16
 800f9fc:	46bd      	mov	sp, r7
 800f9fe:	bd80      	pop	{r7, pc}
 800fa00:	24000310 	.word	0x24000310

0800fa04 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800fa04:	b480      	push	{r7}
 800fa06:	b085      	sub	sp, #20
 800fa08:	af00      	add	r7, sp, #0
 800fa0a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	3301      	adds	r3, #1
 800fa10:	781b      	ldrb	r3, [r3, #0]
 800fa12:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800fa14:	89fb      	ldrh	r3, [r7, #14]
 800fa16:	021b      	lsls	r3, r3, #8
 800fa18:	b21a      	sxth	r2, r3
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	781b      	ldrb	r3, [r3, #0]
 800fa1e:	b21b      	sxth	r3, r3
 800fa20:	4313      	orrs	r3, r2
 800fa22:	b21b      	sxth	r3, r3
 800fa24:	81fb      	strh	r3, [r7, #14]
	return rv;
 800fa26:	89fb      	ldrh	r3, [r7, #14]
}
 800fa28:	4618      	mov	r0, r3
 800fa2a:	3714      	adds	r7, #20
 800fa2c:	46bd      	mov	sp, r7
 800fa2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa32:	4770      	bx	lr

0800fa34 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800fa34:	b480      	push	{r7}
 800fa36:	b085      	sub	sp, #20
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	3303      	adds	r3, #3
 800fa40:	781b      	ldrb	r3, [r3, #0]
 800fa42:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	021b      	lsls	r3, r3, #8
 800fa48:	687a      	ldr	r2, [r7, #4]
 800fa4a:	3202      	adds	r2, #2
 800fa4c:	7812      	ldrb	r2, [r2, #0]
 800fa4e:	4313      	orrs	r3, r2
 800fa50:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	021b      	lsls	r3, r3, #8
 800fa56:	687a      	ldr	r2, [r7, #4]
 800fa58:	3201      	adds	r2, #1
 800fa5a:	7812      	ldrb	r2, [r2, #0]
 800fa5c:	4313      	orrs	r3, r2
 800fa5e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	021b      	lsls	r3, r3, #8
 800fa64:	687a      	ldr	r2, [r7, #4]
 800fa66:	7812      	ldrb	r2, [r2, #0]
 800fa68:	4313      	orrs	r3, r2
 800fa6a:	60fb      	str	r3, [r7, #12]
	return rv;
 800fa6c:	68fb      	ldr	r3, [r7, #12]
}
 800fa6e:	4618      	mov	r0, r3
 800fa70:	3714      	adds	r7, #20
 800fa72:	46bd      	mov	sp, r7
 800fa74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa78:	4770      	bx	lr

0800fa7a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800fa7a:	b480      	push	{r7}
 800fa7c:	b083      	sub	sp, #12
 800fa7e:	af00      	add	r7, sp, #0
 800fa80:	6078      	str	r0, [r7, #4]
 800fa82:	460b      	mov	r3, r1
 800fa84:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	1c5a      	adds	r2, r3, #1
 800fa8a:	607a      	str	r2, [r7, #4]
 800fa8c:	887a      	ldrh	r2, [r7, #2]
 800fa8e:	b2d2      	uxtb	r2, r2
 800fa90:	701a      	strb	r2, [r3, #0]
 800fa92:	887b      	ldrh	r3, [r7, #2]
 800fa94:	0a1b      	lsrs	r3, r3, #8
 800fa96:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	1c5a      	adds	r2, r3, #1
 800fa9c:	607a      	str	r2, [r7, #4]
 800fa9e:	887a      	ldrh	r2, [r7, #2]
 800faa0:	b2d2      	uxtb	r2, r2
 800faa2:	701a      	strb	r2, [r3, #0]
}
 800faa4:	bf00      	nop
 800faa6:	370c      	adds	r7, #12
 800faa8:	46bd      	mov	sp, r7
 800faaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faae:	4770      	bx	lr

0800fab0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800fab0:	b480      	push	{r7}
 800fab2:	b083      	sub	sp, #12
 800fab4:	af00      	add	r7, sp, #0
 800fab6:	6078      	str	r0, [r7, #4]
 800fab8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	1c5a      	adds	r2, r3, #1
 800fabe:	607a      	str	r2, [r7, #4]
 800fac0:	683a      	ldr	r2, [r7, #0]
 800fac2:	b2d2      	uxtb	r2, r2
 800fac4:	701a      	strb	r2, [r3, #0]
 800fac6:	683b      	ldr	r3, [r7, #0]
 800fac8:	0a1b      	lsrs	r3, r3, #8
 800faca:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	1c5a      	adds	r2, r3, #1
 800fad0:	607a      	str	r2, [r7, #4]
 800fad2:	683a      	ldr	r2, [r7, #0]
 800fad4:	b2d2      	uxtb	r2, r2
 800fad6:	701a      	strb	r2, [r3, #0]
 800fad8:	683b      	ldr	r3, [r7, #0]
 800fada:	0a1b      	lsrs	r3, r3, #8
 800fadc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	1c5a      	adds	r2, r3, #1
 800fae2:	607a      	str	r2, [r7, #4]
 800fae4:	683a      	ldr	r2, [r7, #0]
 800fae6:	b2d2      	uxtb	r2, r2
 800fae8:	701a      	strb	r2, [r3, #0]
 800faea:	683b      	ldr	r3, [r7, #0]
 800faec:	0a1b      	lsrs	r3, r3, #8
 800faee:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	1c5a      	adds	r2, r3, #1
 800faf4:	607a      	str	r2, [r7, #4]
 800faf6:	683a      	ldr	r2, [r7, #0]
 800faf8:	b2d2      	uxtb	r2, r2
 800fafa:	701a      	strb	r2, [r3, #0]
}
 800fafc:	bf00      	nop
 800fafe:	370c      	adds	r7, #12
 800fb00:	46bd      	mov	sp, r7
 800fb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb06:	4770      	bx	lr

0800fb08 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800fb08:	b480      	push	{r7}
 800fb0a:	b087      	sub	sp, #28
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	60f8      	str	r0, [r7, #12]
 800fb10:	60b9      	str	r1, [r7, #8]
 800fb12:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800fb18:	68bb      	ldr	r3, [r7, #8]
 800fb1a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d00d      	beq.n	800fb3e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800fb22:	693a      	ldr	r2, [r7, #16]
 800fb24:	1c53      	adds	r3, r2, #1
 800fb26:	613b      	str	r3, [r7, #16]
 800fb28:	697b      	ldr	r3, [r7, #20]
 800fb2a:	1c59      	adds	r1, r3, #1
 800fb2c:	6179      	str	r1, [r7, #20]
 800fb2e:	7812      	ldrb	r2, [r2, #0]
 800fb30:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	3b01      	subs	r3, #1
 800fb36:	607b      	str	r3, [r7, #4]
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d1f1      	bne.n	800fb22 <mem_cpy+0x1a>
	}
}
 800fb3e:	bf00      	nop
 800fb40:	371c      	adds	r7, #28
 800fb42:	46bd      	mov	sp, r7
 800fb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb48:	4770      	bx	lr

0800fb4a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800fb4a:	b480      	push	{r7}
 800fb4c:	b087      	sub	sp, #28
 800fb4e:	af00      	add	r7, sp, #0
 800fb50:	60f8      	str	r0, [r7, #12]
 800fb52:	60b9      	str	r1, [r7, #8]
 800fb54:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800fb5a:	697b      	ldr	r3, [r7, #20]
 800fb5c:	1c5a      	adds	r2, r3, #1
 800fb5e:	617a      	str	r2, [r7, #20]
 800fb60:	68ba      	ldr	r2, [r7, #8]
 800fb62:	b2d2      	uxtb	r2, r2
 800fb64:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	3b01      	subs	r3, #1
 800fb6a:	607b      	str	r3, [r7, #4]
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d1f3      	bne.n	800fb5a <mem_set+0x10>
}
 800fb72:	bf00      	nop
 800fb74:	371c      	adds	r7, #28
 800fb76:	46bd      	mov	sp, r7
 800fb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb7c:	4770      	bx	lr

0800fb7e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800fb7e:	b480      	push	{r7}
 800fb80:	b089      	sub	sp, #36	; 0x24
 800fb82:	af00      	add	r7, sp, #0
 800fb84:	60f8      	str	r0, [r7, #12]
 800fb86:	60b9      	str	r1, [r7, #8]
 800fb88:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800fb8a:	68fb      	ldr	r3, [r7, #12]
 800fb8c:	61fb      	str	r3, [r7, #28]
 800fb8e:	68bb      	ldr	r3, [r7, #8]
 800fb90:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800fb92:	2300      	movs	r3, #0
 800fb94:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800fb96:	69fb      	ldr	r3, [r7, #28]
 800fb98:	1c5a      	adds	r2, r3, #1
 800fb9a:	61fa      	str	r2, [r7, #28]
 800fb9c:	781b      	ldrb	r3, [r3, #0]
 800fb9e:	4619      	mov	r1, r3
 800fba0:	69bb      	ldr	r3, [r7, #24]
 800fba2:	1c5a      	adds	r2, r3, #1
 800fba4:	61ba      	str	r2, [r7, #24]
 800fba6:	781b      	ldrb	r3, [r3, #0]
 800fba8:	1acb      	subs	r3, r1, r3
 800fbaa:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	3b01      	subs	r3, #1
 800fbb0:	607b      	str	r3, [r7, #4]
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d002      	beq.n	800fbbe <mem_cmp+0x40>
 800fbb8:	697b      	ldr	r3, [r7, #20]
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d0eb      	beq.n	800fb96 <mem_cmp+0x18>

	return r;
 800fbbe:	697b      	ldr	r3, [r7, #20]
}
 800fbc0:	4618      	mov	r0, r3
 800fbc2:	3724      	adds	r7, #36	; 0x24
 800fbc4:	46bd      	mov	sp, r7
 800fbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbca:	4770      	bx	lr

0800fbcc <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800fbcc:	b480      	push	{r7}
 800fbce:	b083      	sub	sp, #12
 800fbd0:	af00      	add	r7, sp, #0
 800fbd2:	6078      	str	r0, [r7, #4]
 800fbd4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800fbd6:	e002      	b.n	800fbde <chk_chr+0x12>
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	3301      	adds	r3, #1
 800fbdc:	607b      	str	r3, [r7, #4]
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	781b      	ldrb	r3, [r3, #0]
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d005      	beq.n	800fbf2 <chk_chr+0x26>
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	781b      	ldrb	r3, [r3, #0]
 800fbea:	461a      	mov	r2, r3
 800fbec:	683b      	ldr	r3, [r7, #0]
 800fbee:	4293      	cmp	r3, r2
 800fbf0:	d1f2      	bne.n	800fbd8 <chk_chr+0xc>
	return *str;
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	781b      	ldrb	r3, [r3, #0]
}
 800fbf6:	4618      	mov	r0, r3
 800fbf8:	370c      	adds	r7, #12
 800fbfa:	46bd      	mov	sp, r7
 800fbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc00:	4770      	bx	lr
	...

0800fc04 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800fc04:	b480      	push	{r7}
 800fc06:	b085      	sub	sp, #20
 800fc08:	af00      	add	r7, sp, #0
 800fc0a:	6078      	str	r0, [r7, #4]
 800fc0c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800fc0e:	2300      	movs	r3, #0
 800fc10:	60bb      	str	r3, [r7, #8]
 800fc12:	68bb      	ldr	r3, [r7, #8]
 800fc14:	60fb      	str	r3, [r7, #12]
 800fc16:	e029      	b.n	800fc6c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800fc18:	4a27      	ldr	r2, [pc, #156]	; (800fcb8 <chk_lock+0xb4>)
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	011b      	lsls	r3, r3, #4
 800fc1e:	4413      	add	r3, r2
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d01d      	beq.n	800fc62 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800fc26:	4a24      	ldr	r2, [pc, #144]	; (800fcb8 <chk_lock+0xb4>)
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	011b      	lsls	r3, r3, #4
 800fc2c:	4413      	add	r3, r2
 800fc2e:	681a      	ldr	r2, [r3, #0]
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	429a      	cmp	r2, r3
 800fc36:	d116      	bne.n	800fc66 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800fc38:	4a1f      	ldr	r2, [pc, #124]	; (800fcb8 <chk_lock+0xb4>)
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	011b      	lsls	r3, r3, #4
 800fc3e:	4413      	add	r3, r2
 800fc40:	3304      	adds	r3, #4
 800fc42:	681a      	ldr	r2, [r3, #0]
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800fc48:	429a      	cmp	r2, r3
 800fc4a:	d10c      	bne.n	800fc66 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800fc4c:	4a1a      	ldr	r2, [pc, #104]	; (800fcb8 <chk_lock+0xb4>)
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	011b      	lsls	r3, r3, #4
 800fc52:	4413      	add	r3, r2
 800fc54:	3308      	adds	r3, #8
 800fc56:	681a      	ldr	r2, [r3, #0]
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800fc5c:	429a      	cmp	r2, r3
 800fc5e:	d102      	bne.n	800fc66 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800fc60:	e007      	b.n	800fc72 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800fc62:	2301      	movs	r3, #1
 800fc64:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	3301      	adds	r3, #1
 800fc6a:	60fb      	str	r3, [r7, #12]
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	2b01      	cmp	r3, #1
 800fc70:	d9d2      	bls.n	800fc18 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	2b02      	cmp	r3, #2
 800fc76:	d109      	bne.n	800fc8c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800fc78:	68bb      	ldr	r3, [r7, #8]
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d102      	bne.n	800fc84 <chk_lock+0x80>
 800fc7e:	683b      	ldr	r3, [r7, #0]
 800fc80:	2b02      	cmp	r3, #2
 800fc82:	d101      	bne.n	800fc88 <chk_lock+0x84>
 800fc84:	2300      	movs	r3, #0
 800fc86:	e010      	b.n	800fcaa <chk_lock+0xa6>
 800fc88:	2312      	movs	r3, #18
 800fc8a:	e00e      	b.n	800fcaa <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800fc8c:	683b      	ldr	r3, [r7, #0]
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d108      	bne.n	800fca4 <chk_lock+0xa0>
 800fc92:	4a09      	ldr	r2, [pc, #36]	; (800fcb8 <chk_lock+0xb4>)
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	011b      	lsls	r3, r3, #4
 800fc98:	4413      	add	r3, r2
 800fc9a:	330c      	adds	r3, #12
 800fc9c:	881b      	ldrh	r3, [r3, #0]
 800fc9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fca2:	d101      	bne.n	800fca8 <chk_lock+0xa4>
 800fca4:	2310      	movs	r3, #16
 800fca6:	e000      	b.n	800fcaa <chk_lock+0xa6>
 800fca8:	2300      	movs	r3, #0
}
 800fcaa:	4618      	mov	r0, r3
 800fcac:	3714      	adds	r7, #20
 800fcae:	46bd      	mov	sp, r7
 800fcb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcb4:	4770      	bx	lr
 800fcb6:	bf00      	nop
 800fcb8:	240002f0 	.word	0x240002f0

0800fcbc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800fcbc:	b480      	push	{r7}
 800fcbe:	b083      	sub	sp, #12
 800fcc0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800fcc2:	2300      	movs	r3, #0
 800fcc4:	607b      	str	r3, [r7, #4]
 800fcc6:	e002      	b.n	800fcce <enq_lock+0x12>
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	3301      	adds	r3, #1
 800fccc:	607b      	str	r3, [r7, #4]
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	2b01      	cmp	r3, #1
 800fcd2:	d806      	bhi.n	800fce2 <enq_lock+0x26>
 800fcd4:	4a09      	ldr	r2, [pc, #36]	; (800fcfc <enq_lock+0x40>)
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	011b      	lsls	r3, r3, #4
 800fcda:	4413      	add	r3, r2
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d1f2      	bne.n	800fcc8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	2b02      	cmp	r3, #2
 800fce6:	bf14      	ite	ne
 800fce8:	2301      	movne	r3, #1
 800fcea:	2300      	moveq	r3, #0
 800fcec:	b2db      	uxtb	r3, r3
}
 800fcee:	4618      	mov	r0, r3
 800fcf0:	370c      	adds	r7, #12
 800fcf2:	46bd      	mov	sp, r7
 800fcf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcf8:	4770      	bx	lr
 800fcfa:	bf00      	nop
 800fcfc:	240002f0 	.word	0x240002f0

0800fd00 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800fd00:	b480      	push	{r7}
 800fd02:	b085      	sub	sp, #20
 800fd04:	af00      	add	r7, sp, #0
 800fd06:	6078      	str	r0, [r7, #4]
 800fd08:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800fd0a:	2300      	movs	r3, #0
 800fd0c:	60fb      	str	r3, [r7, #12]
 800fd0e:	e01f      	b.n	800fd50 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800fd10:	4a41      	ldr	r2, [pc, #260]	; (800fe18 <inc_lock+0x118>)
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	011b      	lsls	r3, r3, #4
 800fd16:	4413      	add	r3, r2
 800fd18:	681a      	ldr	r2, [r3, #0]
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	429a      	cmp	r2, r3
 800fd20:	d113      	bne.n	800fd4a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800fd22:	4a3d      	ldr	r2, [pc, #244]	; (800fe18 <inc_lock+0x118>)
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	011b      	lsls	r3, r3, #4
 800fd28:	4413      	add	r3, r2
 800fd2a:	3304      	adds	r3, #4
 800fd2c:	681a      	ldr	r2, [r3, #0]
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800fd32:	429a      	cmp	r2, r3
 800fd34:	d109      	bne.n	800fd4a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800fd36:	4a38      	ldr	r2, [pc, #224]	; (800fe18 <inc_lock+0x118>)
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	011b      	lsls	r3, r3, #4
 800fd3c:	4413      	add	r3, r2
 800fd3e:	3308      	adds	r3, #8
 800fd40:	681a      	ldr	r2, [r3, #0]
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800fd46:	429a      	cmp	r2, r3
 800fd48:	d006      	beq.n	800fd58 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	3301      	adds	r3, #1
 800fd4e:	60fb      	str	r3, [r7, #12]
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	2b01      	cmp	r3, #1
 800fd54:	d9dc      	bls.n	800fd10 <inc_lock+0x10>
 800fd56:	e000      	b.n	800fd5a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800fd58:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	2b02      	cmp	r3, #2
 800fd5e:	d132      	bne.n	800fdc6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800fd60:	2300      	movs	r3, #0
 800fd62:	60fb      	str	r3, [r7, #12]
 800fd64:	e002      	b.n	800fd6c <inc_lock+0x6c>
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	3301      	adds	r3, #1
 800fd6a:	60fb      	str	r3, [r7, #12]
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	2b01      	cmp	r3, #1
 800fd70:	d806      	bhi.n	800fd80 <inc_lock+0x80>
 800fd72:	4a29      	ldr	r2, [pc, #164]	; (800fe18 <inc_lock+0x118>)
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	011b      	lsls	r3, r3, #4
 800fd78:	4413      	add	r3, r2
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d1f2      	bne.n	800fd66 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	2b02      	cmp	r3, #2
 800fd84:	d101      	bne.n	800fd8a <inc_lock+0x8a>
 800fd86:	2300      	movs	r3, #0
 800fd88:	e040      	b.n	800fe0c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	681a      	ldr	r2, [r3, #0]
 800fd8e:	4922      	ldr	r1, [pc, #136]	; (800fe18 <inc_lock+0x118>)
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	011b      	lsls	r3, r3, #4
 800fd94:	440b      	add	r3, r1
 800fd96:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	689a      	ldr	r2, [r3, #8]
 800fd9c:	491e      	ldr	r1, [pc, #120]	; (800fe18 <inc_lock+0x118>)
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	011b      	lsls	r3, r3, #4
 800fda2:	440b      	add	r3, r1
 800fda4:	3304      	adds	r3, #4
 800fda6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	695a      	ldr	r2, [r3, #20]
 800fdac:	491a      	ldr	r1, [pc, #104]	; (800fe18 <inc_lock+0x118>)
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	011b      	lsls	r3, r3, #4
 800fdb2:	440b      	add	r3, r1
 800fdb4:	3308      	adds	r3, #8
 800fdb6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800fdb8:	4a17      	ldr	r2, [pc, #92]	; (800fe18 <inc_lock+0x118>)
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	011b      	lsls	r3, r3, #4
 800fdbe:	4413      	add	r3, r2
 800fdc0:	330c      	adds	r3, #12
 800fdc2:	2200      	movs	r2, #0
 800fdc4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800fdc6:	683b      	ldr	r3, [r7, #0]
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d009      	beq.n	800fde0 <inc_lock+0xe0>
 800fdcc:	4a12      	ldr	r2, [pc, #72]	; (800fe18 <inc_lock+0x118>)
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	011b      	lsls	r3, r3, #4
 800fdd2:	4413      	add	r3, r2
 800fdd4:	330c      	adds	r3, #12
 800fdd6:	881b      	ldrh	r3, [r3, #0]
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d001      	beq.n	800fde0 <inc_lock+0xe0>
 800fddc:	2300      	movs	r3, #0
 800fdde:	e015      	b.n	800fe0c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800fde0:	683b      	ldr	r3, [r7, #0]
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d108      	bne.n	800fdf8 <inc_lock+0xf8>
 800fde6:	4a0c      	ldr	r2, [pc, #48]	; (800fe18 <inc_lock+0x118>)
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	011b      	lsls	r3, r3, #4
 800fdec:	4413      	add	r3, r2
 800fdee:	330c      	adds	r3, #12
 800fdf0:	881b      	ldrh	r3, [r3, #0]
 800fdf2:	3301      	adds	r3, #1
 800fdf4:	b29a      	uxth	r2, r3
 800fdf6:	e001      	b.n	800fdfc <inc_lock+0xfc>
 800fdf8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fdfc:	4906      	ldr	r1, [pc, #24]	; (800fe18 <inc_lock+0x118>)
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	011b      	lsls	r3, r3, #4
 800fe02:	440b      	add	r3, r1
 800fe04:	330c      	adds	r3, #12
 800fe06:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	3301      	adds	r3, #1
}
 800fe0c:	4618      	mov	r0, r3
 800fe0e:	3714      	adds	r7, #20
 800fe10:	46bd      	mov	sp, r7
 800fe12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe16:	4770      	bx	lr
 800fe18:	240002f0 	.word	0x240002f0

0800fe1c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800fe1c:	b480      	push	{r7}
 800fe1e:	b085      	sub	sp, #20
 800fe20:	af00      	add	r7, sp, #0
 800fe22:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	3b01      	subs	r3, #1
 800fe28:	607b      	str	r3, [r7, #4]
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	2b01      	cmp	r3, #1
 800fe2e:	d825      	bhi.n	800fe7c <dec_lock+0x60>
		n = Files[i].ctr;
 800fe30:	4a17      	ldr	r2, [pc, #92]	; (800fe90 <dec_lock+0x74>)
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	011b      	lsls	r3, r3, #4
 800fe36:	4413      	add	r3, r2
 800fe38:	330c      	adds	r3, #12
 800fe3a:	881b      	ldrh	r3, [r3, #0]
 800fe3c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800fe3e:	89fb      	ldrh	r3, [r7, #14]
 800fe40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fe44:	d101      	bne.n	800fe4a <dec_lock+0x2e>
 800fe46:	2300      	movs	r3, #0
 800fe48:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800fe4a:	89fb      	ldrh	r3, [r7, #14]
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d002      	beq.n	800fe56 <dec_lock+0x3a>
 800fe50:	89fb      	ldrh	r3, [r7, #14]
 800fe52:	3b01      	subs	r3, #1
 800fe54:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800fe56:	4a0e      	ldr	r2, [pc, #56]	; (800fe90 <dec_lock+0x74>)
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	011b      	lsls	r3, r3, #4
 800fe5c:	4413      	add	r3, r2
 800fe5e:	330c      	adds	r3, #12
 800fe60:	89fa      	ldrh	r2, [r7, #14]
 800fe62:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800fe64:	89fb      	ldrh	r3, [r7, #14]
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d105      	bne.n	800fe76 <dec_lock+0x5a>
 800fe6a:	4a09      	ldr	r2, [pc, #36]	; (800fe90 <dec_lock+0x74>)
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	011b      	lsls	r3, r3, #4
 800fe70:	4413      	add	r3, r2
 800fe72:	2200      	movs	r2, #0
 800fe74:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800fe76:	2300      	movs	r3, #0
 800fe78:	737b      	strb	r3, [r7, #13]
 800fe7a:	e001      	b.n	800fe80 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800fe7c:	2302      	movs	r3, #2
 800fe7e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800fe80:	7b7b      	ldrb	r3, [r7, #13]
}
 800fe82:	4618      	mov	r0, r3
 800fe84:	3714      	adds	r7, #20
 800fe86:	46bd      	mov	sp, r7
 800fe88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe8c:	4770      	bx	lr
 800fe8e:	bf00      	nop
 800fe90:	240002f0 	.word	0x240002f0

0800fe94 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800fe94:	b480      	push	{r7}
 800fe96:	b085      	sub	sp, #20
 800fe98:	af00      	add	r7, sp, #0
 800fe9a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800fe9c:	2300      	movs	r3, #0
 800fe9e:	60fb      	str	r3, [r7, #12]
 800fea0:	e010      	b.n	800fec4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800fea2:	4a0d      	ldr	r2, [pc, #52]	; (800fed8 <clear_lock+0x44>)
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	011b      	lsls	r3, r3, #4
 800fea8:	4413      	add	r3, r2
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	687a      	ldr	r2, [r7, #4]
 800feae:	429a      	cmp	r2, r3
 800feb0:	d105      	bne.n	800febe <clear_lock+0x2a>
 800feb2:	4a09      	ldr	r2, [pc, #36]	; (800fed8 <clear_lock+0x44>)
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	011b      	lsls	r3, r3, #4
 800feb8:	4413      	add	r3, r2
 800feba:	2200      	movs	r2, #0
 800febc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	3301      	adds	r3, #1
 800fec2:	60fb      	str	r3, [r7, #12]
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	2b01      	cmp	r3, #1
 800fec8:	d9eb      	bls.n	800fea2 <clear_lock+0xe>
	}
}
 800feca:	bf00      	nop
 800fecc:	3714      	adds	r7, #20
 800fece:	46bd      	mov	sp, r7
 800fed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fed4:	4770      	bx	lr
 800fed6:	bf00      	nop
 800fed8:	240002f0 	.word	0x240002f0

0800fedc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800fedc:	b580      	push	{r7, lr}
 800fede:	b086      	sub	sp, #24
 800fee0:	af00      	add	r7, sp, #0
 800fee2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800fee4:	2300      	movs	r3, #0
 800fee6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	78db      	ldrb	r3, [r3, #3]
 800feec:	2b00      	cmp	r3, #0
 800feee:	d034      	beq.n	800ff5a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fef4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	7858      	ldrb	r0, [r3, #1]
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ff00:	2301      	movs	r3, #1
 800ff02:	697a      	ldr	r2, [r7, #20]
 800ff04:	f7ff fd40 	bl	800f988 <disk_write>
 800ff08:	4603      	mov	r3, r0
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d002      	beq.n	800ff14 <sync_window+0x38>
			res = FR_DISK_ERR;
 800ff0e:	2301      	movs	r3, #1
 800ff10:	73fb      	strb	r3, [r7, #15]
 800ff12:	e022      	b.n	800ff5a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	2200      	movs	r2, #0
 800ff18:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	6a1b      	ldr	r3, [r3, #32]
 800ff1e:	697a      	ldr	r2, [r7, #20]
 800ff20:	1ad2      	subs	r2, r2, r3
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	699b      	ldr	r3, [r3, #24]
 800ff26:	429a      	cmp	r2, r3
 800ff28:	d217      	bcs.n	800ff5a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	789b      	ldrb	r3, [r3, #2]
 800ff2e:	613b      	str	r3, [r7, #16]
 800ff30:	e010      	b.n	800ff54 <sync_window+0x78>
					wsect += fs->fsize;
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	699b      	ldr	r3, [r3, #24]
 800ff36:	697a      	ldr	r2, [r7, #20]
 800ff38:	4413      	add	r3, r2
 800ff3a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	7858      	ldrb	r0, [r3, #1]
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ff46:	2301      	movs	r3, #1
 800ff48:	697a      	ldr	r2, [r7, #20]
 800ff4a:	f7ff fd1d 	bl	800f988 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ff4e:	693b      	ldr	r3, [r7, #16]
 800ff50:	3b01      	subs	r3, #1
 800ff52:	613b      	str	r3, [r7, #16]
 800ff54:	693b      	ldr	r3, [r7, #16]
 800ff56:	2b01      	cmp	r3, #1
 800ff58:	d8eb      	bhi.n	800ff32 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800ff5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff5c:	4618      	mov	r0, r3
 800ff5e:	3718      	adds	r7, #24
 800ff60:	46bd      	mov	sp, r7
 800ff62:	bd80      	pop	{r7, pc}

0800ff64 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800ff64:	b580      	push	{r7, lr}
 800ff66:	b084      	sub	sp, #16
 800ff68:	af00      	add	r7, sp, #0
 800ff6a:	6078      	str	r0, [r7, #4]
 800ff6c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800ff6e:	2300      	movs	r3, #0
 800ff70:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff76:	683a      	ldr	r2, [r7, #0]
 800ff78:	429a      	cmp	r2, r3
 800ff7a:	d01b      	beq.n	800ffb4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800ff7c:	6878      	ldr	r0, [r7, #4]
 800ff7e:	f7ff ffad 	bl	800fedc <sync_window>
 800ff82:	4603      	mov	r3, r0
 800ff84:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800ff86:	7bfb      	ldrb	r3, [r7, #15]
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d113      	bne.n	800ffb4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	7858      	ldrb	r0, [r3, #1]
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ff96:	2301      	movs	r3, #1
 800ff98:	683a      	ldr	r2, [r7, #0]
 800ff9a:	f7ff fcd5 	bl	800f948 <disk_read>
 800ff9e:	4603      	mov	r3, r0
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d004      	beq.n	800ffae <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ffa4:	f04f 33ff 	mov.w	r3, #4294967295
 800ffa8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ffaa:	2301      	movs	r3, #1
 800ffac:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	683a      	ldr	r2, [r7, #0]
 800ffb2:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800ffb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ffb6:	4618      	mov	r0, r3
 800ffb8:	3710      	adds	r7, #16
 800ffba:	46bd      	mov	sp, r7
 800ffbc:	bd80      	pop	{r7, pc}
	...

0800ffc0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800ffc0:	b580      	push	{r7, lr}
 800ffc2:	b084      	sub	sp, #16
 800ffc4:	af00      	add	r7, sp, #0
 800ffc6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800ffc8:	6878      	ldr	r0, [r7, #4]
 800ffca:	f7ff ff87 	bl	800fedc <sync_window>
 800ffce:	4603      	mov	r3, r0
 800ffd0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ffd2:	7bfb      	ldrb	r3, [r7, #15]
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d158      	bne.n	801008a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	781b      	ldrb	r3, [r3, #0]
 800ffdc:	2b03      	cmp	r3, #3
 800ffde:	d148      	bne.n	8010072 <sync_fs+0xb2>
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	791b      	ldrb	r3, [r3, #4]
 800ffe4:	2b01      	cmp	r3, #1
 800ffe6:	d144      	bne.n	8010072 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	3330      	adds	r3, #48	; 0x30
 800ffec:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fff0:	2100      	movs	r1, #0
 800fff2:	4618      	mov	r0, r3
 800fff4:	f7ff fda9 	bl	800fb4a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	3330      	adds	r3, #48	; 0x30
 800fffc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010000:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8010004:	4618      	mov	r0, r3
 8010006:	f7ff fd38 	bl	800fa7a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	3330      	adds	r3, #48	; 0x30
 801000e:	4921      	ldr	r1, [pc, #132]	; (8010094 <sync_fs+0xd4>)
 8010010:	4618      	mov	r0, r3
 8010012:	f7ff fd4d 	bl	800fab0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	3330      	adds	r3, #48	; 0x30
 801001a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801001e:	491e      	ldr	r1, [pc, #120]	; (8010098 <sync_fs+0xd8>)
 8010020:	4618      	mov	r0, r3
 8010022:	f7ff fd45 	bl	800fab0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	3330      	adds	r3, #48	; 0x30
 801002a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	691b      	ldr	r3, [r3, #16]
 8010032:	4619      	mov	r1, r3
 8010034:	4610      	mov	r0, r2
 8010036:	f7ff fd3b 	bl	800fab0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	3330      	adds	r3, #48	; 0x30
 801003e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	68db      	ldr	r3, [r3, #12]
 8010046:	4619      	mov	r1, r3
 8010048:	4610      	mov	r0, r2
 801004a:	f7ff fd31 	bl	800fab0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	69db      	ldr	r3, [r3, #28]
 8010052:	1c5a      	adds	r2, r3, #1
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	7858      	ldrb	r0, [r3, #1]
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010066:	2301      	movs	r3, #1
 8010068:	f7ff fc8e 	bl	800f988 <disk_write>
			fs->fsi_flag = 0;
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	2200      	movs	r2, #0
 8010070:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	785b      	ldrb	r3, [r3, #1]
 8010076:	2200      	movs	r2, #0
 8010078:	2100      	movs	r1, #0
 801007a:	4618      	mov	r0, r3
 801007c:	f7ff fca4 	bl	800f9c8 <disk_ioctl>
 8010080:	4603      	mov	r3, r0
 8010082:	2b00      	cmp	r3, #0
 8010084:	d001      	beq.n	801008a <sync_fs+0xca>
 8010086:	2301      	movs	r3, #1
 8010088:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801008a:	7bfb      	ldrb	r3, [r7, #15]
}
 801008c:	4618      	mov	r0, r3
 801008e:	3710      	adds	r7, #16
 8010090:	46bd      	mov	sp, r7
 8010092:	bd80      	pop	{r7, pc}
 8010094:	41615252 	.word	0x41615252
 8010098:	61417272 	.word	0x61417272

0801009c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 801009c:	b480      	push	{r7}
 801009e:	b083      	sub	sp, #12
 80100a0:	af00      	add	r7, sp, #0
 80100a2:	6078      	str	r0, [r7, #4]
 80100a4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80100a6:	683b      	ldr	r3, [r7, #0]
 80100a8:	3b02      	subs	r3, #2
 80100aa:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	695b      	ldr	r3, [r3, #20]
 80100b0:	3b02      	subs	r3, #2
 80100b2:	683a      	ldr	r2, [r7, #0]
 80100b4:	429a      	cmp	r2, r3
 80100b6:	d301      	bcc.n	80100bc <clust2sect+0x20>
 80100b8:	2300      	movs	r3, #0
 80100ba:	e008      	b.n	80100ce <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	895b      	ldrh	r3, [r3, #10]
 80100c0:	461a      	mov	r2, r3
 80100c2:	683b      	ldr	r3, [r7, #0]
 80100c4:	fb03 f202 	mul.w	r2, r3, r2
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80100cc:	4413      	add	r3, r2
}
 80100ce:	4618      	mov	r0, r3
 80100d0:	370c      	adds	r7, #12
 80100d2:	46bd      	mov	sp, r7
 80100d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100d8:	4770      	bx	lr

080100da <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80100da:	b580      	push	{r7, lr}
 80100dc:	b086      	sub	sp, #24
 80100de:	af00      	add	r7, sp, #0
 80100e0:	6078      	str	r0, [r7, #4]
 80100e2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80100ea:	683b      	ldr	r3, [r7, #0]
 80100ec:	2b01      	cmp	r3, #1
 80100ee:	d904      	bls.n	80100fa <get_fat+0x20>
 80100f0:	693b      	ldr	r3, [r7, #16]
 80100f2:	695b      	ldr	r3, [r3, #20]
 80100f4:	683a      	ldr	r2, [r7, #0]
 80100f6:	429a      	cmp	r2, r3
 80100f8:	d302      	bcc.n	8010100 <get_fat+0x26>
		val = 1;	/* Internal error */
 80100fa:	2301      	movs	r3, #1
 80100fc:	617b      	str	r3, [r7, #20]
 80100fe:	e08c      	b.n	801021a <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8010100:	f04f 33ff 	mov.w	r3, #4294967295
 8010104:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8010106:	693b      	ldr	r3, [r7, #16]
 8010108:	781b      	ldrb	r3, [r3, #0]
 801010a:	2b02      	cmp	r3, #2
 801010c:	d045      	beq.n	801019a <get_fat+0xc0>
 801010e:	2b03      	cmp	r3, #3
 8010110:	d05d      	beq.n	80101ce <get_fat+0xf4>
 8010112:	2b01      	cmp	r3, #1
 8010114:	d177      	bne.n	8010206 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8010116:	683b      	ldr	r3, [r7, #0]
 8010118:	60fb      	str	r3, [r7, #12]
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	085b      	lsrs	r3, r3, #1
 801011e:	68fa      	ldr	r2, [r7, #12]
 8010120:	4413      	add	r3, r2
 8010122:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010124:	693b      	ldr	r3, [r7, #16]
 8010126:	6a1a      	ldr	r2, [r3, #32]
 8010128:	68fb      	ldr	r3, [r7, #12]
 801012a:	0a5b      	lsrs	r3, r3, #9
 801012c:	4413      	add	r3, r2
 801012e:	4619      	mov	r1, r3
 8010130:	6938      	ldr	r0, [r7, #16]
 8010132:	f7ff ff17 	bl	800ff64 <move_window>
 8010136:	4603      	mov	r3, r0
 8010138:	2b00      	cmp	r3, #0
 801013a:	d167      	bne.n	801020c <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	1c5a      	adds	r2, r3, #1
 8010140:	60fa      	str	r2, [r7, #12]
 8010142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010146:	693a      	ldr	r2, [r7, #16]
 8010148:	4413      	add	r3, r2
 801014a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801014e:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010150:	693b      	ldr	r3, [r7, #16]
 8010152:	6a1a      	ldr	r2, [r3, #32]
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	0a5b      	lsrs	r3, r3, #9
 8010158:	4413      	add	r3, r2
 801015a:	4619      	mov	r1, r3
 801015c:	6938      	ldr	r0, [r7, #16]
 801015e:	f7ff ff01 	bl	800ff64 <move_window>
 8010162:	4603      	mov	r3, r0
 8010164:	2b00      	cmp	r3, #0
 8010166:	d153      	bne.n	8010210 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801016e:	693a      	ldr	r2, [r7, #16]
 8010170:	4413      	add	r3, r2
 8010172:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010176:	021b      	lsls	r3, r3, #8
 8010178:	461a      	mov	r2, r3
 801017a:	68bb      	ldr	r3, [r7, #8]
 801017c:	4313      	orrs	r3, r2
 801017e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8010180:	683b      	ldr	r3, [r7, #0]
 8010182:	f003 0301 	and.w	r3, r3, #1
 8010186:	2b00      	cmp	r3, #0
 8010188:	d002      	beq.n	8010190 <get_fat+0xb6>
 801018a:	68bb      	ldr	r3, [r7, #8]
 801018c:	091b      	lsrs	r3, r3, #4
 801018e:	e002      	b.n	8010196 <get_fat+0xbc>
 8010190:	68bb      	ldr	r3, [r7, #8]
 8010192:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010196:	617b      	str	r3, [r7, #20]
			break;
 8010198:	e03f      	b.n	801021a <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801019a:	693b      	ldr	r3, [r7, #16]
 801019c:	6a1a      	ldr	r2, [r3, #32]
 801019e:	683b      	ldr	r3, [r7, #0]
 80101a0:	0a1b      	lsrs	r3, r3, #8
 80101a2:	4413      	add	r3, r2
 80101a4:	4619      	mov	r1, r3
 80101a6:	6938      	ldr	r0, [r7, #16]
 80101a8:	f7ff fedc 	bl	800ff64 <move_window>
 80101ac:	4603      	mov	r3, r0
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d130      	bne.n	8010214 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80101b2:	693b      	ldr	r3, [r7, #16]
 80101b4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80101b8:	683b      	ldr	r3, [r7, #0]
 80101ba:	005b      	lsls	r3, r3, #1
 80101bc:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80101c0:	4413      	add	r3, r2
 80101c2:	4618      	mov	r0, r3
 80101c4:	f7ff fc1e 	bl	800fa04 <ld_word>
 80101c8:	4603      	mov	r3, r0
 80101ca:	617b      	str	r3, [r7, #20]
			break;
 80101cc:	e025      	b.n	801021a <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80101ce:	693b      	ldr	r3, [r7, #16]
 80101d0:	6a1a      	ldr	r2, [r3, #32]
 80101d2:	683b      	ldr	r3, [r7, #0]
 80101d4:	09db      	lsrs	r3, r3, #7
 80101d6:	4413      	add	r3, r2
 80101d8:	4619      	mov	r1, r3
 80101da:	6938      	ldr	r0, [r7, #16]
 80101dc:	f7ff fec2 	bl	800ff64 <move_window>
 80101e0:	4603      	mov	r3, r0
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d118      	bne.n	8010218 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80101e6:	693b      	ldr	r3, [r7, #16]
 80101e8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80101ec:	683b      	ldr	r3, [r7, #0]
 80101ee:	009b      	lsls	r3, r3, #2
 80101f0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80101f4:	4413      	add	r3, r2
 80101f6:	4618      	mov	r0, r3
 80101f8:	f7ff fc1c 	bl	800fa34 <ld_dword>
 80101fc:	4603      	mov	r3, r0
 80101fe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8010202:	617b      	str	r3, [r7, #20]
			break;
 8010204:	e009      	b.n	801021a <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8010206:	2301      	movs	r3, #1
 8010208:	617b      	str	r3, [r7, #20]
 801020a:	e006      	b.n	801021a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801020c:	bf00      	nop
 801020e:	e004      	b.n	801021a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010210:	bf00      	nop
 8010212:	e002      	b.n	801021a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010214:	bf00      	nop
 8010216:	e000      	b.n	801021a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010218:	bf00      	nop
		}
	}

	return val;
 801021a:	697b      	ldr	r3, [r7, #20]
}
 801021c:	4618      	mov	r0, r3
 801021e:	3718      	adds	r7, #24
 8010220:	46bd      	mov	sp, r7
 8010222:	bd80      	pop	{r7, pc}

08010224 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8010224:	b590      	push	{r4, r7, lr}
 8010226:	b089      	sub	sp, #36	; 0x24
 8010228:	af00      	add	r7, sp, #0
 801022a:	60f8      	str	r0, [r7, #12]
 801022c:	60b9      	str	r1, [r7, #8]
 801022e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8010230:	2302      	movs	r3, #2
 8010232:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8010234:	68bb      	ldr	r3, [r7, #8]
 8010236:	2b01      	cmp	r3, #1
 8010238:	f240 80d6 	bls.w	80103e8 <put_fat+0x1c4>
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	695b      	ldr	r3, [r3, #20]
 8010240:	68ba      	ldr	r2, [r7, #8]
 8010242:	429a      	cmp	r2, r3
 8010244:	f080 80d0 	bcs.w	80103e8 <put_fat+0x1c4>
		switch (fs->fs_type) {
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	781b      	ldrb	r3, [r3, #0]
 801024c:	2b02      	cmp	r3, #2
 801024e:	d073      	beq.n	8010338 <put_fat+0x114>
 8010250:	2b03      	cmp	r3, #3
 8010252:	f000 8091 	beq.w	8010378 <put_fat+0x154>
 8010256:	2b01      	cmp	r3, #1
 8010258:	f040 80c6 	bne.w	80103e8 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801025c:	68bb      	ldr	r3, [r7, #8]
 801025e:	61bb      	str	r3, [r7, #24]
 8010260:	69bb      	ldr	r3, [r7, #24]
 8010262:	085b      	lsrs	r3, r3, #1
 8010264:	69ba      	ldr	r2, [r7, #24]
 8010266:	4413      	add	r3, r2
 8010268:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	6a1a      	ldr	r2, [r3, #32]
 801026e:	69bb      	ldr	r3, [r7, #24]
 8010270:	0a5b      	lsrs	r3, r3, #9
 8010272:	4413      	add	r3, r2
 8010274:	4619      	mov	r1, r3
 8010276:	68f8      	ldr	r0, [r7, #12]
 8010278:	f7ff fe74 	bl	800ff64 <move_window>
 801027c:	4603      	mov	r3, r0
 801027e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010280:	7ffb      	ldrb	r3, [r7, #31]
 8010282:	2b00      	cmp	r3, #0
 8010284:	f040 80a9 	bne.w	80103da <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801028e:	69bb      	ldr	r3, [r7, #24]
 8010290:	1c59      	adds	r1, r3, #1
 8010292:	61b9      	str	r1, [r7, #24]
 8010294:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010298:	4413      	add	r3, r2
 801029a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801029c:	68bb      	ldr	r3, [r7, #8]
 801029e:	f003 0301 	and.w	r3, r3, #1
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d00d      	beq.n	80102c2 <put_fat+0x9e>
 80102a6:	697b      	ldr	r3, [r7, #20]
 80102a8:	781b      	ldrb	r3, [r3, #0]
 80102aa:	b25b      	sxtb	r3, r3
 80102ac:	f003 030f 	and.w	r3, r3, #15
 80102b0:	b25a      	sxtb	r2, r3
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	b2db      	uxtb	r3, r3
 80102b6:	011b      	lsls	r3, r3, #4
 80102b8:	b25b      	sxtb	r3, r3
 80102ba:	4313      	orrs	r3, r2
 80102bc:	b25b      	sxtb	r3, r3
 80102be:	b2db      	uxtb	r3, r3
 80102c0:	e001      	b.n	80102c6 <put_fat+0xa2>
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	b2db      	uxtb	r3, r3
 80102c6:	697a      	ldr	r2, [r7, #20]
 80102c8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80102ca:	68fb      	ldr	r3, [r7, #12]
 80102cc:	2201      	movs	r2, #1
 80102ce:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	6a1a      	ldr	r2, [r3, #32]
 80102d4:	69bb      	ldr	r3, [r7, #24]
 80102d6:	0a5b      	lsrs	r3, r3, #9
 80102d8:	4413      	add	r3, r2
 80102da:	4619      	mov	r1, r3
 80102dc:	68f8      	ldr	r0, [r7, #12]
 80102de:	f7ff fe41 	bl	800ff64 <move_window>
 80102e2:	4603      	mov	r3, r0
 80102e4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80102e6:	7ffb      	ldrb	r3, [r7, #31]
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d178      	bne.n	80103de <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80102f2:	69bb      	ldr	r3, [r7, #24]
 80102f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80102f8:	4413      	add	r3, r2
 80102fa:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80102fc:	68bb      	ldr	r3, [r7, #8]
 80102fe:	f003 0301 	and.w	r3, r3, #1
 8010302:	2b00      	cmp	r3, #0
 8010304:	d003      	beq.n	801030e <put_fat+0xea>
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	091b      	lsrs	r3, r3, #4
 801030a:	b2db      	uxtb	r3, r3
 801030c:	e00e      	b.n	801032c <put_fat+0x108>
 801030e:	697b      	ldr	r3, [r7, #20]
 8010310:	781b      	ldrb	r3, [r3, #0]
 8010312:	b25b      	sxtb	r3, r3
 8010314:	f023 030f 	bic.w	r3, r3, #15
 8010318:	b25a      	sxtb	r2, r3
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	0a1b      	lsrs	r3, r3, #8
 801031e:	b25b      	sxtb	r3, r3
 8010320:	f003 030f 	and.w	r3, r3, #15
 8010324:	b25b      	sxtb	r3, r3
 8010326:	4313      	orrs	r3, r2
 8010328:	b25b      	sxtb	r3, r3
 801032a:	b2db      	uxtb	r3, r3
 801032c:	697a      	ldr	r2, [r7, #20]
 801032e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	2201      	movs	r2, #1
 8010334:	70da      	strb	r2, [r3, #3]
			break;
 8010336:	e057      	b.n	80103e8 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	6a1a      	ldr	r2, [r3, #32]
 801033c:	68bb      	ldr	r3, [r7, #8]
 801033e:	0a1b      	lsrs	r3, r3, #8
 8010340:	4413      	add	r3, r2
 8010342:	4619      	mov	r1, r3
 8010344:	68f8      	ldr	r0, [r7, #12]
 8010346:	f7ff fe0d 	bl	800ff64 <move_window>
 801034a:	4603      	mov	r3, r0
 801034c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801034e:	7ffb      	ldrb	r3, [r7, #31]
 8010350:	2b00      	cmp	r3, #0
 8010352:	d146      	bne.n	80103e2 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801035a:	68bb      	ldr	r3, [r7, #8]
 801035c:	005b      	lsls	r3, r3, #1
 801035e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8010362:	4413      	add	r3, r2
 8010364:	687a      	ldr	r2, [r7, #4]
 8010366:	b292      	uxth	r2, r2
 8010368:	4611      	mov	r1, r2
 801036a:	4618      	mov	r0, r3
 801036c:	f7ff fb85 	bl	800fa7a <st_word>
			fs->wflag = 1;
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	2201      	movs	r2, #1
 8010374:	70da      	strb	r2, [r3, #3]
			break;
 8010376:	e037      	b.n	80103e8 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8010378:	68fb      	ldr	r3, [r7, #12]
 801037a:	6a1a      	ldr	r2, [r3, #32]
 801037c:	68bb      	ldr	r3, [r7, #8]
 801037e:	09db      	lsrs	r3, r3, #7
 8010380:	4413      	add	r3, r2
 8010382:	4619      	mov	r1, r3
 8010384:	68f8      	ldr	r0, [r7, #12]
 8010386:	f7ff fded 	bl	800ff64 <move_window>
 801038a:	4603      	mov	r3, r0
 801038c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801038e:	7ffb      	ldrb	r3, [r7, #31]
 8010390:	2b00      	cmp	r3, #0
 8010392:	d128      	bne.n	80103e6 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 801039a:	68fb      	ldr	r3, [r7, #12]
 801039c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80103a0:	68bb      	ldr	r3, [r7, #8]
 80103a2:	009b      	lsls	r3, r3, #2
 80103a4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80103a8:	4413      	add	r3, r2
 80103aa:	4618      	mov	r0, r3
 80103ac:	f7ff fb42 	bl	800fa34 <ld_dword>
 80103b0:	4603      	mov	r3, r0
 80103b2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80103b6:	4323      	orrs	r3, r4
 80103b8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80103c0:	68bb      	ldr	r3, [r7, #8]
 80103c2:	009b      	lsls	r3, r3, #2
 80103c4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80103c8:	4413      	add	r3, r2
 80103ca:	6879      	ldr	r1, [r7, #4]
 80103cc:	4618      	mov	r0, r3
 80103ce:	f7ff fb6f 	bl	800fab0 <st_dword>
			fs->wflag = 1;
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	2201      	movs	r2, #1
 80103d6:	70da      	strb	r2, [r3, #3]
			break;
 80103d8:	e006      	b.n	80103e8 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80103da:	bf00      	nop
 80103dc:	e004      	b.n	80103e8 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80103de:	bf00      	nop
 80103e0:	e002      	b.n	80103e8 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80103e2:	bf00      	nop
 80103e4:	e000      	b.n	80103e8 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80103e6:	bf00      	nop
		}
	}
	return res;
 80103e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80103ea:	4618      	mov	r0, r3
 80103ec:	3724      	adds	r7, #36	; 0x24
 80103ee:	46bd      	mov	sp, r7
 80103f0:	bd90      	pop	{r4, r7, pc}

080103f2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80103f2:	b580      	push	{r7, lr}
 80103f4:	b088      	sub	sp, #32
 80103f6:	af00      	add	r7, sp, #0
 80103f8:	60f8      	str	r0, [r7, #12]
 80103fa:	60b9      	str	r1, [r7, #8]
 80103fc:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80103fe:	2300      	movs	r3, #0
 8010400:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8010408:	68bb      	ldr	r3, [r7, #8]
 801040a:	2b01      	cmp	r3, #1
 801040c:	d904      	bls.n	8010418 <remove_chain+0x26>
 801040e:	69bb      	ldr	r3, [r7, #24]
 8010410:	695b      	ldr	r3, [r3, #20]
 8010412:	68ba      	ldr	r2, [r7, #8]
 8010414:	429a      	cmp	r2, r3
 8010416:	d301      	bcc.n	801041c <remove_chain+0x2a>
 8010418:	2302      	movs	r3, #2
 801041a:	e04b      	b.n	80104b4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	2b00      	cmp	r3, #0
 8010420:	d00c      	beq.n	801043c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8010422:	f04f 32ff 	mov.w	r2, #4294967295
 8010426:	6879      	ldr	r1, [r7, #4]
 8010428:	69b8      	ldr	r0, [r7, #24]
 801042a:	f7ff fefb 	bl	8010224 <put_fat>
 801042e:	4603      	mov	r3, r0
 8010430:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8010432:	7ffb      	ldrb	r3, [r7, #31]
 8010434:	2b00      	cmp	r3, #0
 8010436:	d001      	beq.n	801043c <remove_chain+0x4a>
 8010438:	7ffb      	ldrb	r3, [r7, #31]
 801043a:	e03b      	b.n	80104b4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801043c:	68b9      	ldr	r1, [r7, #8]
 801043e:	68f8      	ldr	r0, [r7, #12]
 8010440:	f7ff fe4b 	bl	80100da <get_fat>
 8010444:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8010446:	697b      	ldr	r3, [r7, #20]
 8010448:	2b00      	cmp	r3, #0
 801044a:	d031      	beq.n	80104b0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801044c:	697b      	ldr	r3, [r7, #20]
 801044e:	2b01      	cmp	r3, #1
 8010450:	d101      	bne.n	8010456 <remove_chain+0x64>
 8010452:	2302      	movs	r3, #2
 8010454:	e02e      	b.n	80104b4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8010456:	697b      	ldr	r3, [r7, #20]
 8010458:	f1b3 3fff 	cmp.w	r3, #4294967295
 801045c:	d101      	bne.n	8010462 <remove_chain+0x70>
 801045e:	2301      	movs	r3, #1
 8010460:	e028      	b.n	80104b4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8010462:	2200      	movs	r2, #0
 8010464:	68b9      	ldr	r1, [r7, #8]
 8010466:	69b8      	ldr	r0, [r7, #24]
 8010468:	f7ff fedc 	bl	8010224 <put_fat>
 801046c:	4603      	mov	r3, r0
 801046e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8010470:	7ffb      	ldrb	r3, [r7, #31]
 8010472:	2b00      	cmp	r3, #0
 8010474:	d001      	beq.n	801047a <remove_chain+0x88>
 8010476:	7ffb      	ldrb	r3, [r7, #31]
 8010478:	e01c      	b.n	80104b4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801047a:	69bb      	ldr	r3, [r7, #24]
 801047c:	691a      	ldr	r2, [r3, #16]
 801047e:	69bb      	ldr	r3, [r7, #24]
 8010480:	695b      	ldr	r3, [r3, #20]
 8010482:	3b02      	subs	r3, #2
 8010484:	429a      	cmp	r2, r3
 8010486:	d20b      	bcs.n	80104a0 <remove_chain+0xae>
			fs->free_clst++;
 8010488:	69bb      	ldr	r3, [r7, #24]
 801048a:	691b      	ldr	r3, [r3, #16]
 801048c:	1c5a      	adds	r2, r3, #1
 801048e:	69bb      	ldr	r3, [r7, #24]
 8010490:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8010492:	69bb      	ldr	r3, [r7, #24]
 8010494:	791b      	ldrb	r3, [r3, #4]
 8010496:	f043 0301 	orr.w	r3, r3, #1
 801049a:	b2da      	uxtb	r2, r3
 801049c:	69bb      	ldr	r3, [r7, #24]
 801049e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80104a0:	697b      	ldr	r3, [r7, #20]
 80104a2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80104a4:	69bb      	ldr	r3, [r7, #24]
 80104a6:	695b      	ldr	r3, [r3, #20]
 80104a8:	68ba      	ldr	r2, [r7, #8]
 80104aa:	429a      	cmp	r2, r3
 80104ac:	d3c6      	bcc.n	801043c <remove_chain+0x4a>
 80104ae:	e000      	b.n	80104b2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80104b0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80104b2:	2300      	movs	r3, #0
}
 80104b4:	4618      	mov	r0, r3
 80104b6:	3720      	adds	r7, #32
 80104b8:	46bd      	mov	sp, r7
 80104ba:	bd80      	pop	{r7, pc}

080104bc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80104bc:	b580      	push	{r7, lr}
 80104be:	b088      	sub	sp, #32
 80104c0:	af00      	add	r7, sp, #0
 80104c2:	6078      	str	r0, [r7, #4]
 80104c4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80104cc:	683b      	ldr	r3, [r7, #0]
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d10d      	bne.n	80104ee <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80104d2:	693b      	ldr	r3, [r7, #16]
 80104d4:	68db      	ldr	r3, [r3, #12]
 80104d6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80104d8:	69bb      	ldr	r3, [r7, #24]
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d004      	beq.n	80104e8 <create_chain+0x2c>
 80104de:	693b      	ldr	r3, [r7, #16]
 80104e0:	695b      	ldr	r3, [r3, #20]
 80104e2:	69ba      	ldr	r2, [r7, #24]
 80104e4:	429a      	cmp	r2, r3
 80104e6:	d31b      	bcc.n	8010520 <create_chain+0x64>
 80104e8:	2301      	movs	r3, #1
 80104ea:	61bb      	str	r3, [r7, #24]
 80104ec:	e018      	b.n	8010520 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80104ee:	6839      	ldr	r1, [r7, #0]
 80104f0:	6878      	ldr	r0, [r7, #4]
 80104f2:	f7ff fdf2 	bl	80100da <get_fat>
 80104f6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80104f8:	68fb      	ldr	r3, [r7, #12]
 80104fa:	2b01      	cmp	r3, #1
 80104fc:	d801      	bhi.n	8010502 <create_chain+0x46>
 80104fe:	2301      	movs	r3, #1
 8010500:	e070      	b.n	80105e4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010508:	d101      	bne.n	801050e <create_chain+0x52>
 801050a:	68fb      	ldr	r3, [r7, #12]
 801050c:	e06a      	b.n	80105e4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801050e:	693b      	ldr	r3, [r7, #16]
 8010510:	695b      	ldr	r3, [r3, #20]
 8010512:	68fa      	ldr	r2, [r7, #12]
 8010514:	429a      	cmp	r2, r3
 8010516:	d201      	bcs.n	801051c <create_chain+0x60>
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	e063      	b.n	80105e4 <create_chain+0x128>
		scl = clst;
 801051c:	683b      	ldr	r3, [r7, #0]
 801051e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8010520:	69bb      	ldr	r3, [r7, #24]
 8010522:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8010524:	69fb      	ldr	r3, [r7, #28]
 8010526:	3301      	adds	r3, #1
 8010528:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801052a:	693b      	ldr	r3, [r7, #16]
 801052c:	695b      	ldr	r3, [r3, #20]
 801052e:	69fa      	ldr	r2, [r7, #28]
 8010530:	429a      	cmp	r2, r3
 8010532:	d307      	bcc.n	8010544 <create_chain+0x88>
				ncl = 2;
 8010534:	2302      	movs	r3, #2
 8010536:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8010538:	69fa      	ldr	r2, [r7, #28]
 801053a:	69bb      	ldr	r3, [r7, #24]
 801053c:	429a      	cmp	r2, r3
 801053e:	d901      	bls.n	8010544 <create_chain+0x88>
 8010540:	2300      	movs	r3, #0
 8010542:	e04f      	b.n	80105e4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8010544:	69f9      	ldr	r1, [r7, #28]
 8010546:	6878      	ldr	r0, [r7, #4]
 8010548:	f7ff fdc7 	bl	80100da <get_fat>
 801054c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	2b00      	cmp	r3, #0
 8010552:	d00e      	beq.n	8010572 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	2b01      	cmp	r3, #1
 8010558:	d003      	beq.n	8010562 <create_chain+0xa6>
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010560:	d101      	bne.n	8010566 <create_chain+0xaa>
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	e03e      	b.n	80105e4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8010566:	69fa      	ldr	r2, [r7, #28]
 8010568:	69bb      	ldr	r3, [r7, #24]
 801056a:	429a      	cmp	r2, r3
 801056c:	d1da      	bne.n	8010524 <create_chain+0x68>
 801056e:	2300      	movs	r3, #0
 8010570:	e038      	b.n	80105e4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8010572:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8010574:	f04f 32ff 	mov.w	r2, #4294967295
 8010578:	69f9      	ldr	r1, [r7, #28]
 801057a:	6938      	ldr	r0, [r7, #16]
 801057c:	f7ff fe52 	bl	8010224 <put_fat>
 8010580:	4603      	mov	r3, r0
 8010582:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8010584:	7dfb      	ldrb	r3, [r7, #23]
 8010586:	2b00      	cmp	r3, #0
 8010588:	d109      	bne.n	801059e <create_chain+0xe2>
 801058a:	683b      	ldr	r3, [r7, #0]
 801058c:	2b00      	cmp	r3, #0
 801058e:	d006      	beq.n	801059e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8010590:	69fa      	ldr	r2, [r7, #28]
 8010592:	6839      	ldr	r1, [r7, #0]
 8010594:	6938      	ldr	r0, [r7, #16]
 8010596:	f7ff fe45 	bl	8010224 <put_fat>
 801059a:	4603      	mov	r3, r0
 801059c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801059e:	7dfb      	ldrb	r3, [r7, #23]
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d116      	bne.n	80105d2 <create_chain+0x116>
		fs->last_clst = ncl;
 80105a4:	693b      	ldr	r3, [r7, #16]
 80105a6:	69fa      	ldr	r2, [r7, #28]
 80105a8:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80105aa:	693b      	ldr	r3, [r7, #16]
 80105ac:	691a      	ldr	r2, [r3, #16]
 80105ae:	693b      	ldr	r3, [r7, #16]
 80105b0:	695b      	ldr	r3, [r3, #20]
 80105b2:	3b02      	subs	r3, #2
 80105b4:	429a      	cmp	r2, r3
 80105b6:	d804      	bhi.n	80105c2 <create_chain+0x106>
 80105b8:	693b      	ldr	r3, [r7, #16]
 80105ba:	691b      	ldr	r3, [r3, #16]
 80105bc:	1e5a      	subs	r2, r3, #1
 80105be:	693b      	ldr	r3, [r7, #16]
 80105c0:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80105c2:	693b      	ldr	r3, [r7, #16]
 80105c4:	791b      	ldrb	r3, [r3, #4]
 80105c6:	f043 0301 	orr.w	r3, r3, #1
 80105ca:	b2da      	uxtb	r2, r3
 80105cc:	693b      	ldr	r3, [r7, #16]
 80105ce:	711a      	strb	r2, [r3, #4]
 80105d0:	e007      	b.n	80105e2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80105d2:	7dfb      	ldrb	r3, [r7, #23]
 80105d4:	2b01      	cmp	r3, #1
 80105d6:	d102      	bne.n	80105de <create_chain+0x122>
 80105d8:	f04f 33ff 	mov.w	r3, #4294967295
 80105dc:	e000      	b.n	80105e0 <create_chain+0x124>
 80105de:	2301      	movs	r3, #1
 80105e0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80105e2:	69fb      	ldr	r3, [r7, #28]
}
 80105e4:	4618      	mov	r0, r3
 80105e6:	3720      	adds	r7, #32
 80105e8:	46bd      	mov	sp, r7
 80105ea:	bd80      	pop	{r7, pc}

080105ec <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80105ec:	b480      	push	{r7}
 80105ee:	b087      	sub	sp, #28
 80105f0:	af00      	add	r7, sp, #0
 80105f2:	6078      	str	r0, [r7, #4]
 80105f4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010600:	3304      	adds	r3, #4
 8010602:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8010604:	683b      	ldr	r3, [r7, #0]
 8010606:	0a5b      	lsrs	r3, r3, #9
 8010608:	68fa      	ldr	r2, [r7, #12]
 801060a:	8952      	ldrh	r2, [r2, #10]
 801060c:	fbb3 f3f2 	udiv	r3, r3, r2
 8010610:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8010612:	693b      	ldr	r3, [r7, #16]
 8010614:	1d1a      	adds	r2, r3, #4
 8010616:	613a      	str	r2, [r7, #16]
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801061c:	68bb      	ldr	r3, [r7, #8]
 801061e:	2b00      	cmp	r3, #0
 8010620:	d101      	bne.n	8010626 <clmt_clust+0x3a>
 8010622:	2300      	movs	r3, #0
 8010624:	e010      	b.n	8010648 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8010626:	697a      	ldr	r2, [r7, #20]
 8010628:	68bb      	ldr	r3, [r7, #8]
 801062a:	429a      	cmp	r2, r3
 801062c:	d307      	bcc.n	801063e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 801062e:	697a      	ldr	r2, [r7, #20]
 8010630:	68bb      	ldr	r3, [r7, #8]
 8010632:	1ad3      	subs	r3, r2, r3
 8010634:	617b      	str	r3, [r7, #20]
 8010636:	693b      	ldr	r3, [r7, #16]
 8010638:	3304      	adds	r3, #4
 801063a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801063c:	e7e9      	b.n	8010612 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 801063e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8010640:	693b      	ldr	r3, [r7, #16]
 8010642:	681a      	ldr	r2, [r3, #0]
 8010644:	697b      	ldr	r3, [r7, #20]
 8010646:	4413      	add	r3, r2
}
 8010648:	4618      	mov	r0, r3
 801064a:	371c      	adds	r7, #28
 801064c:	46bd      	mov	sp, r7
 801064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010652:	4770      	bx	lr

08010654 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8010654:	b580      	push	{r7, lr}
 8010656:	b086      	sub	sp, #24
 8010658:	af00      	add	r7, sp, #0
 801065a:	6078      	str	r0, [r7, #4]
 801065c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8010664:	683b      	ldr	r3, [r7, #0]
 8010666:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801066a:	d204      	bcs.n	8010676 <dir_sdi+0x22>
 801066c:	683b      	ldr	r3, [r7, #0]
 801066e:	f003 031f 	and.w	r3, r3, #31
 8010672:	2b00      	cmp	r3, #0
 8010674:	d001      	beq.n	801067a <dir_sdi+0x26>
		return FR_INT_ERR;
 8010676:	2302      	movs	r3, #2
 8010678:	e063      	b.n	8010742 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	683a      	ldr	r2, [r7, #0]
 801067e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	689b      	ldr	r3, [r3, #8]
 8010684:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8010686:	697b      	ldr	r3, [r7, #20]
 8010688:	2b00      	cmp	r3, #0
 801068a:	d106      	bne.n	801069a <dir_sdi+0x46>
 801068c:	693b      	ldr	r3, [r7, #16]
 801068e:	781b      	ldrb	r3, [r3, #0]
 8010690:	2b02      	cmp	r3, #2
 8010692:	d902      	bls.n	801069a <dir_sdi+0x46>
		clst = fs->dirbase;
 8010694:	693b      	ldr	r3, [r7, #16]
 8010696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010698:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801069a:	697b      	ldr	r3, [r7, #20]
 801069c:	2b00      	cmp	r3, #0
 801069e:	d10c      	bne.n	80106ba <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80106a0:	683b      	ldr	r3, [r7, #0]
 80106a2:	095b      	lsrs	r3, r3, #5
 80106a4:	693a      	ldr	r2, [r7, #16]
 80106a6:	8912      	ldrh	r2, [r2, #8]
 80106a8:	4293      	cmp	r3, r2
 80106aa:	d301      	bcc.n	80106b0 <dir_sdi+0x5c>
 80106ac:	2302      	movs	r3, #2
 80106ae:	e048      	b.n	8010742 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80106b0:	693b      	ldr	r3, [r7, #16]
 80106b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	61da      	str	r2, [r3, #28]
 80106b8:	e029      	b.n	801070e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80106ba:	693b      	ldr	r3, [r7, #16]
 80106bc:	895b      	ldrh	r3, [r3, #10]
 80106be:	025b      	lsls	r3, r3, #9
 80106c0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80106c2:	e019      	b.n	80106f8 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	6979      	ldr	r1, [r7, #20]
 80106c8:	4618      	mov	r0, r3
 80106ca:	f7ff fd06 	bl	80100da <get_fat>
 80106ce:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80106d0:	697b      	ldr	r3, [r7, #20]
 80106d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106d6:	d101      	bne.n	80106dc <dir_sdi+0x88>
 80106d8:	2301      	movs	r3, #1
 80106da:	e032      	b.n	8010742 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80106dc:	697b      	ldr	r3, [r7, #20]
 80106de:	2b01      	cmp	r3, #1
 80106e0:	d904      	bls.n	80106ec <dir_sdi+0x98>
 80106e2:	693b      	ldr	r3, [r7, #16]
 80106e4:	695b      	ldr	r3, [r3, #20]
 80106e6:	697a      	ldr	r2, [r7, #20]
 80106e8:	429a      	cmp	r2, r3
 80106ea:	d301      	bcc.n	80106f0 <dir_sdi+0x9c>
 80106ec:	2302      	movs	r3, #2
 80106ee:	e028      	b.n	8010742 <dir_sdi+0xee>
			ofs -= csz;
 80106f0:	683a      	ldr	r2, [r7, #0]
 80106f2:	68fb      	ldr	r3, [r7, #12]
 80106f4:	1ad3      	subs	r3, r2, r3
 80106f6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80106f8:	683a      	ldr	r2, [r7, #0]
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	429a      	cmp	r2, r3
 80106fe:	d2e1      	bcs.n	80106c4 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8010700:	6979      	ldr	r1, [r7, #20]
 8010702:	6938      	ldr	r0, [r7, #16]
 8010704:	f7ff fcca 	bl	801009c <clust2sect>
 8010708:	4602      	mov	r2, r0
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	697a      	ldr	r2, [r7, #20]
 8010712:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	69db      	ldr	r3, [r3, #28]
 8010718:	2b00      	cmp	r3, #0
 801071a:	d101      	bne.n	8010720 <dir_sdi+0xcc>
 801071c:	2302      	movs	r3, #2
 801071e:	e010      	b.n	8010742 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	69da      	ldr	r2, [r3, #28]
 8010724:	683b      	ldr	r3, [r7, #0]
 8010726:	0a5b      	lsrs	r3, r3, #9
 8010728:	441a      	add	r2, r3
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801072e:	693b      	ldr	r3, [r7, #16]
 8010730:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010734:	683b      	ldr	r3, [r7, #0]
 8010736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801073a:	441a      	add	r2, r3
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8010740:	2300      	movs	r3, #0
}
 8010742:	4618      	mov	r0, r3
 8010744:	3718      	adds	r7, #24
 8010746:	46bd      	mov	sp, r7
 8010748:	bd80      	pop	{r7, pc}

0801074a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801074a:	b580      	push	{r7, lr}
 801074c:	b086      	sub	sp, #24
 801074e:	af00      	add	r7, sp, #0
 8010750:	6078      	str	r0, [r7, #4]
 8010752:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	681b      	ldr	r3, [r3, #0]
 8010758:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	695b      	ldr	r3, [r3, #20]
 801075e:	3320      	adds	r3, #32
 8010760:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	69db      	ldr	r3, [r3, #28]
 8010766:	2b00      	cmp	r3, #0
 8010768:	d003      	beq.n	8010772 <dir_next+0x28>
 801076a:	68bb      	ldr	r3, [r7, #8]
 801076c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010770:	d301      	bcc.n	8010776 <dir_next+0x2c>
 8010772:	2304      	movs	r3, #4
 8010774:	e0aa      	b.n	80108cc <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8010776:	68bb      	ldr	r3, [r7, #8]
 8010778:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801077c:	2b00      	cmp	r3, #0
 801077e:	f040 8098 	bne.w	80108b2 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	69db      	ldr	r3, [r3, #28]
 8010786:	1c5a      	adds	r2, r3, #1
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	699b      	ldr	r3, [r3, #24]
 8010790:	2b00      	cmp	r3, #0
 8010792:	d10b      	bne.n	80107ac <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8010794:	68bb      	ldr	r3, [r7, #8]
 8010796:	095b      	lsrs	r3, r3, #5
 8010798:	68fa      	ldr	r2, [r7, #12]
 801079a:	8912      	ldrh	r2, [r2, #8]
 801079c:	4293      	cmp	r3, r2
 801079e:	f0c0 8088 	bcc.w	80108b2 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	2200      	movs	r2, #0
 80107a6:	61da      	str	r2, [r3, #28]
 80107a8:	2304      	movs	r3, #4
 80107aa:	e08f      	b.n	80108cc <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80107ac:	68bb      	ldr	r3, [r7, #8]
 80107ae:	0a5b      	lsrs	r3, r3, #9
 80107b0:	68fa      	ldr	r2, [r7, #12]
 80107b2:	8952      	ldrh	r2, [r2, #10]
 80107b4:	3a01      	subs	r2, #1
 80107b6:	4013      	ands	r3, r2
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d17a      	bne.n	80108b2 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80107bc:	687a      	ldr	r2, [r7, #4]
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	699b      	ldr	r3, [r3, #24]
 80107c2:	4619      	mov	r1, r3
 80107c4:	4610      	mov	r0, r2
 80107c6:	f7ff fc88 	bl	80100da <get_fat>
 80107ca:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80107cc:	697b      	ldr	r3, [r7, #20]
 80107ce:	2b01      	cmp	r3, #1
 80107d0:	d801      	bhi.n	80107d6 <dir_next+0x8c>
 80107d2:	2302      	movs	r3, #2
 80107d4:	e07a      	b.n	80108cc <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80107d6:	697b      	ldr	r3, [r7, #20]
 80107d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107dc:	d101      	bne.n	80107e2 <dir_next+0x98>
 80107de:	2301      	movs	r3, #1
 80107e0:	e074      	b.n	80108cc <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	695b      	ldr	r3, [r3, #20]
 80107e6:	697a      	ldr	r2, [r7, #20]
 80107e8:	429a      	cmp	r2, r3
 80107ea:	d358      	bcc.n	801089e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80107ec:	683b      	ldr	r3, [r7, #0]
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d104      	bne.n	80107fc <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	2200      	movs	r2, #0
 80107f6:	61da      	str	r2, [r3, #28]
 80107f8:	2304      	movs	r3, #4
 80107fa:	e067      	b.n	80108cc <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80107fc:	687a      	ldr	r2, [r7, #4]
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	699b      	ldr	r3, [r3, #24]
 8010802:	4619      	mov	r1, r3
 8010804:	4610      	mov	r0, r2
 8010806:	f7ff fe59 	bl	80104bc <create_chain>
 801080a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801080c:	697b      	ldr	r3, [r7, #20]
 801080e:	2b00      	cmp	r3, #0
 8010810:	d101      	bne.n	8010816 <dir_next+0xcc>
 8010812:	2307      	movs	r3, #7
 8010814:	e05a      	b.n	80108cc <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8010816:	697b      	ldr	r3, [r7, #20]
 8010818:	2b01      	cmp	r3, #1
 801081a:	d101      	bne.n	8010820 <dir_next+0xd6>
 801081c:	2302      	movs	r3, #2
 801081e:	e055      	b.n	80108cc <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010820:	697b      	ldr	r3, [r7, #20]
 8010822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010826:	d101      	bne.n	801082c <dir_next+0xe2>
 8010828:	2301      	movs	r3, #1
 801082a:	e04f      	b.n	80108cc <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801082c:	68f8      	ldr	r0, [r7, #12]
 801082e:	f7ff fb55 	bl	800fedc <sync_window>
 8010832:	4603      	mov	r3, r0
 8010834:	2b00      	cmp	r3, #0
 8010836:	d001      	beq.n	801083c <dir_next+0xf2>
 8010838:	2301      	movs	r3, #1
 801083a:	e047      	b.n	80108cc <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801083c:	68fb      	ldr	r3, [r7, #12]
 801083e:	3330      	adds	r3, #48	; 0x30
 8010840:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010844:	2100      	movs	r1, #0
 8010846:	4618      	mov	r0, r3
 8010848:	f7ff f97f 	bl	800fb4a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801084c:	2300      	movs	r3, #0
 801084e:	613b      	str	r3, [r7, #16]
 8010850:	6979      	ldr	r1, [r7, #20]
 8010852:	68f8      	ldr	r0, [r7, #12]
 8010854:	f7ff fc22 	bl	801009c <clust2sect>
 8010858:	4602      	mov	r2, r0
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	62da      	str	r2, [r3, #44]	; 0x2c
 801085e:	e012      	b.n	8010886 <dir_next+0x13c>
						fs->wflag = 1;
 8010860:	68fb      	ldr	r3, [r7, #12]
 8010862:	2201      	movs	r2, #1
 8010864:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8010866:	68f8      	ldr	r0, [r7, #12]
 8010868:	f7ff fb38 	bl	800fedc <sync_window>
 801086c:	4603      	mov	r3, r0
 801086e:	2b00      	cmp	r3, #0
 8010870:	d001      	beq.n	8010876 <dir_next+0x12c>
 8010872:	2301      	movs	r3, #1
 8010874:	e02a      	b.n	80108cc <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010876:	693b      	ldr	r3, [r7, #16]
 8010878:	3301      	adds	r3, #1
 801087a:	613b      	str	r3, [r7, #16]
 801087c:	68fb      	ldr	r3, [r7, #12]
 801087e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010880:	1c5a      	adds	r2, r3, #1
 8010882:	68fb      	ldr	r3, [r7, #12]
 8010884:	62da      	str	r2, [r3, #44]	; 0x2c
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	895b      	ldrh	r3, [r3, #10]
 801088a:	461a      	mov	r2, r3
 801088c:	693b      	ldr	r3, [r7, #16]
 801088e:	4293      	cmp	r3, r2
 8010890:	d3e6      	bcc.n	8010860 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010896:	693b      	ldr	r3, [r7, #16]
 8010898:	1ad2      	subs	r2, r2, r3
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	697a      	ldr	r2, [r7, #20]
 80108a2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80108a4:	6979      	ldr	r1, [r7, #20]
 80108a6:	68f8      	ldr	r0, [r7, #12]
 80108a8:	f7ff fbf8 	bl	801009c <clust2sect>
 80108ac:	4602      	mov	r2, r0
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	68ba      	ldr	r2, [r7, #8]
 80108b6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80108be:	68bb      	ldr	r3, [r7, #8]
 80108c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80108c4:	441a      	add	r2, r3
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80108ca:	2300      	movs	r3, #0
}
 80108cc:	4618      	mov	r0, r3
 80108ce:	3718      	adds	r7, #24
 80108d0:	46bd      	mov	sp, r7
 80108d2:	bd80      	pop	{r7, pc}

080108d4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80108d4:	b580      	push	{r7, lr}
 80108d6:	b086      	sub	sp, #24
 80108d8:	af00      	add	r7, sp, #0
 80108da:	6078      	str	r0, [r7, #4]
 80108dc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80108e4:	2100      	movs	r1, #0
 80108e6:	6878      	ldr	r0, [r7, #4]
 80108e8:	f7ff feb4 	bl	8010654 <dir_sdi>
 80108ec:	4603      	mov	r3, r0
 80108ee:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80108f0:	7dfb      	ldrb	r3, [r7, #23]
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d12b      	bne.n	801094e <dir_alloc+0x7a>
		n = 0;
 80108f6:	2300      	movs	r3, #0
 80108f8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	69db      	ldr	r3, [r3, #28]
 80108fe:	4619      	mov	r1, r3
 8010900:	68f8      	ldr	r0, [r7, #12]
 8010902:	f7ff fb2f 	bl	800ff64 <move_window>
 8010906:	4603      	mov	r3, r0
 8010908:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801090a:	7dfb      	ldrb	r3, [r7, #23]
 801090c:	2b00      	cmp	r3, #0
 801090e:	d11d      	bne.n	801094c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	6a1b      	ldr	r3, [r3, #32]
 8010914:	781b      	ldrb	r3, [r3, #0]
 8010916:	2be5      	cmp	r3, #229	; 0xe5
 8010918:	d004      	beq.n	8010924 <dir_alloc+0x50>
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	6a1b      	ldr	r3, [r3, #32]
 801091e:	781b      	ldrb	r3, [r3, #0]
 8010920:	2b00      	cmp	r3, #0
 8010922:	d107      	bne.n	8010934 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8010924:	693b      	ldr	r3, [r7, #16]
 8010926:	3301      	adds	r3, #1
 8010928:	613b      	str	r3, [r7, #16]
 801092a:	693a      	ldr	r2, [r7, #16]
 801092c:	683b      	ldr	r3, [r7, #0]
 801092e:	429a      	cmp	r2, r3
 8010930:	d102      	bne.n	8010938 <dir_alloc+0x64>
 8010932:	e00c      	b.n	801094e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8010934:	2300      	movs	r3, #0
 8010936:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8010938:	2101      	movs	r1, #1
 801093a:	6878      	ldr	r0, [r7, #4]
 801093c:	f7ff ff05 	bl	801074a <dir_next>
 8010940:	4603      	mov	r3, r0
 8010942:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8010944:	7dfb      	ldrb	r3, [r7, #23]
 8010946:	2b00      	cmp	r3, #0
 8010948:	d0d7      	beq.n	80108fa <dir_alloc+0x26>
 801094a:	e000      	b.n	801094e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801094c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801094e:	7dfb      	ldrb	r3, [r7, #23]
 8010950:	2b04      	cmp	r3, #4
 8010952:	d101      	bne.n	8010958 <dir_alloc+0x84>
 8010954:	2307      	movs	r3, #7
 8010956:	75fb      	strb	r3, [r7, #23]
	return res;
 8010958:	7dfb      	ldrb	r3, [r7, #23]
}
 801095a:	4618      	mov	r0, r3
 801095c:	3718      	adds	r7, #24
 801095e:	46bd      	mov	sp, r7
 8010960:	bd80      	pop	{r7, pc}

08010962 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8010962:	b580      	push	{r7, lr}
 8010964:	b084      	sub	sp, #16
 8010966:	af00      	add	r7, sp, #0
 8010968:	6078      	str	r0, [r7, #4]
 801096a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801096c:	683b      	ldr	r3, [r7, #0]
 801096e:	331a      	adds	r3, #26
 8010970:	4618      	mov	r0, r3
 8010972:	f7ff f847 	bl	800fa04 <ld_word>
 8010976:	4603      	mov	r3, r0
 8010978:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	781b      	ldrb	r3, [r3, #0]
 801097e:	2b03      	cmp	r3, #3
 8010980:	d109      	bne.n	8010996 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8010982:	683b      	ldr	r3, [r7, #0]
 8010984:	3314      	adds	r3, #20
 8010986:	4618      	mov	r0, r3
 8010988:	f7ff f83c 	bl	800fa04 <ld_word>
 801098c:	4603      	mov	r3, r0
 801098e:	041b      	lsls	r3, r3, #16
 8010990:	68fa      	ldr	r2, [r7, #12]
 8010992:	4313      	orrs	r3, r2
 8010994:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8010996:	68fb      	ldr	r3, [r7, #12]
}
 8010998:	4618      	mov	r0, r3
 801099a:	3710      	adds	r7, #16
 801099c:	46bd      	mov	sp, r7
 801099e:	bd80      	pop	{r7, pc}

080109a0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80109a0:	b580      	push	{r7, lr}
 80109a2:	b084      	sub	sp, #16
 80109a4:	af00      	add	r7, sp, #0
 80109a6:	60f8      	str	r0, [r7, #12]
 80109a8:	60b9      	str	r1, [r7, #8]
 80109aa:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80109ac:	68bb      	ldr	r3, [r7, #8]
 80109ae:	331a      	adds	r3, #26
 80109b0:	687a      	ldr	r2, [r7, #4]
 80109b2:	b292      	uxth	r2, r2
 80109b4:	4611      	mov	r1, r2
 80109b6:	4618      	mov	r0, r3
 80109b8:	f7ff f85f 	bl	800fa7a <st_word>
	if (fs->fs_type == FS_FAT32) {
 80109bc:	68fb      	ldr	r3, [r7, #12]
 80109be:	781b      	ldrb	r3, [r3, #0]
 80109c0:	2b03      	cmp	r3, #3
 80109c2:	d109      	bne.n	80109d8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80109c4:	68bb      	ldr	r3, [r7, #8]
 80109c6:	f103 0214 	add.w	r2, r3, #20
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	0c1b      	lsrs	r3, r3, #16
 80109ce:	b29b      	uxth	r3, r3
 80109d0:	4619      	mov	r1, r3
 80109d2:	4610      	mov	r0, r2
 80109d4:	f7ff f851 	bl	800fa7a <st_word>
	}
}
 80109d8:	bf00      	nop
 80109da:	3710      	adds	r7, #16
 80109dc:	46bd      	mov	sp, r7
 80109de:	bd80      	pop	{r7, pc}

080109e0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80109e0:	b580      	push	{r7, lr}
 80109e2:	b086      	sub	sp, #24
 80109e4:	af00      	add	r7, sp, #0
 80109e6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80109ee:	2100      	movs	r1, #0
 80109f0:	6878      	ldr	r0, [r7, #4]
 80109f2:	f7ff fe2f 	bl	8010654 <dir_sdi>
 80109f6:	4603      	mov	r3, r0
 80109f8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80109fa:	7dfb      	ldrb	r3, [r7, #23]
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d001      	beq.n	8010a04 <dir_find+0x24>
 8010a00:	7dfb      	ldrb	r3, [r7, #23]
 8010a02:	e03e      	b.n	8010a82 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	69db      	ldr	r3, [r3, #28]
 8010a08:	4619      	mov	r1, r3
 8010a0a:	6938      	ldr	r0, [r7, #16]
 8010a0c:	f7ff faaa 	bl	800ff64 <move_window>
 8010a10:	4603      	mov	r3, r0
 8010a12:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8010a14:	7dfb      	ldrb	r3, [r7, #23]
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d12f      	bne.n	8010a7a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	6a1b      	ldr	r3, [r3, #32]
 8010a1e:	781b      	ldrb	r3, [r3, #0]
 8010a20:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8010a22:	7bfb      	ldrb	r3, [r7, #15]
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d102      	bne.n	8010a2e <dir_find+0x4e>
 8010a28:	2304      	movs	r3, #4
 8010a2a:	75fb      	strb	r3, [r7, #23]
 8010a2c:	e028      	b.n	8010a80 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	6a1b      	ldr	r3, [r3, #32]
 8010a32:	330b      	adds	r3, #11
 8010a34:	781b      	ldrb	r3, [r3, #0]
 8010a36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010a3a:	b2da      	uxtb	r2, r3
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	6a1b      	ldr	r3, [r3, #32]
 8010a44:	330b      	adds	r3, #11
 8010a46:	781b      	ldrb	r3, [r3, #0]
 8010a48:	f003 0308 	and.w	r3, r3, #8
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d10a      	bne.n	8010a66 <dir_find+0x86>
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	6a18      	ldr	r0, [r3, #32]
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	3324      	adds	r3, #36	; 0x24
 8010a58:	220b      	movs	r2, #11
 8010a5a:	4619      	mov	r1, r3
 8010a5c:	f7ff f88f 	bl	800fb7e <mem_cmp>
 8010a60:	4603      	mov	r3, r0
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d00b      	beq.n	8010a7e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8010a66:	2100      	movs	r1, #0
 8010a68:	6878      	ldr	r0, [r7, #4]
 8010a6a:	f7ff fe6e 	bl	801074a <dir_next>
 8010a6e:	4603      	mov	r3, r0
 8010a70:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8010a72:	7dfb      	ldrb	r3, [r7, #23]
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d0c5      	beq.n	8010a04 <dir_find+0x24>
 8010a78:	e002      	b.n	8010a80 <dir_find+0xa0>
		if (res != FR_OK) break;
 8010a7a:	bf00      	nop
 8010a7c:	e000      	b.n	8010a80 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8010a7e:	bf00      	nop

	return res;
 8010a80:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a82:	4618      	mov	r0, r3
 8010a84:	3718      	adds	r7, #24
 8010a86:	46bd      	mov	sp, r7
 8010a88:	bd80      	pop	{r7, pc}

08010a8a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8010a8a:	b580      	push	{r7, lr}
 8010a8c:	b084      	sub	sp, #16
 8010a8e:	af00      	add	r7, sp, #0
 8010a90:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8010a98:	2101      	movs	r1, #1
 8010a9a:	6878      	ldr	r0, [r7, #4]
 8010a9c:	f7ff ff1a 	bl	80108d4 <dir_alloc>
 8010aa0:	4603      	mov	r3, r0
 8010aa2:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8010aa4:	7bfb      	ldrb	r3, [r7, #15]
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d11c      	bne.n	8010ae4 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	69db      	ldr	r3, [r3, #28]
 8010aae:	4619      	mov	r1, r3
 8010ab0:	68b8      	ldr	r0, [r7, #8]
 8010ab2:	f7ff fa57 	bl	800ff64 <move_window>
 8010ab6:	4603      	mov	r3, r0
 8010ab8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010aba:	7bfb      	ldrb	r3, [r7, #15]
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d111      	bne.n	8010ae4 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	6a1b      	ldr	r3, [r3, #32]
 8010ac4:	2220      	movs	r2, #32
 8010ac6:	2100      	movs	r1, #0
 8010ac8:	4618      	mov	r0, r3
 8010aca:	f7ff f83e 	bl	800fb4a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	6a18      	ldr	r0, [r3, #32]
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	3324      	adds	r3, #36	; 0x24
 8010ad6:	220b      	movs	r2, #11
 8010ad8:	4619      	mov	r1, r3
 8010ada:	f7ff f815 	bl	800fb08 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8010ade:	68bb      	ldr	r3, [r7, #8]
 8010ae0:	2201      	movs	r2, #1
 8010ae2:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8010ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ae6:	4618      	mov	r0, r3
 8010ae8:	3710      	adds	r7, #16
 8010aea:	46bd      	mov	sp, r7
 8010aec:	bd80      	pop	{r7, pc}
	...

08010af0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8010af0:	b580      	push	{r7, lr}
 8010af2:	b088      	sub	sp, #32
 8010af4:	af00      	add	r7, sp, #0
 8010af6:	6078      	str	r0, [r7, #4]
 8010af8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8010afa:	683b      	ldr	r3, [r7, #0]
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	60fb      	str	r3, [r7, #12]
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	3324      	adds	r3, #36	; 0x24
 8010b04:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8010b06:	220b      	movs	r2, #11
 8010b08:	2120      	movs	r1, #32
 8010b0a:	68b8      	ldr	r0, [r7, #8]
 8010b0c:	f7ff f81d 	bl	800fb4a <mem_set>
	si = i = 0; ni = 8;
 8010b10:	2300      	movs	r3, #0
 8010b12:	613b      	str	r3, [r7, #16]
 8010b14:	693b      	ldr	r3, [r7, #16]
 8010b16:	617b      	str	r3, [r7, #20]
 8010b18:	2308      	movs	r3, #8
 8010b1a:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8010b1c:	697b      	ldr	r3, [r7, #20]
 8010b1e:	1c5a      	adds	r2, r3, #1
 8010b20:	617a      	str	r2, [r7, #20]
 8010b22:	68fa      	ldr	r2, [r7, #12]
 8010b24:	4413      	add	r3, r2
 8010b26:	781b      	ldrb	r3, [r3, #0]
 8010b28:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8010b2a:	7ffb      	ldrb	r3, [r7, #31]
 8010b2c:	2b20      	cmp	r3, #32
 8010b2e:	d94e      	bls.n	8010bce <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8010b30:	7ffb      	ldrb	r3, [r7, #31]
 8010b32:	2b2f      	cmp	r3, #47	; 0x2f
 8010b34:	d006      	beq.n	8010b44 <create_name+0x54>
 8010b36:	7ffb      	ldrb	r3, [r7, #31]
 8010b38:	2b5c      	cmp	r3, #92	; 0x5c
 8010b3a:	d110      	bne.n	8010b5e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8010b3c:	e002      	b.n	8010b44 <create_name+0x54>
 8010b3e:	697b      	ldr	r3, [r7, #20]
 8010b40:	3301      	adds	r3, #1
 8010b42:	617b      	str	r3, [r7, #20]
 8010b44:	68fa      	ldr	r2, [r7, #12]
 8010b46:	697b      	ldr	r3, [r7, #20]
 8010b48:	4413      	add	r3, r2
 8010b4a:	781b      	ldrb	r3, [r3, #0]
 8010b4c:	2b2f      	cmp	r3, #47	; 0x2f
 8010b4e:	d0f6      	beq.n	8010b3e <create_name+0x4e>
 8010b50:	68fa      	ldr	r2, [r7, #12]
 8010b52:	697b      	ldr	r3, [r7, #20]
 8010b54:	4413      	add	r3, r2
 8010b56:	781b      	ldrb	r3, [r3, #0]
 8010b58:	2b5c      	cmp	r3, #92	; 0x5c
 8010b5a:	d0f0      	beq.n	8010b3e <create_name+0x4e>
			break;
 8010b5c:	e038      	b.n	8010bd0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8010b5e:	7ffb      	ldrb	r3, [r7, #31]
 8010b60:	2b2e      	cmp	r3, #46	; 0x2e
 8010b62:	d003      	beq.n	8010b6c <create_name+0x7c>
 8010b64:	693a      	ldr	r2, [r7, #16]
 8010b66:	69bb      	ldr	r3, [r7, #24]
 8010b68:	429a      	cmp	r2, r3
 8010b6a:	d30c      	bcc.n	8010b86 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8010b6c:	69bb      	ldr	r3, [r7, #24]
 8010b6e:	2b0b      	cmp	r3, #11
 8010b70:	d002      	beq.n	8010b78 <create_name+0x88>
 8010b72:	7ffb      	ldrb	r3, [r7, #31]
 8010b74:	2b2e      	cmp	r3, #46	; 0x2e
 8010b76:	d001      	beq.n	8010b7c <create_name+0x8c>
 8010b78:	2306      	movs	r3, #6
 8010b7a:	e044      	b.n	8010c06 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8010b7c:	2308      	movs	r3, #8
 8010b7e:	613b      	str	r3, [r7, #16]
 8010b80:	230b      	movs	r3, #11
 8010b82:	61bb      	str	r3, [r7, #24]
			continue;
 8010b84:	e022      	b.n	8010bcc <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8010b86:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	da04      	bge.n	8010b98 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8010b8e:	7ffb      	ldrb	r3, [r7, #31]
 8010b90:	3b80      	subs	r3, #128	; 0x80
 8010b92:	4a1f      	ldr	r2, [pc, #124]	; (8010c10 <create_name+0x120>)
 8010b94:	5cd3      	ldrb	r3, [r2, r3]
 8010b96:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8010b98:	7ffb      	ldrb	r3, [r7, #31]
 8010b9a:	4619      	mov	r1, r3
 8010b9c:	481d      	ldr	r0, [pc, #116]	; (8010c14 <create_name+0x124>)
 8010b9e:	f7ff f815 	bl	800fbcc <chk_chr>
 8010ba2:	4603      	mov	r3, r0
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d001      	beq.n	8010bac <create_name+0xbc>
 8010ba8:	2306      	movs	r3, #6
 8010baa:	e02c      	b.n	8010c06 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8010bac:	7ffb      	ldrb	r3, [r7, #31]
 8010bae:	2b60      	cmp	r3, #96	; 0x60
 8010bb0:	d905      	bls.n	8010bbe <create_name+0xce>
 8010bb2:	7ffb      	ldrb	r3, [r7, #31]
 8010bb4:	2b7a      	cmp	r3, #122	; 0x7a
 8010bb6:	d802      	bhi.n	8010bbe <create_name+0xce>
 8010bb8:	7ffb      	ldrb	r3, [r7, #31]
 8010bba:	3b20      	subs	r3, #32
 8010bbc:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8010bbe:	693b      	ldr	r3, [r7, #16]
 8010bc0:	1c5a      	adds	r2, r3, #1
 8010bc2:	613a      	str	r2, [r7, #16]
 8010bc4:	68ba      	ldr	r2, [r7, #8]
 8010bc6:	4413      	add	r3, r2
 8010bc8:	7ffa      	ldrb	r2, [r7, #31]
 8010bca:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8010bcc:	e7a6      	b.n	8010b1c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8010bce:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8010bd0:	68fa      	ldr	r2, [r7, #12]
 8010bd2:	697b      	ldr	r3, [r7, #20]
 8010bd4:	441a      	add	r2, r3
 8010bd6:	683b      	ldr	r3, [r7, #0]
 8010bd8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8010bda:	693b      	ldr	r3, [r7, #16]
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d101      	bne.n	8010be4 <create_name+0xf4>
 8010be0:	2306      	movs	r3, #6
 8010be2:	e010      	b.n	8010c06 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8010be4:	68bb      	ldr	r3, [r7, #8]
 8010be6:	781b      	ldrb	r3, [r3, #0]
 8010be8:	2be5      	cmp	r3, #229	; 0xe5
 8010bea:	d102      	bne.n	8010bf2 <create_name+0x102>
 8010bec:	68bb      	ldr	r3, [r7, #8]
 8010bee:	2205      	movs	r2, #5
 8010bf0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8010bf2:	7ffb      	ldrb	r3, [r7, #31]
 8010bf4:	2b20      	cmp	r3, #32
 8010bf6:	d801      	bhi.n	8010bfc <create_name+0x10c>
 8010bf8:	2204      	movs	r2, #4
 8010bfa:	e000      	b.n	8010bfe <create_name+0x10e>
 8010bfc:	2200      	movs	r2, #0
 8010bfe:	68bb      	ldr	r3, [r7, #8]
 8010c00:	330b      	adds	r3, #11
 8010c02:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8010c04:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8010c06:	4618      	mov	r0, r3
 8010c08:	3720      	adds	r7, #32
 8010c0a:	46bd      	mov	sp, r7
 8010c0c:	bd80      	pop	{r7, pc}
 8010c0e:	bf00      	nop
 8010c10:	080157f8 	.word	0x080157f8
 8010c14:	08015778 	.word	0x08015778

08010c18 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8010c18:	b580      	push	{r7, lr}
 8010c1a:	b086      	sub	sp, #24
 8010c1c:	af00      	add	r7, sp, #0
 8010c1e:	6078      	str	r0, [r7, #4]
 8010c20:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8010c26:	693b      	ldr	r3, [r7, #16]
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8010c2c:	e002      	b.n	8010c34 <follow_path+0x1c>
 8010c2e:	683b      	ldr	r3, [r7, #0]
 8010c30:	3301      	adds	r3, #1
 8010c32:	603b      	str	r3, [r7, #0]
 8010c34:	683b      	ldr	r3, [r7, #0]
 8010c36:	781b      	ldrb	r3, [r3, #0]
 8010c38:	2b2f      	cmp	r3, #47	; 0x2f
 8010c3a:	d0f8      	beq.n	8010c2e <follow_path+0x16>
 8010c3c:	683b      	ldr	r3, [r7, #0]
 8010c3e:	781b      	ldrb	r3, [r3, #0]
 8010c40:	2b5c      	cmp	r3, #92	; 0x5c
 8010c42:	d0f4      	beq.n	8010c2e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8010c44:	693b      	ldr	r3, [r7, #16]
 8010c46:	2200      	movs	r2, #0
 8010c48:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8010c4a:	683b      	ldr	r3, [r7, #0]
 8010c4c:	781b      	ldrb	r3, [r3, #0]
 8010c4e:	2b1f      	cmp	r3, #31
 8010c50:	d80a      	bhi.n	8010c68 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	2280      	movs	r2, #128	; 0x80
 8010c56:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8010c5a:	2100      	movs	r1, #0
 8010c5c:	6878      	ldr	r0, [r7, #4]
 8010c5e:	f7ff fcf9 	bl	8010654 <dir_sdi>
 8010c62:	4603      	mov	r3, r0
 8010c64:	75fb      	strb	r3, [r7, #23]
 8010c66:	e043      	b.n	8010cf0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010c68:	463b      	mov	r3, r7
 8010c6a:	4619      	mov	r1, r3
 8010c6c:	6878      	ldr	r0, [r7, #4]
 8010c6e:	f7ff ff3f 	bl	8010af0 <create_name>
 8010c72:	4603      	mov	r3, r0
 8010c74:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8010c76:	7dfb      	ldrb	r3, [r7, #23]
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d134      	bne.n	8010ce6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8010c7c:	6878      	ldr	r0, [r7, #4]
 8010c7e:	f7ff feaf 	bl	80109e0 <dir_find>
 8010c82:	4603      	mov	r3, r0
 8010c84:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010c8c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8010c8e:	7dfb      	ldrb	r3, [r7, #23]
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d00a      	beq.n	8010caa <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8010c94:	7dfb      	ldrb	r3, [r7, #23]
 8010c96:	2b04      	cmp	r3, #4
 8010c98:	d127      	bne.n	8010cea <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8010c9a:	7afb      	ldrb	r3, [r7, #11]
 8010c9c:	f003 0304 	and.w	r3, r3, #4
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d122      	bne.n	8010cea <follow_path+0xd2>
 8010ca4:	2305      	movs	r3, #5
 8010ca6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8010ca8:	e01f      	b.n	8010cea <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010caa:	7afb      	ldrb	r3, [r7, #11]
 8010cac:	f003 0304 	and.w	r3, r3, #4
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d11c      	bne.n	8010cee <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8010cb4:	693b      	ldr	r3, [r7, #16]
 8010cb6:	799b      	ldrb	r3, [r3, #6]
 8010cb8:	f003 0310 	and.w	r3, r3, #16
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d102      	bne.n	8010cc6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8010cc0:	2305      	movs	r3, #5
 8010cc2:	75fb      	strb	r3, [r7, #23]
 8010cc4:	e014      	b.n	8010cf0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	695b      	ldr	r3, [r3, #20]
 8010cd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010cd4:	4413      	add	r3, r2
 8010cd6:	4619      	mov	r1, r3
 8010cd8:	68f8      	ldr	r0, [r7, #12]
 8010cda:	f7ff fe42 	bl	8010962 <ld_clust>
 8010cde:	4602      	mov	r2, r0
 8010ce0:	693b      	ldr	r3, [r7, #16]
 8010ce2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010ce4:	e7c0      	b.n	8010c68 <follow_path+0x50>
			if (res != FR_OK) break;
 8010ce6:	bf00      	nop
 8010ce8:	e002      	b.n	8010cf0 <follow_path+0xd8>
				break;
 8010cea:	bf00      	nop
 8010cec:	e000      	b.n	8010cf0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010cee:	bf00      	nop
			}
		}
	}

	return res;
 8010cf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8010cf2:	4618      	mov	r0, r3
 8010cf4:	3718      	adds	r7, #24
 8010cf6:	46bd      	mov	sp, r7
 8010cf8:	bd80      	pop	{r7, pc}

08010cfa <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8010cfa:	b480      	push	{r7}
 8010cfc:	b087      	sub	sp, #28
 8010cfe:	af00      	add	r7, sp, #0
 8010d00:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8010d02:	f04f 33ff 	mov.w	r3, #4294967295
 8010d06:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	681b      	ldr	r3, [r3, #0]
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d031      	beq.n	8010d74 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	681b      	ldr	r3, [r3, #0]
 8010d14:	617b      	str	r3, [r7, #20]
 8010d16:	e002      	b.n	8010d1e <get_ldnumber+0x24>
 8010d18:	697b      	ldr	r3, [r7, #20]
 8010d1a:	3301      	adds	r3, #1
 8010d1c:	617b      	str	r3, [r7, #20]
 8010d1e:	697b      	ldr	r3, [r7, #20]
 8010d20:	781b      	ldrb	r3, [r3, #0]
 8010d22:	2b20      	cmp	r3, #32
 8010d24:	d903      	bls.n	8010d2e <get_ldnumber+0x34>
 8010d26:	697b      	ldr	r3, [r7, #20]
 8010d28:	781b      	ldrb	r3, [r3, #0]
 8010d2a:	2b3a      	cmp	r3, #58	; 0x3a
 8010d2c:	d1f4      	bne.n	8010d18 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8010d2e:	697b      	ldr	r3, [r7, #20]
 8010d30:	781b      	ldrb	r3, [r3, #0]
 8010d32:	2b3a      	cmp	r3, #58	; 0x3a
 8010d34:	d11c      	bne.n	8010d70 <get_ldnumber+0x76>
			tp = *path;
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8010d3c:	68fb      	ldr	r3, [r7, #12]
 8010d3e:	1c5a      	adds	r2, r3, #1
 8010d40:	60fa      	str	r2, [r7, #12]
 8010d42:	781b      	ldrb	r3, [r3, #0]
 8010d44:	3b30      	subs	r3, #48	; 0x30
 8010d46:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8010d48:	68bb      	ldr	r3, [r7, #8]
 8010d4a:	2b09      	cmp	r3, #9
 8010d4c:	d80e      	bhi.n	8010d6c <get_ldnumber+0x72>
 8010d4e:	68fa      	ldr	r2, [r7, #12]
 8010d50:	697b      	ldr	r3, [r7, #20]
 8010d52:	429a      	cmp	r2, r3
 8010d54:	d10a      	bne.n	8010d6c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8010d56:	68bb      	ldr	r3, [r7, #8]
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d107      	bne.n	8010d6c <get_ldnumber+0x72>
					vol = (int)i;
 8010d5c:	68bb      	ldr	r3, [r7, #8]
 8010d5e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8010d60:	697b      	ldr	r3, [r7, #20]
 8010d62:	3301      	adds	r3, #1
 8010d64:	617b      	str	r3, [r7, #20]
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	697a      	ldr	r2, [r7, #20]
 8010d6a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8010d6c:	693b      	ldr	r3, [r7, #16]
 8010d6e:	e002      	b.n	8010d76 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8010d70:	2300      	movs	r3, #0
 8010d72:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8010d74:	693b      	ldr	r3, [r7, #16]
}
 8010d76:	4618      	mov	r0, r3
 8010d78:	371c      	adds	r7, #28
 8010d7a:	46bd      	mov	sp, r7
 8010d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d80:	4770      	bx	lr
	...

08010d84 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8010d84:	b580      	push	{r7, lr}
 8010d86:	b082      	sub	sp, #8
 8010d88:	af00      	add	r7, sp, #0
 8010d8a:	6078      	str	r0, [r7, #4]
 8010d8c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	2200      	movs	r2, #0
 8010d92:	70da      	strb	r2, [r3, #3]
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	f04f 32ff 	mov.w	r2, #4294967295
 8010d9a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8010d9c:	6839      	ldr	r1, [r7, #0]
 8010d9e:	6878      	ldr	r0, [r7, #4]
 8010da0:	f7ff f8e0 	bl	800ff64 <move_window>
 8010da4:	4603      	mov	r3, r0
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d001      	beq.n	8010dae <check_fs+0x2a>
 8010daa:	2304      	movs	r3, #4
 8010dac:	e038      	b.n	8010e20 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	3330      	adds	r3, #48	; 0x30
 8010db2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010db6:	4618      	mov	r0, r3
 8010db8:	f7fe fe24 	bl	800fa04 <ld_word>
 8010dbc:	4603      	mov	r3, r0
 8010dbe:	461a      	mov	r2, r3
 8010dc0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010dc4:	429a      	cmp	r2, r3
 8010dc6:	d001      	beq.n	8010dcc <check_fs+0x48>
 8010dc8:	2303      	movs	r3, #3
 8010dca:	e029      	b.n	8010e20 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010dd2:	2be9      	cmp	r3, #233	; 0xe9
 8010dd4:	d009      	beq.n	8010dea <check_fs+0x66>
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010ddc:	2beb      	cmp	r3, #235	; 0xeb
 8010dde:	d11e      	bne.n	8010e1e <check_fs+0x9a>
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8010de6:	2b90      	cmp	r3, #144	; 0x90
 8010de8:	d119      	bne.n	8010e1e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	3330      	adds	r3, #48	; 0x30
 8010dee:	3336      	adds	r3, #54	; 0x36
 8010df0:	4618      	mov	r0, r3
 8010df2:	f7fe fe1f 	bl	800fa34 <ld_dword>
 8010df6:	4603      	mov	r3, r0
 8010df8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8010dfc:	4a0a      	ldr	r2, [pc, #40]	; (8010e28 <check_fs+0xa4>)
 8010dfe:	4293      	cmp	r3, r2
 8010e00:	d101      	bne.n	8010e06 <check_fs+0x82>
 8010e02:	2300      	movs	r3, #0
 8010e04:	e00c      	b.n	8010e20 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	3330      	adds	r3, #48	; 0x30
 8010e0a:	3352      	adds	r3, #82	; 0x52
 8010e0c:	4618      	mov	r0, r3
 8010e0e:	f7fe fe11 	bl	800fa34 <ld_dword>
 8010e12:	4602      	mov	r2, r0
 8010e14:	4b05      	ldr	r3, [pc, #20]	; (8010e2c <check_fs+0xa8>)
 8010e16:	429a      	cmp	r2, r3
 8010e18:	d101      	bne.n	8010e1e <check_fs+0x9a>
 8010e1a:	2300      	movs	r3, #0
 8010e1c:	e000      	b.n	8010e20 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8010e1e:	2302      	movs	r3, #2
}
 8010e20:	4618      	mov	r0, r3
 8010e22:	3708      	adds	r7, #8
 8010e24:	46bd      	mov	sp, r7
 8010e26:	bd80      	pop	{r7, pc}
 8010e28:	00544146 	.word	0x00544146
 8010e2c:	33544146 	.word	0x33544146

08010e30 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8010e30:	b580      	push	{r7, lr}
 8010e32:	b096      	sub	sp, #88	; 0x58
 8010e34:	af00      	add	r7, sp, #0
 8010e36:	60f8      	str	r0, [r7, #12]
 8010e38:	60b9      	str	r1, [r7, #8]
 8010e3a:	4613      	mov	r3, r2
 8010e3c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8010e3e:	68bb      	ldr	r3, [r7, #8]
 8010e40:	2200      	movs	r2, #0
 8010e42:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8010e44:	68f8      	ldr	r0, [r7, #12]
 8010e46:	f7ff ff58 	bl	8010cfa <get_ldnumber>
 8010e4a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8010e4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	da01      	bge.n	8010e56 <find_volume+0x26>
 8010e52:	230b      	movs	r3, #11
 8010e54:	e22e      	b.n	80112b4 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8010e56:	4aa8      	ldr	r2, [pc, #672]	; (80110f8 <find_volume+0x2c8>)
 8010e58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010e5e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8010e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d101      	bne.n	8010e6a <find_volume+0x3a>
 8010e66:	230c      	movs	r3, #12
 8010e68:	e224      	b.n	80112b4 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8010e6a:	68bb      	ldr	r3, [r7, #8]
 8010e6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010e6e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8010e70:	79fb      	ldrb	r3, [r7, #7]
 8010e72:	f023 0301 	bic.w	r3, r3, #1
 8010e76:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8010e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e7a:	781b      	ldrb	r3, [r3, #0]
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d01a      	beq.n	8010eb6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8010e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e82:	785b      	ldrb	r3, [r3, #1]
 8010e84:	4618      	mov	r0, r3
 8010e86:	f7fe fd1f 	bl	800f8c8 <disk_status>
 8010e8a:	4603      	mov	r3, r0
 8010e8c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8010e90:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010e94:	f003 0301 	and.w	r3, r3, #1
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d10c      	bne.n	8010eb6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8010e9c:	79fb      	ldrb	r3, [r7, #7]
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d007      	beq.n	8010eb2 <find_volume+0x82>
 8010ea2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010ea6:	f003 0304 	and.w	r3, r3, #4
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d001      	beq.n	8010eb2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8010eae:	230a      	movs	r3, #10
 8010eb0:	e200      	b.n	80112b4 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8010eb2:	2300      	movs	r3, #0
 8010eb4:	e1fe      	b.n	80112b4 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8010eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010eb8:	2200      	movs	r2, #0
 8010eba:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8010ebc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ebe:	b2da      	uxtb	r2, r3
 8010ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ec2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8010ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ec6:	785b      	ldrb	r3, [r3, #1]
 8010ec8:	4618      	mov	r0, r3
 8010eca:	f7fe fd17 	bl	800f8fc <disk_initialize>
 8010ece:	4603      	mov	r3, r0
 8010ed0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8010ed4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010ed8:	f003 0301 	and.w	r3, r3, #1
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d001      	beq.n	8010ee4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8010ee0:	2303      	movs	r3, #3
 8010ee2:	e1e7      	b.n	80112b4 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8010ee4:	79fb      	ldrb	r3, [r7, #7]
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d007      	beq.n	8010efa <find_volume+0xca>
 8010eea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010eee:	f003 0304 	and.w	r3, r3, #4
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d001      	beq.n	8010efa <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8010ef6:	230a      	movs	r3, #10
 8010ef8:	e1dc      	b.n	80112b4 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8010efa:	2300      	movs	r3, #0
 8010efc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8010efe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010f00:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010f02:	f7ff ff3f 	bl	8010d84 <check_fs>
 8010f06:	4603      	mov	r3, r0
 8010f08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8010f0c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010f10:	2b02      	cmp	r3, #2
 8010f12:	d14b      	bne.n	8010fac <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010f14:	2300      	movs	r3, #0
 8010f16:	643b      	str	r3, [r7, #64]	; 0x40
 8010f18:	e01f      	b.n	8010f5a <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8010f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f1c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010f20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f22:	011b      	lsls	r3, r3, #4
 8010f24:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8010f28:	4413      	add	r3, r2
 8010f2a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8010f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f2e:	3304      	adds	r3, #4
 8010f30:	781b      	ldrb	r3, [r3, #0]
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d006      	beq.n	8010f44 <find_volume+0x114>
 8010f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f38:	3308      	adds	r3, #8
 8010f3a:	4618      	mov	r0, r3
 8010f3c:	f7fe fd7a 	bl	800fa34 <ld_dword>
 8010f40:	4602      	mov	r2, r0
 8010f42:	e000      	b.n	8010f46 <find_volume+0x116>
 8010f44:	2200      	movs	r2, #0
 8010f46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f48:	009b      	lsls	r3, r3, #2
 8010f4a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8010f4e:	440b      	add	r3, r1
 8010f50:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010f54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f56:	3301      	adds	r3, #1
 8010f58:	643b      	str	r3, [r7, #64]	; 0x40
 8010f5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f5c:	2b03      	cmp	r3, #3
 8010f5e:	d9dc      	bls.n	8010f1a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8010f60:	2300      	movs	r3, #0
 8010f62:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8010f64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d002      	beq.n	8010f70 <find_volume+0x140>
 8010f6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f6c:	3b01      	subs	r3, #1
 8010f6e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8010f70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f72:	009b      	lsls	r3, r3, #2
 8010f74:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8010f78:	4413      	add	r3, r2
 8010f7a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8010f7e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8010f80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d005      	beq.n	8010f92 <find_volume+0x162>
 8010f86:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010f88:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010f8a:	f7ff fefb 	bl	8010d84 <check_fs>
 8010f8e:	4603      	mov	r3, r0
 8010f90:	e000      	b.n	8010f94 <find_volume+0x164>
 8010f92:	2303      	movs	r3, #3
 8010f94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8010f98:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010f9c:	2b01      	cmp	r3, #1
 8010f9e:	d905      	bls.n	8010fac <find_volume+0x17c>
 8010fa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010fa2:	3301      	adds	r3, #1
 8010fa4:	643b      	str	r3, [r7, #64]	; 0x40
 8010fa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010fa8:	2b03      	cmp	r3, #3
 8010faa:	d9e1      	bls.n	8010f70 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8010fac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010fb0:	2b04      	cmp	r3, #4
 8010fb2:	d101      	bne.n	8010fb8 <find_volume+0x188>
 8010fb4:	2301      	movs	r3, #1
 8010fb6:	e17d      	b.n	80112b4 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8010fb8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010fbc:	2b01      	cmp	r3, #1
 8010fbe:	d901      	bls.n	8010fc4 <find_volume+0x194>
 8010fc0:	230d      	movs	r3, #13
 8010fc2:	e177      	b.n	80112b4 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8010fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fc6:	3330      	adds	r3, #48	; 0x30
 8010fc8:	330b      	adds	r3, #11
 8010fca:	4618      	mov	r0, r3
 8010fcc:	f7fe fd1a 	bl	800fa04 <ld_word>
 8010fd0:	4603      	mov	r3, r0
 8010fd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010fd6:	d001      	beq.n	8010fdc <find_volume+0x1ac>
 8010fd8:	230d      	movs	r3, #13
 8010fda:	e16b      	b.n	80112b4 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8010fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fde:	3330      	adds	r3, #48	; 0x30
 8010fe0:	3316      	adds	r3, #22
 8010fe2:	4618      	mov	r0, r3
 8010fe4:	f7fe fd0e 	bl	800fa04 <ld_word>
 8010fe8:	4603      	mov	r3, r0
 8010fea:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8010fec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d106      	bne.n	8011000 <find_volume+0x1d0>
 8010ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ff4:	3330      	adds	r3, #48	; 0x30
 8010ff6:	3324      	adds	r3, #36	; 0x24
 8010ff8:	4618      	mov	r0, r3
 8010ffa:	f7fe fd1b 	bl	800fa34 <ld_dword>
 8010ffe:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8011000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011002:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011004:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8011006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011008:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 801100c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801100e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8011010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011012:	789b      	ldrb	r3, [r3, #2]
 8011014:	2b01      	cmp	r3, #1
 8011016:	d005      	beq.n	8011024 <find_volume+0x1f4>
 8011018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801101a:	789b      	ldrb	r3, [r3, #2]
 801101c:	2b02      	cmp	r3, #2
 801101e:	d001      	beq.n	8011024 <find_volume+0x1f4>
 8011020:	230d      	movs	r3, #13
 8011022:	e147      	b.n	80112b4 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8011024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011026:	789b      	ldrb	r3, [r3, #2]
 8011028:	461a      	mov	r2, r3
 801102a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801102c:	fb02 f303 	mul.w	r3, r2, r3
 8011030:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8011032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011038:	b29a      	uxth	r2, r3
 801103a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801103c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801103e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011040:	895b      	ldrh	r3, [r3, #10]
 8011042:	2b00      	cmp	r3, #0
 8011044:	d008      	beq.n	8011058 <find_volume+0x228>
 8011046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011048:	895b      	ldrh	r3, [r3, #10]
 801104a:	461a      	mov	r2, r3
 801104c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801104e:	895b      	ldrh	r3, [r3, #10]
 8011050:	3b01      	subs	r3, #1
 8011052:	4013      	ands	r3, r2
 8011054:	2b00      	cmp	r3, #0
 8011056:	d001      	beq.n	801105c <find_volume+0x22c>
 8011058:	230d      	movs	r3, #13
 801105a:	e12b      	b.n	80112b4 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801105c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801105e:	3330      	adds	r3, #48	; 0x30
 8011060:	3311      	adds	r3, #17
 8011062:	4618      	mov	r0, r3
 8011064:	f7fe fcce 	bl	800fa04 <ld_word>
 8011068:	4603      	mov	r3, r0
 801106a:	461a      	mov	r2, r3
 801106c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801106e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8011070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011072:	891b      	ldrh	r3, [r3, #8]
 8011074:	f003 030f 	and.w	r3, r3, #15
 8011078:	b29b      	uxth	r3, r3
 801107a:	2b00      	cmp	r3, #0
 801107c:	d001      	beq.n	8011082 <find_volume+0x252>
 801107e:	230d      	movs	r3, #13
 8011080:	e118      	b.n	80112b4 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8011082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011084:	3330      	adds	r3, #48	; 0x30
 8011086:	3313      	adds	r3, #19
 8011088:	4618      	mov	r0, r3
 801108a:	f7fe fcbb 	bl	800fa04 <ld_word>
 801108e:	4603      	mov	r3, r0
 8011090:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8011092:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011094:	2b00      	cmp	r3, #0
 8011096:	d106      	bne.n	80110a6 <find_volume+0x276>
 8011098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801109a:	3330      	adds	r3, #48	; 0x30
 801109c:	3320      	adds	r3, #32
 801109e:	4618      	mov	r0, r3
 80110a0:	f7fe fcc8 	bl	800fa34 <ld_dword>
 80110a4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80110a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110a8:	3330      	adds	r3, #48	; 0x30
 80110aa:	330e      	adds	r3, #14
 80110ac:	4618      	mov	r0, r3
 80110ae:	f7fe fca9 	bl	800fa04 <ld_word>
 80110b2:	4603      	mov	r3, r0
 80110b4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80110b6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d101      	bne.n	80110c0 <find_volume+0x290>
 80110bc:	230d      	movs	r3, #13
 80110be:	e0f9      	b.n	80112b4 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80110c0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80110c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80110c4:	4413      	add	r3, r2
 80110c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80110c8:	8912      	ldrh	r2, [r2, #8]
 80110ca:	0912      	lsrs	r2, r2, #4
 80110cc:	b292      	uxth	r2, r2
 80110ce:	4413      	add	r3, r2
 80110d0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80110d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80110d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110d6:	429a      	cmp	r2, r3
 80110d8:	d201      	bcs.n	80110de <find_volume+0x2ae>
 80110da:	230d      	movs	r3, #13
 80110dc:	e0ea      	b.n	80112b4 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80110de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80110e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110e2:	1ad3      	subs	r3, r2, r3
 80110e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80110e6:	8952      	ldrh	r2, [r2, #10]
 80110e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80110ec:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80110ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d103      	bne.n	80110fc <find_volume+0x2cc>
 80110f4:	230d      	movs	r3, #13
 80110f6:	e0dd      	b.n	80112b4 <find_volume+0x484>
 80110f8:	240002e8 	.word	0x240002e8
		fmt = FS_FAT32;
 80110fc:	2303      	movs	r3, #3
 80110fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8011102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011104:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8011108:	4293      	cmp	r3, r2
 801110a:	d802      	bhi.n	8011112 <find_volume+0x2e2>
 801110c:	2302      	movs	r3, #2
 801110e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8011112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011114:	f640 72f5 	movw	r2, #4085	; 0xff5
 8011118:	4293      	cmp	r3, r2
 801111a:	d802      	bhi.n	8011122 <find_volume+0x2f2>
 801111c:	2301      	movs	r3, #1
 801111e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8011122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011124:	1c9a      	adds	r2, r3, #2
 8011126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011128:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 801112a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801112c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801112e:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8011130:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011132:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011134:	441a      	add	r2, r3
 8011136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011138:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 801113a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801113c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801113e:	441a      	add	r2, r3
 8011140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011142:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8011144:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011148:	2b03      	cmp	r3, #3
 801114a:	d11e      	bne.n	801118a <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801114c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801114e:	3330      	adds	r3, #48	; 0x30
 8011150:	332a      	adds	r3, #42	; 0x2a
 8011152:	4618      	mov	r0, r3
 8011154:	f7fe fc56 	bl	800fa04 <ld_word>
 8011158:	4603      	mov	r3, r0
 801115a:	2b00      	cmp	r3, #0
 801115c:	d001      	beq.n	8011162 <find_volume+0x332>
 801115e:	230d      	movs	r3, #13
 8011160:	e0a8      	b.n	80112b4 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8011162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011164:	891b      	ldrh	r3, [r3, #8]
 8011166:	2b00      	cmp	r3, #0
 8011168:	d001      	beq.n	801116e <find_volume+0x33e>
 801116a:	230d      	movs	r3, #13
 801116c:	e0a2      	b.n	80112b4 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801116e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011170:	3330      	adds	r3, #48	; 0x30
 8011172:	332c      	adds	r3, #44	; 0x2c
 8011174:	4618      	mov	r0, r3
 8011176:	f7fe fc5d 	bl	800fa34 <ld_dword>
 801117a:	4602      	mov	r2, r0
 801117c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801117e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8011180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011182:	695b      	ldr	r3, [r3, #20]
 8011184:	009b      	lsls	r3, r3, #2
 8011186:	647b      	str	r3, [r7, #68]	; 0x44
 8011188:	e01f      	b.n	80111ca <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801118a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801118c:	891b      	ldrh	r3, [r3, #8]
 801118e:	2b00      	cmp	r3, #0
 8011190:	d101      	bne.n	8011196 <find_volume+0x366>
 8011192:	230d      	movs	r3, #13
 8011194:	e08e      	b.n	80112b4 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8011196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011198:	6a1a      	ldr	r2, [r3, #32]
 801119a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801119c:	441a      	add	r2, r3
 801119e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111a0:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80111a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80111a6:	2b02      	cmp	r3, #2
 80111a8:	d103      	bne.n	80111b2 <find_volume+0x382>
 80111aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111ac:	695b      	ldr	r3, [r3, #20]
 80111ae:	005b      	lsls	r3, r3, #1
 80111b0:	e00a      	b.n	80111c8 <find_volume+0x398>
 80111b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111b4:	695a      	ldr	r2, [r3, #20]
 80111b6:	4613      	mov	r3, r2
 80111b8:	005b      	lsls	r3, r3, #1
 80111ba:	4413      	add	r3, r2
 80111bc:	085a      	lsrs	r2, r3, #1
 80111be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111c0:	695b      	ldr	r3, [r3, #20]
 80111c2:	f003 0301 	and.w	r3, r3, #1
 80111c6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80111c8:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80111ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111cc:	699a      	ldr	r2, [r3, #24]
 80111ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80111d0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80111d4:	0a5b      	lsrs	r3, r3, #9
 80111d6:	429a      	cmp	r2, r3
 80111d8:	d201      	bcs.n	80111de <find_volume+0x3ae>
 80111da:	230d      	movs	r3, #13
 80111dc:	e06a      	b.n	80112b4 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80111de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111e0:	f04f 32ff 	mov.w	r2, #4294967295
 80111e4:	611a      	str	r2, [r3, #16]
 80111e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111e8:	691a      	ldr	r2, [r3, #16]
 80111ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111ec:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80111ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111f0:	2280      	movs	r2, #128	; 0x80
 80111f2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80111f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80111f8:	2b03      	cmp	r3, #3
 80111fa:	d149      	bne.n	8011290 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80111fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111fe:	3330      	adds	r3, #48	; 0x30
 8011200:	3330      	adds	r3, #48	; 0x30
 8011202:	4618      	mov	r0, r3
 8011204:	f7fe fbfe 	bl	800fa04 <ld_word>
 8011208:	4603      	mov	r3, r0
 801120a:	2b01      	cmp	r3, #1
 801120c:	d140      	bne.n	8011290 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 801120e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011210:	3301      	adds	r3, #1
 8011212:	4619      	mov	r1, r3
 8011214:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011216:	f7fe fea5 	bl	800ff64 <move_window>
 801121a:	4603      	mov	r3, r0
 801121c:	2b00      	cmp	r3, #0
 801121e:	d137      	bne.n	8011290 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8011220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011222:	2200      	movs	r2, #0
 8011224:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8011226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011228:	3330      	adds	r3, #48	; 0x30
 801122a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801122e:	4618      	mov	r0, r3
 8011230:	f7fe fbe8 	bl	800fa04 <ld_word>
 8011234:	4603      	mov	r3, r0
 8011236:	461a      	mov	r2, r3
 8011238:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801123c:	429a      	cmp	r2, r3
 801123e:	d127      	bne.n	8011290 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8011240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011242:	3330      	adds	r3, #48	; 0x30
 8011244:	4618      	mov	r0, r3
 8011246:	f7fe fbf5 	bl	800fa34 <ld_dword>
 801124a:	4602      	mov	r2, r0
 801124c:	4b1b      	ldr	r3, [pc, #108]	; (80112bc <find_volume+0x48c>)
 801124e:	429a      	cmp	r2, r3
 8011250:	d11e      	bne.n	8011290 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8011252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011254:	3330      	adds	r3, #48	; 0x30
 8011256:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801125a:	4618      	mov	r0, r3
 801125c:	f7fe fbea 	bl	800fa34 <ld_dword>
 8011260:	4602      	mov	r2, r0
 8011262:	4b17      	ldr	r3, [pc, #92]	; (80112c0 <find_volume+0x490>)
 8011264:	429a      	cmp	r2, r3
 8011266:	d113      	bne.n	8011290 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8011268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801126a:	3330      	adds	r3, #48	; 0x30
 801126c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8011270:	4618      	mov	r0, r3
 8011272:	f7fe fbdf 	bl	800fa34 <ld_dword>
 8011276:	4602      	mov	r2, r0
 8011278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801127a:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801127c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801127e:	3330      	adds	r3, #48	; 0x30
 8011280:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8011284:	4618      	mov	r0, r3
 8011286:	f7fe fbd5 	bl	800fa34 <ld_dword>
 801128a:	4602      	mov	r2, r0
 801128c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801128e:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8011290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011292:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8011296:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8011298:	4b0a      	ldr	r3, [pc, #40]	; (80112c4 <find_volume+0x494>)
 801129a:	881b      	ldrh	r3, [r3, #0]
 801129c:	3301      	adds	r3, #1
 801129e:	b29a      	uxth	r2, r3
 80112a0:	4b08      	ldr	r3, [pc, #32]	; (80112c4 <find_volume+0x494>)
 80112a2:	801a      	strh	r2, [r3, #0]
 80112a4:	4b07      	ldr	r3, [pc, #28]	; (80112c4 <find_volume+0x494>)
 80112a6:	881a      	ldrh	r2, [r3, #0]
 80112a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112aa:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80112ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80112ae:	f7fe fdf1 	bl	800fe94 <clear_lock>
#endif
	return FR_OK;
 80112b2:	2300      	movs	r3, #0
}
 80112b4:	4618      	mov	r0, r3
 80112b6:	3758      	adds	r7, #88	; 0x58
 80112b8:	46bd      	mov	sp, r7
 80112ba:	bd80      	pop	{r7, pc}
 80112bc:	41615252 	.word	0x41615252
 80112c0:	61417272 	.word	0x61417272
 80112c4:	240002ec 	.word	0x240002ec

080112c8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80112c8:	b580      	push	{r7, lr}
 80112ca:	b084      	sub	sp, #16
 80112cc:	af00      	add	r7, sp, #0
 80112ce:	6078      	str	r0, [r7, #4]
 80112d0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80112d2:	2309      	movs	r3, #9
 80112d4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d01c      	beq.n	8011316 <validate+0x4e>
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d018      	beq.n	8011316 <validate+0x4e>
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	681b      	ldr	r3, [r3, #0]
 80112e8:	781b      	ldrb	r3, [r3, #0]
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d013      	beq.n	8011316 <validate+0x4e>
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	889a      	ldrh	r2, [r3, #4]
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	88db      	ldrh	r3, [r3, #6]
 80112f8:	429a      	cmp	r2, r3
 80112fa:	d10c      	bne.n	8011316 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	681b      	ldr	r3, [r3, #0]
 8011300:	785b      	ldrb	r3, [r3, #1]
 8011302:	4618      	mov	r0, r3
 8011304:	f7fe fae0 	bl	800f8c8 <disk_status>
 8011308:	4603      	mov	r3, r0
 801130a:	f003 0301 	and.w	r3, r3, #1
 801130e:	2b00      	cmp	r3, #0
 8011310:	d101      	bne.n	8011316 <validate+0x4e>
			res = FR_OK;
 8011312:	2300      	movs	r3, #0
 8011314:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8011316:	7bfb      	ldrb	r3, [r7, #15]
 8011318:	2b00      	cmp	r3, #0
 801131a:	d102      	bne.n	8011322 <validate+0x5a>
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	681b      	ldr	r3, [r3, #0]
 8011320:	e000      	b.n	8011324 <validate+0x5c>
 8011322:	2300      	movs	r3, #0
 8011324:	683a      	ldr	r2, [r7, #0]
 8011326:	6013      	str	r3, [r2, #0]
	return res;
 8011328:	7bfb      	ldrb	r3, [r7, #15]
}
 801132a:	4618      	mov	r0, r3
 801132c:	3710      	adds	r7, #16
 801132e:	46bd      	mov	sp, r7
 8011330:	bd80      	pop	{r7, pc}
	...

08011334 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8011334:	b580      	push	{r7, lr}
 8011336:	b088      	sub	sp, #32
 8011338:	af00      	add	r7, sp, #0
 801133a:	60f8      	str	r0, [r7, #12]
 801133c:	60b9      	str	r1, [r7, #8]
 801133e:	4613      	mov	r3, r2
 8011340:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8011342:	68bb      	ldr	r3, [r7, #8]
 8011344:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8011346:	f107 0310 	add.w	r3, r7, #16
 801134a:	4618      	mov	r0, r3
 801134c:	f7ff fcd5 	bl	8010cfa <get_ldnumber>
 8011350:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8011352:	69fb      	ldr	r3, [r7, #28]
 8011354:	2b00      	cmp	r3, #0
 8011356:	da01      	bge.n	801135c <f_mount+0x28>
 8011358:	230b      	movs	r3, #11
 801135a:	e02b      	b.n	80113b4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801135c:	4a17      	ldr	r2, [pc, #92]	; (80113bc <f_mount+0x88>)
 801135e:	69fb      	ldr	r3, [r7, #28]
 8011360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011364:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8011366:	69bb      	ldr	r3, [r7, #24]
 8011368:	2b00      	cmp	r3, #0
 801136a:	d005      	beq.n	8011378 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801136c:	69b8      	ldr	r0, [r7, #24]
 801136e:	f7fe fd91 	bl	800fe94 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8011372:	69bb      	ldr	r3, [r7, #24]
 8011374:	2200      	movs	r2, #0
 8011376:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	2b00      	cmp	r3, #0
 801137c:	d002      	beq.n	8011384 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801137e:	68fb      	ldr	r3, [r7, #12]
 8011380:	2200      	movs	r2, #0
 8011382:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8011384:	68fa      	ldr	r2, [r7, #12]
 8011386:	490d      	ldr	r1, [pc, #52]	; (80113bc <f_mount+0x88>)
 8011388:	69fb      	ldr	r3, [r7, #28]
 801138a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	2b00      	cmp	r3, #0
 8011392:	d002      	beq.n	801139a <f_mount+0x66>
 8011394:	79fb      	ldrb	r3, [r7, #7]
 8011396:	2b01      	cmp	r3, #1
 8011398:	d001      	beq.n	801139e <f_mount+0x6a>
 801139a:	2300      	movs	r3, #0
 801139c:	e00a      	b.n	80113b4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801139e:	f107 010c 	add.w	r1, r7, #12
 80113a2:	f107 0308 	add.w	r3, r7, #8
 80113a6:	2200      	movs	r2, #0
 80113a8:	4618      	mov	r0, r3
 80113aa:	f7ff fd41 	bl	8010e30 <find_volume>
 80113ae:	4603      	mov	r3, r0
 80113b0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80113b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80113b4:	4618      	mov	r0, r3
 80113b6:	3720      	adds	r7, #32
 80113b8:	46bd      	mov	sp, r7
 80113ba:	bd80      	pop	{r7, pc}
 80113bc:	240002e8 	.word	0x240002e8

080113c0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80113c0:	b580      	push	{r7, lr}
 80113c2:	b098      	sub	sp, #96	; 0x60
 80113c4:	af00      	add	r7, sp, #0
 80113c6:	60f8      	str	r0, [r7, #12]
 80113c8:	60b9      	str	r1, [r7, #8]
 80113ca:	4613      	mov	r3, r2
 80113cc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d101      	bne.n	80113d8 <f_open+0x18>
 80113d4:	2309      	movs	r3, #9
 80113d6:	e1ad      	b.n	8011734 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80113d8:	79fb      	ldrb	r3, [r7, #7]
 80113da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80113de:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80113e0:	79fa      	ldrb	r2, [r7, #7]
 80113e2:	f107 0110 	add.w	r1, r7, #16
 80113e6:	f107 0308 	add.w	r3, r7, #8
 80113ea:	4618      	mov	r0, r3
 80113ec:	f7ff fd20 	bl	8010e30 <find_volume>
 80113f0:	4603      	mov	r3, r0
 80113f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80113f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	f040 8191 	bne.w	8011722 <f_open+0x362>
		dj.obj.fs = fs;
 8011400:	693b      	ldr	r3, [r7, #16]
 8011402:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8011404:	68ba      	ldr	r2, [r7, #8]
 8011406:	f107 0314 	add.w	r3, r7, #20
 801140a:	4611      	mov	r1, r2
 801140c:	4618      	mov	r0, r3
 801140e:	f7ff fc03 	bl	8010c18 <follow_path>
 8011412:	4603      	mov	r3, r0
 8011414:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8011418:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801141c:	2b00      	cmp	r3, #0
 801141e:	d11a      	bne.n	8011456 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8011420:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011424:	b25b      	sxtb	r3, r3
 8011426:	2b00      	cmp	r3, #0
 8011428:	da03      	bge.n	8011432 <f_open+0x72>
				res = FR_INVALID_NAME;
 801142a:	2306      	movs	r3, #6
 801142c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8011430:	e011      	b.n	8011456 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011432:	79fb      	ldrb	r3, [r7, #7]
 8011434:	f023 0301 	bic.w	r3, r3, #1
 8011438:	2b00      	cmp	r3, #0
 801143a:	bf14      	ite	ne
 801143c:	2301      	movne	r3, #1
 801143e:	2300      	moveq	r3, #0
 8011440:	b2db      	uxtb	r3, r3
 8011442:	461a      	mov	r2, r3
 8011444:	f107 0314 	add.w	r3, r7, #20
 8011448:	4611      	mov	r1, r2
 801144a:	4618      	mov	r0, r3
 801144c:	f7fe fbda 	bl	800fc04 <chk_lock>
 8011450:	4603      	mov	r3, r0
 8011452:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8011456:	79fb      	ldrb	r3, [r7, #7]
 8011458:	f003 031c 	and.w	r3, r3, #28
 801145c:	2b00      	cmp	r3, #0
 801145e:	d07f      	beq.n	8011560 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8011460:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011464:	2b00      	cmp	r3, #0
 8011466:	d017      	beq.n	8011498 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8011468:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801146c:	2b04      	cmp	r3, #4
 801146e:	d10e      	bne.n	801148e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8011470:	f7fe fc24 	bl	800fcbc <enq_lock>
 8011474:	4603      	mov	r3, r0
 8011476:	2b00      	cmp	r3, #0
 8011478:	d006      	beq.n	8011488 <f_open+0xc8>
 801147a:	f107 0314 	add.w	r3, r7, #20
 801147e:	4618      	mov	r0, r3
 8011480:	f7ff fb03 	bl	8010a8a <dir_register>
 8011484:	4603      	mov	r3, r0
 8011486:	e000      	b.n	801148a <f_open+0xca>
 8011488:	2312      	movs	r3, #18
 801148a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801148e:	79fb      	ldrb	r3, [r7, #7]
 8011490:	f043 0308 	orr.w	r3, r3, #8
 8011494:	71fb      	strb	r3, [r7, #7]
 8011496:	e010      	b.n	80114ba <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8011498:	7ebb      	ldrb	r3, [r7, #26]
 801149a:	f003 0311 	and.w	r3, r3, #17
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d003      	beq.n	80114aa <f_open+0xea>
					res = FR_DENIED;
 80114a2:	2307      	movs	r3, #7
 80114a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80114a8:	e007      	b.n	80114ba <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80114aa:	79fb      	ldrb	r3, [r7, #7]
 80114ac:	f003 0304 	and.w	r3, r3, #4
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	d002      	beq.n	80114ba <f_open+0xfa>
 80114b4:	2308      	movs	r3, #8
 80114b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80114ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80114be:	2b00      	cmp	r3, #0
 80114c0:	d168      	bne.n	8011594 <f_open+0x1d4>
 80114c2:	79fb      	ldrb	r3, [r7, #7]
 80114c4:	f003 0308 	and.w	r3, r3, #8
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d063      	beq.n	8011594 <f_open+0x1d4>
				dw = GET_FATTIME();
 80114cc:	f7fb fa04 	bl	800c8d8 <get_fattime>
 80114d0:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80114d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114d4:	330e      	adds	r3, #14
 80114d6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80114d8:	4618      	mov	r0, r3
 80114da:	f7fe fae9 	bl	800fab0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80114de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114e0:	3316      	adds	r3, #22
 80114e2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80114e4:	4618      	mov	r0, r3
 80114e6:	f7fe fae3 	bl	800fab0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80114ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114ec:	330b      	adds	r3, #11
 80114ee:	2220      	movs	r2, #32
 80114f0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80114f2:	693b      	ldr	r3, [r7, #16]
 80114f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80114f6:	4611      	mov	r1, r2
 80114f8:	4618      	mov	r0, r3
 80114fa:	f7ff fa32 	bl	8010962 <ld_clust>
 80114fe:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8011500:	693b      	ldr	r3, [r7, #16]
 8011502:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011504:	2200      	movs	r2, #0
 8011506:	4618      	mov	r0, r3
 8011508:	f7ff fa4a 	bl	80109a0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801150c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801150e:	331c      	adds	r3, #28
 8011510:	2100      	movs	r1, #0
 8011512:	4618      	mov	r0, r3
 8011514:	f7fe facc 	bl	800fab0 <st_dword>
					fs->wflag = 1;
 8011518:	693b      	ldr	r3, [r7, #16]
 801151a:	2201      	movs	r2, #1
 801151c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801151e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011520:	2b00      	cmp	r3, #0
 8011522:	d037      	beq.n	8011594 <f_open+0x1d4>
						dw = fs->winsect;
 8011524:	693b      	ldr	r3, [r7, #16]
 8011526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011528:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 801152a:	f107 0314 	add.w	r3, r7, #20
 801152e:	2200      	movs	r2, #0
 8011530:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8011532:	4618      	mov	r0, r3
 8011534:	f7fe ff5d 	bl	80103f2 <remove_chain>
 8011538:	4603      	mov	r3, r0
 801153a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 801153e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011542:	2b00      	cmp	r3, #0
 8011544:	d126      	bne.n	8011594 <f_open+0x1d4>
							res = move_window(fs, dw);
 8011546:	693b      	ldr	r3, [r7, #16]
 8011548:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801154a:	4618      	mov	r0, r3
 801154c:	f7fe fd0a 	bl	800ff64 <move_window>
 8011550:	4603      	mov	r3, r0
 8011552:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8011556:	693b      	ldr	r3, [r7, #16]
 8011558:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801155a:	3a01      	subs	r2, #1
 801155c:	60da      	str	r2, [r3, #12]
 801155e:	e019      	b.n	8011594 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8011560:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011564:	2b00      	cmp	r3, #0
 8011566:	d115      	bne.n	8011594 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8011568:	7ebb      	ldrb	r3, [r7, #26]
 801156a:	f003 0310 	and.w	r3, r3, #16
 801156e:	2b00      	cmp	r3, #0
 8011570:	d003      	beq.n	801157a <f_open+0x1ba>
					res = FR_NO_FILE;
 8011572:	2304      	movs	r3, #4
 8011574:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8011578:	e00c      	b.n	8011594 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801157a:	79fb      	ldrb	r3, [r7, #7]
 801157c:	f003 0302 	and.w	r3, r3, #2
 8011580:	2b00      	cmp	r3, #0
 8011582:	d007      	beq.n	8011594 <f_open+0x1d4>
 8011584:	7ebb      	ldrb	r3, [r7, #26]
 8011586:	f003 0301 	and.w	r3, r3, #1
 801158a:	2b00      	cmp	r3, #0
 801158c:	d002      	beq.n	8011594 <f_open+0x1d4>
						res = FR_DENIED;
 801158e:	2307      	movs	r3, #7
 8011590:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8011594:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011598:	2b00      	cmp	r3, #0
 801159a:	d128      	bne.n	80115ee <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801159c:	79fb      	ldrb	r3, [r7, #7]
 801159e:	f003 0308 	and.w	r3, r3, #8
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d003      	beq.n	80115ae <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80115a6:	79fb      	ldrb	r3, [r7, #7]
 80115a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80115ac:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80115ae:	693b      	ldr	r3, [r7, #16]
 80115b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115b2:	68fb      	ldr	r3, [r7, #12]
 80115b4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80115b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80115b8:	68fb      	ldr	r3, [r7, #12]
 80115ba:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80115bc:	79fb      	ldrb	r3, [r7, #7]
 80115be:	f023 0301 	bic.w	r3, r3, #1
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	bf14      	ite	ne
 80115c6:	2301      	movne	r3, #1
 80115c8:	2300      	moveq	r3, #0
 80115ca:	b2db      	uxtb	r3, r3
 80115cc:	461a      	mov	r2, r3
 80115ce:	f107 0314 	add.w	r3, r7, #20
 80115d2:	4611      	mov	r1, r2
 80115d4:	4618      	mov	r0, r3
 80115d6:	f7fe fb93 	bl	800fd00 <inc_lock>
 80115da:	4602      	mov	r2, r0
 80115dc:	68fb      	ldr	r3, [r7, #12]
 80115de:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80115e0:	68fb      	ldr	r3, [r7, #12]
 80115e2:	691b      	ldr	r3, [r3, #16]
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	d102      	bne.n	80115ee <f_open+0x22e>
 80115e8:	2302      	movs	r3, #2
 80115ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80115ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	f040 8095 	bne.w	8011722 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80115f8:	693b      	ldr	r3, [r7, #16]
 80115fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80115fc:	4611      	mov	r1, r2
 80115fe:	4618      	mov	r0, r3
 8011600:	f7ff f9af 	bl	8010962 <ld_clust>
 8011604:	4602      	mov	r2, r0
 8011606:	68fb      	ldr	r3, [r7, #12]
 8011608:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801160a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801160c:	331c      	adds	r3, #28
 801160e:	4618      	mov	r0, r3
 8011610:	f7fe fa10 	bl	800fa34 <ld_dword>
 8011614:	4602      	mov	r2, r0
 8011616:	68fb      	ldr	r3, [r7, #12]
 8011618:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801161a:	68fb      	ldr	r3, [r7, #12]
 801161c:	2200      	movs	r2, #0
 801161e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8011620:	693a      	ldr	r2, [r7, #16]
 8011622:	68fb      	ldr	r3, [r7, #12]
 8011624:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8011626:	693b      	ldr	r3, [r7, #16]
 8011628:	88da      	ldrh	r2, [r3, #6]
 801162a:	68fb      	ldr	r3, [r7, #12]
 801162c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801162e:	68fb      	ldr	r3, [r7, #12]
 8011630:	79fa      	ldrb	r2, [r7, #7]
 8011632:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8011634:	68fb      	ldr	r3, [r7, #12]
 8011636:	2200      	movs	r2, #0
 8011638:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801163a:	68fb      	ldr	r3, [r7, #12]
 801163c:	2200      	movs	r2, #0
 801163e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8011640:	68fb      	ldr	r3, [r7, #12]
 8011642:	2200      	movs	r2, #0
 8011644:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8011646:	68fb      	ldr	r3, [r7, #12]
 8011648:	3330      	adds	r3, #48	; 0x30
 801164a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801164e:	2100      	movs	r1, #0
 8011650:	4618      	mov	r0, r3
 8011652:	f7fe fa7a 	bl	800fb4a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8011656:	79fb      	ldrb	r3, [r7, #7]
 8011658:	f003 0320 	and.w	r3, r3, #32
 801165c:	2b00      	cmp	r3, #0
 801165e:	d060      	beq.n	8011722 <f_open+0x362>
 8011660:	68fb      	ldr	r3, [r7, #12]
 8011662:	68db      	ldr	r3, [r3, #12]
 8011664:	2b00      	cmp	r3, #0
 8011666:	d05c      	beq.n	8011722 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8011668:	68fb      	ldr	r3, [r7, #12]
 801166a:	68da      	ldr	r2, [r3, #12]
 801166c:	68fb      	ldr	r3, [r7, #12]
 801166e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8011670:	693b      	ldr	r3, [r7, #16]
 8011672:	895b      	ldrh	r3, [r3, #10]
 8011674:	025b      	lsls	r3, r3, #9
 8011676:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8011678:	68fb      	ldr	r3, [r7, #12]
 801167a:	689b      	ldr	r3, [r3, #8]
 801167c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801167e:	68fb      	ldr	r3, [r7, #12]
 8011680:	68db      	ldr	r3, [r3, #12]
 8011682:	657b      	str	r3, [r7, #84]	; 0x54
 8011684:	e016      	b.n	80116b4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8011686:	68fb      	ldr	r3, [r7, #12]
 8011688:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801168a:	4618      	mov	r0, r3
 801168c:	f7fe fd25 	bl	80100da <get_fat>
 8011690:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8011692:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011694:	2b01      	cmp	r3, #1
 8011696:	d802      	bhi.n	801169e <f_open+0x2de>
 8011698:	2302      	movs	r3, #2
 801169a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801169e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80116a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80116a4:	d102      	bne.n	80116ac <f_open+0x2ec>
 80116a6:	2301      	movs	r3, #1
 80116a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80116ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80116ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80116b0:	1ad3      	subs	r3, r2, r3
 80116b2:	657b      	str	r3, [r7, #84]	; 0x54
 80116b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d103      	bne.n	80116c4 <f_open+0x304>
 80116bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80116be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80116c0:	429a      	cmp	r2, r3
 80116c2:	d8e0      	bhi.n	8011686 <f_open+0x2c6>
				}
				fp->clust = clst;
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80116c8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80116ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	d127      	bne.n	8011722 <f_open+0x362>
 80116d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80116d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80116d8:	2b00      	cmp	r3, #0
 80116da:	d022      	beq.n	8011722 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80116dc:	693b      	ldr	r3, [r7, #16]
 80116de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80116e0:	4618      	mov	r0, r3
 80116e2:	f7fe fcdb 	bl	801009c <clust2sect>
 80116e6:	6478      	str	r0, [r7, #68]	; 0x44
 80116e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d103      	bne.n	80116f6 <f_open+0x336>
						res = FR_INT_ERR;
 80116ee:	2302      	movs	r3, #2
 80116f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80116f4:	e015      	b.n	8011722 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80116f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80116f8:	0a5a      	lsrs	r2, r3, #9
 80116fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80116fc:	441a      	add	r2, r3
 80116fe:	68fb      	ldr	r3, [r7, #12]
 8011700:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8011702:	693b      	ldr	r3, [r7, #16]
 8011704:	7858      	ldrb	r0, [r3, #1]
 8011706:	68fb      	ldr	r3, [r7, #12]
 8011708:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801170c:	68fb      	ldr	r3, [r7, #12]
 801170e:	6a1a      	ldr	r2, [r3, #32]
 8011710:	2301      	movs	r3, #1
 8011712:	f7fe f919 	bl	800f948 <disk_read>
 8011716:	4603      	mov	r3, r0
 8011718:	2b00      	cmp	r3, #0
 801171a:	d002      	beq.n	8011722 <f_open+0x362>
 801171c:	2301      	movs	r3, #1
 801171e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8011722:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011726:	2b00      	cmp	r3, #0
 8011728:	d002      	beq.n	8011730 <f_open+0x370>
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	2200      	movs	r2, #0
 801172e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8011730:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8011734:	4618      	mov	r0, r3
 8011736:	3760      	adds	r7, #96	; 0x60
 8011738:	46bd      	mov	sp, r7
 801173a:	bd80      	pop	{r7, pc}

0801173c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 801173c:	b580      	push	{r7, lr}
 801173e:	b08e      	sub	sp, #56	; 0x38
 8011740:	af00      	add	r7, sp, #0
 8011742:	60f8      	str	r0, [r7, #12]
 8011744:	60b9      	str	r1, [r7, #8]
 8011746:	607a      	str	r2, [r7, #4]
 8011748:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 801174a:	68bb      	ldr	r3, [r7, #8]
 801174c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 801174e:	683b      	ldr	r3, [r7, #0]
 8011750:	2200      	movs	r2, #0
 8011752:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8011754:	68fb      	ldr	r3, [r7, #12]
 8011756:	f107 0214 	add.w	r2, r7, #20
 801175a:	4611      	mov	r1, r2
 801175c:	4618      	mov	r0, r3
 801175e:	f7ff fdb3 	bl	80112c8 <validate>
 8011762:	4603      	mov	r3, r0
 8011764:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8011768:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801176c:	2b00      	cmp	r3, #0
 801176e:	d107      	bne.n	8011780 <f_read+0x44>
 8011770:	68fb      	ldr	r3, [r7, #12]
 8011772:	7d5b      	ldrb	r3, [r3, #21]
 8011774:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011778:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801177c:	2b00      	cmp	r3, #0
 801177e:	d002      	beq.n	8011786 <f_read+0x4a>
 8011780:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011784:	e115      	b.n	80119b2 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8011786:	68fb      	ldr	r3, [r7, #12]
 8011788:	7d1b      	ldrb	r3, [r3, #20]
 801178a:	f003 0301 	and.w	r3, r3, #1
 801178e:	2b00      	cmp	r3, #0
 8011790:	d101      	bne.n	8011796 <f_read+0x5a>
 8011792:	2307      	movs	r3, #7
 8011794:	e10d      	b.n	80119b2 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8011796:	68fb      	ldr	r3, [r7, #12]
 8011798:	68da      	ldr	r2, [r3, #12]
 801179a:	68fb      	ldr	r3, [r7, #12]
 801179c:	699b      	ldr	r3, [r3, #24]
 801179e:	1ad3      	subs	r3, r2, r3
 80117a0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80117a2:	687a      	ldr	r2, [r7, #4]
 80117a4:	6a3b      	ldr	r3, [r7, #32]
 80117a6:	429a      	cmp	r2, r3
 80117a8:	f240 80fe 	bls.w	80119a8 <f_read+0x26c>
 80117ac:	6a3b      	ldr	r3, [r7, #32]
 80117ae:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80117b0:	e0fa      	b.n	80119a8 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	699b      	ldr	r3, [r3, #24]
 80117b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	f040 80c6 	bne.w	801194c <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80117c0:	68fb      	ldr	r3, [r7, #12]
 80117c2:	699b      	ldr	r3, [r3, #24]
 80117c4:	0a5b      	lsrs	r3, r3, #9
 80117c6:	697a      	ldr	r2, [r7, #20]
 80117c8:	8952      	ldrh	r2, [r2, #10]
 80117ca:	3a01      	subs	r2, #1
 80117cc:	4013      	ands	r3, r2
 80117ce:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80117d0:	69fb      	ldr	r3, [r7, #28]
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d12f      	bne.n	8011836 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80117d6:	68fb      	ldr	r3, [r7, #12]
 80117d8:	699b      	ldr	r3, [r3, #24]
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d103      	bne.n	80117e6 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80117de:	68fb      	ldr	r3, [r7, #12]
 80117e0:	689b      	ldr	r3, [r3, #8]
 80117e2:	633b      	str	r3, [r7, #48]	; 0x30
 80117e4:	e013      	b.n	801180e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80117e6:	68fb      	ldr	r3, [r7, #12]
 80117e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d007      	beq.n	80117fe <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80117ee:	68fb      	ldr	r3, [r7, #12]
 80117f0:	699b      	ldr	r3, [r3, #24]
 80117f2:	4619      	mov	r1, r3
 80117f4:	68f8      	ldr	r0, [r7, #12]
 80117f6:	f7fe fef9 	bl	80105ec <clmt_clust>
 80117fa:	6338      	str	r0, [r7, #48]	; 0x30
 80117fc:	e007      	b.n	801180e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80117fe:	68fa      	ldr	r2, [r7, #12]
 8011800:	68fb      	ldr	r3, [r7, #12]
 8011802:	69db      	ldr	r3, [r3, #28]
 8011804:	4619      	mov	r1, r3
 8011806:	4610      	mov	r0, r2
 8011808:	f7fe fc67 	bl	80100da <get_fat>
 801180c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 801180e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011810:	2b01      	cmp	r3, #1
 8011812:	d804      	bhi.n	801181e <f_read+0xe2>
 8011814:	68fb      	ldr	r3, [r7, #12]
 8011816:	2202      	movs	r2, #2
 8011818:	755a      	strb	r2, [r3, #21]
 801181a:	2302      	movs	r3, #2
 801181c:	e0c9      	b.n	80119b2 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801181e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011824:	d104      	bne.n	8011830 <f_read+0xf4>
 8011826:	68fb      	ldr	r3, [r7, #12]
 8011828:	2201      	movs	r2, #1
 801182a:	755a      	strb	r2, [r3, #21]
 801182c:	2301      	movs	r3, #1
 801182e:	e0c0      	b.n	80119b2 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8011830:	68fb      	ldr	r3, [r7, #12]
 8011832:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011834:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8011836:	697a      	ldr	r2, [r7, #20]
 8011838:	68fb      	ldr	r3, [r7, #12]
 801183a:	69db      	ldr	r3, [r3, #28]
 801183c:	4619      	mov	r1, r3
 801183e:	4610      	mov	r0, r2
 8011840:	f7fe fc2c 	bl	801009c <clust2sect>
 8011844:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8011846:	69bb      	ldr	r3, [r7, #24]
 8011848:	2b00      	cmp	r3, #0
 801184a:	d104      	bne.n	8011856 <f_read+0x11a>
 801184c:	68fb      	ldr	r3, [r7, #12]
 801184e:	2202      	movs	r2, #2
 8011850:	755a      	strb	r2, [r3, #21]
 8011852:	2302      	movs	r3, #2
 8011854:	e0ad      	b.n	80119b2 <f_read+0x276>
			sect += csect;
 8011856:	69ba      	ldr	r2, [r7, #24]
 8011858:	69fb      	ldr	r3, [r7, #28]
 801185a:	4413      	add	r3, r2
 801185c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	0a5b      	lsrs	r3, r3, #9
 8011862:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8011864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011866:	2b00      	cmp	r3, #0
 8011868:	d039      	beq.n	80118de <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801186a:	69fa      	ldr	r2, [r7, #28]
 801186c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801186e:	4413      	add	r3, r2
 8011870:	697a      	ldr	r2, [r7, #20]
 8011872:	8952      	ldrh	r2, [r2, #10]
 8011874:	4293      	cmp	r3, r2
 8011876:	d905      	bls.n	8011884 <f_read+0x148>
					cc = fs->csize - csect;
 8011878:	697b      	ldr	r3, [r7, #20]
 801187a:	895b      	ldrh	r3, [r3, #10]
 801187c:	461a      	mov	r2, r3
 801187e:	69fb      	ldr	r3, [r7, #28]
 8011880:	1ad3      	subs	r3, r2, r3
 8011882:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011884:	697b      	ldr	r3, [r7, #20]
 8011886:	7858      	ldrb	r0, [r3, #1]
 8011888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801188a:	69ba      	ldr	r2, [r7, #24]
 801188c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801188e:	f7fe f85b 	bl	800f948 <disk_read>
 8011892:	4603      	mov	r3, r0
 8011894:	2b00      	cmp	r3, #0
 8011896:	d004      	beq.n	80118a2 <f_read+0x166>
 8011898:	68fb      	ldr	r3, [r7, #12]
 801189a:	2201      	movs	r2, #1
 801189c:	755a      	strb	r2, [r3, #21]
 801189e:	2301      	movs	r3, #1
 80118a0:	e087      	b.n	80119b2 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80118a2:	68fb      	ldr	r3, [r7, #12]
 80118a4:	7d1b      	ldrb	r3, [r3, #20]
 80118a6:	b25b      	sxtb	r3, r3
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	da14      	bge.n	80118d6 <f_read+0x19a>
 80118ac:	68fb      	ldr	r3, [r7, #12]
 80118ae:	6a1a      	ldr	r2, [r3, #32]
 80118b0:	69bb      	ldr	r3, [r7, #24]
 80118b2:	1ad3      	subs	r3, r2, r3
 80118b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80118b6:	429a      	cmp	r2, r3
 80118b8:	d90d      	bls.n	80118d6 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80118ba:	68fb      	ldr	r3, [r7, #12]
 80118bc:	6a1a      	ldr	r2, [r3, #32]
 80118be:	69bb      	ldr	r3, [r7, #24]
 80118c0:	1ad3      	subs	r3, r2, r3
 80118c2:	025b      	lsls	r3, r3, #9
 80118c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80118c6:	18d0      	adds	r0, r2, r3
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	3330      	adds	r3, #48	; 0x30
 80118cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80118d0:	4619      	mov	r1, r3
 80118d2:	f7fe f919 	bl	800fb08 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80118d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118d8:	025b      	lsls	r3, r3, #9
 80118da:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80118dc:	e050      	b.n	8011980 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80118de:	68fb      	ldr	r3, [r7, #12]
 80118e0:	6a1b      	ldr	r3, [r3, #32]
 80118e2:	69ba      	ldr	r2, [r7, #24]
 80118e4:	429a      	cmp	r2, r3
 80118e6:	d02e      	beq.n	8011946 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80118e8:	68fb      	ldr	r3, [r7, #12]
 80118ea:	7d1b      	ldrb	r3, [r3, #20]
 80118ec:	b25b      	sxtb	r3, r3
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	da18      	bge.n	8011924 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80118f2:	697b      	ldr	r3, [r7, #20]
 80118f4:	7858      	ldrb	r0, [r3, #1]
 80118f6:	68fb      	ldr	r3, [r7, #12]
 80118f8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80118fc:	68fb      	ldr	r3, [r7, #12]
 80118fe:	6a1a      	ldr	r2, [r3, #32]
 8011900:	2301      	movs	r3, #1
 8011902:	f7fe f841 	bl	800f988 <disk_write>
 8011906:	4603      	mov	r3, r0
 8011908:	2b00      	cmp	r3, #0
 801190a:	d004      	beq.n	8011916 <f_read+0x1da>
 801190c:	68fb      	ldr	r3, [r7, #12]
 801190e:	2201      	movs	r2, #1
 8011910:	755a      	strb	r2, [r3, #21]
 8011912:	2301      	movs	r3, #1
 8011914:	e04d      	b.n	80119b2 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8011916:	68fb      	ldr	r3, [r7, #12]
 8011918:	7d1b      	ldrb	r3, [r3, #20]
 801191a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801191e:	b2da      	uxtb	r2, r3
 8011920:	68fb      	ldr	r3, [r7, #12]
 8011922:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8011924:	697b      	ldr	r3, [r7, #20]
 8011926:	7858      	ldrb	r0, [r3, #1]
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801192e:	2301      	movs	r3, #1
 8011930:	69ba      	ldr	r2, [r7, #24]
 8011932:	f7fe f809 	bl	800f948 <disk_read>
 8011936:	4603      	mov	r3, r0
 8011938:	2b00      	cmp	r3, #0
 801193a:	d004      	beq.n	8011946 <f_read+0x20a>
 801193c:	68fb      	ldr	r3, [r7, #12]
 801193e:	2201      	movs	r2, #1
 8011940:	755a      	strb	r2, [r3, #21]
 8011942:	2301      	movs	r3, #1
 8011944:	e035      	b.n	80119b2 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8011946:	68fb      	ldr	r3, [r7, #12]
 8011948:	69ba      	ldr	r2, [r7, #24]
 801194a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801194c:	68fb      	ldr	r3, [r7, #12]
 801194e:	699b      	ldr	r3, [r3, #24]
 8011950:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011954:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8011958:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 801195a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	429a      	cmp	r2, r3
 8011960:	d901      	bls.n	8011966 <f_read+0x22a>
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8011966:	68fb      	ldr	r3, [r7, #12]
 8011968:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801196c:	68fb      	ldr	r3, [r7, #12]
 801196e:	699b      	ldr	r3, [r3, #24]
 8011970:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011974:	4413      	add	r3, r2
 8011976:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011978:	4619      	mov	r1, r3
 801197a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801197c:	f7fe f8c4 	bl	800fb08 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8011980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011984:	4413      	add	r3, r2
 8011986:	627b      	str	r3, [r7, #36]	; 0x24
 8011988:	68fb      	ldr	r3, [r7, #12]
 801198a:	699a      	ldr	r2, [r3, #24]
 801198c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801198e:	441a      	add	r2, r3
 8011990:	68fb      	ldr	r3, [r7, #12]
 8011992:	619a      	str	r2, [r3, #24]
 8011994:	683b      	ldr	r3, [r7, #0]
 8011996:	681a      	ldr	r2, [r3, #0]
 8011998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801199a:	441a      	add	r2, r3
 801199c:	683b      	ldr	r3, [r7, #0]
 801199e:	601a      	str	r2, [r3, #0]
 80119a0:	687a      	ldr	r2, [r7, #4]
 80119a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119a4:	1ad3      	subs	r3, r2, r3
 80119a6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	f47f af01 	bne.w	80117b2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80119b0:	2300      	movs	r3, #0
}
 80119b2:	4618      	mov	r0, r3
 80119b4:	3738      	adds	r7, #56	; 0x38
 80119b6:	46bd      	mov	sp, r7
 80119b8:	bd80      	pop	{r7, pc}

080119ba <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80119ba:	b580      	push	{r7, lr}
 80119bc:	b08c      	sub	sp, #48	; 0x30
 80119be:	af00      	add	r7, sp, #0
 80119c0:	60f8      	str	r0, [r7, #12]
 80119c2:	60b9      	str	r1, [r7, #8]
 80119c4:	607a      	str	r2, [r7, #4]
 80119c6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80119c8:	68bb      	ldr	r3, [r7, #8]
 80119ca:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80119cc:	683b      	ldr	r3, [r7, #0]
 80119ce:	2200      	movs	r2, #0
 80119d0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80119d2:	68fb      	ldr	r3, [r7, #12]
 80119d4:	f107 0210 	add.w	r2, r7, #16
 80119d8:	4611      	mov	r1, r2
 80119da:	4618      	mov	r0, r3
 80119dc:	f7ff fc74 	bl	80112c8 <validate>
 80119e0:	4603      	mov	r3, r0
 80119e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80119e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d107      	bne.n	80119fe <f_write+0x44>
 80119ee:	68fb      	ldr	r3, [r7, #12]
 80119f0:	7d5b      	ldrb	r3, [r3, #21]
 80119f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80119f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d002      	beq.n	8011a04 <f_write+0x4a>
 80119fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011a02:	e14b      	b.n	8011c9c <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8011a04:	68fb      	ldr	r3, [r7, #12]
 8011a06:	7d1b      	ldrb	r3, [r3, #20]
 8011a08:	f003 0302 	and.w	r3, r3, #2
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d101      	bne.n	8011a14 <f_write+0x5a>
 8011a10:	2307      	movs	r3, #7
 8011a12:	e143      	b.n	8011c9c <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8011a14:	68fb      	ldr	r3, [r7, #12]
 8011a16:	699a      	ldr	r2, [r3, #24]
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	441a      	add	r2, r3
 8011a1c:	68fb      	ldr	r3, [r7, #12]
 8011a1e:	699b      	ldr	r3, [r3, #24]
 8011a20:	429a      	cmp	r2, r3
 8011a22:	f080 812d 	bcs.w	8011c80 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8011a26:	68fb      	ldr	r3, [r7, #12]
 8011a28:	699b      	ldr	r3, [r3, #24]
 8011a2a:	43db      	mvns	r3, r3
 8011a2c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8011a2e:	e127      	b.n	8011c80 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8011a30:	68fb      	ldr	r3, [r7, #12]
 8011a32:	699b      	ldr	r3, [r3, #24]
 8011a34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	f040 80e3 	bne.w	8011c04 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8011a3e:	68fb      	ldr	r3, [r7, #12]
 8011a40:	699b      	ldr	r3, [r3, #24]
 8011a42:	0a5b      	lsrs	r3, r3, #9
 8011a44:	693a      	ldr	r2, [r7, #16]
 8011a46:	8952      	ldrh	r2, [r2, #10]
 8011a48:	3a01      	subs	r2, #1
 8011a4a:	4013      	ands	r3, r2
 8011a4c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8011a4e:	69bb      	ldr	r3, [r7, #24]
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d143      	bne.n	8011adc <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8011a54:	68fb      	ldr	r3, [r7, #12]
 8011a56:	699b      	ldr	r3, [r3, #24]
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d10c      	bne.n	8011a76 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8011a5c:	68fb      	ldr	r3, [r7, #12]
 8011a5e:	689b      	ldr	r3, [r3, #8]
 8011a60:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8011a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d11a      	bne.n	8011a9e <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8011a68:	68fb      	ldr	r3, [r7, #12]
 8011a6a:	2100      	movs	r1, #0
 8011a6c:	4618      	mov	r0, r3
 8011a6e:	f7fe fd25 	bl	80104bc <create_chain>
 8011a72:	62b8      	str	r0, [r7, #40]	; 0x28
 8011a74:	e013      	b.n	8011a9e <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8011a76:	68fb      	ldr	r3, [r7, #12]
 8011a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d007      	beq.n	8011a8e <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8011a7e:	68fb      	ldr	r3, [r7, #12]
 8011a80:	699b      	ldr	r3, [r3, #24]
 8011a82:	4619      	mov	r1, r3
 8011a84:	68f8      	ldr	r0, [r7, #12]
 8011a86:	f7fe fdb1 	bl	80105ec <clmt_clust>
 8011a8a:	62b8      	str	r0, [r7, #40]	; 0x28
 8011a8c:	e007      	b.n	8011a9e <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8011a8e:	68fa      	ldr	r2, [r7, #12]
 8011a90:	68fb      	ldr	r3, [r7, #12]
 8011a92:	69db      	ldr	r3, [r3, #28]
 8011a94:	4619      	mov	r1, r3
 8011a96:	4610      	mov	r0, r2
 8011a98:	f7fe fd10 	bl	80104bc <create_chain>
 8011a9c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	f000 80f2 	beq.w	8011c8a <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011aa8:	2b01      	cmp	r3, #1
 8011aaa:	d104      	bne.n	8011ab6 <f_write+0xfc>
 8011aac:	68fb      	ldr	r3, [r7, #12]
 8011aae:	2202      	movs	r2, #2
 8011ab0:	755a      	strb	r2, [r3, #21]
 8011ab2:	2302      	movs	r3, #2
 8011ab4:	e0f2      	b.n	8011c9c <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011abc:	d104      	bne.n	8011ac8 <f_write+0x10e>
 8011abe:	68fb      	ldr	r3, [r7, #12]
 8011ac0:	2201      	movs	r2, #1
 8011ac2:	755a      	strb	r2, [r3, #21]
 8011ac4:	2301      	movs	r3, #1
 8011ac6:	e0e9      	b.n	8011c9c <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8011ac8:	68fb      	ldr	r3, [r7, #12]
 8011aca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011acc:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8011ace:	68fb      	ldr	r3, [r7, #12]
 8011ad0:	689b      	ldr	r3, [r3, #8]
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d102      	bne.n	8011adc <f_write+0x122>
 8011ad6:	68fb      	ldr	r3, [r7, #12]
 8011ad8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011ada:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8011adc:	68fb      	ldr	r3, [r7, #12]
 8011ade:	7d1b      	ldrb	r3, [r3, #20]
 8011ae0:	b25b      	sxtb	r3, r3
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	da18      	bge.n	8011b18 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011ae6:	693b      	ldr	r3, [r7, #16]
 8011ae8:	7858      	ldrb	r0, [r3, #1]
 8011aea:	68fb      	ldr	r3, [r7, #12]
 8011aec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011af0:	68fb      	ldr	r3, [r7, #12]
 8011af2:	6a1a      	ldr	r2, [r3, #32]
 8011af4:	2301      	movs	r3, #1
 8011af6:	f7fd ff47 	bl	800f988 <disk_write>
 8011afa:	4603      	mov	r3, r0
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d004      	beq.n	8011b0a <f_write+0x150>
 8011b00:	68fb      	ldr	r3, [r7, #12]
 8011b02:	2201      	movs	r2, #1
 8011b04:	755a      	strb	r2, [r3, #21]
 8011b06:	2301      	movs	r3, #1
 8011b08:	e0c8      	b.n	8011c9c <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011b0a:	68fb      	ldr	r3, [r7, #12]
 8011b0c:	7d1b      	ldrb	r3, [r3, #20]
 8011b0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011b12:	b2da      	uxtb	r2, r3
 8011b14:	68fb      	ldr	r3, [r7, #12]
 8011b16:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8011b18:	693a      	ldr	r2, [r7, #16]
 8011b1a:	68fb      	ldr	r3, [r7, #12]
 8011b1c:	69db      	ldr	r3, [r3, #28]
 8011b1e:	4619      	mov	r1, r3
 8011b20:	4610      	mov	r0, r2
 8011b22:	f7fe fabb 	bl	801009c <clust2sect>
 8011b26:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8011b28:	697b      	ldr	r3, [r7, #20]
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d104      	bne.n	8011b38 <f_write+0x17e>
 8011b2e:	68fb      	ldr	r3, [r7, #12]
 8011b30:	2202      	movs	r2, #2
 8011b32:	755a      	strb	r2, [r3, #21]
 8011b34:	2302      	movs	r3, #2
 8011b36:	e0b1      	b.n	8011c9c <f_write+0x2e2>
			sect += csect;
 8011b38:	697a      	ldr	r2, [r7, #20]
 8011b3a:	69bb      	ldr	r3, [r7, #24]
 8011b3c:	4413      	add	r3, r2
 8011b3e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	0a5b      	lsrs	r3, r3, #9
 8011b44:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8011b46:	6a3b      	ldr	r3, [r7, #32]
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d03c      	beq.n	8011bc6 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8011b4c:	69ba      	ldr	r2, [r7, #24]
 8011b4e:	6a3b      	ldr	r3, [r7, #32]
 8011b50:	4413      	add	r3, r2
 8011b52:	693a      	ldr	r2, [r7, #16]
 8011b54:	8952      	ldrh	r2, [r2, #10]
 8011b56:	4293      	cmp	r3, r2
 8011b58:	d905      	bls.n	8011b66 <f_write+0x1ac>
					cc = fs->csize - csect;
 8011b5a:	693b      	ldr	r3, [r7, #16]
 8011b5c:	895b      	ldrh	r3, [r3, #10]
 8011b5e:	461a      	mov	r2, r3
 8011b60:	69bb      	ldr	r3, [r7, #24]
 8011b62:	1ad3      	subs	r3, r2, r3
 8011b64:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011b66:	693b      	ldr	r3, [r7, #16]
 8011b68:	7858      	ldrb	r0, [r3, #1]
 8011b6a:	6a3b      	ldr	r3, [r7, #32]
 8011b6c:	697a      	ldr	r2, [r7, #20]
 8011b6e:	69f9      	ldr	r1, [r7, #28]
 8011b70:	f7fd ff0a 	bl	800f988 <disk_write>
 8011b74:	4603      	mov	r3, r0
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d004      	beq.n	8011b84 <f_write+0x1ca>
 8011b7a:	68fb      	ldr	r3, [r7, #12]
 8011b7c:	2201      	movs	r2, #1
 8011b7e:	755a      	strb	r2, [r3, #21]
 8011b80:	2301      	movs	r3, #1
 8011b82:	e08b      	b.n	8011c9c <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8011b84:	68fb      	ldr	r3, [r7, #12]
 8011b86:	6a1a      	ldr	r2, [r3, #32]
 8011b88:	697b      	ldr	r3, [r7, #20]
 8011b8a:	1ad3      	subs	r3, r2, r3
 8011b8c:	6a3a      	ldr	r2, [r7, #32]
 8011b8e:	429a      	cmp	r2, r3
 8011b90:	d915      	bls.n	8011bbe <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8011b92:	68fb      	ldr	r3, [r7, #12]
 8011b94:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8011b98:	68fb      	ldr	r3, [r7, #12]
 8011b9a:	6a1a      	ldr	r2, [r3, #32]
 8011b9c:	697b      	ldr	r3, [r7, #20]
 8011b9e:	1ad3      	subs	r3, r2, r3
 8011ba0:	025b      	lsls	r3, r3, #9
 8011ba2:	69fa      	ldr	r2, [r7, #28]
 8011ba4:	4413      	add	r3, r2
 8011ba6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011baa:	4619      	mov	r1, r3
 8011bac:	f7fd ffac 	bl	800fb08 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8011bb0:	68fb      	ldr	r3, [r7, #12]
 8011bb2:	7d1b      	ldrb	r3, [r3, #20]
 8011bb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011bb8:	b2da      	uxtb	r2, r3
 8011bba:	68fb      	ldr	r3, [r7, #12]
 8011bbc:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8011bbe:	6a3b      	ldr	r3, [r7, #32]
 8011bc0:	025b      	lsls	r3, r3, #9
 8011bc2:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8011bc4:	e03f      	b.n	8011c46 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	6a1b      	ldr	r3, [r3, #32]
 8011bca:	697a      	ldr	r2, [r7, #20]
 8011bcc:	429a      	cmp	r2, r3
 8011bce:	d016      	beq.n	8011bfe <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8011bd0:	68fb      	ldr	r3, [r7, #12]
 8011bd2:	699a      	ldr	r2, [r3, #24]
 8011bd4:	68fb      	ldr	r3, [r7, #12]
 8011bd6:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011bd8:	429a      	cmp	r2, r3
 8011bda:	d210      	bcs.n	8011bfe <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8011bdc:	693b      	ldr	r3, [r7, #16]
 8011bde:	7858      	ldrb	r0, [r3, #1]
 8011be0:	68fb      	ldr	r3, [r7, #12]
 8011be2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011be6:	2301      	movs	r3, #1
 8011be8:	697a      	ldr	r2, [r7, #20]
 8011bea:	f7fd fead 	bl	800f948 <disk_read>
 8011bee:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d004      	beq.n	8011bfe <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8011bf4:	68fb      	ldr	r3, [r7, #12]
 8011bf6:	2201      	movs	r2, #1
 8011bf8:	755a      	strb	r2, [r3, #21]
 8011bfa:	2301      	movs	r3, #1
 8011bfc:	e04e      	b.n	8011c9c <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8011bfe:	68fb      	ldr	r3, [r7, #12]
 8011c00:	697a      	ldr	r2, [r7, #20]
 8011c02:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8011c04:	68fb      	ldr	r3, [r7, #12]
 8011c06:	699b      	ldr	r3, [r3, #24]
 8011c08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011c0c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8011c10:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8011c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	429a      	cmp	r2, r3
 8011c18:	d901      	bls.n	8011c1e <f_write+0x264>
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8011c1e:	68fb      	ldr	r3, [r7, #12]
 8011c20:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011c24:	68fb      	ldr	r3, [r7, #12]
 8011c26:	699b      	ldr	r3, [r3, #24]
 8011c28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011c2c:	4413      	add	r3, r2
 8011c2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011c30:	69f9      	ldr	r1, [r7, #28]
 8011c32:	4618      	mov	r0, r3
 8011c34:	f7fd ff68 	bl	800fb08 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8011c38:	68fb      	ldr	r3, [r7, #12]
 8011c3a:	7d1b      	ldrb	r3, [r3, #20]
 8011c3c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011c40:	b2da      	uxtb	r2, r3
 8011c42:	68fb      	ldr	r3, [r7, #12]
 8011c44:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8011c46:	69fa      	ldr	r2, [r7, #28]
 8011c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c4a:	4413      	add	r3, r2
 8011c4c:	61fb      	str	r3, [r7, #28]
 8011c4e:	68fb      	ldr	r3, [r7, #12]
 8011c50:	699a      	ldr	r2, [r3, #24]
 8011c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c54:	441a      	add	r2, r3
 8011c56:	68fb      	ldr	r3, [r7, #12]
 8011c58:	619a      	str	r2, [r3, #24]
 8011c5a:	68fb      	ldr	r3, [r7, #12]
 8011c5c:	68da      	ldr	r2, [r3, #12]
 8011c5e:	68fb      	ldr	r3, [r7, #12]
 8011c60:	699b      	ldr	r3, [r3, #24]
 8011c62:	429a      	cmp	r2, r3
 8011c64:	bf38      	it	cc
 8011c66:	461a      	movcc	r2, r3
 8011c68:	68fb      	ldr	r3, [r7, #12]
 8011c6a:	60da      	str	r2, [r3, #12]
 8011c6c:	683b      	ldr	r3, [r7, #0]
 8011c6e:	681a      	ldr	r2, [r3, #0]
 8011c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c72:	441a      	add	r2, r3
 8011c74:	683b      	ldr	r3, [r7, #0]
 8011c76:	601a      	str	r2, [r3, #0]
 8011c78:	687a      	ldr	r2, [r7, #4]
 8011c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c7c:	1ad3      	subs	r3, r2, r3
 8011c7e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	f47f aed4 	bne.w	8011a30 <f_write+0x76>
 8011c88:	e000      	b.n	8011c8c <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011c8a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	7d1b      	ldrb	r3, [r3, #20]
 8011c90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011c94:	b2da      	uxtb	r2, r3
 8011c96:	68fb      	ldr	r3, [r7, #12]
 8011c98:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8011c9a:	2300      	movs	r3, #0
}
 8011c9c:	4618      	mov	r0, r3
 8011c9e:	3730      	adds	r7, #48	; 0x30
 8011ca0:	46bd      	mov	sp, r7
 8011ca2:	bd80      	pop	{r7, pc}

08011ca4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8011ca4:	b580      	push	{r7, lr}
 8011ca6:	b086      	sub	sp, #24
 8011ca8:	af00      	add	r7, sp, #0
 8011caa:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	f107 0208 	add.w	r2, r7, #8
 8011cb2:	4611      	mov	r1, r2
 8011cb4:	4618      	mov	r0, r3
 8011cb6:	f7ff fb07 	bl	80112c8 <validate>
 8011cba:	4603      	mov	r3, r0
 8011cbc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011cbe:	7dfb      	ldrb	r3, [r7, #23]
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	d168      	bne.n	8011d96 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	7d1b      	ldrb	r3, [r3, #20]
 8011cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	d062      	beq.n	8011d96 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	7d1b      	ldrb	r3, [r3, #20]
 8011cd4:	b25b      	sxtb	r3, r3
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	da15      	bge.n	8011d06 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8011cda:	68bb      	ldr	r3, [r7, #8]
 8011cdc:	7858      	ldrb	r0, [r3, #1]
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	6a1a      	ldr	r2, [r3, #32]
 8011ce8:	2301      	movs	r3, #1
 8011cea:	f7fd fe4d 	bl	800f988 <disk_write>
 8011cee:	4603      	mov	r3, r0
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d001      	beq.n	8011cf8 <f_sync+0x54>
 8011cf4:	2301      	movs	r3, #1
 8011cf6:	e04f      	b.n	8011d98 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	7d1b      	ldrb	r3, [r3, #20]
 8011cfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011d00:	b2da      	uxtb	r2, r3
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8011d06:	f7fa fde7 	bl	800c8d8 <get_fattime>
 8011d0a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8011d0c:	68ba      	ldr	r2, [r7, #8]
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d12:	4619      	mov	r1, r3
 8011d14:	4610      	mov	r0, r2
 8011d16:	f7fe f925 	bl	800ff64 <move_window>
 8011d1a:	4603      	mov	r3, r0
 8011d1c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8011d1e:	7dfb      	ldrb	r3, [r7, #23]
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d138      	bne.n	8011d96 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d28:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8011d2a:	68fb      	ldr	r3, [r7, #12]
 8011d2c:	330b      	adds	r3, #11
 8011d2e:	781a      	ldrb	r2, [r3, #0]
 8011d30:	68fb      	ldr	r3, [r7, #12]
 8011d32:	330b      	adds	r3, #11
 8011d34:	f042 0220 	orr.w	r2, r2, #32
 8011d38:	b2d2      	uxtb	r2, r2
 8011d3a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	6818      	ldr	r0, [r3, #0]
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	689b      	ldr	r3, [r3, #8]
 8011d44:	461a      	mov	r2, r3
 8011d46:	68f9      	ldr	r1, [r7, #12]
 8011d48:	f7fe fe2a 	bl	80109a0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8011d4c:	68fb      	ldr	r3, [r7, #12]
 8011d4e:	f103 021c 	add.w	r2, r3, #28
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	68db      	ldr	r3, [r3, #12]
 8011d56:	4619      	mov	r1, r3
 8011d58:	4610      	mov	r0, r2
 8011d5a:	f7fd fea9 	bl	800fab0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8011d5e:	68fb      	ldr	r3, [r7, #12]
 8011d60:	3316      	adds	r3, #22
 8011d62:	6939      	ldr	r1, [r7, #16]
 8011d64:	4618      	mov	r0, r3
 8011d66:	f7fd fea3 	bl	800fab0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8011d6a:	68fb      	ldr	r3, [r7, #12]
 8011d6c:	3312      	adds	r3, #18
 8011d6e:	2100      	movs	r1, #0
 8011d70:	4618      	mov	r0, r3
 8011d72:	f7fd fe82 	bl	800fa7a <st_word>
					fs->wflag = 1;
 8011d76:	68bb      	ldr	r3, [r7, #8]
 8011d78:	2201      	movs	r2, #1
 8011d7a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8011d7c:	68bb      	ldr	r3, [r7, #8]
 8011d7e:	4618      	mov	r0, r3
 8011d80:	f7fe f91e 	bl	800ffc0 <sync_fs>
 8011d84:	4603      	mov	r3, r0
 8011d86:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	7d1b      	ldrb	r3, [r3, #20]
 8011d8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011d90:	b2da      	uxtb	r2, r3
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8011d96:	7dfb      	ldrb	r3, [r7, #23]
}
 8011d98:	4618      	mov	r0, r3
 8011d9a:	3718      	adds	r7, #24
 8011d9c:	46bd      	mov	sp, r7
 8011d9e:	bd80      	pop	{r7, pc}

08011da0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8011da0:	b580      	push	{r7, lr}
 8011da2:	b084      	sub	sp, #16
 8011da4:	af00      	add	r7, sp, #0
 8011da6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8011da8:	6878      	ldr	r0, [r7, #4]
 8011daa:	f7ff ff7b 	bl	8011ca4 <f_sync>
 8011dae:	4603      	mov	r3, r0
 8011db0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8011db2:	7bfb      	ldrb	r3, [r7, #15]
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d118      	bne.n	8011dea <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	f107 0208 	add.w	r2, r7, #8
 8011dbe:	4611      	mov	r1, r2
 8011dc0:	4618      	mov	r0, r3
 8011dc2:	f7ff fa81 	bl	80112c8 <validate>
 8011dc6:	4603      	mov	r3, r0
 8011dc8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011dca:	7bfb      	ldrb	r3, [r7, #15]
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d10c      	bne.n	8011dea <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	691b      	ldr	r3, [r3, #16]
 8011dd4:	4618      	mov	r0, r3
 8011dd6:	f7fe f821 	bl	800fe1c <dec_lock>
 8011dda:	4603      	mov	r3, r0
 8011ddc:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8011dde:	7bfb      	ldrb	r3, [r7, #15]
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d102      	bne.n	8011dea <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	2200      	movs	r2, #0
 8011de8:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8011dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8011dec:	4618      	mov	r0, r3
 8011dee:	3710      	adds	r7, #16
 8011df0:	46bd      	mov	sp, r7
 8011df2:	bd80      	pop	{r7, pc}

08011df4 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8011df4:	b580      	push	{r7, lr}
 8011df6:	b088      	sub	sp, #32
 8011df8:	af00      	add	r7, sp, #0
 8011dfa:	60f8      	str	r0, [r7, #12]
 8011dfc:	60b9      	str	r1, [r7, #8]
 8011dfe:	607a      	str	r2, [r7, #4]
	int n = 0;
 8011e00:	2300      	movs	r3, #0
 8011e02:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8011e08:	e01b      	b.n	8011e42 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8011e0a:	f107 0310 	add.w	r3, r7, #16
 8011e0e:	f107 0114 	add.w	r1, r7, #20
 8011e12:	2201      	movs	r2, #1
 8011e14:	6878      	ldr	r0, [r7, #4]
 8011e16:	f7ff fc91 	bl	801173c <f_read>
		if (rc != 1) break;
 8011e1a:	693b      	ldr	r3, [r7, #16]
 8011e1c:	2b01      	cmp	r3, #1
 8011e1e:	d116      	bne.n	8011e4e <f_gets+0x5a>
		c = s[0];
 8011e20:	7d3b      	ldrb	r3, [r7, #20]
 8011e22:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8011e24:	7dfb      	ldrb	r3, [r7, #23]
 8011e26:	2b0d      	cmp	r3, #13
 8011e28:	d100      	bne.n	8011e2c <f_gets+0x38>
 8011e2a:	e00a      	b.n	8011e42 <f_gets+0x4e>
		*p++ = c;
 8011e2c:	69bb      	ldr	r3, [r7, #24]
 8011e2e:	1c5a      	adds	r2, r3, #1
 8011e30:	61ba      	str	r2, [r7, #24]
 8011e32:	7dfa      	ldrb	r2, [r7, #23]
 8011e34:	701a      	strb	r2, [r3, #0]
		n++;
 8011e36:	69fb      	ldr	r3, [r7, #28]
 8011e38:	3301      	adds	r3, #1
 8011e3a:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8011e3c:	7dfb      	ldrb	r3, [r7, #23]
 8011e3e:	2b0a      	cmp	r3, #10
 8011e40:	d007      	beq.n	8011e52 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8011e42:	68bb      	ldr	r3, [r7, #8]
 8011e44:	3b01      	subs	r3, #1
 8011e46:	69fa      	ldr	r2, [r7, #28]
 8011e48:	429a      	cmp	r2, r3
 8011e4a:	dbde      	blt.n	8011e0a <f_gets+0x16>
 8011e4c:	e002      	b.n	8011e54 <f_gets+0x60>
		if (rc != 1) break;
 8011e4e:	bf00      	nop
 8011e50:	e000      	b.n	8011e54 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8011e52:	bf00      	nop
	}
	*p = 0;
 8011e54:	69bb      	ldr	r3, [r7, #24]
 8011e56:	2200      	movs	r2, #0
 8011e58:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8011e5a:	69fb      	ldr	r3, [r7, #28]
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d001      	beq.n	8011e64 <f_gets+0x70>
 8011e60:	68fb      	ldr	r3, [r7, #12]
 8011e62:	e000      	b.n	8011e66 <f_gets+0x72>
 8011e64:	2300      	movs	r3, #0
}
 8011e66:	4618      	mov	r0, r3
 8011e68:	3720      	adds	r7, #32
 8011e6a:	46bd      	mov	sp, r7
 8011e6c:	bd80      	pop	{r7, pc}
	...

08011e70 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011e70:	b480      	push	{r7}
 8011e72:	b087      	sub	sp, #28
 8011e74:	af00      	add	r7, sp, #0
 8011e76:	60f8      	str	r0, [r7, #12]
 8011e78:	60b9      	str	r1, [r7, #8]
 8011e7a:	4613      	mov	r3, r2
 8011e7c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011e7e:	2301      	movs	r3, #1
 8011e80:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011e82:	2300      	movs	r3, #0
 8011e84:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8011e86:	4b1f      	ldr	r3, [pc, #124]	; (8011f04 <FATFS_LinkDriverEx+0x94>)
 8011e88:	7a5b      	ldrb	r3, [r3, #9]
 8011e8a:	b2db      	uxtb	r3, r3
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d131      	bne.n	8011ef4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011e90:	4b1c      	ldr	r3, [pc, #112]	; (8011f04 <FATFS_LinkDriverEx+0x94>)
 8011e92:	7a5b      	ldrb	r3, [r3, #9]
 8011e94:	b2db      	uxtb	r3, r3
 8011e96:	461a      	mov	r2, r3
 8011e98:	4b1a      	ldr	r3, [pc, #104]	; (8011f04 <FATFS_LinkDriverEx+0x94>)
 8011e9a:	2100      	movs	r1, #0
 8011e9c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011e9e:	4b19      	ldr	r3, [pc, #100]	; (8011f04 <FATFS_LinkDriverEx+0x94>)
 8011ea0:	7a5b      	ldrb	r3, [r3, #9]
 8011ea2:	b2db      	uxtb	r3, r3
 8011ea4:	4a17      	ldr	r2, [pc, #92]	; (8011f04 <FATFS_LinkDriverEx+0x94>)
 8011ea6:	009b      	lsls	r3, r3, #2
 8011ea8:	4413      	add	r3, r2
 8011eaa:	68fa      	ldr	r2, [r7, #12]
 8011eac:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8011eae:	4b15      	ldr	r3, [pc, #84]	; (8011f04 <FATFS_LinkDriverEx+0x94>)
 8011eb0:	7a5b      	ldrb	r3, [r3, #9]
 8011eb2:	b2db      	uxtb	r3, r3
 8011eb4:	461a      	mov	r2, r3
 8011eb6:	4b13      	ldr	r3, [pc, #76]	; (8011f04 <FATFS_LinkDriverEx+0x94>)
 8011eb8:	4413      	add	r3, r2
 8011eba:	79fa      	ldrb	r2, [r7, #7]
 8011ebc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8011ebe:	4b11      	ldr	r3, [pc, #68]	; (8011f04 <FATFS_LinkDriverEx+0x94>)
 8011ec0:	7a5b      	ldrb	r3, [r3, #9]
 8011ec2:	b2db      	uxtb	r3, r3
 8011ec4:	1c5a      	adds	r2, r3, #1
 8011ec6:	b2d1      	uxtb	r1, r2
 8011ec8:	4a0e      	ldr	r2, [pc, #56]	; (8011f04 <FATFS_LinkDriverEx+0x94>)
 8011eca:	7251      	strb	r1, [r2, #9]
 8011ecc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8011ece:	7dbb      	ldrb	r3, [r7, #22]
 8011ed0:	3330      	adds	r3, #48	; 0x30
 8011ed2:	b2da      	uxtb	r2, r3
 8011ed4:	68bb      	ldr	r3, [r7, #8]
 8011ed6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011ed8:	68bb      	ldr	r3, [r7, #8]
 8011eda:	3301      	adds	r3, #1
 8011edc:	223a      	movs	r2, #58	; 0x3a
 8011ede:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011ee0:	68bb      	ldr	r3, [r7, #8]
 8011ee2:	3302      	adds	r3, #2
 8011ee4:	222f      	movs	r2, #47	; 0x2f
 8011ee6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011ee8:	68bb      	ldr	r3, [r7, #8]
 8011eea:	3303      	adds	r3, #3
 8011eec:	2200      	movs	r2, #0
 8011eee:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011ef0:	2300      	movs	r3, #0
 8011ef2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8011ef4:	7dfb      	ldrb	r3, [r7, #23]
}
 8011ef6:	4618      	mov	r0, r3
 8011ef8:	371c      	adds	r7, #28
 8011efa:	46bd      	mov	sp, r7
 8011efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f00:	4770      	bx	lr
 8011f02:	bf00      	nop
 8011f04:	24000310 	.word	0x24000310

08011f08 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011f08:	b580      	push	{r7, lr}
 8011f0a:	b082      	sub	sp, #8
 8011f0c:	af00      	add	r7, sp, #0
 8011f0e:	6078      	str	r0, [r7, #4]
 8011f10:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8011f12:	2200      	movs	r2, #0
 8011f14:	6839      	ldr	r1, [r7, #0]
 8011f16:	6878      	ldr	r0, [r7, #4]
 8011f18:	f7ff ffaa 	bl	8011e70 <FATFS_LinkDriverEx>
 8011f1c:	4603      	mov	r3, r0
}
 8011f1e:	4618      	mov	r0, r3
 8011f20:	3708      	adds	r7, #8
 8011f22:	46bd      	mov	sp, r7
 8011f24:	bd80      	pop	{r7, pc}
	...

08011f28 <read_bmp>:
				}
			}
	}
}

void read_bmp(uint8_t file_name[]) {
 8011f28:	b580      	push	{r7, lr}
 8011f2a:	b084      	sub	sp, #16
 8011f2c:	af00      	add	r7, sp, #0
 8011f2e:	6078      	str	r0, [r7, #4]
	uint16_t bytesread;
	if (Appli_state == APPLICATION_READY && file_ready == 0) {
 8011f30:	4b1b      	ldr	r3, [pc, #108]	; (8011fa0 <read_bmp+0x78>)
 8011f32:	781b      	ldrb	r3, [r3, #0]
 8011f34:	2b02      	cmp	r3, #2
 8011f36:	d12e      	bne.n	8011f96 <read_bmp+0x6e>
 8011f38:	4b1a      	ldr	r3, [pc, #104]	; (8011fa4 <read_bmp+0x7c>)
 8011f3a:	681b      	ldr	r3, [r3, #0]
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d12a      	bne.n	8011f96 <read_bmp+0x6e>
			if (f_open(&MyFile,file_name,FA_READ) != FR_OK ) {
 8011f40:	2201      	movs	r2, #1
 8011f42:	6879      	ldr	r1, [r7, #4]
 8011f44:	4818      	ldr	r0, [pc, #96]	; (8011fa8 <read_bmp+0x80>)
 8011f46:	f7ff fa3b 	bl	80113c0 <f_open>
 8011f4a:	4603      	mov	r3, r0
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d002      	beq.n	8011f56 <read_bmp+0x2e>
				Error_Handler();
 8011f50:	f7f3 faee 	bl	8005530 <Error_Handler>

				file_ready = 1;
			}

	}
}
 8011f54:	e01f      	b.n	8011f96 <read_bmp+0x6e>
				res= f_read(&MyFile,rtext,sizeof(rtext), &bytesread);
 8011f56:	f107 030e 	add.w	r3, r7, #14
 8011f5a:	f242 1234 	movw	r2, #8500	; 0x2134
 8011f5e:	4913      	ldr	r1, [pc, #76]	; (8011fac <read_bmp+0x84>)
 8011f60:	4811      	ldr	r0, [pc, #68]	; (8011fa8 <read_bmp+0x80>)
 8011f62:	f7ff fbeb 	bl	801173c <f_read>
 8011f66:	4603      	mov	r3, r0
 8011f68:	461a      	mov	r2, r3
 8011f6a:	4b11      	ldr	r3, [pc, #68]	; (8011fb0 <read_bmp+0x88>)
 8011f6c:	701a      	strb	r2, [r3, #0]
				if ((bytesread == 0) || (res != FR_OK)) {
 8011f6e:	89fb      	ldrh	r3, [r7, #14]
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d003      	beq.n	8011f7c <read_bmp+0x54>
 8011f74:	4b0e      	ldr	r3, [pc, #56]	; (8011fb0 <read_bmp+0x88>)
 8011f76:	781b      	ldrb	r3, [r3, #0]
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d001      	beq.n	8011f80 <read_bmp+0x58>
					Error_Handler();
 8011f7c:	f7f3 fad8 	bl	8005530 <Error_Handler>
				if (f_close(&MyFile) != FR_OK) {
 8011f80:	4809      	ldr	r0, [pc, #36]	; (8011fa8 <read_bmp+0x80>)
 8011f82:	f7ff ff0d 	bl	8011da0 <f_close>
 8011f86:	4603      	mov	r3, r0
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d001      	beq.n	8011f90 <read_bmp+0x68>
					Error_Handler();
 8011f8c:	f7f3 fad0 	bl	8005530 <Error_Handler>
				file_ready = 1;
 8011f90:	4b04      	ldr	r3, [pc, #16]	; (8011fa4 <read_bmp+0x7c>)
 8011f92:	2201      	movs	r2, #1
 8011f94:	601a      	str	r2, [r3, #0]
}
 8011f96:	bf00      	nop
 8011f98:	3710      	adds	r7, #16
 8011f9a:	46bd      	mov	sp, r7
 8011f9c:	bd80      	pop	{r7, pc}
 8011f9e:	bf00      	nop
 8011fa0:	2400031c 	.word	0x2400031c
 8011fa4:	240002dc 	.word	0x240002dc
 8011fa8:	24003008 	.word	0x24003008
 8011fac:	24000ed4 	.word	0x24000ed4
 8011fb0:	24003238 	.word	0x24003238

08011fb4 <write_bmp>:

void write_bmp(uint8_t file_name[]) {
 8011fb4:	b580      	push	{r7, lr}
 8011fb6:	b084      	sub	sp, #16
 8011fb8:	af00      	add	r7, sp, #0
 8011fba:	6078      	str	r0, [r7, #4]
	uint16_t bytesread;
	if (Appli_state == APPLICATION_READY) {
 8011fbc:	4b2d      	ldr	r3, [pc, #180]	; (8012074 <write_bmp+0xc0>)
 8011fbe:	781b      	ldrb	r3, [r3, #0]
 8011fc0:	2b02      	cmp	r3, #2
 8011fc2:	d153      	bne.n	801206c <write_bmp+0xb8>
		/*Create a file*/
		res = f_open(&MyFile,name,FA_CREATE_ALWAYS |FA_WRITE);
 8011fc4:	220a      	movs	r2, #10
 8011fc6:	492c      	ldr	r1, [pc, #176]	; (8012078 <write_bmp+0xc4>)
 8011fc8:	482c      	ldr	r0, [pc, #176]	; (801207c <write_bmp+0xc8>)
 8011fca:	f7ff f9f9 	bl	80113c0 <f_open>
 8011fce:	4603      	mov	r3, r0
 8011fd0:	461a      	mov	r2, r3
 8011fd2:	4b2b      	ldr	r3, [pc, #172]	; (8012080 <write_bmp+0xcc>)
 8011fd4:	701a      	strb	r2, [r3, #0]
		if (res != FR_OK ) {
 8011fd6:	4b2a      	ldr	r3, [pc, #168]	; (8012080 <write_bmp+0xcc>)
 8011fd8:	781b      	ldrb	r3, [r3, #0]
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d002      	beq.n	8011fe4 <write_bmp+0x30>
			/* Creation failed */
			Error_Handler();
 8011fde:	f7f3 faa7 	bl	8005530 <Error_Handler>
//					while(1);
				}
			}
		}
	}
}
 8011fe2:	e043      	b.n	801206c <write_bmp+0xb8>
			res =f_write(&MyFile,rtext,sizeof(rtext),&bytesWritten);
 8011fe4:	4b27      	ldr	r3, [pc, #156]	; (8012084 <write_bmp+0xd0>)
 8011fe6:	f242 1234 	movw	r2, #8500	; 0x2134
 8011fea:	4927      	ldr	r1, [pc, #156]	; (8012088 <write_bmp+0xd4>)
 8011fec:	4823      	ldr	r0, [pc, #140]	; (801207c <write_bmp+0xc8>)
 8011fee:	f7ff fce4 	bl	80119ba <f_write>
 8011ff2:	4603      	mov	r3, r0
 8011ff4:	461a      	mov	r2, r3
 8011ff6:	4b22      	ldr	r3, [pc, #136]	; (8012080 <write_bmp+0xcc>)
 8011ff8:	701a      	strb	r2, [r3, #0]
			f_close(&MyFile);
 8011ffa:	4820      	ldr	r0, [pc, #128]	; (801207c <write_bmp+0xc8>)
 8011ffc:	f7ff fed0 	bl	8011da0 <f_close>
			if ((bytesWritten == 0) || (res != FR_OK)) {
 8012000:	4b20      	ldr	r3, [pc, #128]	; (8012084 <write_bmp+0xd0>)
 8012002:	681b      	ldr	r3, [r3, #0]
 8012004:	2b00      	cmp	r3, #0
 8012006:	d003      	beq.n	8012010 <write_bmp+0x5c>
 8012008:	4b1d      	ldr	r3, [pc, #116]	; (8012080 <write_bmp+0xcc>)
 801200a:	781b      	ldrb	r3, [r3, #0]
 801200c:	2b00      	cmp	r3, #0
 801200e:	d002      	beq.n	8012016 <write_bmp+0x62>
				Error_Handler();
 8012010:	f7f3 fa8e 	bl	8005530 <Error_Handler>
}
 8012014:	e02a      	b.n	801206c <write_bmp+0xb8>
				if (f_open(&MyFile,name,FA_READ) != FR_OK ) {
 8012016:	2201      	movs	r2, #1
 8012018:	4917      	ldr	r1, [pc, #92]	; (8012078 <write_bmp+0xc4>)
 801201a:	4818      	ldr	r0, [pc, #96]	; (801207c <write_bmp+0xc8>)
 801201c:	f7ff f9d0 	bl	80113c0 <f_open>
 8012020:	4603      	mov	r3, r0
 8012022:	2b00      	cmp	r3, #0
 8012024:	d002      	beq.n	801202c <write_bmp+0x78>
					Error_Handler();
 8012026:	f7f3 fa83 	bl	8005530 <Error_Handler>
}
 801202a:	e01f      	b.n	801206c <write_bmp+0xb8>
					res= f_read(&MyFile,rtext,sizeof(rtext), &bytesread);
 801202c:	f107 030e 	add.w	r3, r7, #14
 8012030:	f242 1234 	movw	r2, #8500	; 0x2134
 8012034:	4914      	ldr	r1, [pc, #80]	; (8012088 <write_bmp+0xd4>)
 8012036:	4811      	ldr	r0, [pc, #68]	; (801207c <write_bmp+0xc8>)
 8012038:	f7ff fb80 	bl	801173c <f_read>
 801203c:	4603      	mov	r3, r0
 801203e:	461a      	mov	r2, r3
 8012040:	4b0f      	ldr	r3, [pc, #60]	; (8012080 <write_bmp+0xcc>)
 8012042:	701a      	strb	r2, [r3, #0]
					if ((bytesread == 0) || (res != FR_OK)) {
 8012044:	89fb      	ldrh	r3, [r7, #14]
 8012046:	2b00      	cmp	r3, #0
 8012048:	d003      	beq.n	8012052 <write_bmp+0x9e>
 801204a:	4b0d      	ldr	r3, [pc, #52]	; (8012080 <write_bmp+0xcc>)
 801204c:	781b      	ldrb	r3, [r3, #0]
 801204e:	2b00      	cmp	r3, #0
 8012050:	d001      	beq.n	8012056 <write_bmp+0xa2>
						Error_Handler();
 8012052:	f7f3 fa6d 	bl	8005530 <Error_Handler>
					if (f_close(&MyFile) != FR_OK) {
 8012056:	4809      	ldr	r0, [pc, #36]	; (801207c <write_bmp+0xc8>)
 8012058:	f7ff fea2 	bl	8011da0 <f_close>
 801205c:	4603      	mov	r3, r0
 801205e:	2b00      	cmp	r3, #0
 8012060:	d001      	beq.n	8012066 <write_bmp+0xb2>
						Error_Handler();
 8012062:	f7f3 fa65 	bl	8005530 <Error_Handler>
					file_ready = 1;
 8012066:	4b09      	ldr	r3, [pc, #36]	; (801208c <write_bmp+0xd8>)
 8012068:	2201      	movs	r2, #1
 801206a:	601a      	str	r2, [r3, #0]
}
 801206c:	bf00      	nop
 801206e:	3710      	adds	r7, #16
 8012070:	46bd      	mov	sp, r7
 8012072:	bd80      	pop	{r7, pc}
 8012074:	2400031c 	.word	0x2400031c
 8012078:	2400323c 	.word	0x2400323c
 801207c:	24003008 	.word	0x24003008
 8012080:	24003238 	.word	0x24003238
 8012084:	24000af8 	.word	0x24000af8
 8012088:	24000ed4 	.word	0x24000ed4
 801208c:	240002dc 	.word	0x240002dc

08012090 <read_txt>:

float * read_txt(uint8_t file_name[], int num_line) {
 8012090:	b580      	push	{r7, lr}
 8012092:	b086      	sub	sp, #24
 8012094:	af00      	add	r7, sp, #0
 8012096:	6078      	str	r0, [r7, #4]
 8012098:	6039      	str	r1, [r7, #0]
	uint16_t bytesread;
	if (Appli_state == APPLICATION_READY) {
 801209a:	4b24      	ldr	r3, [pc, #144]	; (801212c <read_txt+0x9c>)
 801209c:	781b      	ldrb	r3, [r3, #0]
 801209e:	2b02      	cmp	r3, #2
 80120a0:	d140      	bne.n	8012124 <read_txt+0x94>
			if (f_open(&MyFile,file_name,FA_READ) != FR_OK ) {
 80120a2:	2201      	movs	r2, #1
 80120a4:	6879      	ldr	r1, [r7, #4]
 80120a6:	4822      	ldr	r0, [pc, #136]	; (8012130 <read_txt+0xa0>)
 80120a8:	f7ff f98a 	bl	80113c0 <f_open>
 80120ac:	4603      	mov	r3, r0
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d002      	beq.n	80120b8 <read_txt+0x28>
				Error_Handler();
 80120b2:	f7f3 fa3d 	bl	8005530 <Error_Handler>
 80120b6:	e035      	b.n	8012124 <read_txt+0x94>
			}else{
				float * array_out = (float *) malloc(sizeof(float)*num_line);
 80120b8:	683b      	ldr	r3, [r7, #0]
 80120ba:	009b      	lsls	r3, r3, #2
 80120bc:	4618      	mov	r0, r3
 80120be:	f000 fbb5 	bl	801282c <malloc>
 80120c2:	4603      	mov	r3, r0
 80120c4:	613b      	str	r3, [r7, #16]
				for(int i = 0; i < num_line; i++){
 80120c6:	2300      	movs	r3, #0
 80120c8:	617b      	str	r3, [r7, #20]
 80120ca:	e01d      	b.n	8012108 <read_txt+0x78>
					memset(rtext,0,sizeof(rtext));
 80120cc:	f242 1234 	movw	r2, #8500	; 0x2134
 80120d0:	2100      	movs	r1, #0
 80120d2:	4818      	ldr	r0, [pc, #96]	; (8012134 <read_txt+0xa4>)
 80120d4:	f000 fbc5 	bl	8012862 <memset>
					f_gets(rtext, sizeof(rtext), &MyFile);
 80120d8:	4a15      	ldr	r2, [pc, #84]	; (8012130 <read_txt+0xa0>)
 80120da:	f242 1134 	movw	r1, #8500	; 0x2134
 80120de:	4815      	ldr	r0, [pc, #84]	; (8012134 <read_txt+0xa4>)
 80120e0:	f7ff fe88 	bl	8011df4 <f_gets>
					array_out[i] = atof(rtext);
 80120e4:	4813      	ldr	r0, [pc, #76]	; (8012134 <read_txt+0xa4>)
 80120e6:	f000 fb73 	bl	80127d0 <atof>
 80120ea:	eeb0 7b40 	vmov.f64	d7, d0
 80120ee:	697b      	ldr	r3, [r7, #20]
 80120f0:	009b      	lsls	r3, r3, #2
 80120f2:	693a      	ldr	r2, [r7, #16]
 80120f4:	4413      	add	r3, r2
 80120f6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80120fa:	edc3 7a00 	vstr	s15, [r3]
					int _ = 0;
 80120fe:	2300      	movs	r3, #0
 8012100:	60fb      	str	r3, [r7, #12]
				for(int i = 0; i < num_line; i++){
 8012102:	697b      	ldr	r3, [r7, #20]
 8012104:	3301      	adds	r3, #1
 8012106:	617b      	str	r3, [r7, #20]
 8012108:	697a      	ldr	r2, [r7, #20]
 801210a:	683b      	ldr	r3, [r7, #0]
 801210c:	429a      	cmp	r2, r3
 801210e:	dbdd      	blt.n	80120cc <read_txt+0x3c>
				}
				if (f_close(&MyFile) != FR_OK) {
 8012110:	4807      	ldr	r0, [pc, #28]	; (8012130 <read_txt+0xa0>)
 8012112:	f7ff fe45 	bl	8011da0 <f_close>
 8012116:	4603      	mov	r3, r0
 8012118:	2b00      	cmp	r3, #0
 801211a:	d001      	beq.n	8012120 <read_txt+0x90>
					Error_Handler();
 801211c:	f7f3 fa08 	bl	8005530 <Error_Handler>
				}
				return array_out;
 8012120:	693b      	ldr	r3, [r7, #16]
 8012122:	e7ff      	b.n	8012124 <read_txt+0x94>
			}
	}
}
 8012124:	4618      	mov	r0, r3
 8012126:	3718      	adds	r7, #24
 8012128:	46bd      	mov	sp, r7
 801212a:	bd80      	pop	{r7, pc}
 801212c:	2400031c 	.word	0x2400031c
 8012130:	24003008 	.word	0x24003008
 8012134:	24000ed4 	.word	0x24000ed4

08012138 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8012138:	b580      	push	{r7, lr}
 801213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 801213c:	2201      	movs	r2, #1
 801213e:	490e      	ldr	r1, [pc, #56]	; (8012178 <MX_USB_HOST_Init+0x40>)
 8012140:	480e      	ldr	r0, [pc, #56]	; (801217c <MX_USB_HOST_Init+0x44>)
 8012142:	f7fc f867 	bl	800e214 <USBH_Init>
 8012146:	4603      	mov	r3, r0
 8012148:	2b00      	cmp	r3, #0
 801214a:	d001      	beq.n	8012150 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 801214c:	f7f3 f9f0 	bl	8005530 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 8012150:	490b      	ldr	r1, [pc, #44]	; (8012180 <MX_USB_HOST_Init+0x48>)
 8012152:	480a      	ldr	r0, [pc, #40]	; (801217c <MX_USB_HOST_Init+0x44>)
 8012154:	f7fc f8ec 	bl	800e330 <USBH_RegisterClass>
 8012158:	4603      	mov	r3, r0
 801215a:	2b00      	cmp	r3, #0
 801215c:	d001      	beq.n	8012162 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 801215e:	f7f3 f9e7 	bl	8005530 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8012162:	4806      	ldr	r0, [pc, #24]	; (801217c <MX_USB_HOST_Init+0x44>)
 8012164:	f7fc f970 	bl	800e448 <USBH_Start>
 8012168:	4603      	mov	r3, r0
 801216a:	2b00      	cmp	r3, #0
 801216c:	d001      	beq.n	8012172 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 801216e:	f7f3 f9df 	bl	8005530 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8012172:	bf00      	nop
 8012174:	bd80      	pop	{r7, pc}
 8012176:	bf00      	nop
 8012178:	08012199 	.word	0x08012199
 801217c:	24000afc 	.word	0x24000afc
 8012180:	24000010 	.word	0x24000010

08012184 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8012184:	b580      	push	{r7, lr}
 8012186:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8012188:	4802      	ldr	r0, [pc, #8]	; (8012194 <MX_USB_HOST_Process+0x10>)
 801218a:	f7fc f96d 	bl	800e468 <USBH_Process>
}
 801218e:	bf00      	nop
 8012190:	bd80      	pop	{r7, pc}
 8012192:	bf00      	nop
 8012194:	24000afc 	.word	0x24000afc

08012198 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8012198:	b580      	push	{r7, lr}
 801219a:	b082      	sub	sp, #8
 801219c:	af00      	add	r7, sp, #0
 801219e:	6078      	str	r0, [r7, #4]
 80121a0:	460b      	mov	r3, r1
 80121a2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80121a4:	78fb      	ldrb	r3, [r7, #3]
 80121a6:	3b01      	subs	r3, #1
 80121a8:	2b04      	cmp	r3, #4
 80121aa:	d823      	bhi.n	80121f4 <USBH_UserProcess+0x5c>
 80121ac:	a201      	add	r2, pc, #4	; (adr r2, 80121b4 <USBH_UserProcess+0x1c>)
 80121ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80121b2:	bf00      	nop
 80121b4:	080121f5 	.word	0x080121f5
 80121b8:	080121d1 	.word	0x080121d1
 80121bc:	080121f5 	.word	0x080121f5
 80121c0:	080121d9 	.word	0x080121d9
 80121c4:	080121c9 	.word	0x080121c9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80121c8:	4b0e      	ldr	r3, [pc, #56]	; (8012204 <USBH_UserProcess+0x6c>)
 80121ca:	2203      	movs	r2, #3
 80121cc:	701a      	strb	r2, [r3, #0]
  break;
 80121ce:	e014      	b.n	80121fa <USBH_UserProcess+0x62>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80121d0:	4b0c      	ldr	r3, [pc, #48]	; (8012204 <USBH_UserProcess+0x6c>)
 80121d2:	2202      	movs	r2, #2
 80121d4:	701a      	strb	r2, [r3, #0]
  break;
 80121d6:	e010      	b.n	80121fa <USBH_UserProcess+0x62>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80121d8:	4b0a      	ldr	r3, [pc, #40]	; (8012204 <USBH_UserProcess+0x6c>)
 80121da:	2201      	movs	r2, #1
 80121dc:	701a      	strb	r2, [r3, #0]
  if (f_mount(&USBH_fatfs,USBHPath,0) != FR_OK)
 80121de:	2200      	movs	r2, #0
 80121e0:	4909      	ldr	r1, [pc, #36]	; (8012208 <USBH_UserProcess+0x70>)
 80121e2:	480a      	ldr	r0, [pc, #40]	; (801220c <USBH_UserProcess+0x74>)
 80121e4:	f7ff f8a6 	bl	8011334 <f_mount>
 80121e8:	4603      	mov	r3, r0
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d004      	beq.n	80121f8 <USBH_UserProcess+0x60>
  {
	  Error_Handler();
 80121ee:	f7f3 f99f 	bl	8005530 <Error_Handler>
  }
  break;
 80121f2:	e001      	b.n	80121f8 <USBH_UserProcess+0x60>

  default:
  break;
 80121f4:	bf00      	nop
 80121f6:	e000      	b.n	80121fa <USBH_UserProcess+0x62>
  break;
 80121f8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80121fa:	bf00      	nop
 80121fc:	3708      	adds	r7, #8
 80121fe:	46bd      	mov	sp, r7
 8012200:	bd80      	pop	{r7, pc}
 8012202:	bf00      	nop
 8012204:	2400031c 	.word	0x2400031c
 8012208:	24000460 	.word	0x24000460
 801220c:	240008c8 	.word	0x240008c8

08012210 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8012210:	b580      	push	{r7, lr}
 8012212:	b08a      	sub	sp, #40	; 0x28
 8012214:	af00      	add	r7, sp, #0
 8012216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012218:	f107 0314 	add.w	r3, r7, #20
 801221c:	2200      	movs	r2, #0
 801221e:	601a      	str	r2, [r3, #0]
 8012220:	605a      	str	r2, [r3, #4]
 8012222:	609a      	str	r2, [r3, #8]
 8012224:	60da      	str	r2, [r3, #12]
 8012226:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	681b      	ldr	r3, [r3, #0]
 801222c:	4a27      	ldr	r2, [pc, #156]	; (80122cc <HAL_HCD_MspInit+0xbc>)
 801222e:	4293      	cmp	r3, r2
 8012230:	d147      	bne.n	80122c2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012232:	4b27      	ldr	r3, [pc, #156]	; (80122d0 <HAL_HCD_MspInit+0xc0>)
 8012234:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012238:	4a25      	ldr	r2, [pc, #148]	; (80122d0 <HAL_HCD_MspInit+0xc0>)
 801223a:	f043 0301 	orr.w	r3, r3, #1
 801223e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8012242:	4b23      	ldr	r3, [pc, #140]	; (80122d0 <HAL_HCD_MspInit+0xc0>)
 8012244:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012248:	f003 0301 	and.w	r3, r3, #1
 801224c:	613b      	str	r3, [r7, #16]
 801224e:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8012250:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012254:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012256:	2302      	movs	r3, #2
 8012258:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801225a:	2300      	movs	r3, #0
 801225c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801225e:	2300      	movs	r3, #0
 8012260:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8012262:	230a      	movs	r3, #10
 8012264:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012266:	f107 0314 	add.w	r3, r7, #20
 801226a:	4619      	mov	r1, r3
 801226c:	4819      	ldr	r0, [pc, #100]	; (80122d4 <HAL_HCD_MspInit+0xc4>)
 801226e:	f7f4 f9bb 	bl	80065e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8012272:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8012276:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012278:	2302      	movs	r3, #2
 801227a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801227c:	2300      	movs	r3, #0
 801227e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012280:	2303      	movs	r3, #3
 8012282:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8012284:	230a      	movs	r3, #10
 8012286:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012288:	f107 0314 	add.w	r3, r7, #20
 801228c:	4619      	mov	r1, r3
 801228e:	4811      	ldr	r0, [pc, #68]	; (80122d4 <HAL_HCD_MspInit+0xc4>)
 8012290:	f7f4 f9aa 	bl	80065e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8012294:	4b0e      	ldr	r3, [pc, #56]	; (80122d0 <HAL_HCD_MspInit+0xc0>)
 8012296:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801229a:	4a0d      	ldr	r2, [pc, #52]	; (80122d0 <HAL_HCD_MspInit+0xc0>)
 801229c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80122a0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80122a4:	4b0a      	ldr	r3, [pc, #40]	; (80122d0 <HAL_HCD_MspInit+0xc0>)
 80122a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80122aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80122ae:	60fb      	str	r3, [r7, #12]
 80122b0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80122b2:	2200      	movs	r2, #0
 80122b4:	2100      	movs	r1, #0
 80122b6:	2065      	movs	r0, #101	; 0x65
 80122b8:	f7f3 fd4b 	bl	8005d52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80122bc:	2065      	movs	r0, #101	; 0x65
 80122be:	f7f3 fd62 	bl	8005d86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80122c2:	bf00      	nop
 80122c4:	3728      	adds	r7, #40	; 0x28
 80122c6:	46bd      	mov	sp, r7
 80122c8:	bd80      	pop	{r7, pc}
 80122ca:	bf00      	nop
 80122cc:	40080000 	.word	0x40080000
 80122d0:	58024400 	.word	0x58024400
 80122d4:	58020000 	.word	0x58020000

080122d8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80122d8:	b580      	push	{r7, lr}
 80122da:	b082      	sub	sp, #8
 80122dc:	af00      	add	r7, sp, #0
 80122de:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80122e6:	4618      	mov	r0, r3
 80122e8:	f7fc fc91 	bl	800ec0e <USBH_LL_IncTimer>
}
 80122ec:	bf00      	nop
 80122ee:	3708      	adds	r7, #8
 80122f0:	46bd      	mov	sp, r7
 80122f2:	bd80      	pop	{r7, pc}

080122f4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80122f4:	b580      	push	{r7, lr}
 80122f6:	b082      	sub	sp, #8
 80122f8:	af00      	add	r7, sp, #0
 80122fa:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012302:	4618      	mov	r0, r3
 8012304:	f7fc fcc9 	bl	800ec9a <USBH_LL_Connect>
}
 8012308:	bf00      	nop
 801230a:	3708      	adds	r7, #8
 801230c:	46bd      	mov	sp, r7
 801230e:	bd80      	pop	{r7, pc}

08012310 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8012310:	b580      	push	{r7, lr}
 8012312:	b082      	sub	sp, #8
 8012314:	af00      	add	r7, sp, #0
 8012316:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801231e:	4618      	mov	r0, r3
 8012320:	f7fc fcd2 	bl	800ecc8 <USBH_LL_Disconnect>
}
 8012324:	bf00      	nop
 8012326:	3708      	adds	r7, #8
 8012328:	46bd      	mov	sp, r7
 801232a:	bd80      	pop	{r7, pc}

0801232c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 801232c:	b480      	push	{r7}
 801232e:	b083      	sub	sp, #12
 8012330:	af00      	add	r7, sp, #0
 8012332:	6078      	str	r0, [r7, #4]
 8012334:	460b      	mov	r3, r1
 8012336:	70fb      	strb	r3, [r7, #3]
 8012338:	4613      	mov	r3, r2
 801233a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 801233c:	bf00      	nop
 801233e:	370c      	adds	r7, #12
 8012340:	46bd      	mov	sp, r7
 8012342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012346:	4770      	bx	lr

08012348 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8012348:	b580      	push	{r7, lr}
 801234a:	b082      	sub	sp, #8
 801234c:	af00      	add	r7, sp, #0
 801234e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012356:	4618      	mov	r0, r3
 8012358:	f7fc fc83 	bl	800ec62 <USBH_LL_PortEnabled>
}
 801235c:	bf00      	nop
 801235e:	3708      	adds	r7, #8
 8012360:	46bd      	mov	sp, r7
 8012362:	bd80      	pop	{r7, pc}

08012364 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8012364:	b580      	push	{r7, lr}
 8012366:	b082      	sub	sp, #8
 8012368:	af00      	add	r7, sp, #0
 801236a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012372:	4618      	mov	r0, r3
 8012374:	f7fc fc83 	bl	800ec7e <USBH_LL_PortDisabled>
}
 8012378:	bf00      	nop
 801237a:	3708      	adds	r7, #8
 801237c:	46bd      	mov	sp, r7
 801237e:	bd80      	pop	{r7, pc}

08012380 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8012380:	b580      	push	{r7, lr}
 8012382:	b082      	sub	sp, #8
 8012384:	af00      	add	r7, sp, #0
 8012386:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 801238e:	2b01      	cmp	r3, #1
 8012390:	d129      	bne.n	80123e6 <USBH_LL_Init+0x66>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8012392:	4a17      	ldr	r2, [pc, #92]	; (80123f0 <USBH_LL_Init+0x70>)
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	4a14      	ldr	r2, [pc, #80]	; (80123f0 <USBH_LL_Init+0x70>)
 801239e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80123a2:	4b13      	ldr	r3, [pc, #76]	; (80123f0 <USBH_LL_Init+0x70>)
 80123a4:	4a13      	ldr	r2, [pc, #76]	; (80123f4 <USBH_LL_Init+0x74>)
 80123a6:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 16;
 80123a8:	4b11      	ldr	r3, [pc, #68]	; (80123f0 <USBH_LL_Init+0x70>)
 80123aa:	2210      	movs	r2, #16
 80123ac:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80123ae:	4b10      	ldr	r3, [pc, #64]	; (80123f0 <USBH_LL_Init+0x70>)
 80123b0:	2201      	movs	r2, #1
 80123b2:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80123b4:	4b0e      	ldr	r3, [pc, #56]	; (80123f0 <USBH_LL_Init+0x70>)
 80123b6:	2200      	movs	r2, #0
 80123b8:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80123ba:	4b0d      	ldr	r3, [pc, #52]	; (80123f0 <USBH_LL_Init+0x70>)
 80123bc:	2202      	movs	r2, #2
 80123be:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80123c0:	4b0b      	ldr	r3, [pc, #44]	; (80123f0 <USBH_LL_Init+0x70>)
 80123c2:	2200      	movs	r2, #0
 80123c4:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80123c6:	480a      	ldr	r0, [pc, #40]	; (80123f0 <USBH_LL_Init+0x70>)
 80123c8:	f7f4 fad7 	bl	800697a <HAL_HCD_Init>
 80123cc:	4603      	mov	r3, r0
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	d001      	beq.n	80123d6 <USBH_LL_Init+0x56>
  {
    Error_Handler( );
 80123d2:	f7f3 f8ad 	bl	8005530 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80123d6:	4806      	ldr	r0, [pc, #24]	; (80123f0 <USBH_LL_Init+0x70>)
 80123d8:	f7f4 feda 	bl	8007190 <HAL_HCD_GetCurrentFrame>
 80123dc:	4603      	mov	r3, r0
 80123de:	4619      	mov	r1, r3
 80123e0:	6878      	ldr	r0, [r7, #4]
 80123e2:	f7fc fc05 	bl	800ebf0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80123e6:	2300      	movs	r3, #0
}
 80123e8:	4618      	mov	r0, r3
 80123ea:	3708      	adds	r7, #8
 80123ec:	46bd      	mov	sp, r7
 80123ee:	bd80      	pop	{r7, pc}
 80123f0:	24003248 	.word	0x24003248
 80123f4:	40080000 	.word	0x40080000

080123f8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80123f8:	b580      	push	{r7, lr}
 80123fa:	b084      	sub	sp, #16
 80123fc:	af00      	add	r7, sp, #0
 80123fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012400:	2300      	movs	r3, #0
 8012402:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012404:	2300      	movs	r3, #0
 8012406:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801240e:	4618      	mov	r0, r3
 8012410:	f7f4 fe46 	bl	80070a0 <HAL_HCD_Start>
 8012414:	4603      	mov	r3, r0
 8012416:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8012418:	7bfb      	ldrb	r3, [r7, #15]
 801241a:	4618      	mov	r0, r3
 801241c:	f000 f990 	bl	8012740 <USBH_Get_USB_Status>
 8012420:	4603      	mov	r3, r0
 8012422:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012424:	7bbb      	ldrb	r3, [r7, #14]
}
 8012426:	4618      	mov	r0, r3
 8012428:	3710      	adds	r7, #16
 801242a:	46bd      	mov	sp, r7
 801242c:	bd80      	pop	{r7, pc}

0801242e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 801242e:	b580      	push	{r7, lr}
 8012430:	b084      	sub	sp, #16
 8012432:	af00      	add	r7, sp, #0
 8012434:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012436:	2300      	movs	r3, #0
 8012438:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801243a:	2300      	movs	r3, #0
 801243c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8012444:	4618      	mov	r0, r3
 8012446:	f7f4 fe4e 	bl	80070e6 <HAL_HCD_Stop>
 801244a:	4603      	mov	r3, r0
 801244c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801244e:	7bfb      	ldrb	r3, [r7, #15]
 8012450:	4618      	mov	r0, r3
 8012452:	f000 f975 	bl	8012740 <USBH_Get_USB_Status>
 8012456:	4603      	mov	r3, r0
 8012458:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801245a:	7bbb      	ldrb	r3, [r7, #14]
}
 801245c:	4618      	mov	r0, r3
 801245e:	3710      	adds	r7, #16
 8012460:	46bd      	mov	sp, r7
 8012462:	bd80      	pop	{r7, pc}

08012464 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8012464:	b580      	push	{r7, lr}
 8012466:	b084      	sub	sp, #16
 8012468:	af00      	add	r7, sp, #0
 801246a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 801246c:	2301      	movs	r3, #1
 801246e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8012476:	4618      	mov	r0, r3
 8012478:	f7f4 fe98 	bl	80071ac <HAL_HCD_GetCurrentSpeed>
 801247c:	4603      	mov	r3, r0
 801247e:	2b01      	cmp	r3, #1
 8012480:	d007      	beq.n	8012492 <USBH_LL_GetSpeed+0x2e>
 8012482:	2b01      	cmp	r3, #1
 8012484:	d302      	bcc.n	801248c <USBH_LL_GetSpeed+0x28>
 8012486:	2b02      	cmp	r3, #2
 8012488:	d006      	beq.n	8012498 <USBH_LL_GetSpeed+0x34>
 801248a:	e008      	b.n	801249e <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 801248c:	2300      	movs	r3, #0
 801248e:	73fb      	strb	r3, [r7, #15]
    break;
 8012490:	e008      	b.n	80124a4 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8012492:	2301      	movs	r3, #1
 8012494:	73fb      	strb	r3, [r7, #15]
    break;
 8012496:	e005      	b.n	80124a4 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8012498:	2302      	movs	r3, #2
 801249a:	73fb      	strb	r3, [r7, #15]
    break;
 801249c:	e002      	b.n	80124a4 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 801249e:	2301      	movs	r3, #1
 80124a0:	73fb      	strb	r3, [r7, #15]
    break;
 80124a2:	bf00      	nop
  }
  return  speed;
 80124a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80124a6:	4618      	mov	r0, r3
 80124a8:	3710      	adds	r7, #16
 80124aa:	46bd      	mov	sp, r7
 80124ac:	bd80      	pop	{r7, pc}

080124ae <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80124ae:	b580      	push	{r7, lr}
 80124b0:	b084      	sub	sp, #16
 80124b2:	af00      	add	r7, sp, #0
 80124b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80124b6:	2300      	movs	r3, #0
 80124b8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80124ba:	2300      	movs	r3, #0
 80124bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80124c4:	4618      	mov	r0, r3
 80124c6:	f7f4 fe2b 	bl	8007120 <HAL_HCD_ResetPort>
 80124ca:	4603      	mov	r3, r0
 80124cc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80124ce:	7bfb      	ldrb	r3, [r7, #15]
 80124d0:	4618      	mov	r0, r3
 80124d2:	f000 f935 	bl	8012740 <USBH_Get_USB_Status>
 80124d6:	4603      	mov	r3, r0
 80124d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80124da:	7bbb      	ldrb	r3, [r7, #14]
}
 80124dc:	4618      	mov	r0, r3
 80124de:	3710      	adds	r7, #16
 80124e0:	46bd      	mov	sp, r7
 80124e2:	bd80      	pop	{r7, pc}

080124e4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80124e4:	b580      	push	{r7, lr}
 80124e6:	b082      	sub	sp, #8
 80124e8:	af00      	add	r7, sp, #0
 80124ea:	6078      	str	r0, [r7, #4]
 80124ec:	460b      	mov	r3, r1
 80124ee:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80124f6:	78fa      	ldrb	r2, [r7, #3]
 80124f8:	4611      	mov	r1, r2
 80124fa:	4618      	mov	r0, r3
 80124fc:	f7f4 fe33 	bl	8007166 <HAL_HCD_HC_GetXferCount>
 8012500:	4603      	mov	r3, r0
}
 8012502:	4618      	mov	r0, r3
 8012504:	3708      	adds	r7, #8
 8012506:	46bd      	mov	sp, r7
 8012508:	bd80      	pop	{r7, pc}

0801250a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 801250a:	b590      	push	{r4, r7, lr}
 801250c:	b089      	sub	sp, #36	; 0x24
 801250e:	af04      	add	r7, sp, #16
 8012510:	6078      	str	r0, [r7, #4]
 8012512:	4608      	mov	r0, r1
 8012514:	4611      	mov	r1, r2
 8012516:	461a      	mov	r2, r3
 8012518:	4603      	mov	r3, r0
 801251a:	70fb      	strb	r3, [r7, #3]
 801251c:	460b      	mov	r3, r1
 801251e:	70bb      	strb	r3, [r7, #2]
 8012520:	4613      	mov	r3, r2
 8012522:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012524:	2300      	movs	r3, #0
 8012526:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012528:	2300      	movs	r3, #0
 801252a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8012532:	787c      	ldrb	r4, [r7, #1]
 8012534:	78ba      	ldrb	r2, [r7, #2]
 8012536:	78f9      	ldrb	r1, [r7, #3]
 8012538:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801253a:	9302      	str	r3, [sp, #8]
 801253c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012540:	9301      	str	r3, [sp, #4]
 8012542:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012546:	9300      	str	r3, [sp, #0]
 8012548:	4623      	mov	r3, r4
 801254a:	f7f4 fa78 	bl	8006a3e <HAL_HCD_HC_Init>
 801254e:	4603      	mov	r3, r0
 8012550:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8012552:	7bfb      	ldrb	r3, [r7, #15]
 8012554:	4618      	mov	r0, r3
 8012556:	f000 f8f3 	bl	8012740 <USBH_Get_USB_Status>
 801255a:	4603      	mov	r3, r0
 801255c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801255e:	7bbb      	ldrb	r3, [r7, #14]
}
 8012560:	4618      	mov	r0, r3
 8012562:	3714      	adds	r7, #20
 8012564:	46bd      	mov	sp, r7
 8012566:	bd90      	pop	{r4, r7, pc}

08012568 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8012568:	b580      	push	{r7, lr}
 801256a:	b084      	sub	sp, #16
 801256c:	af00      	add	r7, sp, #0
 801256e:	6078      	str	r0, [r7, #4]
 8012570:	460b      	mov	r3, r1
 8012572:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012574:	2300      	movs	r3, #0
 8012576:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012578:	2300      	movs	r3, #0
 801257a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8012582:	78fa      	ldrb	r2, [r7, #3]
 8012584:	4611      	mov	r1, r2
 8012586:	4618      	mov	r0, r3
 8012588:	f7f4 faf1 	bl	8006b6e <HAL_HCD_HC_Halt>
 801258c:	4603      	mov	r3, r0
 801258e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8012590:	7bfb      	ldrb	r3, [r7, #15]
 8012592:	4618      	mov	r0, r3
 8012594:	f000 f8d4 	bl	8012740 <USBH_Get_USB_Status>
 8012598:	4603      	mov	r3, r0
 801259a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801259c:	7bbb      	ldrb	r3, [r7, #14]
}
 801259e:	4618      	mov	r0, r3
 80125a0:	3710      	adds	r7, #16
 80125a2:	46bd      	mov	sp, r7
 80125a4:	bd80      	pop	{r7, pc}

080125a6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80125a6:	b590      	push	{r4, r7, lr}
 80125a8:	b089      	sub	sp, #36	; 0x24
 80125aa:	af04      	add	r7, sp, #16
 80125ac:	6078      	str	r0, [r7, #4]
 80125ae:	4608      	mov	r0, r1
 80125b0:	4611      	mov	r1, r2
 80125b2:	461a      	mov	r2, r3
 80125b4:	4603      	mov	r3, r0
 80125b6:	70fb      	strb	r3, [r7, #3]
 80125b8:	460b      	mov	r3, r1
 80125ba:	70bb      	strb	r3, [r7, #2]
 80125bc:	4613      	mov	r3, r2
 80125be:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80125c0:	2300      	movs	r3, #0
 80125c2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80125c4:	2300      	movs	r3, #0
 80125c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80125ce:	787c      	ldrb	r4, [r7, #1]
 80125d0:	78ba      	ldrb	r2, [r7, #2]
 80125d2:	78f9      	ldrb	r1, [r7, #3]
 80125d4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80125d8:	9303      	str	r3, [sp, #12]
 80125da:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80125dc:	9302      	str	r3, [sp, #8]
 80125de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125e0:	9301      	str	r3, [sp, #4]
 80125e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80125e6:	9300      	str	r3, [sp, #0]
 80125e8:	4623      	mov	r3, r4
 80125ea:	f7f4 fae3 	bl	8006bb4 <HAL_HCD_HC_SubmitRequest>
 80125ee:	4603      	mov	r3, r0
 80125f0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80125f2:	7bfb      	ldrb	r3, [r7, #15]
 80125f4:	4618      	mov	r0, r3
 80125f6:	f000 f8a3 	bl	8012740 <USBH_Get_USB_Status>
 80125fa:	4603      	mov	r3, r0
 80125fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80125fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8012600:	4618      	mov	r0, r3
 8012602:	3714      	adds	r7, #20
 8012604:	46bd      	mov	sp, r7
 8012606:	bd90      	pop	{r4, r7, pc}

08012608 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8012608:	b580      	push	{r7, lr}
 801260a:	b082      	sub	sp, #8
 801260c:	af00      	add	r7, sp, #0
 801260e:	6078      	str	r0, [r7, #4]
 8012610:	460b      	mov	r3, r1
 8012612:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801261a:	78fa      	ldrb	r2, [r7, #3]
 801261c:	4611      	mov	r1, r2
 801261e:	4618      	mov	r0, r3
 8012620:	f7f4 fd8c 	bl	800713c <HAL_HCD_HC_GetURBState>
 8012624:	4603      	mov	r3, r0
}
 8012626:	4618      	mov	r0, r3
 8012628:	3708      	adds	r7, #8
 801262a:	46bd      	mov	sp, r7
 801262c:	bd80      	pop	{r7, pc}

0801262e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 801262e:	b580      	push	{r7, lr}
 8012630:	b082      	sub	sp, #8
 8012632:	af00      	add	r7, sp, #0
 8012634:	6078      	str	r0, [r7, #4]
 8012636:	460b      	mov	r3, r1
 8012638:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8012640:	2b01      	cmp	r3, #1
 8012642:	d103      	bne.n	801264c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8012644:	78fb      	ldrb	r3, [r7, #3]
 8012646:	4618      	mov	r0, r3
 8012648:	f000 f8a6 	bl	8012798 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */
  if (phost->id == HOST_FS)
  {
    if (state == 0)
    {
 801264c:	20c8      	movs	r0, #200	; 0xc8
 801264e:	f7f3 fa63 	bl	8005b18 <HAL_Delay>
      /* Drive high Charge pump */
 8012652:	2300      	movs	r3, #0
      /* ToDo: Add IOE driver control */
 8012654:	4618      	mov	r0, r3
 8012656:	3708      	adds	r7, #8
 8012658:	46bd      	mov	sp, r7
 801265a:	bd80      	pop	{r7, pc}

0801265c <USBH_LL_SetToggle>:
    else
    {
      /* Drive low Charge pump */
      /* ToDo: Add IOE driver control */
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */
    	HAL_GPIO_WritePin(GPIOG,GPIO_PIN_6,GPIO_PIN_SET);
 801265c:	b480      	push	{r7}
 801265e:	b085      	sub	sp, #20
 8012660:	af00      	add	r7, sp, #0
 8012662:	6078      	str	r0, [r7, #4]
 8012664:	460b      	mov	r3, r1
 8012666:	70fb      	strb	r3, [r7, #3]
 8012668:	4613      	mov	r3, r2
 801266a:	70bb      	strb	r3, [r7, #2]
      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8012672:	60fb      	str	r3, [r7, #12]
  }
  /* USER CODE END 0*/
 8012674:	78fa      	ldrb	r2, [r7, #3]
 8012676:	68f9      	ldr	r1, [r7, #12]
 8012678:	4613      	mov	r3, r2
 801267a:	009b      	lsls	r3, r3, #2
 801267c:	4413      	add	r3, r2
 801267e:	00db      	lsls	r3, r3, #3
 8012680:	440b      	add	r3, r1
 8012682:	333b      	adds	r3, #59	; 0x3b
 8012684:	781b      	ldrb	r3, [r3, #0]
 8012686:	2b00      	cmp	r3, #0
 8012688:	d00a      	beq.n	80126a0 <USBH_LL_SetToggle+0x44>

  HAL_Delay(200);
 801268a:	78fa      	ldrb	r2, [r7, #3]
 801268c:	68f9      	ldr	r1, [r7, #12]
 801268e:	4613      	mov	r3, r2
 8012690:	009b      	lsls	r3, r3, #2
 8012692:	4413      	add	r3, r2
 8012694:	00db      	lsls	r3, r3, #3
 8012696:	440b      	add	r3, r1
 8012698:	3350      	adds	r3, #80	; 0x50
 801269a:	78ba      	ldrb	r2, [r7, #2]
 801269c:	701a      	strb	r2, [r3, #0]
 801269e:	e009      	b.n	80126b4 <USBH_LL_SetToggle+0x58>
  return USBH_OK;
}

/**
 80126a0:	78fa      	ldrb	r2, [r7, #3]
 80126a2:	68f9      	ldr	r1, [r7, #12]
 80126a4:	4613      	mov	r3, r2
 80126a6:	009b      	lsls	r3, r3, #2
 80126a8:	4413      	add	r3, r2
 80126aa:	00db      	lsls	r3, r3, #3
 80126ac:	440b      	add	r3, r1
 80126ae:	3351      	adds	r3, #81	; 0x51
 80126b0:	78ba      	ldrb	r2, [r7, #2]
 80126b2:	701a      	strb	r2, [r3, #0]
  * @brief  Set toggle for a pipe.
  * @param  phost: Host handle
  * @param  pipe: Pipe index
 80126b4:	2300      	movs	r3, #0
  * @param  toggle: toggle (0/1)
 80126b6:	4618      	mov	r0, r3
 80126b8:	3714      	adds	r7, #20
 80126ba:	46bd      	mov	sp, r7
 80126bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126c0:	4770      	bx	lr

080126c2 <USBH_LL_GetToggle>:
{
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;

  if(pHandle->hc[pipe].ep_is_in)
  {
 80126c2:	b480      	push	{r7}
 80126c4:	b085      	sub	sp, #20
 80126c6:	af00      	add	r7, sp, #0
 80126c8:	6078      	str	r0, [r7, #4]
 80126ca:	460b      	mov	r3, r1
 80126cc:	70fb      	strb	r3, [r7, #3]
    pHandle->hc[pipe].toggle_in = toggle;
 80126ce:	2300      	movs	r3, #0
 80126d0:	73fb      	strb	r3, [r7, #15]
  }
  else
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80126d8:	60bb      	str	r3, [r7, #8]
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80126da:	78fa      	ldrb	r2, [r7, #3]
 80126dc:	68b9      	ldr	r1, [r7, #8]
 80126de:	4613      	mov	r3, r2
 80126e0:	009b      	lsls	r3, r3, #2
 80126e2:	4413      	add	r3, r2
 80126e4:	00db      	lsls	r3, r3, #3
 80126e6:	440b      	add	r3, r1
 80126e8:	333b      	adds	r3, #59	; 0x3b
 80126ea:	781b      	ldrb	r3, [r3, #0]
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d00a      	beq.n	8012706 <USBH_LL_GetToggle+0x44>
  }

 80126f0:	78fa      	ldrb	r2, [r7, #3]
 80126f2:	68b9      	ldr	r1, [r7, #8]
 80126f4:	4613      	mov	r3, r2
 80126f6:	009b      	lsls	r3, r3, #2
 80126f8:	4413      	add	r3, r2
 80126fa:	00db      	lsls	r3, r3, #3
 80126fc:	440b      	add	r3, r1
 80126fe:	3350      	adds	r3, #80	; 0x50
 8012700:	781b      	ldrb	r3, [r3, #0]
 8012702:	73fb      	strb	r3, [r7, #15]
 8012704:	e009      	b.n	801271a <USBH_LL_GetToggle+0x58>
  return USBH_OK;
}

/**
 8012706:	78fa      	ldrb	r2, [r7, #3]
 8012708:	68b9      	ldr	r1, [r7, #8]
 801270a:	4613      	mov	r3, r2
 801270c:	009b      	lsls	r3, r3, #2
 801270e:	4413      	add	r3, r2
 8012710:	00db      	lsls	r3, r3, #3
 8012712:	440b      	add	r3, r1
 8012714:	3351      	adds	r3, #81	; 0x51
 8012716:	781b      	ldrb	r3, [r3, #0]
 8012718:	73fb      	strb	r3, [r7, #15]
  * @brief  Return the current toggle of a pipe.
  * @param  phost: Host handle
 801271a:	7bfb      	ldrb	r3, [r7, #15]
  * @param  pipe: Pipe index
 801271c:	4618      	mov	r0, r3
 801271e:	3714      	adds	r7, #20
 8012720:	46bd      	mov	sp, r7
 8012722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012726:	4770      	bx	lr

08012728 <USBH_Delay>:
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  uint8_t toggle = 0;
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;

 8012728:	b580      	push	{r7, lr}
 801272a:	b082      	sub	sp, #8
 801272c:	af00      	add	r7, sp, #0
 801272e:	6078      	str	r0, [r7, #4]
  if(pHandle->hc[pipe].ep_is_in)
 8012730:	6878      	ldr	r0, [r7, #4]
 8012732:	f7f3 f9f1 	bl	8005b18 <HAL_Delay>
  {
 8012736:	bf00      	nop
 8012738:	3708      	adds	r7, #8
 801273a:	46bd      	mov	sp, r7
 801273c:	bd80      	pop	{r7, pc}
	...

08012740 <USBH_Get_USB_Status>:
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
  }
  return toggle;
}
 8012740:	b480      	push	{r7}
 8012742:	b085      	sub	sp, #20
 8012744:	af00      	add	r7, sp, #0
 8012746:	4603      	mov	r3, r0
 8012748:	71fb      	strb	r3, [r7, #7]

 801274a:	2300      	movs	r3, #0
 801274c:	73fb      	strb	r3, [r7, #15]
/**
  * @brief  Delay routine for the USB Host Library
 801274e:	79fb      	ldrb	r3, [r7, #7]
 8012750:	2b03      	cmp	r3, #3
 8012752:	d817      	bhi.n	8012784 <USBH_Get_USB_Status+0x44>
 8012754:	a201      	add	r2, pc, #4	; (adr r2, 801275c <USBH_Get_USB_Status+0x1c>)
 8012756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801275a:	bf00      	nop
 801275c:	0801276d 	.word	0x0801276d
 8012760:	08012773 	.word	0x08012773
 8012764:	08012779 	.word	0x08012779
 8012768:	0801277f 	.word	0x0801277f
  * @param  Delay: Delay in ms
  * @retval None
  */
 801276c:	2300      	movs	r3, #0
 801276e:	73fb      	strb	r3, [r7, #15]
void USBH_Delay(uint32_t Delay)
 8012770:	e00b      	b.n	801278a <USBH_Get_USB_Status+0x4a>
{
  HAL_Delay(Delay);
 8012772:	2302      	movs	r3, #2
 8012774:	73fb      	strb	r3, [r7, #15]
}
 8012776:	e008      	b.n	801278a <USBH_Get_USB_Status+0x4a>

/**
 8012778:	2301      	movs	r3, #1
 801277a:	73fb      	strb	r3, [r7, #15]
  * @brief  Retuns the USB status depending on the HAL status:
 801277c:	e005      	b.n	801278a <USBH_Get_USB_Status+0x4a>
  * @param  hal_status: HAL status
  * @retval USB status
 801277e:	2302      	movs	r3, #2
 8012780:	73fb      	strb	r3, [r7, #15]
  */
 8012782:	e002      	b.n	801278a <USBH_Get_USB_Status+0x4a>
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012784:	2302      	movs	r3, #2
 8012786:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012788:	bf00      	nop

  switch (hal_status)
 801278a:	7bfb      	ldrb	r3, [r7, #15]
  {
 801278c:	4618      	mov	r0, r3
 801278e:	3714      	adds	r7, #20
 8012790:	46bd      	mov	sp, r7
 8012792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012796:	4770      	bx	lr

08012798 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8012798:	b580      	push	{r7, lr}
 801279a:	b084      	sub	sp, #16
 801279c:	af00      	add	r7, sp, #0
 801279e:	4603      	mov	r3, r0
 80127a0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80127a2:	79fb      	ldrb	r3, [r7, #7]
 80127a4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80127a6:	79fb      	ldrb	r3, [r7, #7]
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d102      	bne.n	80127b2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 80127ac:	2301      	movs	r3, #1
 80127ae:	73fb      	strb	r3, [r7, #15]
 80127b0:	e001      	b.n	80127b6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80127b2:	2300      	movs	r3, #0
 80127b4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_6,(GPIO_PinState)data);
 80127b6:	7bfb      	ldrb	r3, [r7, #15]
 80127b8:	461a      	mov	r2, r3
 80127ba:	2140      	movs	r1, #64	; 0x40
 80127bc:	4803      	ldr	r0, [pc, #12]	; (80127cc <MX_DriverVbusFS+0x34>)
 80127be:	f7f4 f8c3 	bl	8006948 <HAL_GPIO_WritePin>
}
 80127c2:	bf00      	nop
 80127c4:	3710      	adds	r7, #16
 80127c6:	46bd      	mov	sp, r7
 80127c8:	bd80      	pop	{r7, pc}
 80127ca:	bf00      	nop
 80127cc:	58021800 	.word	0x58021800

080127d0 <atof>:
 80127d0:	2100      	movs	r1, #0
 80127d2:	f001 ba11 	b.w	8013bf8 <strtod>
	...

080127d8 <__errno>:
 80127d8:	4b01      	ldr	r3, [pc, #4]	; (80127e0 <__errno+0x8>)
 80127da:	6818      	ldr	r0, [r3, #0]
 80127dc:	4770      	bx	lr
 80127de:	bf00      	nop
 80127e0:	24000030 	.word	0x24000030

080127e4 <__libc_init_array>:
 80127e4:	b570      	push	{r4, r5, r6, lr}
 80127e6:	4e0d      	ldr	r6, [pc, #52]	; (801281c <__libc_init_array+0x38>)
 80127e8:	4c0d      	ldr	r4, [pc, #52]	; (8012820 <__libc_init_array+0x3c>)
 80127ea:	1ba4      	subs	r4, r4, r6
 80127ec:	10a4      	asrs	r4, r4, #2
 80127ee:	2500      	movs	r5, #0
 80127f0:	42a5      	cmp	r5, r4
 80127f2:	d109      	bne.n	8012808 <__libc_init_array+0x24>
 80127f4:	4e0b      	ldr	r6, [pc, #44]	; (8012824 <__libc_init_array+0x40>)
 80127f6:	4c0c      	ldr	r4, [pc, #48]	; (8012828 <__libc_init_array+0x44>)
 80127f8:	f002 ff62 	bl	80156c0 <_init>
 80127fc:	1ba4      	subs	r4, r4, r6
 80127fe:	10a4      	asrs	r4, r4, #2
 8012800:	2500      	movs	r5, #0
 8012802:	42a5      	cmp	r5, r4
 8012804:	d105      	bne.n	8012812 <__libc_init_array+0x2e>
 8012806:	bd70      	pop	{r4, r5, r6, pc}
 8012808:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801280c:	4798      	blx	r3
 801280e:	3501      	adds	r5, #1
 8012810:	e7ee      	b.n	80127f0 <__libc_init_array+0xc>
 8012812:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012816:	4798      	blx	r3
 8012818:	3501      	adds	r5, #1
 801281a:	e7f2      	b.n	8012802 <__libc_init_array+0x1e>
 801281c:	08015b00 	.word	0x08015b00
 8012820:	08015b00 	.word	0x08015b00
 8012824:	08015b00 	.word	0x08015b00
 8012828:	08015b04 	.word	0x08015b04

0801282c <malloc>:
 801282c:	4b02      	ldr	r3, [pc, #8]	; (8012838 <malloc+0xc>)
 801282e:	4601      	mov	r1, r0
 8012830:	6818      	ldr	r0, [r3, #0]
 8012832:	f000 b86d 	b.w	8012910 <_malloc_r>
 8012836:	bf00      	nop
 8012838:	24000030 	.word	0x24000030

0801283c <free>:
 801283c:	4b02      	ldr	r3, [pc, #8]	; (8012848 <free+0xc>)
 801283e:	4601      	mov	r1, r0
 8012840:	6818      	ldr	r0, [r3, #0]
 8012842:	f000 b817 	b.w	8012874 <_free_r>
 8012846:	bf00      	nop
 8012848:	24000030 	.word	0x24000030

0801284c <memcpy>:
 801284c:	b510      	push	{r4, lr}
 801284e:	1e43      	subs	r3, r0, #1
 8012850:	440a      	add	r2, r1
 8012852:	4291      	cmp	r1, r2
 8012854:	d100      	bne.n	8012858 <memcpy+0xc>
 8012856:	bd10      	pop	{r4, pc}
 8012858:	f811 4b01 	ldrb.w	r4, [r1], #1
 801285c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012860:	e7f7      	b.n	8012852 <memcpy+0x6>

08012862 <memset>:
 8012862:	4402      	add	r2, r0
 8012864:	4603      	mov	r3, r0
 8012866:	4293      	cmp	r3, r2
 8012868:	d100      	bne.n	801286c <memset+0xa>
 801286a:	4770      	bx	lr
 801286c:	f803 1b01 	strb.w	r1, [r3], #1
 8012870:	e7f9      	b.n	8012866 <memset+0x4>
	...

08012874 <_free_r>:
 8012874:	b538      	push	{r3, r4, r5, lr}
 8012876:	4605      	mov	r5, r0
 8012878:	2900      	cmp	r1, #0
 801287a:	d045      	beq.n	8012908 <_free_r+0x94>
 801287c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012880:	1f0c      	subs	r4, r1, #4
 8012882:	2b00      	cmp	r3, #0
 8012884:	bfb8      	it	lt
 8012886:	18e4      	addlt	r4, r4, r3
 8012888:	f002 faea 	bl	8014e60 <__malloc_lock>
 801288c:	4a1f      	ldr	r2, [pc, #124]	; (801290c <_free_r+0x98>)
 801288e:	6813      	ldr	r3, [r2, #0]
 8012890:	4610      	mov	r0, r2
 8012892:	b933      	cbnz	r3, 80128a2 <_free_r+0x2e>
 8012894:	6063      	str	r3, [r4, #4]
 8012896:	6014      	str	r4, [r2, #0]
 8012898:	4628      	mov	r0, r5
 801289a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801289e:	f002 bae0 	b.w	8014e62 <__malloc_unlock>
 80128a2:	42a3      	cmp	r3, r4
 80128a4:	d90c      	bls.n	80128c0 <_free_r+0x4c>
 80128a6:	6821      	ldr	r1, [r4, #0]
 80128a8:	1862      	adds	r2, r4, r1
 80128aa:	4293      	cmp	r3, r2
 80128ac:	bf04      	itt	eq
 80128ae:	681a      	ldreq	r2, [r3, #0]
 80128b0:	685b      	ldreq	r3, [r3, #4]
 80128b2:	6063      	str	r3, [r4, #4]
 80128b4:	bf04      	itt	eq
 80128b6:	1852      	addeq	r2, r2, r1
 80128b8:	6022      	streq	r2, [r4, #0]
 80128ba:	6004      	str	r4, [r0, #0]
 80128bc:	e7ec      	b.n	8012898 <_free_r+0x24>
 80128be:	4613      	mov	r3, r2
 80128c0:	685a      	ldr	r2, [r3, #4]
 80128c2:	b10a      	cbz	r2, 80128c8 <_free_r+0x54>
 80128c4:	42a2      	cmp	r2, r4
 80128c6:	d9fa      	bls.n	80128be <_free_r+0x4a>
 80128c8:	6819      	ldr	r1, [r3, #0]
 80128ca:	1858      	adds	r0, r3, r1
 80128cc:	42a0      	cmp	r0, r4
 80128ce:	d10b      	bne.n	80128e8 <_free_r+0x74>
 80128d0:	6820      	ldr	r0, [r4, #0]
 80128d2:	4401      	add	r1, r0
 80128d4:	1858      	adds	r0, r3, r1
 80128d6:	4282      	cmp	r2, r0
 80128d8:	6019      	str	r1, [r3, #0]
 80128da:	d1dd      	bne.n	8012898 <_free_r+0x24>
 80128dc:	6810      	ldr	r0, [r2, #0]
 80128de:	6852      	ldr	r2, [r2, #4]
 80128e0:	605a      	str	r2, [r3, #4]
 80128e2:	4401      	add	r1, r0
 80128e4:	6019      	str	r1, [r3, #0]
 80128e6:	e7d7      	b.n	8012898 <_free_r+0x24>
 80128e8:	d902      	bls.n	80128f0 <_free_r+0x7c>
 80128ea:	230c      	movs	r3, #12
 80128ec:	602b      	str	r3, [r5, #0]
 80128ee:	e7d3      	b.n	8012898 <_free_r+0x24>
 80128f0:	6820      	ldr	r0, [r4, #0]
 80128f2:	1821      	adds	r1, r4, r0
 80128f4:	428a      	cmp	r2, r1
 80128f6:	bf04      	itt	eq
 80128f8:	6811      	ldreq	r1, [r2, #0]
 80128fa:	6852      	ldreq	r2, [r2, #4]
 80128fc:	6062      	str	r2, [r4, #4]
 80128fe:	bf04      	itt	eq
 8012900:	1809      	addeq	r1, r1, r0
 8012902:	6021      	streq	r1, [r4, #0]
 8012904:	605c      	str	r4, [r3, #4]
 8012906:	e7c7      	b.n	8012898 <_free_r+0x24>
 8012908:	bd38      	pop	{r3, r4, r5, pc}
 801290a:	bf00      	nop
 801290c:	24000320 	.word	0x24000320

08012910 <_malloc_r>:
 8012910:	b570      	push	{r4, r5, r6, lr}
 8012912:	1ccd      	adds	r5, r1, #3
 8012914:	f025 0503 	bic.w	r5, r5, #3
 8012918:	3508      	adds	r5, #8
 801291a:	2d0c      	cmp	r5, #12
 801291c:	bf38      	it	cc
 801291e:	250c      	movcc	r5, #12
 8012920:	2d00      	cmp	r5, #0
 8012922:	4606      	mov	r6, r0
 8012924:	db01      	blt.n	801292a <_malloc_r+0x1a>
 8012926:	42a9      	cmp	r1, r5
 8012928:	d903      	bls.n	8012932 <_malloc_r+0x22>
 801292a:	230c      	movs	r3, #12
 801292c:	6033      	str	r3, [r6, #0]
 801292e:	2000      	movs	r0, #0
 8012930:	bd70      	pop	{r4, r5, r6, pc}
 8012932:	f002 fa95 	bl	8014e60 <__malloc_lock>
 8012936:	4a21      	ldr	r2, [pc, #132]	; (80129bc <_malloc_r+0xac>)
 8012938:	6814      	ldr	r4, [r2, #0]
 801293a:	4621      	mov	r1, r4
 801293c:	b991      	cbnz	r1, 8012964 <_malloc_r+0x54>
 801293e:	4c20      	ldr	r4, [pc, #128]	; (80129c0 <_malloc_r+0xb0>)
 8012940:	6823      	ldr	r3, [r4, #0]
 8012942:	b91b      	cbnz	r3, 801294c <_malloc_r+0x3c>
 8012944:	4630      	mov	r0, r6
 8012946:	f000 fb65 	bl	8013014 <_sbrk_r>
 801294a:	6020      	str	r0, [r4, #0]
 801294c:	4629      	mov	r1, r5
 801294e:	4630      	mov	r0, r6
 8012950:	f000 fb60 	bl	8013014 <_sbrk_r>
 8012954:	1c43      	adds	r3, r0, #1
 8012956:	d124      	bne.n	80129a2 <_malloc_r+0x92>
 8012958:	230c      	movs	r3, #12
 801295a:	6033      	str	r3, [r6, #0]
 801295c:	4630      	mov	r0, r6
 801295e:	f002 fa80 	bl	8014e62 <__malloc_unlock>
 8012962:	e7e4      	b.n	801292e <_malloc_r+0x1e>
 8012964:	680b      	ldr	r3, [r1, #0]
 8012966:	1b5b      	subs	r3, r3, r5
 8012968:	d418      	bmi.n	801299c <_malloc_r+0x8c>
 801296a:	2b0b      	cmp	r3, #11
 801296c:	d90f      	bls.n	801298e <_malloc_r+0x7e>
 801296e:	600b      	str	r3, [r1, #0]
 8012970:	50cd      	str	r5, [r1, r3]
 8012972:	18cc      	adds	r4, r1, r3
 8012974:	4630      	mov	r0, r6
 8012976:	f002 fa74 	bl	8014e62 <__malloc_unlock>
 801297a:	f104 000b 	add.w	r0, r4, #11
 801297e:	1d23      	adds	r3, r4, #4
 8012980:	f020 0007 	bic.w	r0, r0, #7
 8012984:	1ac3      	subs	r3, r0, r3
 8012986:	d0d3      	beq.n	8012930 <_malloc_r+0x20>
 8012988:	425a      	negs	r2, r3
 801298a:	50e2      	str	r2, [r4, r3]
 801298c:	e7d0      	b.n	8012930 <_malloc_r+0x20>
 801298e:	428c      	cmp	r4, r1
 8012990:	684b      	ldr	r3, [r1, #4]
 8012992:	bf16      	itet	ne
 8012994:	6063      	strne	r3, [r4, #4]
 8012996:	6013      	streq	r3, [r2, #0]
 8012998:	460c      	movne	r4, r1
 801299a:	e7eb      	b.n	8012974 <_malloc_r+0x64>
 801299c:	460c      	mov	r4, r1
 801299e:	6849      	ldr	r1, [r1, #4]
 80129a0:	e7cc      	b.n	801293c <_malloc_r+0x2c>
 80129a2:	1cc4      	adds	r4, r0, #3
 80129a4:	f024 0403 	bic.w	r4, r4, #3
 80129a8:	42a0      	cmp	r0, r4
 80129aa:	d005      	beq.n	80129b8 <_malloc_r+0xa8>
 80129ac:	1a21      	subs	r1, r4, r0
 80129ae:	4630      	mov	r0, r6
 80129b0:	f000 fb30 	bl	8013014 <_sbrk_r>
 80129b4:	3001      	adds	r0, #1
 80129b6:	d0cf      	beq.n	8012958 <_malloc_r+0x48>
 80129b8:	6025      	str	r5, [r4, #0]
 80129ba:	e7db      	b.n	8012974 <_malloc_r+0x64>
 80129bc:	24000320 	.word	0x24000320
 80129c0:	24000324 	.word	0x24000324

080129c4 <__cvt>:
 80129c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80129c6:	ed2d 8b02 	vpush	{d8}
 80129ca:	eeb0 8b40 	vmov.f64	d8, d0
 80129ce:	b085      	sub	sp, #20
 80129d0:	4617      	mov	r7, r2
 80129d2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80129d4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80129d6:	ee18 2a90 	vmov	r2, s17
 80129da:	f025 0520 	bic.w	r5, r5, #32
 80129de:	2a00      	cmp	r2, #0
 80129e0:	bfb6      	itet	lt
 80129e2:	222d      	movlt	r2, #45	; 0x2d
 80129e4:	2200      	movge	r2, #0
 80129e6:	eeb1 8b40 	vneglt.f64	d8, d0
 80129ea:	2d46      	cmp	r5, #70	; 0x46
 80129ec:	460c      	mov	r4, r1
 80129ee:	701a      	strb	r2, [r3, #0]
 80129f0:	d004      	beq.n	80129fc <__cvt+0x38>
 80129f2:	2d45      	cmp	r5, #69	; 0x45
 80129f4:	d100      	bne.n	80129f8 <__cvt+0x34>
 80129f6:	3401      	adds	r4, #1
 80129f8:	2102      	movs	r1, #2
 80129fa:	e000      	b.n	80129fe <__cvt+0x3a>
 80129fc:	2103      	movs	r1, #3
 80129fe:	ab03      	add	r3, sp, #12
 8012a00:	9301      	str	r3, [sp, #4]
 8012a02:	ab02      	add	r3, sp, #8
 8012a04:	9300      	str	r3, [sp, #0]
 8012a06:	4622      	mov	r2, r4
 8012a08:	4633      	mov	r3, r6
 8012a0a:	eeb0 0b48 	vmov.f64	d0, d8
 8012a0e:	f001 f993 	bl	8013d38 <_dtoa_r>
 8012a12:	2d47      	cmp	r5, #71	; 0x47
 8012a14:	d101      	bne.n	8012a1a <__cvt+0x56>
 8012a16:	07fb      	lsls	r3, r7, #31
 8012a18:	d51e      	bpl.n	8012a58 <__cvt+0x94>
 8012a1a:	2d46      	cmp	r5, #70	; 0x46
 8012a1c:	eb00 0304 	add.w	r3, r0, r4
 8012a20:	d10c      	bne.n	8012a3c <__cvt+0x78>
 8012a22:	7802      	ldrb	r2, [r0, #0]
 8012a24:	2a30      	cmp	r2, #48	; 0x30
 8012a26:	d107      	bne.n	8012a38 <__cvt+0x74>
 8012a28:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a30:	bf1c      	itt	ne
 8012a32:	f1c4 0401 	rsbne	r4, r4, #1
 8012a36:	6034      	strne	r4, [r6, #0]
 8012a38:	6832      	ldr	r2, [r6, #0]
 8012a3a:	4413      	add	r3, r2
 8012a3c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012a40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a44:	d007      	beq.n	8012a56 <__cvt+0x92>
 8012a46:	2130      	movs	r1, #48	; 0x30
 8012a48:	9a03      	ldr	r2, [sp, #12]
 8012a4a:	429a      	cmp	r2, r3
 8012a4c:	d204      	bcs.n	8012a58 <__cvt+0x94>
 8012a4e:	1c54      	adds	r4, r2, #1
 8012a50:	9403      	str	r4, [sp, #12]
 8012a52:	7011      	strb	r1, [r2, #0]
 8012a54:	e7f8      	b.n	8012a48 <__cvt+0x84>
 8012a56:	9303      	str	r3, [sp, #12]
 8012a58:	9b03      	ldr	r3, [sp, #12]
 8012a5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012a5c:	1a1b      	subs	r3, r3, r0
 8012a5e:	6013      	str	r3, [r2, #0]
 8012a60:	b005      	add	sp, #20
 8012a62:	ecbd 8b02 	vpop	{d8}
 8012a66:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012a68 <__exponent>:
 8012a68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012a6a:	2900      	cmp	r1, #0
 8012a6c:	4604      	mov	r4, r0
 8012a6e:	bfba      	itte	lt
 8012a70:	4249      	neglt	r1, r1
 8012a72:	232d      	movlt	r3, #45	; 0x2d
 8012a74:	232b      	movge	r3, #43	; 0x2b
 8012a76:	2909      	cmp	r1, #9
 8012a78:	f804 2b02 	strb.w	r2, [r4], #2
 8012a7c:	7043      	strb	r3, [r0, #1]
 8012a7e:	dd20      	ble.n	8012ac2 <__exponent+0x5a>
 8012a80:	f10d 0307 	add.w	r3, sp, #7
 8012a84:	461f      	mov	r7, r3
 8012a86:	260a      	movs	r6, #10
 8012a88:	fb91 f5f6 	sdiv	r5, r1, r6
 8012a8c:	fb06 1115 	mls	r1, r6, r5, r1
 8012a90:	3130      	adds	r1, #48	; 0x30
 8012a92:	2d09      	cmp	r5, #9
 8012a94:	f803 1c01 	strb.w	r1, [r3, #-1]
 8012a98:	f103 32ff 	add.w	r2, r3, #4294967295
 8012a9c:	4629      	mov	r1, r5
 8012a9e:	dc09      	bgt.n	8012ab4 <__exponent+0x4c>
 8012aa0:	3130      	adds	r1, #48	; 0x30
 8012aa2:	3b02      	subs	r3, #2
 8012aa4:	f802 1c01 	strb.w	r1, [r2, #-1]
 8012aa8:	42bb      	cmp	r3, r7
 8012aaa:	4622      	mov	r2, r4
 8012aac:	d304      	bcc.n	8012ab8 <__exponent+0x50>
 8012aae:	1a10      	subs	r0, r2, r0
 8012ab0:	b003      	add	sp, #12
 8012ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012ab4:	4613      	mov	r3, r2
 8012ab6:	e7e7      	b.n	8012a88 <__exponent+0x20>
 8012ab8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012abc:	f804 2b01 	strb.w	r2, [r4], #1
 8012ac0:	e7f2      	b.n	8012aa8 <__exponent+0x40>
 8012ac2:	2330      	movs	r3, #48	; 0x30
 8012ac4:	4419      	add	r1, r3
 8012ac6:	7083      	strb	r3, [r0, #2]
 8012ac8:	1d02      	adds	r2, r0, #4
 8012aca:	70c1      	strb	r1, [r0, #3]
 8012acc:	e7ef      	b.n	8012aae <__exponent+0x46>
	...

08012ad0 <_printf_float>:
 8012ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ad4:	b08d      	sub	sp, #52	; 0x34
 8012ad6:	460c      	mov	r4, r1
 8012ad8:	4616      	mov	r6, r2
 8012ada:	461f      	mov	r7, r3
 8012adc:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8012ae0:	4605      	mov	r5, r0
 8012ae2:	f002 f99d 	bl	8014e20 <_localeconv_r>
 8012ae6:	f8d0 b000 	ldr.w	fp, [r0]
 8012aea:	4658      	mov	r0, fp
 8012aec:	f7ed fbf4 	bl	80002d8 <strlen>
 8012af0:	2300      	movs	r3, #0
 8012af2:	930a      	str	r3, [sp, #40]	; 0x28
 8012af4:	f8d8 3000 	ldr.w	r3, [r8]
 8012af8:	9005      	str	r0, [sp, #20]
 8012afa:	3307      	adds	r3, #7
 8012afc:	f023 0307 	bic.w	r3, r3, #7
 8012b00:	f103 0108 	add.w	r1, r3, #8
 8012b04:	f894 9018 	ldrb.w	r9, [r4, #24]
 8012b08:	6822      	ldr	r2, [r4, #0]
 8012b0a:	f8c8 1000 	str.w	r1, [r8]
 8012b0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012b12:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8012b16:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 8012da0 <_printf_float+0x2d0>
 8012b1a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8012b1e:	eeb0 6bc0 	vabs.f64	d6, d0
 8012b22:	eeb4 6b47 	vcmp.f64	d6, d7
 8012b26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b2a:	dd24      	ble.n	8012b76 <_printf_float+0xa6>
 8012b2c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8012b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b34:	d502      	bpl.n	8012b3c <_printf_float+0x6c>
 8012b36:	232d      	movs	r3, #45	; 0x2d
 8012b38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012b3c:	499a      	ldr	r1, [pc, #616]	; (8012da8 <_printf_float+0x2d8>)
 8012b3e:	4b9b      	ldr	r3, [pc, #620]	; (8012dac <_printf_float+0x2dc>)
 8012b40:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8012b44:	bf8c      	ite	hi
 8012b46:	4688      	movhi	r8, r1
 8012b48:	4698      	movls	r8, r3
 8012b4a:	f022 0204 	bic.w	r2, r2, #4
 8012b4e:	2303      	movs	r3, #3
 8012b50:	6123      	str	r3, [r4, #16]
 8012b52:	6022      	str	r2, [r4, #0]
 8012b54:	f04f 0a00 	mov.w	sl, #0
 8012b58:	9700      	str	r7, [sp, #0]
 8012b5a:	4633      	mov	r3, r6
 8012b5c:	aa0b      	add	r2, sp, #44	; 0x2c
 8012b5e:	4621      	mov	r1, r4
 8012b60:	4628      	mov	r0, r5
 8012b62:	f000 f9e1 	bl	8012f28 <_printf_common>
 8012b66:	3001      	adds	r0, #1
 8012b68:	f040 8089 	bne.w	8012c7e <_printf_float+0x1ae>
 8012b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8012b70:	b00d      	add	sp, #52	; 0x34
 8012b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b76:	eeb4 0b40 	vcmp.f64	d0, d0
 8012b7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b7e:	d702      	bvc.n	8012b86 <_printf_float+0xb6>
 8012b80:	498b      	ldr	r1, [pc, #556]	; (8012db0 <_printf_float+0x2e0>)
 8012b82:	4b8c      	ldr	r3, [pc, #560]	; (8012db4 <_printf_float+0x2e4>)
 8012b84:	e7dc      	b.n	8012b40 <_printf_float+0x70>
 8012b86:	6861      	ldr	r1, [r4, #4]
 8012b88:	1c4b      	adds	r3, r1, #1
 8012b8a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8012b8e:	ab0a      	add	r3, sp, #40	; 0x28
 8012b90:	a809      	add	r0, sp, #36	; 0x24
 8012b92:	d13b      	bne.n	8012c0c <_printf_float+0x13c>
 8012b94:	2106      	movs	r1, #6
 8012b96:	6061      	str	r1, [r4, #4]
 8012b98:	f04f 0c00 	mov.w	ip, #0
 8012b9c:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8012ba0:	e9cd 0900 	strd	r0, r9, [sp]
 8012ba4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012ba8:	6022      	str	r2, [r4, #0]
 8012baa:	6861      	ldr	r1, [r4, #4]
 8012bac:	4628      	mov	r0, r5
 8012bae:	f7ff ff09 	bl	80129c4 <__cvt>
 8012bb2:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 8012bb6:	2b47      	cmp	r3, #71	; 0x47
 8012bb8:	4680      	mov	r8, r0
 8012bba:	d109      	bne.n	8012bd0 <_printf_float+0x100>
 8012bbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012bbe:	1cd8      	adds	r0, r3, #3
 8012bc0:	db02      	blt.n	8012bc8 <_printf_float+0xf8>
 8012bc2:	6862      	ldr	r2, [r4, #4]
 8012bc4:	4293      	cmp	r3, r2
 8012bc6:	dd47      	ble.n	8012c58 <_printf_float+0x188>
 8012bc8:	f1a9 0902 	sub.w	r9, r9, #2
 8012bcc:	fa5f f989 	uxtb.w	r9, r9
 8012bd0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8012bd4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012bd6:	d824      	bhi.n	8012c22 <_printf_float+0x152>
 8012bd8:	3901      	subs	r1, #1
 8012bda:	464a      	mov	r2, r9
 8012bdc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012be0:	9109      	str	r1, [sp, #36]	; 0x24
 8012be2:	f7ff ff41 	bl	8012a68 <__exponent>
 8012be6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012be8:	1813      	adds	r3, r2, r0
 8012bea:	2a01      	cmp	r2, #1
 8012bec:	4682      	mov	sl, r0
 8012bee:	6123      	str	r3, [r4, #16]
 8012bf0:	dc02      	bgt.n	8012bf8 <_printf_float+0x128>
 8012bf2:	6822      	ldr	r2, [r4, #0]
 8012bf4:	07d1      	lsls	r1, r2, #31
 8012bf6:	d501      	bpl.n	8012bfc <_printf_float+0x12c>
 8012bf8:	3301      	adds	r3, #1
 8012bfa:	6123      	str	r3, [r4, #16]
 8012bfc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	d0a9      	beq.n	8012b58 <_printf_float+0x88>
 8012c04:	232d      	movs	r3, #45	; 0x2d
 8012c06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012c0a:	e7a5      	b.n	8012b58 <_printf_float+0x88>
 8012c0c:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 8012c10:	f000 8178 	beq.w	8012f04 <_printf_float+0x434>
 8012c14:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8012c18:	d1be      	bne.n	8012b98 <_printf_float+0xc8>
 8012c1a:	2900      	cmp	r1, #0
 8012c1c:	d1bc      	bne.n	8012b98 <_printf_float+0xc8>
 8012c1e:	2101      	movs	r1, #1
 8012c20:	e7b9      	b.n	8012b96 <_printf_float+0xc6>
 8012c22:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8012c26:	d119      	bne.n	8012c5c <_printf_float+0x18c>
 8012c28:	2900      	cmp	r1, #0
 8012c2a:	6863      	ldr	r3, [r4, #4]
 8012c2c:	dd0c      	ble.n	8012c48 <_printf_float+0x178>
 8012c2e:	6121      	str	r1, [r4, #16]
 8012c30:	b913      	cbnz	r3, 8012c38 <_printf_float+0x168>
 8012c32:	6822      	ldr	r2, [r4, #0]
 8012c34:	07d2      	lsls	r2, r2, #31
 8012c36:	d502      	bpl.n	8012c3e <_printf_float+0x16e>
 8012c38:	3301      	adds	r3, #1
 8012c3a:	440b      	add	r3, r1
 8012c3c:	6123      	str	r3, [r4, #16]
 8012c3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c40:	65a3      	str	r3, [r4, #88]	; 0x58
 8012c42:	f04f 0a00 	mov.w	sl, #0
 8012c46:	e7d9      	b.n	8012bfc <_printf_float+0x12c>
 8012c48:	b913      	cbnz	r3, 8012c50 <_printf_float+0x180>
 8012c4a:	6822      	ldr	r2, [r4, #0]
 8012c4c:	07d0      	lsls	r0, r2, #31
 8012c4e:	d501      	bpl.n	8012c54 <_printf_float+0x184>
 8012c50:	3302      	adds	r3, #2
 8012c52:	e7f3      	b.n	8012c3c <_printf_float+0x16c>
 8012c54:	2301      	movs	r3, #1
 8012c56:	e7f1      	b.n	8012c3c <_printf_float+0x16c>
 8012c58:	f04f 0967 	mov.w	r9, #103	; 0x67
 8012c5c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8012c60:	4293      	cmp	r3, r2
 8012c62:	db05      	blt.n	8012c70 <_printf_float+0x1a0>
 8012c64:	6822      	ldr	r2, [r4, #0]
 8012c66:	6123      	str	r3, [r4, #16]
 8012c68:	07d1      	lsls	r1, r2, #31
 8012c6a:	d5e8      	bpl.n	8012c3e <_printf_float+0x16e>
 8012c6c:	3301      	adds	r3, #1
 8012c6e:	e7e5      	b.n	8012c3c <_printf_float+0x16c>
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	bfd4      	ite	le
 8012c74:	f1c3 0302 	rsble	r3, r3, #2
 8012c78:	2301      	movgt	r3, #1
 8012c7a:	4413      	add	r3, r2
 8012c7c:	e7de      	b.n	8012c3c <_printf_float+0x16c>
 8012c7e:	6823      	ldr	r3, [r4, #0]
 8012c80:	055a      	lsls	r2, r3, #21
 8012c82:	d407      	bmi.n	8012c94 <_printf_float+0x1c4>
 8012c84:	6923      	ldr	r3, [r4, #16]
 8012c86:	4642      	mov	r2, r8
 8012c88:	4631      	mov	r1, r6
 8012c8a:	4628      	mov	r0, r5
 8012c8c:	47b8      	blx	r7
 8012c8e:	3001      	adds	r0, #1
 8012c90:	d12a      	bne.n	8012ce8 <_printf_float+0x218>
 8012c92:	e76b      	b.n	8012b6c <_printf_float+0x9c>
 8012c94:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8012c98:	f240 80de 	bls.w	8012e58 <_printf_float+0x388>
 8012c9c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8012ca0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ca8:	d133      	bne.n	8012d12 <_printf_float+0x242>
 8012caa:	2301      	movs	r3, #1
 8012cac:	4a42      	ldr	r2, [pc, #264]	; (8012db8 <_printf_float+0x2e8>)
 8012cae:	4631      	mov	r1, r6
 8012cb0:	4628      	mov	r0, r5
 8012cb2:	47b8      	blx	r7
 8012cb4:	3001      	adds	r0, #1
 8012cb6:	f43f af59 	beq.w	8012b6c <_printf_float+0x9c>
 8012cba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012cbe:	429a      	cmp	r2, r3
 8012cc0:	db02      	blt.n	8012cc8 <_printf_float+0x1f8>
 8012cc2:	6823      	ldr	r3, [r4, #0]
 8012cc4:	07d8      	lsls	r0, r3, #31
 8012cc6:	d50f      	bpl.n	8012ce8 <_printf_float+0x218>
 8012cc8:	9b05      	ldr	r3, [sp, #20]
 8012cca:	465a      	mov	r2, fp
 8012ccc:	4631      	mov	r1, r6
 8012cce:	4628      	mov	r0, r5
 8012cd0:	47b8      	blx	r7
 8012cd2:	3001      	adds	r0, #1
 8012cd4:	f43f af4a 	beq.w	8012b6c <_printf_float+0x9c>
 8012cd8:	f04f 0800 	mov.w	r8, #0
 8012cdc:	f104 091a 	add.w	r9, r4, #26
 8012ce0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012ce2:	3b01      	subs	r3, #1
 8012ce4:	4543      	cmp	r3, r8
 8012ce6:	dc09      	bgt.n	8012cfc <_printf_float+0x22c>
 8012ce8:	6823      	ldr	r3, [r4, #0]
 8012cea:	079b      	lsls	r3, r3, #30
 8012cec:	f100 8105 	bmi.w	8012efa <_printf_float+0x42a>
 8012cf0:	68e0      	ldr	r0, [r4, #12]
 8012cf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012cf4:	4298      	cmp	r0, r3
 8012cf6:	bfb8      	it	lt
 8012cf8:	4618      	movlt	r0, r3
 8012cfa:	e739      	b.n	8012b70 <_printf_float+0xa0>
 8012cfc:	2301      	movs	r3, #1
 8012cfe:	464a      	mov	r2, r9
 8012d00:	4631      	mov	r1, r6
 8012d02:	4628      	mov	r0, r5
 8012d04:	47b8      	blx	r7
 8012d06:	3001      	adds	r0, #1
 8012d08:	f43f af30 	beq.w	8012b6c <_printf_float+0x9c>
 8012d0c:	f108 0801 	add.w	r8, r8, #1
 8012d10:	e7e6      	b.n	8012ce0 <_printf_float+0x210>
 8012d12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	dc2b      	bgt.n	8012d70 <_printf_float+0x2a0>
 8012d18:	2301      	movs	r3, #1
 8012d1a:	4a27      	ldr	r2, [pc, #156]	; (8012db8 <_printf_float+0x2e8>)
 8012d1c:	4631      	mov	r1, r6
 8012d1e:	4628      	mov	r0, r5
 8012d20:	47b8      	blx	r7
 8012d22:	3001      	adds	r0, #1
 8012d24:	f43f af22 	beq.w	8012b6c <_printf_float+0x9c>
 8012d28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d2a:	b923      	cbnz	r3, 8012d36 <_printf_float+0x266>
 8012d2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012d2e:	b913      	cbnz	r3, 8012d36 <_printf_float+0x266>
 8012d30:	6823      	ldr	r3, [r4, #0]
 8012d32:	07d9      	lsls	r1, r3, #31
 8012d34:	d5d8      	bpl.n	8012ce8 <_printf_float+0x218>
 8012d36:	9b05      	ldr	r3, [sp, #20]
 8012d38:	465a      	mov	r2, fp
 8012d3a:	4631      	mov	r1, r6
 8012d3c:	4628      	mov	r0, r5
 8012d3e:	47b8      	blx	r7
 8012d40:	3001      	adds	r0, #1
 8012d42:	f43f af13 	beq.w	8012b6c <_printf_float+0x9c>
 8012d46:	f04f 0900 	mov.w	r9, #0
 8012d4a:	f104 0a1a 	add.w	sl, r4, #26
 8012d4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d50:	425b      	negs	r3, r3
 8012d52:	454b      	cmp	r3, r9
 8012d54:	dc01      	bgt.n	8012d5a <_printf_float+0x28a>
 8012d56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012d58:	e795      	b.n	8012c86 <_printf_float+0x1b6>
 8012d5a:	2301      	movs	r3, #1
 8012d5c:	4652      	mov	r2, sl
 8012d5e:	4631      	mov	r1, r6
 8012d60:	4628      	mov	r0, r5
 8012d62:	47b8      	blx	r7
 8012d64:	3001      	adds	r0, #1
 8012d66:	f43f af01 	beq.w	8012b6c <_printf_float+0x9c>
 8012d6a:	f109 0901 	add.w	r9, r9, #1
 8012d6e:	e7ee      	b.n	8012d4e <_printf_float+0x27e>
 8012d70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012d72:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012d74:	429a      	cmp	r2, r3
 8012d76:	bfa8      	it	ge
 8012d78:	461a      	movge	r2, r3
 8012d7a:	2a00      	cmp	r2, #0
 8012d7c:	4691      	mov	r9, r2
 8012d7e:	dd07      	ble.n	8012d90 <_printf_float+0x2c0>
 8012d80:	4613      	mov	r3, r2
 8012d82:	4631      	mov	r1, r6
 8012d84:	4642      	mov	r2, r8
 8012d86:	4628      	mov	r0, r5
 8012d88:	47b8      	blx	r7
 8012d8a:	3001      	adds	r0, #1
 8012d8c:	f43f aeee 	beq.w	8012b6c <_printf_float+0x9c>
 8012d90:	f104 031a 	add.w	r3, r4, #26
 8012d94:	f04f 0a00 	mov.w	sl, #0
 8012d98:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012d9c:	9307      	str	r3, [sp, #28]
 8012d9e:	e017      	b.n	8012dd0 <_printf_float+0x300>
 8012da0:	ffffffff 	.word	0xffffffff
 8012da4:	7fefffff 	.word	0x7fefffff
 8012da8:	0801587c 	.word	0x0801587c
 8012dac:	08015878 	.word	0x08015878
 8012db0:	08015884 	.word	0x08015884
 8012db4:	08015880 	.word	0x08015880
 8012db8:	08015888 	.word	0x08015888
 8012dbc:	2301      	movs	r3, #1
 8012dbe:	9a07      	ldr	r2, [sp, #28]
 8012dc0:	4631      	mov	r1, r6
 8012dc2:	4628      	mov	r0, r5
 8012dc4:	47b8      	blx	r7
 8012dc6:	3001      	adds	r0, #1
 8012dc8:	f43f aed0 	beq.w	8012b6c <_printf_float+0x9c>
 8012dcc:	f10a 0a01 	add.w	sl, sl, #1
 8012dd0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012dd2:	9306      	str	r3, [sp, #24]
 8012dd4:	eba3 0309 	sub.w	r3, r3, r9
 8012dd8:	4553      	cmp	r3, sl
 8012dda:	dcef      	bgt.n	8012dbc <_printf_float+0x2ec>
 8012ddc:	9b06      	ldr	r3, [sp, #24]
 8012dde:	4498      	add	r8, r3
 8012de0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012de4:	429a      	cmp	r2, r3
 8012de6:	db15      	blt.n	8012e14 <_printf_float+0x344>
 8012de8:	6823      	ldr	r3, [r4, #0]
 8012dea:	07da      	lsls	r2, r3, #31
 8012dec:	d412      	bmi.n	8012e14 <_printf_float+0x344>
 8012dee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012df0:	9a06      	ldr	r2, [sp, #24]
 8012df2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012df4:	1a9a      	subs	r2, r3, r2
 8012df6:	eba3 0a01 	sub.w	sl, r3, r1
 8012dfa:	4592      	cmp	sl, r2
 8012dfc:	bfa8      	it	ge
 8012dfe:	4692      	movge	sl, r2
 8012e00:	f1ba 0f00 	cmp.w	sl, #0
 8012e04:	dc0e      	bgt.n	8012e24 <_printf_float+0x354>
 8012e06:	f04f 0800 	mov.w	r8, #0
 8012e0a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012e0e:	f104 091a 	add.w	r9, r4, #26
 8012e12:	e019      	b.n	8012e48 <_printf_float+0x378>
 8012e14:	9b05      	ldr	r3, [sp, #20]
 8012e16:	465a      	mov	r2, fp
 8012e18:	4631      	mov	r1, r6
 8012e1a:	4628      	mov	r0, r5
 8012e1c:	47b8      	blx	r7
 8012e1e:	3001      	adds	r0, #1
 8012e20:	d1e5      	bne.n	8012dee <_printf_float+0x31e>
 8012e22:	e6a3      	b.n	8012b6c <_printf_float+0x9c>
 8012e24:	4653      	mov	r3, sl
 8012e26:	4642      	mov	r2, r8
 8012e28:	4631      	mov	r1, r6
 8012e2a:	4628      	mov	r0, r5
 8012e2c:	47b8      	blx	r7
 8012e2e:	3001      	adds	r0, #1
 8012e30:	d1e9      	bne.n	8012e06 <_printf_float+0x336>
 8012e32:	e69b      	b.n	8012b6c <_printf_float+0x9c>
 8012e34:	2301      	movs	r3, #1
 8012e36:	464a      	mov	r2, r9
 8012e38:	4631      	mov	r1, r6
 8012e3a:	4628      	mov	r0, r5
 8012e3c:	47b8      	blx	r7
 8012e3e:	3001      	adds	r0, #1
 8012e40:	f43f ae94 	beq.w	8012b6c <_printf_float+0x9c>
 8012e44:	f108 0801 	add.w	r8, r8, #1
 8012e48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012e4c:	1a9b      	subs	r3, r3, r2
 8012e4e:	eba3 030a 	sub.w	r3, r3, sl
 8012e52:	4543      	cmp	r3, r8
 8012e54:	dcee      	bgt.n	8012e34 <_printf_float+0x364>
 8012e56:	e747      	b.n	8012ce8 <_printf_float+0x218>
 8012e58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012e5a:	2a01      	cmp	r2, #1
 8012e5c:	dc01      	bgt.n	8012e62 <_printf_float+0x392>
 8012e5e:	07db      	lsls	r3, r3, #31
 8012e60:	d539      	bpl.n	8012ed6 <_printf_float+0x406>
 8012e62:	2301      	movs	r3, #1
 8012e64:	4642      	mov	r2, r8
 8012e66:	4631      	mov	r1, r6
 8012e68:	4628      	mov	r0, r5
 8012e6a:	47b8      	blx	r7
 8012e6c:	3001      	adds	r0, #1
 8012e6e:	f43f ae7d 	beq.w	8012b6c <_printf_float+0x9c>
 8012e72:	9b05      	ldr	r3, [sp, #20]
 8012e74:	465a      	mov	r2, fp
 8012e76:	4631      	mov	r1, r6
 8012e78:	4628      	mov	r0, r5
 8012e7a:	47b8      	blx	r7
 8012e7c:	3001      	adds	r0, #1
 8012e7e:	f108 0801 	add.w	r8, r8, #1
 8012e82:	f43f ae73 	beq.w	8012b6c <_printf_float+0x9c>
 8012e86:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8012e8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012e8c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e94:	f103 33ff 	add.w	r3, r3, #4294967295
 8012e98:	d018      	beq.n	8012ecc <_printf_float+0x3fc>
 8012e9a:	4642      	mov	r2, r8
 8012e9c:	4631      	mov	r1, r6
 8012e9e:	4628      	mov	r0, r5
 8012ea0:	47b8      	blx	r7
 8012ea2:	3001      	adds	r0, #1
 8012ea4:	d10e      	bne.n	8012ec4 <_printf_float+0x3f4>
 8012ea6:	e661      	b.n	8012b6c <_printf_float+0x9c>
 8012ea8:	2301      	movs	r3, #1
 8012eaa:	464a      	mov	r2, r9
 8012eac:	4631      	mov	r1, r6
 8012eae:	4628      	mov	r0, r5
 8012eb0:	47b8      	blx	r7
 8012eb2:	3001      	adds	r0, #1
 8012eb4:	f43f ae5a 	beq.w	8012b6c <_printf_float+0x9c>
 8012eb8:	f108 0801 	add.w	r8, r8, #1
 8012ebc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012ebe:	3b01      	subs	r3, #1
 8012ec0:	4543      	cmp	r3, r8
 8012ec2:	dcf1      	bgt.n	8012ea8 <_printf_float+0x3d8>
 8012ec4:	4653      	mov	r3, sl
 8012ec6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012eca:	e6dd      	b.n	8012c88 <_printf_float+0x1b8>
 8012ecc:	f04f 0800 	mov.w	r8, #0
 8012ed0:	f104 091a 	add.w	r9, r4, #26
 8012ed4:	e7f2      	b.n	8012ebc <_printf_float+0x3ec>
 8012ed6:	2301      	movs	r3, #1
 8012ed8:	e7df      	b.n	8012e9a <_printf_float+0x3ca>
 8012eda:	2301      	movs	r3, #1
 8012edc:	464a      	mov	r2, r9
 8012ede:	4631      	mov	r1, r6
 8012ee0:	4628      	mov	r0, r5
 8012ee2:	47b8      	blx	r7
 8012ee4:	3001      	adds	r0, #1
 8012ee6:	f43f ae41 	beq.w	8012b6c <_printf_float+0x9c>
 8012eea:	f108 0801 	add.w	r8, r8, #1
 8012eee:	68e3      	ldr	r3, [r4, #12]
 8012ef0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012ef2:	1a9b      	subs	r3, r3, r2
 8012ef4:	4543      	cmp	r3, r8
 8012ef6:	dcf0      	bgt.n	8012eda <_printf_float+0x40a>
 8012ef8:	e6fa      	b.n	8012cf0 <_printf_float+0x220>
 8012efa:	f04f 0800 	mov.w	r8, #0
 8012efe:	f104 0919 	add.w	r9, r4, #25
 8012f02:	e7f4      	b.n	8012eee <_printf_float+0x41e>
 8012f04:	2900      	cmp	r1, #0
 8012f06:	f43f ae8a 	beq.w	8012c1e <_printf_float+0x14e>
 8012f0a:	f04f 0c00 	mov.w	ip, #0
 8012f0e:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8012f12:	e9cd 0900 	strd	r0, r9, [sp]
 8012f16:	6022      	str	r2, [r4, #0]
 8012f18:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012f1c:	4628      	mov	r0, r5
 8012f1e:	f7ff fd51 	bl	80129c4 <__cvt>
 8012f22:	4680      	mov	r8, r0
 8012f24:	e64a      	b.n	8012bbc <_printf_float+0xec>
 8012f26:	bf00      	nop

08012f28 <_printf_common>:
 8012f28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012f2c:	4691      	mov	r9, r2
 8012f2e:	461f      	mov	r7, r3
 8012f30:	688a      	ldr	r2, [r1, #8]
 8012f32:	690b      	ldr	r3, [r1, #16]
 8012f34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012f38:	4293      	cmp	r3, r2
 8012f3a:	bfb8      	it	lt
 8012f3c:	4613      	movlt	r3, r2
 8012f3e:	f8c9 3000 	str.w	r3, [r9]
 8012f42:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012f46:	4606      	mov	r6, r0
 8012f48:	460c      	mov	r4, r1
 8012f4a:	b112      	cbz	r2, 8012f52 <_printf_common+0x2a>
 8012f4c:	3301      	adds	r3, #1
 8012f4e:	f8c9 3000 	str.w	r3, [r9]
 8012f52:	6823      	ldr	r3, [r4, #0]
 8012f54:	0699      	lsls	r1, r3, #26
 8012f56:	bf42      	ittt	mi
 8012f58:	f8d9 3000 	ldrmi.w	r3, [r9]
 8012f5c:	3302      	addmi	r3, #2
 8012f5e:	f8c9 3000 	strmi.w	r3, [r9]
 8012f62:	6825      	ldr	r5, [r4, #0]
 8012f64:	f015 0506 	ands.w	r5, r5, #6
 8012f68:	d107      	bne.n	8012f7a <_printf_common+0x52>
 8012f6a:	f104 0a19 	add.w	sl, r4, #25
 8012f6e:	68e3      	ldr	r3, [r4, #12]
 8012f70:	f8d9 2000 	ldr.w	r2, [r9]
 8012f74:	1a9b      	subs	r3, r3, r2
 8012f76:	42ab      	cmp	r3, r5
 8012f78:	dc28      	bgt.n	8012fcc <_printf_common+0xa4>
 8012f7a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8012f7e:	6822      	ldr	r2, [r4, #0]
 8012f80:	3300      	adds	r3, #0
 8012f82:	bf18      	it	ne
 8012f84:	2301      	movne	r3, #1
 8012f86:	0692      	lsls	r2, r2, #26
 8012f88:	d42d      	bmi.n	8012fe6 <_printf_common+0xbe>
 8012f8a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012f8e:	4639      	mov	r1, r7
 8012f90:	4630      	mov	r0, r6
 8012f92:	47c0      	blx	r8
 8012f94:	3001      	adds	r0, #1
 8012f96:	d020      	beq.n	8012fda <_printf_common+0xb2>
 8012f98:	6823      	ldr	r3, [r4, #0]
 8012f9a:	68e5      	ldr	r5, [r4, #12]
 8012f9c:	f8d9 2000 	ldr.w	r2, [r9]
 8012fa0:	f003 0306 	and.w	r3, r3, #6
 8012fa4:	2b04      	cmp	r3, #4
 8012fa6:	bf08      	it	eq
 8012fa8:	1aad      	subeq	r5, r5, r2
 8012faa:	68a3      	ldr	r3, [r4, #8]
 8012fac:	6922      	ldr	r2, [r4, #16]
 8012fae:	bf0c      	ite	eq
 8012fb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012fb4:	2500      	movne	r5, #0
 8012fb6:	4293      	cmp	r3, r2
 8012fb8:	bfc4      	itt	gt
 8012fba:	1a9b      	subgt	r3, r3, r2
 8012fbc:	18ed      	addgt	r5, r5, r3
 8012fbe:	f04f 0900 	mov.w	r9, #0
 8012fc2:	341a      	adds	r4, #26
 8012fc4:	454d      	cmp	r5, r9
 8012fc6:	d11a      	bne.n	8012ffe <_printf_common+0xd6>
 8012fc8:	2000      	movs	r0, #0
 8012fca:	e008      	b.n	8012fde <_printf_common+0xb6>
 8012fcc:	2301      	movs	r3, #1
 8012fce:	4652      	mov	r2, sl
 8012fd0:	4639      	mov	r1, r7
 8012fd2:	4630      	mov	r0, r6
 8012fd4:	47c0      	blx	r8
 8012fd6:	3001      	adds	r0, #1
 8012fd8:	d103      	bne.n	8012fe2 <_printf_common+0xba>
 8012fda:	f04f 30ff 	mov.w	r0, #4294967295
 8012fde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012fe2:	3501      	adds	r5, #1
 8012fe4:	e7c3      	b.n	8012f6e <_printf_common+0x46>
 8012fe6:	18e1      	adds	r1, r4, r3
 8012fe8:	1c5a      	adds	r2, r3, #1
 8012fea:	2030      	movs	r0, #48	; 0x30
 8012fec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012ff0:	4422      	add	r2, r4
 8012ff2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012ff6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012ffa:	3302      	adds	r3, #2
 8012ffc:	e7c5      	b.n	8012f8a <_printf_common+0x62>
 8012ffe:	2301      	movs	r3, #1
 8013000:	4622      	mov	r2, r4
 8013002:	4639      	mov	r1, r7
 8013004:	4630      	mov	r0, r6
 8013006:	47c0      	blx	r8
 8013008:	3001      	adds	r0, #1
 801300a:	d0e6      	beq.n	8012fda <_printf_common+0xb2>
 801300c:	f109 0901 	add.w	r9, r9, #1
 8013010:	e7d8      	b.n	8012fc4 <_printf_common+0x9c>
	...

08013014 <_sbrk_r>:
 8013014:	b538      	push	{r3, r4, r5, lr}
 8013016:	4c06      	ldr	r4, [pc, #24]	; (8013030 <_sbrk_r+0x1c>)
 8013018:	2300      	movs	r3, #0
 801301a:	4605      	mov	r5, r0
 801301c:	4608      	mov	r0, r1
 801301e:	6023      	str	r3, [r4, #0]
 8013020:	f7f2 fbfc 	bl	800581c <_sbrk>
 8013024:	1c43      	adds	r3, r0, #1
 8013026:	d102      	bne.n	801302e <_sbrk_r+0x1a>
 8013028:	6823      	ldr	r3, [r4, #0]
 801302a:	b103      	cbz	r3, 801302e <_sbrk_r+0x1a>
 801302c:	602b      	str	r3, [r5, #0]
 801302e:	bd38      	pop	{r3, r4, r5, pc}
 8013030:	2400350c 	.word	0x2400350c

08013034 <sulp>:
 8013034:	b570      	push	{r4, r5, r6, lr}
 8013036:	4604      	mov	r4, r0
 8013038:	460d      	mov	r5, r1
 801303a:	4616      	mov	r6, r2
 801303c:	ec45 4b10 	vmov	d0, r4, r5
 8013040:	f002 f9dc 	bl	80153fc <__ulp>
 8013044:	b17e      	cbz	r6, 8013066 <sulp+0x32>
 8013046:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801304a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801304e:	2b00      	cmp	r3, #0
 8013050:	dd09      	ble.n	8013066 <sulp+0x32>
 8013052:	051b      	lsls	r3, r3, #20
 8013054:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8013058:	2000      	movs	r0, #0
 801305a:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 801305e:	ec41 0b17 	vmov	d7, r0, r1
 8013062:	ee20 0b07 	vmul.f64	d0, d0, d7
 8013066:	bd70      	pop	{r4, r5, r6, pc}

08013068 <_strtod_l>:
 8013068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801306c:	ed2d 8b0c 	vpush	{d8-d13}
 8013070:	4698      	mov	r8, r3
 8013072:	b09d      	sub	sp, #116	; 0x74
 8013074:	2300      	movs	r3, #0
 8013076:	4604      	mov	r4, r0
 8013078:	4640      	mov	r0, r8
 801307a:	460e      	mov	r6, r1
 801307c:	9214      	str	r2, [sp, #80]	; 0x50
 801307e:	9318      	str	r3, [sp, #96]	; 0x60
 8013080:	f001 fecc 	bl	8014e1c <__localeconv_l>
 8013084:	4681      	mov	r9, r0
 8013086:	6800      	ldr	r0, [r0, #0]
 8013088:	f7ed f926 	bl	80002d8 <strlen>
 801308c:	f04f 0a00 	mov.w	sl, #0
 8013090:	4607      	mov	r7, r0
 8013092:	f04f 0b00 	mov.w	fp, #0
 8013096:	9617      	str	r6, [sp, #92]	; 0x5c
 8013098:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801309a:	781a      	ldrb	r2, [r3, #0]
 801309c:	2a0d      	cmp	r2, #13
 801309e:	d834      	bhi.n	801310a <_strtod_l+0xa2>
 80130a0:	2a09      	cmp	r2, #9
 80130a2:	d238      	bcs.n	8013116 <_strtod_l+0xae>
 80130a4:	2a00      	cmp	r2, #0
 80130a6:	d040      	beq.n	801312a <_strtod_l+0xc2>
 80130a8:	2300      	movs	r3, #0
 80130aa:	930d      	str	r3, [sp, #52]	; 0x34
 80130ac:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80130ae:	782b      	ldrb	r3, [r5, #0]
 80130b0:	2b30      	cmp	r3, #48	; 0x30
 80130b2:	f040 80b3 	bne.w	801321c <_strtod_l+0x1b4>
 80130b6:	786b      	ldrb	r3, [r5, #1]
 80130b8:	2b58      	cmp	r3, #88	; 0x58
 80130ba:	d001      	beq.n	80130c0 <_strtod_l+0x58>
 80130bc:	2b78      	cmp	r3, #120	; 0x78
 80130be:	d169      	bne.n	8013194 <_strtod_l+0x12c>
 80130c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80130c2:	9301      	str	r3, [sp, #4]
 80130c4:	ab18      	add	r3, sp, #96	; 0x60
 80130c6:	9300      	str	r3, [sp, #0]
 80130c8:	f8cd 8008 	str.w	r8, [sp, #8]
 80130cc:	ab19      	add	r3, sp, #100	; 0x64
 80130ce:	4a8f      	ldr	r2, [pc, #572]	; (801330c <_strtod_l+0x2a4>)
 80130d0:	a917      	add	r1, sp, #92	; 0x5c
 80130d2:	4620      	mov	r0, r4
 80130d4:	f001 fbcb 	bl	801486e <__gethex>
 80130d8:	f010 0607 	ands.w	r6, r0, #7
 80130dc:	4607      	mov	r7, r0
 80130de:	d005      	beq.n	80130ec <_strtod_l+0x84>
 80130e0:	2e06      	cmp	r6, #6
 80130e2:	d12c      	bne.n	801313e <_strtod_l+0xd6>
 80130e4:	3501      	adds	r5, #1
 80130e6:	2300      	movs	r3, #0
 80130e8:	9517      	str	r5, [sp, #92]	; 0x5c
 80130ea:	930d      	str	r3, [sp, #52]	; 0x34
 80130ec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	f040 855e 	bne.w	8013bb0 <_strtod_l+0xb48>
 80130f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80130f6:	b1eb      	cbz	r3, 8013134 <_strtod_l+0xcc>
 80130f8:	ec4b ab17 	vmov	d7, sl, fp
 80130fc:	eeb1 0b47 	vneg.f64	d0, d7
 8013100:	b01d      	add	sp, #116	; 0x74
 8013102:	ecbd 8b0c 	vpop	{d8-d13}
 8013106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801310a:	2a2b      	cmp	r2, #43	; 0x2b
 801310c:	d015      	beq.n	801313a <_strtod_l+0xd2>
 801310e:	2a2d      	cmp	r2, #45	; 0x2d
 8013110:	d004      	beq.n	801311c <_strtod_l+0xb4>
 8013112:	2a20      	cmp	r2, #32
 8013114:	d1c8      	bne.n	80130a8 <_strtod_l+0x40>
 8013116:	3301      	adds	r3, #1
 8013118:	9317      	str	r3, [sp, #92]	; 0x5c
 801311a:	e7bd      	b.n	8013098 <_strtod_l+0x30>
 801311c:	2201      	movs	r2, #1
 801311e:	920d      	str	r2, [sp, #52]	; 0x34
 8013120:	1c5a      	adds	r2, r3, #1
 8013122:	9217      	str	r2, [sp, #92]	; 0x5c
 8013124:	785b      	ldrb	r3, [r3, #1]
 8013126:	2b00      	cmp	r3, #0
 8013128:	d1c0      	bne.n	80130ac <_strtod_l+0x44>
 801312a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801312c:	9617      	str	r6, [sp, #92]	; 0x5c
 801312e:	2b00      	cmp	r3, #0
 8013130:	f040 853c 	bne.w	8013bac <_strtod_l+0xb44>
 8013134:	ec4b ab10 	vmov	d0, sl, fp
 8013138:	e7e2      	b.n	8013100 <_strtod_l+0x98>
 801313a:	2200      	movs	r2, #0
 801313c:	e7ef      	b.n	801311e <_strtod_l+0xb6>
 801313e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013140:	b13a      	cbz	r2, 8013152 <_strtod_l+0xea>
 8013142:	2135      	movs	r1, #53	; 0x35
 8013144:	a81a      	add	r0, sp, #104	; 0x68
 8013146:	f002 fa52 	bl	80155ee <__copybits>
 801314a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801314c:	4620      	mov	r0, r4
 801314e:	f001 febd 	bl	8014ecc <_Bfree>
 8013152:	3e01      	subs	r6, #1
 8013154:	2e04      	cmp	r6, #4
 8013156:	d806      	bhi.n	8013166 <_strtod_l+0xfe>
 8013158:	e8df f006 	tbb	[pc, r6]
 801315c:	1714030a 	.word	0x1714030a
 8013160:	0a          	.byte	0x0a
 8013161:	00          	.byte	0x00
 8013162:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8013166:	073b      	lsls	r3, r7, #28
 8013168:	d5c0      	bpl.n	80130ec <_strtod_l+0x84>
 801316a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801316e:	e7bd      	b.n	80130ec <_strtod_l+0x84>
 8013170:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8013174:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8013176:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801317a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801317e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8013182:	e7f0      	b.n	8013166 <_strtod_l+0xfe>
 8013184:	f8df b188 	ldr.w	fp, [pc, #392]	; 8013310 <_strtod_l+0x2a8>
 8013188:	e7ed      	b.n	8013166 <_strtod_l+0xfe>
 801318a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801318e:	f04f 3aff 	mov.w	sl, #4294967295
 8013192:	e7e8      	b.n	8013166 <_strtod_l+0xfe>
 8013194:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013196:	1c5a      	adds	r2, r3, #1
 8013198:	9217      	str	r2, [sp, #92]	; 0x5c
 801319a:	785b      	ldrb	r3, [r3, #1]
 801319c:	2b30      	cmp	r3, #48	; 0x30
 801319e:	d0f9      	beq.n	8013194 <_strtod_l+0x12c>
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	d0a3      	beq.n	80130ec <_strtod_l+0x84>
 80131a4:	2301      	movs	r3, #1
 80131a6:	930a      	str	r3, [sp, #40]	; 0x28
 80131a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80131aa:	930c      	str	r3, [sp, #48]	; 0x30
 80131ac:	2300      	movs	r3, #0
 80131ae:	9306      	str	r3, [sp, #24]
 80131b0:	9308      	str	r3, [sp, #32]
 80131b2:	461d      	mov	r5, r3
 80131b4:	220a      	movs	r2, #10
 80131b6:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80131b8:	f890 8000 	ldrb.w	r8, [r0]
 80131bc:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
 80131c0:	b2d9      	uxtb	r1, r3
 80131c2:	2909      	cmp	r1, #9
 80131c4:	d92c      	bls.n	8013220 <_strtod_l+0x1b8>
 80131c6:	463a      	mov	r2, r7
 80131c8:	f8d9 1000 	ldr.w	r1, [r9]
 80131cc:	f002 fa58 	bl	8015680 <strncmp>
 80131d0:	2800      	cmp	r0, #0
 80131d2:	d035      	beq.n	8013240 <_strtod_l+0x1d8>
 80131d4:	2000      	movs	r0, #0
 80131d6:	4642      	mov	r2, r8
 80131d8:	462b      	mov	r3, r5
 80131da:	4601      	mov	r1, r0
 80131dc:	9004      	str	r0, [sp, #16]
 80131de:	2a65      	cmp	r2, #101	; 0x65
 80131e0:	d001      	beq.n	80131e6 <_strtod_l+0x17e>
 80131e2:	2a45      	cmp	r2, #69	; 0x45
 80131e4:	d117      	bne.n	8013216 <_strtod_l+0x1ae>
 80131e6:	b923      	cbnz	r3, 80131f2 <_strtod_l+0x18a>
 80131e8:	b910      	cbnz	r0, 80131f0 <_strtod_l+0x188>
 80131ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	d09c      	beq.n	801312a <_strtod_l+0xc2>
 80131f0:	2300      	movs	r3, #0
 80131f2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80131f4:	1c72      	adds	r2, r6, #1
 80131f6:	9217      	str	r2, [sp, #92]	; 0x5c
 80131f8:	7872      	ldrb	r2, [r6, #1]
 80131fa:	2a2b      	cmp	r2, #43	; 0x2b
 80131fc:	f000 8082 	beq.w	8013304 <_strtod_l+0x29c>
 8013200:	2a2d      	cmp	r2, #45	; 0x2d
 8013202:	d079      	beq.n	80132f8 <_strtod_l+0x290>
 8013204:	f04f 0e00 	mov.w	lr, #0
 8013208:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 801320c:	f1bc 0f09 	cmp.w	ip, #9
 8013210:	f240 8086 	bls.w	8013320 <_strtod_l+0x2b8>
 8013214:	9617      	str	r6, [sp, #92]	; 0x5c
 8013216:	f04f 0800 	mov.w	r8, #0
 801321a:	e0a8      	b.n	801336e <_strtod_l+0x306>
 801321c:	2300      	movs	r3, #0
 801321e:	e7c2      	b.n	80131a6 <_strtod_l+0x13e>
 8013220:	2d08      	cmp	r5, #8
 8013222:	bfd5      	itete	le
 8013224:	9908      	ldrle	r1, [sp, #32]
 8013226:	9906      	ldrgt	r1, [sp, #24]
 8013228:	fb02 3301 	mlale	r3, r2, r1, r3
 801322c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8013230:	f100 0001 	add.w	r0, r0, #1
 8013234:	bfd4      	ite	le
 8013236:	9308      	strle	r3, [sp, #32]
 8013238:	9306      	strgt	r3, [sp, #24]
 801323a:	3501      	adds	r5, #1
 801323c:	9017      	str	r0, [sp, #92]	; 0x5c
 801323e:	e7ba      	b.n	80131b6 <_strtod_l+0x14e>
 8013240:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013242:	19da      	adds	r2, r3, r7
 8013244:	9217      	str	r2, [sp, #92]	; 0x5c
 8013246:	5dda      	ldrb	r2, [r3, r7]
 8013248:	2d00      	cmp	r5, #0
 801324a:	d038      	beq.n	80132be <_strtod_l+0x256>
 801324c:	4601      	mov	r1, r0
 801324e:	462b      	mov	r3, r5
 8013250:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8013254:	2f09      	cmp	r7, #9
 8013256:	d913      	bls.n	8013280 <_strtod_l+0x218>
 8013258:	2701      	movs	r7, #1
 801325a:	9704      	str	r7, [sp, #16]
 801325c:	e7bf      	b.n	80131de <_strtod_l+0x176>
 801325e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013260:	1c5a      	adds	r2, r3, #1
 8013262:	9217      	str	r2, [sp, #92]	; 0x5c
 8013264:	785a      	ldrb	r2, [r3, #1]
 8013266:	3001      	adds	r0, #1
 8013268:	2a30      	cmp	r2, #48	; 0x30
 801326a:	d0f8      	beq.n	801325e <_strtod_l+0x1f6>
 801326c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8013270:	2b08      	cmp	r3, #8
 8013272:	f200 84a2 	bhi.w	8013bba <_strtod_l+0xb52>
 8013276:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013278:	930c      	str	r3, [sp, #48]	; 0x30
 801327a:	4601      	mov	r1, r0
 801327c:	2000      	movs	r0, #0
 801327e:	4603      	mov	r3, r0
 8013280:	f1b2 0830 	subs.w	r8, r2, #48	; 0x30
 8013284:	f100 0701 	add.w	r7, r0, #1
 8013288:	d013      	beq.n	80132b2 <_strtod_l+0x24a>
 801328a:	4439      	add	r1, r7
 801328c:	eb00 0e03 	add.w	lr, r0, r3
 8013290:	461f      	mov	r7, r3
 8013292:	f04f 0c0a 	mov.w	ip, #10
 8013296:	45be      	cmp	lr, r7
 8013298:	d113      	bne.n	80132c2 <_strtod_l+0x25a>
 801329a:	181f      	adds	r7, r3, r0
 801329c:	2f08      	cmp	r7, #8
 801329e:	f103 0301 	add.w	r3, r3, #1
 80132a2:	4403      	add	r3, r0
 80132a4:	dc1d      	bgt.n	80132e2 <_strtod_l+0x27a>
 80132a6:	9a08      	ldr	r2, [sp, #32]
 80132a8:	200a      	movs	r0, #10
 80132aa:	fb00 8202 	mla	r2, r0, r2, r8
 80132ae:	9208      	str	r2, [sp, #32]
 80132b0:	2700      	movs	r7, #0
 80132b2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80132b4:	1c50      	adds	r0, r2, #1
 80132b6:	9017      	str	r0, [sp, #92]	; 0x5c
 80132b8:	7852      	ldrb	r2, [r2, #1]
 80132ba:	4638      	mov	r0, r7
 80132bc:	e7c8      	b.n	8013250 <_strtod_l+0x1e8>
 80132be:	4628      	mov	r0, r5
 80132c0:	e7d2      	b.n	8013268 <_strtod_l+0x200>
 80132c2:	2f08      	cmp	r7, #8
 80132c4:	f107 0701 	add.w	r7, r7, #1
 80132c8:	dc04      	bgt.n	80132d4 <_strtod_l+0x26c>
 80132ca:	9a08      	ldr	r2, [sp, #32]
 80132cc:	fb0c f202 	mul.w	r2, ip, r2
 80132d0:	9208      	str	r2, [sp, #32]
 80132d2:	e7e0      	b.n	8013296 <_strtod_l+0x22e>
 80132d4:	2f10      	cmp	r7, #16
 80132d6:	bfde      	ittt	le
 80132d8:	9a06      	ldrle	r2, [sp, #24]
 80132da:	fb0c f202 	mulle.w	r2, ip, r2
 80132de:	9206      	strle	r2, [sp, #24]
 80132e0:	e7d9      	b.n	8013296 <_strtod_l+0x22e>
 80132e2:	2b10      	cmp	r3, #16
 80132e4:	bfdf      	itttt	le
 80132e6:	9a06      	ldrle	r2, [sp, #24]
 80132e8:	200a      	movle	r0, #10
 80132ea:	fb00 8202 	mlale	r2, r0, r2, r8
 80132ee:	9206      	strle	r2, [sp, #24]
 80132f0:	e7de      	b.n	80132b0 <_strtod_l+0x248>
 80132f2:	2301      	movs	r3, #1
 80132f4:	9304      	str	r3, [sp, #16]
 80132f6:	e777      	b.n	80131e8 <_strtod_l+0x180>
 80132f8:	f04f 0e01 	mov.w	lr, #1
 80132fc:	1cb2      	adds	r2, r6, #2
 80132fe:	9217      	str	r2, [sp, #92]	; 0x5c
 8013300:	78b2      	ldrb	r2, [r6, #2]
 8013302:	e781      	b.n	8013208 <_strtod_l+0x1a0>
 8013304:	f04f 0e00 	mov.w	lr, #0
 8013308:	e7f8      	b.n	80132fc <_strtod_l+0x294>
 801330a:	bf00      	nop
 801330c:	0801588c 	.word	0x0801588c
 8013310:	7ff00000 	.word	0x7ff00000
 8013314:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013316:	f102 0c01 	add.w	ip, r2, #1
 801331a:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 801331e:	7852      	ldrb	r2, [r2, #1]
 8013320:	2a30      	cmp	r2, #48	; 0x30
 8013322:	d0f7      	beq.n	8013314 <_strtod_l+0x2ac>
 8013324:	f1a2 0c31 	sub.w	ip, r2, #49	; 0x31
 8013328:	f1bc 0f08 	cmp.w	ip, #8
 801332c:	f63f af73 	bhi.w	8013216 <_strtod_l+0x1ae>
 8013330:	f1a2 0830 	sub.w	r8, r2, #48	; 0x30
 8013334:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013336:	920e      	str	r2, [sp, #56]	; 0x38
 8013338:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801333a:	f102 0c01 	add.w	ip, r2, #1
 801333e:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 8013342:	7852      	ldrb	r2, [r2, #1]
 8013344:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 8013348:	f1b9 0f09 	cmp.w	r9, #9
 801334c:	d939      	bls.n	80133c2 <_strtod_l+0x35a>
 801334e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8013350:	ebac 0c07 	sub.w	ip, ip, r7
 8013354:	f1bc 0f08 	cmp.w	ip, #8
 8013358:	f644 6c1f 	movw	ip, #19999	; 0x4e1f
 801335c:	dc37      	bgt.n	80133ce <_strtod_l+0x366>
 801335e:	45e0      	cmp	r8, ip
 8013360:	bfa8      	it	ge
 8013362:	46e0      	movge	r8, ip
 8013364:	f1be 0f00 	cmp.w	lr, #0
 8013368:	d001      	beq.n	801336e <_strtod_l+0x306>
 801336a:	f1c8 0800 	rsb	r8, r8, #0
 801336e:	2b00      	cmp	r3, #0
 8013370:	d151      	bne.n	8013416 <_strtod_l+0x3ae>
 8013372:	2800      	cmp	r0, #0
 8013374:	f47f aeba 	bne.w	80130ec <_strtod_l+0x84>
 8013378:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801337a:	2b00      	cmp	r3, #0
 801337c:	f47f aeb6 	bne.w	80130ec <_strtod_l+0x84>
 8013380:	9b04      	ldr	r3, [sp, #16]
 8013382:	2b00      	cmp	r3, #0
 8013384:	f47f aed1 	bne.w	801312a <_strtod_l+0xc2>
 8013388:	2a4e      	cmp	r2, #78	; 0x4e
 801338a:	d027      	beq.n	80133dc <_strtod_l+0x374>
 801338c:	dc21      	bgt.n	80133d2 <_strtod_l+0x36a>
 801338e:	2a49      	cmp	r2, #73	; 0x49
 8013390:	f47f aecb 	bne.w	801312a <_strtod_l+0xc2>
 8013394:	499a      	ldr	r1, [pc, #616]	; (8013600 <_strtod_l+0x598>)
 8013396:	a817      	add	r0, sp, #92	; 0x5c
 8013398:	f001 fc9c 	bl	8014cd4 <__match>
 801339c:	2800      	cmp	r0, #0
 801339e:	f43f aec4 	beq.w	801312a <_strtod_l+0xc2>
 80133a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80133a4:	4997      	ldr	r1, [pc, #604]	; (8013604 <_strtod_l+0x59c>)
 80133a6:	3b01      	subs	r3, #1
 80133a8:	a817      	add	r0, sp, #92	; 0x5c
 80133aa:	9317      	str	r3, [sp, #92]	; 0x5c
 80133ac:	f001 fc92 	bl	8014cd4 <__match>
 80133b0:	b910      	cbnz	r0, 80133b8 <_strtod_l+0x350>
 80133b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80133b4:	3301      	adds	r3, #1
 80133b6:	9317      	str	r3, [sp, #92]	; 0x5c
 80133b8:	f8df b260 	ldr.w	fp, [pc, #608]	; 801361c <_strtod_l+0x5b4>
 80133bc:	f04f 0a00 	mov.w	sl, #0
 80133c0:	e694      	b.n	80130ec <_strtod_l+0x84>
 80133c2:	270a      	movs	r7, #10
 80133c4:	fb07 2808 	mla	r8, r7, r8, r2
 80133c8:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 80133cc:	e7b4      	b.n	8013338 <_strtod_l+0x2d0>
 80133ce:	46e0      	mov	r8, ip
 80133d0:	e7c8      	b.n	8013364 <_strtod_l+0x2fc>
 80133d2:	2a69      	cmp	r2, #105	; 0x69
 80133d4:	d0de      	beq.n	8013394 <_strtod_l+0x32c>
 80133d6:	2a6e      	cmp	r2, #110	; 0x6e
 80133d8:	f47f aea7 	bne.w	801312a <_strtod_l+0xc2>
 80133dc:	498a      	ldr	r1, [pc, #552]	; (8013608 <_strtod_l+0x5a0>)
 80133de:	a817      	add	r0, sp, #92	; 0x5c
 80133e0:	f001 fc78 	bl	8014cd4 <__match>
 80133e4:	2800      	cmp	r0, #0
 80133e6:	f43f aea0 	beq.w	801312a <_strtod_l+0xc2>
 80133ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80133ec:	781b      	ldrb	r3, [r3, #0]
 80133ee:	2b28      	cmp	r3, #40	; 0x28
 80133f0:	d10e      	bne.n	8013410 <_strtod_l+0x3a8>
 80133f2:	aa1a      	add	r2, sp, #104	; 0x68
 80133f4:	4985      	ldr	r1, [pc, #532]	; (801360c <_strtod_l+0x5a4>)
 80133f6:	a817      	add	r0, sp, #92	; 0x5c
 80133f8:	f001 fc80 	bl	8014cfc <__hexnan>
 80133fc:	2805      	cmp	r0, #5
 80133fe:	d107      	bne.n	8013410 <_strtod_l+0x3a8>
 8013400:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013402:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8013406:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801340a:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801340e:	e66d      	b.n	80130ec <_strtod_l+0x84>
 8013410:	f8df b20c 	ldr.w	fp, [pc, #524]	; 8013620 <_strtod_l+0x5b8>
 8013414:	e7d2      	b.n	80133bc <_strtod_l+0x354>
 8013416:	eddd 7a08 	vldr	s15, [sp, #32]
 801341a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801341e:	eba8 0201 	sub.w	r2, r8, r1
 8013422:	2d00      	cmp	r5, #0
 8013424:	bf08      	it	eq
 8013426:	461d      	moveq	r5, r3
 8013428:	2b10      	cmp	r3, #16
 801342a:	9204      	str	r2, [sp, #16]
 801342c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8013430:	461a      	mov	r2, r3
 8013432:	bfa8      	it	ge
 8013434:	2210      	movge	r2, #16
 8013436:	2b09      	cmp	r3, #9
 8013438:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 801343c:	dc14      	bgt.n	8013468 <_strtod_l+0x400>
 801343e:	9904      	ldr	r1, [sp, #16]
 8013440:	2900      	cmp	r1, #0
 8013442:	f43f ae53 	beq.w	80130ec <_strtod_l+0x84>
 8013446:	9904      	ldr	r1, [sp, #16]
 8013448:	dd72      	ble.n	8013530 <_strtod_l+0x4c8>
 801344a:	2916      	cmp	r1, #22
 801344c:	dc5a      	bgt.n	8013504 <_strtod_l+0x49c>
 801344e:	4970      	ldr	r1, [pc, #448]	; (8013610 <_strtod_l+0x5a8>)
 8013450:	9b04      	ldr	r3, [sp, #16]
 8013452:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013456:	ed91 7b00 	vldr	d7, [r1]
 801345a:	ec4b ab16 	vmov	d6, sl, fp
 801345e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013462:	ec5b ab17 	vmov	sl, fp, d7
 8013466:	e641      	b.n	80130ec <_strtod_l+0x84>
 8013468:	4969      	ldr	r1, [pc, #420]	; (8013610 <_strtod_l+0x5a8>)
 801346a:	eddd 7a06 	vldr	s15, [sp, #24]
 801346e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8013472:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 8013476:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 801347a:	2b0f      	cmp	r3, #15
 801347c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8013480:	eea5 7b06 	vfma.f64	d7, d5, d6
 8013484:	ec5b ab17 	vmov	sl, fp, d7
 8013488:	ddd9      	ble.n	801343e <_strtod_l+0x3d6>
 801348a:	9904      	ldr	r1, [sp, #16]
 801348c:	1a9a      	subs	r2, r3, r2
 801348e:	440a      	add	r2, r1
 8013490:	2a00      	cmp	r2, #0
 8013492:	f340 8096 	ble.w	80135c2 <_strtod_l+0x55a>
 8013496:	f012 000f 	ands.w	r0, r2, #15
 801349a:	d00a      	beq.n	80134b2 <_strtod_l+0x44a>
 801349c:	495c      	ldr	r1, [pc, #368]	; (8013610 <_strtod_l+0x5a8>)
 801349e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80134a2:	ed91 7b00 	vldr	d7, [r1]
 80134a6:	ec4b ab16 	vmov	d6, sl, fp
 80134aa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80134ae:	ec5b ab17 	vmov	sl, fp, d7
 80134b2:	f032 020f 	bics.w	r2, r2, #15
 80134b6:	d072      	beq.n	801359e <_strtod_l+0x536>
 80134b8:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 80134bc:	dd45      	ble.n	801354a <_strtod_l+0x4e2>
 80134be:	2500      	movs	r5, #0
 80134c0:	46a8      	mov	r8, r5
 80134c2:	9506      	str	r5, [sp, #24]
 80134c4:	46a9      	mov	r9, r5
 80134c6:	2322      	movs	r3, #34	; 0x22
 80134c8:	f8df b150 	ldr.w	fp, [pc, #336]	; 801361c <_strtod_l+0x5b4>
 80134cc:	6023      	str	r3, [r4, #0]
 80134ce:	f04f 0a00 	mov.w	sl, #0
 80134d2:	9b06      	ldr	r3, [sp, #24]
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	f43f ae09 	beq.w	80130ec <_strtod_l+0x84>
 80134da:	9918      	ldr	r1, [sp, #96]	; 0x60
 80134dc:	4620      	mov	r0, r4
 80134de:	f001 fcf5 	bl	8014ecc <_Bfree>
 80134e2:	4649      	mov	r1, r9
 80134e4:	4620      	mov	r0, r4
 80134e6:	f001 fcf1 	bl	8014ecc <_Bfree>
 80134ea:	4641      	mov	r1, r8
 80134ec:	4620      	mov	r0, r4
 80134ee:	f001 fced 	bl	8014ecc <_Bfree>
 80134f2:	9906      	ldr	r1, [sp, #24]
 80134f4:	4620      	mov	r0, r4
 80134f6:	f001 fce9 	bl	8014ecc <_Bfree>
 80134fa:	4629      	mov	r1, r5
 80134fc:	4620      	mov	r0, r4
 80134fe:	f001 fce5 	bl	8014ecc <_Bfree>
 8013502:	e5f3      	b.n	80130ec <_strtod_l+0x84>
 8013504:	9804      	ldr	r0, [sp, #16]
 8013506:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 801350a:	4281      	cmp	r1, r0
 801350c:	dbbd      	blt.n	801348a <_strtod_l+0x422>
 801350e:	4a40      	ldr	r2, [pc, #256]	; (8013610 <_strtod_l+0x5a8>)
 8013510:	f1c3 030f 	rsb	r3, r3, #15
 8013514:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8013518:	ed91 7b00 	vldr	d7, [r1]
 801351c:	ec4b ab16 	vmov	d6, sl, fp
 8013520:	1ac3      	subs	r3, r0, r3
 8013522:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8013526:	ee27 7b06 	vmul.f64	d7, d7, d6
 801352a:	ed92 6b00 	vldr	d6, [r2]
 801352e:	e796      	b.n	801345e <_strtod_l+0x3f6>
 8013530:	3116      	adds	r1, #22
 8013532:	dbaa      	blt.n	801348a <_strtod_l+0x422>
 8013534:	4936      	ldr	r1, [pc, #216]	; (8013610 <_strtod_l+0x5a8>)
 8013536:	9b04      	ldr	r3, [sp, #16]
 8013538:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
 801353c:	ed91 7b00 	vldr	d7, [r1]
 8013540:	ec4b ab16 	vmov	d6, sl, fp
 8013544:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8013548:	e78b      	b.n	8013462 <_strtod_l+0x3fa>
 801354a:	e9cd ab06 	strd	sl, fp, [sp, #24]
 801354e:	2000      	movs	r0, #0
 8013550:	4e30      	ldr	r6, [pc, #192]	; (8013614 <_strtod_l+0x5ac>)
 8013552:	1112      	asrs	r2, r2, #4
 8013554:	4601      	mov	r1, r0
 8013556:	2a01      	cmp	r2, #1
 8013558:	dc23      	bgt.n	80135a2 <_strtod_l+0x53a>
 801355a:	b108      	cbz	r0, 8013560 <_strtod_l+0x4f8>
 801355c:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8013560:	4a2c      	ldr	r2, [pc, #176]	; (8013614 <_strtod_l+0x5ac>)
 8013562:	482d      	ldr	r0, [pc, #180]	; (8013618 <_strtod_l+0x5b0>)
 8013564:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8013568:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801356c:	ed91 7b00 	vldr	d7, [r1]
 8013570:	ec4b ab16 	vmov	d6, sl, fp
 8013574:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013578:	ed8d 7b06 	vstr	d7, [sp, #24]
 801357c:	9907      	ldr	r1, [sp, #28]
 801357e:	4a27      	ldr	r2, [pc, #156]	; (801361c <_strtod_l+0x5b4>)
 8013580:	400a      	ands	r2, r1
 8013582:	4282      	cmp	r2, r0
 8013584:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8013588:	d899      	bhi.n	80134be <_strtod_l+0x456>
 801358a:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 801358e:	4282      	cmp	r2, r0
 8013590:	bf86      	itte	hi
 8013592:	f8df b090 	ldrhi.w	fp, [pc, #144]	; 8013624 <_strtod_l+0x5bc>
 8013596:	f04f 3aff 	movhi.w	sl, #4294967295
 801359a:	f101 7b54 	addls.w	fp, r1, #55574528	; 0x3500000
 801359e:	2700      	movs	r7, #0
 80135a0:	e070      	b.n	8013684 <_strtod_l+0x61c>
 80135a2:	07d7      	lsls	r7, r2, #31
 80135a4:	d50a      	bpl.n	80135bc <_strtod_l+0x554>
 80135a6:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
 80135aa:	ed90 7b00 	vldr	d7, [r0]
 80135ae:	ed9d 6b06 	vldr	d6, [sp, #24]
 80135b2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80135b6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80135ba:	2001      	movs	r0, #1
 80135bc:	3101      	adds	r1, #1
 80135be:	1052      	asrs	r2, r2, #1
 80135c0:	e7c9      	b.n	8013556 <_strtod_l+0x4ee>
 80135c2:	d0ec      	beq.n	801359e <_strtod_l+0x536>
 80135c4:	4252      	negs	r2, r2
 80135c6:	f012 000f 	ands.w	r0, r2, #15
 80135ca:	d00a      	beq.n	80135e2 <_strtod_l+0x57a>
 80135cc:	4910      	ldr	r1, [pc, #64]	; (8013610 <_strtod_l+0x5a8>)
 80135ce:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80135d2:	ed91 7b00 	vldr	d7, [r1]
 80135d6:	ec4b ab16 	vmov	d6, sl, fp
 80135da:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80135de:	ec5b ab17 	vmov	sl, fp, d7
 80135e2:	1112      	asrs	r2, r2, #4
 80135e4:	d0db      	beq.n	801359e <_strtod_l+0x536>
 80135e6:	2a1f      	cmp	r2, #31
 80135e8:	dd1e      	ble.n	8013628 <_strtod_l+0x5c0>
 80135ea:	2500      	movs	r5, #0
 80135ec:	46a8      	mov	r8, r5
 80135ee:	9506      	str	r5, [sp, #24]
 80135f0:	46a9      	mov	r9, r5
 80135f2:	2322      	movs	r3, #34	; 0x22
 80135f4:	f04f 0a00 	mov.w	sl, #0
 80135f8:	f04f 0b00 	mov.w	fp, #0
 80135fc:	6023      	str	r3, [r4, #0]
 80135fe:	e768      	b.n	80134d2 <_strtod_l+0x46a>
 8013600:	0801587d 	.word	0x0801587d
 8013604:	080158e3 	.word	0x080158e3
 8013608:	08015885 	.word	0x08015885
 801360c:	080158a0 	.word	0x080158a0
 8013610:	08015920 	.word	0x08015920
 8013614:	080158f8 	.word	0x080158f8
 8013618:	7ca00000 	.word	0x7ca00000
 801361c:	7ff00000 	.word	0x7ff00000
 8013620:	fff80000 	.word	0xfff80000
 8013624:	7fefffff 	.word	0x7fefffff
 8013628:	e9cd ab06 	strd	sl, fp, [sp, #24]
 801362c:	f012 0710 	ands.w	r7, r2, #16
 8013630:	49ab      	ldr	r1, [pc, #684]	; (80138e0 <_strtod_l+0x878>)
 8013632:	bf18      	it	ne
 8013634:	276a      	movne	r7, #106	; 0x6a
 8013636:	2000      	movs	r0, #0
 8013638:	2a00      	cmp	r2, #0
 801363a:	f300 8113 	bgt.w	8013864 <_strtod_l+0x7fc>
 801363e:	b108      	cbz	r0, 8013644 <_strtod_l+0x5dc>
 8013640:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8013644:	b1bf      	cbz	r7, 8013676 <_strtod_l+0x60e>
 8013646:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801364a:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 801364e:	2a00      	cmp	r2, #0
 8013650:	4659      	mov	r1, fp
 8013652:	dd10      	ble.n	8013676 <_strtod_l+0x60e>
 8013654:	2a1f      	cmp	r2, #31
 8013656:	f340 8113 	ble.w	8013880 <_strtod_l+0x818>
 801365a:	2a34      	cmp	r2, #52	; 0x34
 801365c:	bfde      	ittt	le
 801365e:	3a20      	suble	r2, #32
 8013660:	f04f 30ff 	movle.w	r0, #4294967295
 8013664:	fa00 f202 	lslle.w	r2, r0, r2
 8013668:	f04f 0a00 	mov.w	sl, #0
 801366c:	bfcc      	ite	gt
 801366e:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8013672:	ea02 0b01 	andle.w	fp, r2, r1
 8013676:	ec4b ab17 	vmov	d7, sl, fp
 801367a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801367e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013682:	d0b2      	beq.n	80135ea <_strtod_l+0x582>
 8013684:	9a08      	ldr	r2, [sp, #32]
 8013686:	9200      	str	r2, [sp, #0]
 8013688:	990c      	ldr	r1, [sp, #48]	; 0x30
 801368a:	462a      	mov	r2, r5
 801368c:	4620      	mov	r0, r4
 801368e:	f001 fc6f 	bl	8014f70 <__s2b>
 8013692:	9006      	str	r0, [sp, #24]
 8013694:	2800      	cmp	r0, #0
 8013696:	f43f af12 	beq.w	80134be <_strtod_l+0x456>
 801369a:	9a04      	ldr	r2, [sp, #16]
 801369c:	9b04      	ldr	r3, [sp, #16]
 801369e:	2a00      	cmp	r2, #0
 80136a0:	f1c3 0300 	rsb	r3, r3, #0
 80136a4:	ed9f 9b88 	vldr	d9, [pc, #544]	; 80138c8 <_strtod_l+0x860>
 80136a8:	bfa8      	it	ge
 80136aa:	2300      	movge	r3, #0
 80136ac:	ed9f ab88 	vldr	d10, [pc, #544]	; 80138d0 <_strtod_l+0x868>
 80136b0:	ed9f bb89 	vldr	d11, [pc, #548]	; 80138d8 <_strtod_l+0x870>
 80136b4:	930e      	str	r3, [sp, #56]	; 0x38
 80136b6:	2500      	movs	r5, #0
 80136b8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80136bc:	9310      	str	r3, [sp, #64]	; 0x40
 80136be:	46a8      	mov	r8, r5
 80136c0:	9b06      	ldr	r3, [sp, #24]
 80136c2:	4620      	mov	r0, r4
 80136c4:	6859      	ldr	r1, [r3, #4]
 80136c6:	f001 fbcd 	bl	8014e64 <_Balloc>
 80136ca:	4681      	mov	r9, r0
 80136cc:	2800      	cmp	r0, #0
 80136ce:	f43f aefa 	beq.w	80134c6 <_strtod_l+0x45e>
 80136d2:	9b06      	ldr	r3, [sp, #24]
 80136d4:	691a      	ldr	r2, [r3, #16]
 80136d6:	3202      	adds	r2, #2
 80136d8:	f103 010c 	add.w	r1, r3, #12
 80136dc:	0092      	lsls	r2, r2, #2
 80136de:	300c      	adds	r0, #12
 80136e0:	f7ff f8b4 	bl	801284c <memcpy>
 80136e4:	aa1a      	add	r2, sp, #104	; 0x68
 80136e6:	a919      	add	r1, sp, #100	; 0x64
 80136e8:	ec4b ab10 	vmov	d0, sl, fp
 80136ec:	4620      	mov	r0, r4
 80136ee:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80136f2:	f001 fef9 	bl	80154e8 <__d2b>
 80136f6:	9018      	str	r0, [sp, #96]	; 0x60
 80136f8:	2800      	cmp	r0, #0
 80136fa:	f43f aee4 	beq.w	80134c6 <_strtod_l+0x45e>
 80136fe:	2101      	movs	r1, #1
 8013700:	4620      	mov	r0, r4
 8013702:	f001 fcc1 	bl	8015088 <__i2b>
 8013706:	4680      	mov	r8, r0
 8013708:	2800      	cmp	r0, #0
 801370a:	f43f aedc 	beq.w	80134c6 <_strtod_l+0x45e>
 801370e:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8013710:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8013712:	2e00      	cmp	r6, #0
 8013714:	bfb1      	iteee	lt
 8013716:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
 8013718:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 801371a:	9810      	ldrge	r0, [sp, #64]	; 0x40
 801371c:	18f3      	addge	r3, r6, r3
 801371e:	bfba      	itte	lt
 8013720:	1b98      	sublt	r0, r3, r6
 8013722:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8013724:	9308      	strge	r3, [sp, #32]
 8013726:	eba6 0607 	sub.w	r6, r6, r7
 801372a:	bfb8      	it	lt
 801372c:	9308      	strlt	r3, [sp, #32]
 801372e:	4416      	add	r6, r2
 8013730:	4b6c      	ldr	r3, [pc, #432]	; (80138e4 <_strtod_l+0x87c>)
 8013732:	3e01      	subs	r6, #1
 8013734:	429e      	cmp	r6, r3
 8013736:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801373a:	f280 80b4 	bge.w	80138a6 <_strtod_l+0x83e>
 801373e:	1b9b      	subs	r3, r3, r6
 8013740:	2b1f      	cmp	r3, #31
 8013742:	eba2 0203 	sub.w	r2, r2, r3
 8013746:	f04f 0101 	mov.w	r1, #1
 801374a:	f300 80a0 	bgt.w	801388e <_strtod_l+0x826>
 801374e:	fa01 f303 	lsl.w	r3, r1, r3
 8013752:	9311      	str	r3, [sp, #68]	; 0x44
 8013754:	2300      	movs	r3, #0
 8013756:	930f      	str	r3, [sp, #60]	; 0x3c
 8013758:	9b08      	ldr	r3, [sp, #32]
 801375a:	4413      	add	r3, r2
 801375c:	4402      	add	r2, r0
 801375e:	18be      	adds	r6, r7, r2
 8013760:	9a08      	ldr	r2, [sp, #32]
 8013762:	429a      	cmp	r2, r3
 8013764:	bfa8      	it	ge
 8013766:	461a      	movge	r2, r3
 8013768:	42b2      	cmp	r2, r6
 801376a:	bfa8      	it	ge
 801376c:	4632      	movge	r2, r6
 801376e:	2a00      	cmp	r2, #0
 8013770:	dd04      	ble.n	801377c <_strtod_l+0x714>
 8013772:	9908      	ldr	r1, [sp, #32]
 8013774:	1a9b      	subs	r3, r3, r2
 8013776:	1ab6      	subs	r6, r6, r2
 8013778:	1a8a      	subs	r2, r1, r2
 801377a:	9208      	str	r2, [sp, #32]
 801377c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801377e:	b1c2      	cbz	r2, 80137b2 <_strtod_l+0x74a>
 8013780:	4641      	mov	r1, r8
 8013782:	4620      	mov	r0, r4
 8013784:	9315      	str	r3, [sp, #84]	; 0x54
 8013786:	f001 fd1f 	bl	80151c8 <__pow5mult>
 801378a:	4680      	mov	r8, r0
 801378c:	2800      	cmp	r0, #0
 801378e:	f43f ae9a 	beq.w	80134c6 <_strtod_l+0x45e>
 8013792:	4601      	mov	r1, r0
 8013794:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013796:	4620      	mov	r0, r4
 8013798:	f001 fc7f 	bl	801509a <__multiply>
 801379c:	900c      	str	r0, [sp, #48]	; 0x30
 801379e:	2800      	cmp	r0, #0
 80137a0:	f43f ae91 	beq.w	80134c6 <_strtod_l+0x45e>
 80137a4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80137a6:	4620      	mov	r0, r4
 80137a8:	f001 fb90 	bl	8014ecc <_Bfree>
 80137ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80137ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80137b0:	9218      	str	r2, [sp, #96]	; 0x60
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	dc7c      	bgt.n	80138b0 <_strtod_l+0x848>
 80137b6:	9b04      	ldr	r3, [sp, #16]
 80137b8:	2b00      	cmp	r3, #0
 80137ba:	dd08      	ble.n	80137ce <_strtod_l+0x766>
 80137bc:	4649      	mov	r1, r9
 80137be:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80137c0:	4620      	mov	r0, r4
 80137c2:	f001 fd01 	bl	80151c8 <__pow5mult>
 80137c6:	4681      	mov	r9, r0
 80137c8:	2800      	cmp	r0, #0
 80137ca:	f43f ae7c 	beq.w	80134c6 <_strtod_l+0x45e>
 80137ce:	2e00      	cmp	r6, #0
 80137d0:	dd08      	ble.n	80137e4 <_strtod_l+0x77c>
 80137d2:	4649      	mov	r1, r9
 80137d4:	4632      	mov	r2, r6
 80137d6:	4620      	mov	r0, r4
 80137d8:	f001 fd44 	bl	8015264 <__lshift>
 80137dc:	4681      	mov	r9, r0
 80137de:	2800      	cmp	r0, #0
 80137e0:	f43f ae71 	beq.w	80134c6 <_strtod_l+0x45e>
 80137e4:	9b08      	ldr	r3, [sp, #32]
 80137e6:	2b00      	cmp	r3, #0
 80137e8:	dd08      	ble.n	80137fc <_strtod_l+0x794>
 80137ea:	4641      	mov	r1, r8
 80137ec:	461a      	mov	r2, r3
 80137ee:	4620      	mov	r0, r4
 80137f0:	f001 fd38 	bl	8015264 <__lshift>
 80137f4:	4680      	mov	r8, r0
 80137f6:	2800      	cmp	r0, #0
 80137f8:	f43f ae65 	beq.w	80134c6 <_strtod_l+0x45e>
 80137fc:	464a      	mov	r2, r9
 80137fe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013800:	4620      	mov	r0, r4
 8013802:	f001 fd9d 	bl	8015340 <__mdiff>
 8013806:	4605      	mov	r5, r0
 8013808:	2800      	cmp	r0, #0
 801380a:	f43f ae5c 	beq.w	80134c6 <_strtod_l+0x45e>
 801380e:	68c3      	ldr	r3, [r0, #12]
 8013810:	930c      	str	r3, [sp, #48]	; 0x30
 8013812:	2300      	movs	r3, #0
 8013814:	60c3      	str	r3, [r0, #12]
 8013816:	4641      	mov	r1, r8
 8013818:	f001 fd78 	bl	801530c <__mcmp>
 801381c:	2800      	cmp	r0, #0
 801381e:	da63      	bge.n	80138e8 <_strtod_l+0x880>
 8013820:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013822:	b9e3      	cbnz	r3, 801385e <_strtod_l+0x7f6>
 8013824:	f1ba 0f00 	cmp.w	sl, #0
 8013828:	d119      	bne.n	801385e <_strtod_l+0x7f6>
 801382a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801382e:	b9b3      	cbnz	r3, 801385e <_strtod_l+0x7f6>
 8013830:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013834:	0d1b      	lsrs	r3, r3, #20
 8013836:	051b      	lsls	r3, r3, #20
 8013838:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801383c:	d90f      	bls.n	801385e <_strtod_l+0x7f6>
 801383e:	696b      	ldr	r3, [r5, #20]
 8013840:	b913      	cbnz	r3, 8013848 <_strtod_l+0x7e0>
 8013842:	692b      	ldr	r3, [r5, #16]
 8013844:	2b01      	cmp	r3, #1
 8013846:	dd0a      	ble.n	801385e <_strtod_l+0x7f6>
 8013848:	4629      	mov	r1, r5
 801384a:	2201      	movs	r2, #1
 801384c:	4620      	mov	r0, r4
 801384e:	f001 fd09 	bl	8015264 <__lshift>
 8013852:	4641      	mov	r1, r8
 8013854:	4605      	mov	r5, r0
 8013856:	f001 fd59 	bl	801530c <__mcmp>
 801385a:	2800      	cmp	r0, #0
 801385c:	dc75      	bgt.n	801394a <_strtod_l+0x8e2>
 801385e:	2f00      	cmp	r7, #0
 8013860:	d17f      	bne.n	8013962 <_strtod_l+0x8fa>
 8013862:	e63a      	b.n	80134da <_strtod_l+0x472>
 8013864:	07d6      	lsls	r6, r2, #31
 8013866:	d508      	bpl.n	801387a <_strtod_l+0x812>
 8013868:	ed9d 6b06 	vldr	d6, [sp, #24]
 801386c:	ed91 7b00 	vldr	d7, [r1]
 8013870:	ee26 7b07 	vmul.f64	d7, d6, d7
 8013874:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013878:	2001      	movs	r0, #1
 801387a:	1052      	asrs	r2, r2, #1
 801387c:	3108      	adds	r1, #8
 801387e:	e6db      	b.n	8013638 <_strtod_l+0x5d0>
 8013880:	f04f 31ff 	mov.w	r1, #4294967295
 8013884:	fa01 f202 	lsl.w	r2, r1, r2
 8013888:	ea02 0a0a 	and.w	sl, r2, sl
 801388c:	e6f3      	b.n	8013676 <_strtod_l+0x60e>
 801388e:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8013892:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8013896:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 801389a:	36e2      	adds	r6, #226	; 0xe2
 801389c:	fa01 f306 	lsl.w	r3, r1, r6
 80138a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80138a2:	9111      	str	r1, [sp, #68]	; 0x44
 80138a4:	e758      	b.n	8013758 <_strtod_l+0x6f0>
 80138a6:	2300      	movs	r3, #0
 80138a8:	930f      	str	r3, [sp, #60]	; 0x3c
 80138aa:	2301      	movs	r3, #1
 80138ac:	9311      	str	r3, [sp, #68]	; 0x44
 80138ae:	e753      	b.n	8013758 <_strtod_l+0x6f0>
 80138b0:	461a      	mov	r2, r3
 80138b2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80138b4:	4620      	mov	r0, r4
 80138b6:	f001 fcd5 	bl	8015264 <__lshift>
 80138ba:	9018      	str	r0, [sp, #96]	; 0x60
 80138bc:	2800      	cmp	r0, #0
 80138be:	f47f af7a 	bne.w	80137b6 <_strtod_l+0x74e>
 80138c2:	e600      	b.n	80134c6 <_strtod_l+0x45e>
 80138c4:	f3af 8000 	nop.w
 80138c8:	94a03595 	.word	0x94a03595
 80138cc:	3fdfffff 	.word	0x3fdfffff
 80138d0:	35afe535 	.word	0x35afe535
 80138d4:	3fe00000 	.word	0x3fe00000
 80138d8:	94a03595 	.word	0x94a03595
 80138dc:	3fcfffff 	.word	0x3fcfffff
 80138e0:	080158b8 	.word	0x080158b8
 80138e4:	fffffc02 	.word	0xfffffc02
 80138e8:	f8cd b020 	str.w	fp, [sp, #32]
 80138ec:	f040 8085 	bne.w	80139fa <_strtod_l+0x992>
 80138f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80138f2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80138f6:	b322      	cbz	r2, 8013942 <_strtod_l+0x8da>
 80138f8:	4ab7      	ldr	r2, [pc, #732]	; (8013bd8 <_strtod_l+0xb70>)
 80138fa:	4293      	cmp	r3, r2
 80138fc:	d154      	bne.n	80139a8 <_strtod_l+0x940>
 80138fe:	4651      	mov	r1, sl
 8013900:	b1e7      	cbz	r7, 801393c <_strtod_l+0x8d4>
 8013902:	4bb6      	ldr	r3, [pc, #728]	; (8013bdc <_strtod_l+0xb74>)
 8013904:	465a      	mov	r2, fp
 8013906:	4013      	ands	r3, r2
 8013908:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801390c:	f04f 32ff 	mov.w	r2, #4294967295
 8013910:	d803      	bhi.n	801391a <_strtod_l+0x8b2>
 8013912:	0d1b      	lsrs	r3, r3, #20
 8013914:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013918:	409a      	lsls	r2, r3
 801391a:	4291      	cmp	r1, r2
 801391c:	d144      	bne.n	80139a8 <_strtod_l+0x940>
 801391e:	4bb0      	ldr	r3, [pc, #704]	; (8013be0 <_strtod_l+0xb78>)
 8013920:	9a08      	ldr	r2, [sp, #32]
 8013922:	429a      	cmp	r2, r3
 8013924:	d102      	bne.n	801392c <_strtod_l+0x8c4>
 8013926:	3101      	adds	r1, #1
 8013928:	f43f adcd 	beq.w	80134c6 <_strtod_l+0x45e>
 801392c:	4bab      	ldr	r3, [pc, #684]	; (8013bdc <_strtod_l+0xb74>)
 801392e:	9a08      	ldr	r2, [sp, #32]
 8013930:	401a      	ands	r2, r3
 8013932:	f502 1b80 	add.w	fp, r2, #1048576	; 0x100000
 8013936:	f04f 0a00 	mov.w	sl, #0
 801393a:	e790      	b.n	801385e <_strtod_l+0x7f6>
 801393c:	f04f 32ff 	mov.w	r2, #4294967295
 8013940:	e7eb      	b.n	801391a <_strtod_l+0x8b2>
 8013942:	bb8b      	cbnz	r3, 80139a8 <_strtod_l+0x940>
 8013944:	f1ba 0f00 	cmp.w	sl, #0
 8013948:	d12e      	bne.n	80139a8 <_strtod_l+0x940>
 801394a:	465b      	mov	r3, fp
 801394c:	4aa3      	ldr	r2, [pc, #652]	; (8013bdc <_strtod_l+0xb74>)
 801394e:	b30f      	cbz	r7, 8013994 <_strtod_l+0x92c>
 8013950:	ea02 010b 	and.w	r1, r2, fp
 8013954:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8013958:	dc1c      	bgt.n	8013994 <_strtod_l+0x92c>
 801395a:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801395e:	f77f ae48 	ble.w	80135f2 <_strtod_l+0x58a>
 8013962:	4aa0      	ldr	r2, [pc, #640]	; (8013be4 <_strtod_l+0xb7c>)
 8013964:	2300      	movs	r3, #0
 8013966:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
 801396a:	ed9d 6b12 	vldr	d6, [sp, #72]	; 0x48
 801396e:	ec4b ab17 	vmov	d7, sl, fp
 8013972:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013976:	ed8d 7b04 	vstr	d7, [sp, #16]
 801397a:	9b05      	ldr	r3, [sp, #20]
 801397c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8013980:	2b00      	cmp	r3, #0
 8013982:	f47f adaa 	bne.w	80134da <_strtod_l+0x472>
 8013986:	9b04      	ldr	r3, [sp, #16]
 8013988:	2b00      	cmp	r3, #0
 801398a:	f47f ada6 	bne.w	80134da <_strtod_l+0x472>
 801398e:	2322      	movs	r3, #34	; 0x22
 8013990:	6023      	str	r3, [r4, #0]
 8013992:	e5a2      	b.n	80134da <_strtod_l+0x472>
 8013994:	4013      	ands	r3, r2
 8013996:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801399a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801399e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80139a2:	f04f 3aff 	mov.w	sl, #4294967295
 80139a6:	e75a      	b.n	801385e <_strtod_l+0x7f6>
 80139a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80139aa:	b18b      	cbz	r3, 80139d0 <_strtod_l+0x968>
 80139ac:	9a08      	ldr	r2, [sp, #32]
 80139ae:	4213      	tst	r3, r2
 80139b0:	f43f af55 	beq.w	801385e <_strtod_l+0x7f6>
 80139b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80139b6:	463a      	mov	r2, r7
 80139b8:	4650      	mov	r0, sl
 80139ba:	4659      	mov	r1, fp
 80139bc:	b163      	cbz	r3, 80139d8 <_strtod_l+0x970>
 80139be:	f7ff fb39 	bl	8013034 <sulp>
 80139c2:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 80139c6:	ee37 7b00 	vadd.f64	d7, d7, d0
 80139ca:	ec5b ab17 	vmov	sl, fp, d7
 80139ce:	e746      	b.n	801385e <_strtod_l+0x7f6>
 80139d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80139d2:	ea13 0f0a 	tst.w	r3, sl
 80139d6:	e7eb      	b.n	80139b0 <_strtod_l+0x948>
 80139d8:	f7ff fb2c 	bl	8013034 <sulp>
 80139dc:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 80139e0:	ee37 7b40 	vsub.f64	d7, d7, d0
 80139e4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80139e8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80139ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139f0:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80139f4:	f43f adfd 	beq.w	80135f2 <_strtod_l+0x58a>
 80139f8:	e731      	b.n	801385e <_strtod_l+0x7f6>
 80139fa:	4641      	mov	r1, r8
 80139fc:	4628      	mov	r0, r5
 80139fe:	f001 fdc2 	bl	8015586 <__ratio>
 8013a02:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8013a06:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8013a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a0e:	d869      	bhi.n	8013ae4 <_strtod_l+0xa7c>
 8013a10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	d045      	beq.n	8013aa2 <_strtod_l+0xa3a>
 8013a16:	4b74      	ldr	r3, [pc, #464]	; (8013be8 <_strtod_l+0xb80>)
 8013a18:	2200      	movs	r2, #0
 8013a1a:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 8013a1e:	9808      	ldr	r0, [sp, #32]
 8013a20:	496e      	ldr	r1, [pc, #440]	; (8013bdc <_strtod_l+0xb74>)
 8013a22:	ea00 0601 	and.w	r6, r0, r1
 8013a26:	4871      	ldr	r0, [pc, #452]	; (8013bec <_strtod_l+0xb84>)
 8013a28:	4286      	cmp	r6, r0
 8013a2a:	f040 8089 	bne.w	8013b40 <_strtod_l+0xad8>
 8013a2e:	910f      	str	r1, [sp, #60]	; 0x3c
 8013a30:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013a34:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8013a38:	9908      	ldr	r1, [sp, #32]
 8013a3a:	f1a1 7b54 	sub.w	fp, r1, #55574528	; 0x3500000
 8013a3e:	ec4b ab10 	vmov	d0, sl, fp
 8013a42:	ec43 2b1c 	vmov	d12, r2, r3
 8013a46:	f001 fcd9 	bl	80153fc <__ulp>
 8013a4a:	ec4b ab1d 	vmov	d13, sl, fp
 8013a4e:	eeac db00 	vfma.f64	d13, d12, d0
 8013a52:	ed8d db08 	vstr	d13, [sp, #32]
 8013a56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a58:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013a5a:	4a65      	ldr	r2, [pc, #404]	; (8013bf0 <_strtod_l+0xb88>)
 8013a5c:	4019      	ands	r1, r3
 8013a5e:	4291      	cmp	r1, r2
 8013a60:	e9dd ab08 	ldrd	sl, fp, [sp, #32]
 8013a64:	d948      	bls.n	8013af8 <_strtod_l+0xa90>
 8013a66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013a68:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8013a6c:	4293      	cmp	r3, r2
 8013a6e:	d103      	bne.n	8013a78 <_strtod_l+0xa10>
 8013a70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013a72:	3301      	adds	r3, #1
 8013a74:	f43f ad27 	beq.w	80134c6 <_strtod_l+0x45e>
 8013a78:	f8df b164 	ldr.w	fp, [pc, #356]	; 8013be0 <_strtod_l+0xb78>
 8013a7c:	f04f 3aff 	mov.w	sl, #4294967295
 8013a80:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013a82:	4620      	mov	r0, r4
 8013a84:	f001 fa22 	bl	8014ecc <_Bfree>
 8013a88:	4649      	mov	r1, r9
 8013a8a:	4620      	mov	r0, r4
 8013a8c:	f001 fa1e 	bl	8014ecc <_Bfree>
 8013a90:	4641      	mov	r1, r8
 8013a92:	4620      	mov	r0, r4
 8013a94:	f001 fa1a 	bl	8014ecc <_Bfree>
 8013a98:	4629      	mov	r1, r5
 8013a9a:	4620      	mov	r0, r4
 8013a9c:	f001 fa16 	bl	8014ecc <_Bfree>
 8013aa0:	e60e      	b.n	80136c0 <_strtod_l+0x658>
 8013aa2:	f1ba 0f00 	cmp.w	sl, #0
 8013aa6:	d113      	bne.n	8013ad0 <_strtod_l+0xa68>
 8013aa8:	9b08      	ldr	r3, [sp, #32]
 8013aaa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013aae:	b9b3      	cbnz	r3, 8013ade <_strtod_l+0xa76>
 8013ab0:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8013ab4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8013ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013abc:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8013ac0:	d401      	bmi.n	8013ac6 <_strtod_l+0xa5e>
 8013ac2:	ee20 8b08 	vmul.f64	d8, d0, d8
 8013ac6:	eeb1 7b48 	vneg.f64	d7, d8
 8013aca:	ec53 2b17 	vmov	r2, r3, d7
 8013ace:	e7a6      	b.n	8013a1e <_strtod_l+0x9b6>
 8013ad0:	f1ba 0f01 	cmp.w	sl, #1
 8013ad4:	d103      	bne.n	8013ade <_strtod_l+0xa76>
 8013ad6:	9b08      	ldr	r3, [sp, #32]
 8013ad8:	2b00      	cmp	r3, #0
 8013ada:	f43f ad8a 	beq.w	80135f2 <_strtod_l+0x58a>
 8013ade:	2200      	movs	r2, #0
 8013ae0:	4b44      	ldr	r3, [pc, #272]	; (8013bf4 <_strtod_l+0xb8c>)
 8013ae2:	e79a      	b.n	8013a1a <_strtod_l+0x9b2>
 8013ae4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013ae6:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8013aea:	ee20 8b08 	vmul.f64	d8, d0, d8
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	d0e9      	beq.n	8013ac6 <_strtod_l+0xa5e>
 8013af2:	ec53 2b18 	vmov	r2, r3, d8
 8013af6:	e792      	b.n	8013a1e <_strtod_l+0x9b6>
 8013af8:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8013afc:	2f00      	cmp	r7, #0
 8013afe:	d1bf      	bne.n	8013a80 <_strtod_l+0xa18>
 8013b00:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013b04:	0d1b      	lsrs	r3, r3, #20
 8013b06:	051b      	lsls	r3, r3, #20
 8013b08:	429e      	cmp	r6, r3
 8013b0a:	d1b9      	bne.n	8013a80 <_strtod_l+0xa18>
 8013b0c:	eebd 0bc8 	vcvt.s32.f64	s0, d8
 8013b10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013b12:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 8013b16:	ee38 8b40 	vsub.f64	d8, d8, d0
 8013b1a:	b92b      	cbnz	r3, 8013b28 <_strtod_l+0xac0>
 8013b1c:	f1ba 0f00 	cmp.w	sl, #0
 8013b20:	d102      	bne.n	8013b28 <_strtod_l+0xac0>
 8013b22:	f3cb 0213 	ubfx	r2, fp, #0, #20
 8013b26:	b3d2      	cbz	r2, 8013b9e <_strtod_l+0xb36>
 8013b28:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8013b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b30:	f53f acd3 	bmi.w	80134da <_strtod_l+0x472>
 8013b34:	eeb4 8bca 	vcmpe.f64	d8, d10
 8013b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b3c:	dda0      	ble.n	8013a80 <_strtod_l+0xa18>
 8013b3e:	e4cc      	b.n	80134da <_strtod_l+0x472>
 8013b40:	b1ef      	cbz	r7, 8013b7e <_strtod_l+0xb16>
 8013b42:	f1b6 6fd4 	cmp.w	r6, #111149056	; 0x6a00000
 8013b46:	d81a      	bhi.n	8013b7e <_strtod_l+0xb16>
 8013b48:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8013bd0 <_strtod_l+0xb68>
 8013b4c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8013b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b54:	d810      	bhi.n	8013b78 <_strtod_l+0xb10>
 8013b56:	eefc 7bc8 	vcvt.u32.f64	s15, d8
 8013b5a:	ee17 3a90 	vmov	r3, s15
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	bf08      	it	eq
 8013b62:	2301      	moveq	r3, #1
 8013b64:	ee07 3a90 	vmov	s15, r3
 8013b68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013b6a:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 8013b6e:	b99b      	cbnz	r3, 8013b98 <_strtod_l+0xb30>
 8013b70:	eeb1 7b48 	vneg.f64	d7, d8
 8013b74:	ec53 2b17 	vmov	r2, r3, d7
 8013b78:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 8013b7c:	1b8b      	subs	r3, r1, r6
 8013b7e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8013b82:	ec43 2b1c 	vmov	d12, r2, r3
 8013b86:	f001 fc39 	bl	80153fc <__ulp>
 8013b8a:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8013b8e:	eeac 7b00 	vfma.f64	d7, d12, d0
 8013b92:	ec5b ab17 	vmov	sl, fp, d7
 8013b96:	e7b1      	b.n	8013afc <_strtod_l+0xa94>
 8013b98:	ec53 2b18 	vmov	r2, r3, d8
 8013b9c:	e7ec      	b.n	8013b78 <_strtod_l+0xb10>
 8013b9e:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8013ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ba6:	f57f af6b 	bpl.w	8013a80 <_strtod_l+0xa18>
 8013baa:	e496      	b.n	80134da <_strtod_l+0x472>
 8013bac:	2300      	movs	r3, #0
 8013bae:	930d      	str	r3, [sp, #52]	; 0x34
 8013bb0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013bb2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013bb4:	6013      	str	r3, [r2, #0]
 8013bb6:	f7ff ba9d 	b.w	80130f4 <_strtod_l+0x8c>
 8013bba:	2a65      	cmp	r2, #101	; 0x65
 8013bbc:	f04f 0100 	mov.w	r1, #0
 8013bc0:	f43f ab97 	beq.w	80132f2 <_strtod_l+0x28a>
 8013bc4:	2701      	movs	r7, #1
 8013bc6:	460b      	mov	r3, r1
 8013bc8:	9704      	str	r7, [sp, #16]
 8013bca:	f7ff bb0a 	b.w	80131e2 <_strtod_l+0x17a>
 8013bce:	bf00      	nop
 8013bd0:	ffc00000 	.word	0xffc00000
 8013bd4:	41dfffff 	.word	0x41dfffff
 8013bd8:	000fffff 	.word	0x000fffff
 8013bdc:	7ff00000 	.word	0x7ff00000
 8013be0:	7fefffff 	.word	0x7fefffff
 8013be4:	39500000 	.word	0x39500000
 8013be8:	3ff00000 	.word	0x3ff00000
 8013bec:	7fe00000 	.word	0x7fe00000
 8013bf0:	7c9fffff 	.word	0x7c9fffff
 8013bf4:	bff00000 	.word	0xbff00000

08013bf8 <strtod>:
 8013bf8:	4b07      	ldr	r3, [pc, #28]	; (8013c18 <strtod+0x20>)
 8013bfa:	4a08      	ldr	r2, [pc, #32]	; (8013c1c <strtod+0x24>)
 8013bfc:	b410      	push	{r4}
 8013bfe:	681c      	ldr	r4, [r3, #0]
 8013c00:	6a23      	ldr	r3, [r4, #32]
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	bf08      	it	eq
 8013c06:	4613      	moveq	r3, r2
 8013c08:	460a      	mov	r2, r1
 8013c0a:	4601      	mov	r1, r0
 8013c0c:	4620      	mov	r0, r4
 8013c0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013c12:	f7ff ba29 	b.w	8013068 <_strtod_l>
 8013c16:	bf00      	nop
 8013c18:	24000030 	.word	0x24000030
 8013c1c:	24000094 	.word	0x24000094

08013c20 <quorem>:
 8013c20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c24:	6903      	ldr	r3, [r0, #16]
 8013c26:	690c      	ldr	r4, [r1, #16]
 8013c28:	42a3      	cmp	r3, r4
 8013c2a:	4680      	mov	r8, r0
 8013c2c:	f2c0 8082 	blt.w	8013d34 <quorem+0x114>
 8013c30:	3c01      	subs	r4, #1
 8013c32:	f101 0714 	add.w	r7, r1, #20
 8013c36:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8013c3a:	f100 0614 	add.w	r6, r0, #20
 8013c3e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8013c42:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8013c46:	eb06 030c 	add.w	r3, r6, ip
 8013c4a:	3501      	adds	r5, #1
 8013c4c:	eb07 090c 	add.w	r9, r7, ip
 8013c50:	9301      	str	r3, [sp, #4]
 8013c52:	fbb0 f5f5 	udiv	r5, r0, r5
 8013c56:	b395      	cbz	r5, 8013cbe <quorem+0x9e>
 8013c58:	f04f 0a00 	mov.w	sl, #0
 8013c5c:	4638      	mov	r0, r7
 8013c5e:	46b6      	mov	lr, r6
 8013c60:	46d3      	mov	fp, sl
 8013c62:	f850 2b04 	ldr.w	r2, [r0], #4
 8013c66:	b293      	uxth	r3, r2
 8013c68:	fb05 a303 	mla	r3, r5, r3, sl
 8013c6c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013c70:	b29b      	uxth	r3, r3
 8013c72:	ebab 0303 	sub.w	r3, fp, r3
 8013c76:	0c12      	lsrs	r2, r2, #16
 8013c78:	f8de b000 	ldr.w	fp, [lr]
 8013c7c:	fb05 a202 	mla	r2, r5, r2, sl
 8013c80:	fa13 f38b 	uxtah	r3, r3, fp
 8013c84:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8013c88:	fa1f fb82 	uxth.w	fp, r2
 8013c8c:	f8de 2000 	ldr.w	r2, [lr]
 8013c90:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8013c94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013c98:	b29b      	uxth	r3, r3
 8013c9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013c9e:	4581      	cmp	r9, r0
 8013ca0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8013ca4:	f84e 3b04 	str.w	r3, [lr], #4
 8013ca8:	d2db      	bcs.n	8013c62 <quorem+0x42>
 8013caa:	f856 300c 	ldr.w	r3, [r6, ip]
 8013cae:	b933      	cbnz	r3, 8013cbe <quorem+0x9e>
 8013cb0:	9b01      	ldr	r3, [sp, #4]
 8013cb2:	3b04      	subs	r3, #4
 8013cb4:	429e      	cmp	r6, r3
 8013cb6:	461a      	mov	r2, r3
 8013cb8:	d330      	bcc.n	8013d1c <quorem+0xfc>
 8013cba:	f8c8 4010 	str.w	r4, [r8, #16]
 8013cbe:	4640      	mov	r0, r8
 8013cc0:	f001 fb24 	bl	801530c <__mcmp>
 8013cc4:	2800      	cmp	r0, #0
 8013cc6:	db25      	blt.n	8013d14 <quorem+0xf4>
 8013cc8:	3501      	adds	r5, #1
 8013cca:	4630      	mov	r0, r6
 8013ccc:	f04f 0c00 	mov.w	ip, #0
 8013cd0:	f857 2b04 	ldr.w	r2, [r7], #4
 8013cd4:	f8d0 e000 	ldr.w	lr, [r0]
 8013cd8:	b293      	uxth	r3, r2
 8013cda:	ebac 0303 	sub.w	r3, ip, r3
 8013cde:	0c12      	lsrs	r2, r2, #16
 8013ce0:	fa13 f38e 	uxtah	r3, r3, lr
 8013ce4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8013ce8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013cec:	b29b      	uxth	r3, r3
 8013cee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013cf2:	45b9      	cmp	r9, r7
 8013cf4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8013cf8:	f840 3b04 	str.w	r3, [r0], #4
 8013cfc:	d2e8      	bcs.n	8013cd0 <quorem+0xb0>
 8013cfe:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8013d02:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8013d06:	b92a      	cbnz	r2, 8013d14 <quorem+0xf4>
 8013d08:	3b04      	subs	r3, #4
 8013d0a:	429e      	cmp	r6, r3
 8013d0c:	461a      	mov	r2, r3
 8013d0e:	d30b      	bcc.n	8013d28 <quorem+0x108>
 8013d10:	f8c8 4010 	str.w	r4, [r8, #16]
 8013d14:	4628      	mov	r0, r5
 8013d16:	b003      	add	sp, #12
 8013d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d1c:	6812      	ldr	r2, [r2, #0]
 8013d1e:	3b04      	subs	r3, #4
 8013d20:	2a00      	cmp	r2, #0
 8013d22:	d1ca      	bne.n	8013cba <quorem+0x9a>
 8013d24:	3c01      	subs	r4, #1
 8013d26:	e7c5      	b.n	8013cb4 <quorem+0x94>
 8013d28:	6812      	ldr	r2, [r2, #0]
 8013d2a:	3b04      	subs	r3, #4
 8013d2c:	2a00      	cmp	r2, #0
 8013d2e:	d1ef      	bne.n	8013d10 <quorem+0xf0>
 8013d30:	3c01      	subs	r4, #1
 8013d32:	e7ea      	b.n	8013d0a <quorem+0xea>
 8013d34:	2000      	movs	r0, #0
 8013d36:	e7ee      	b.n	8013d16 <quorem+0xf6>

08013d38 <_dtoa_r>:
 8013d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d3c:	ec57 6b10 	vmov	r6, r7, d0
 8013d40:	b095      	sub	sp, #84	; 0x54
 8013d42:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013d44:	9108      	str	r1, [sp, #32]
 8013d46:	4604      	mov	r4, r0
 8013d48:	920a      	str	r2, [sp, #40]	; 0x28
 8013d4a:	9311      	str	r3, [sp, #68]	; 0x44
 8013d4c:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8013d50:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8013d54:	b93d      	cbnz	r5, 8013d66 <_dtoa_r+0x2e>
 8013d56:	2010      	movs	r0, #16
 8013d58:	f7fe fd68 	bl	801282c <malloc>
 8013d5c:	6260      	str	r0, [r4, #36]	; 0x24
 8013d5e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013d62:	6005      	str	r5, [r0, #0]
 8013d64:	60c5      	str	r5, [r0, #12]
 8013d66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013d68:	6819      	ldr	r1, [r3, #0]
 8013d6a:	b151      	cbz	r1, 8013d82 <_dtoa_r+0x4a>
 8013d6c:	685a      	ldr	r2, [r3, #4]
 8013d6e:	604a      	str	r2, [r1, #4]
 8013d70:	2301      	movs	r3, #1
 8013d72:	4093      	lsls	r3, r2
 8013d74:	608b      	str	r3, [r1, #8]
 8013d76:	4620      	mov	r0, r4
 8013d78:	f001 f8a8 	bl	8014ecc <_Bfree>
 8013d7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013d7e:	2200      	movs	r2, #0
 8013d80:	601a      	str	r2, [r3, #0]
 8013d82:	1e3b      	subs	r3, r7, #0
 8013d84:	bfb9      	ittee	lt
 8013d86:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8013d8a:	9303      	strlt	r3, [sp, #12]
 8013d8c:	2300      	movge	r3, #0
 8013d8e:	f8c8 3000 	strge.w	r3, [r8]
 8013d92:	9d03      	ldr	r5, [sp, #12]
 8013d94:	4bac      	ldr	r3, [pc, #688]	; (8014048 <_dtoa_r+0x310>)
 8013d96:	bfbc      	itt	lt
 8013d98:	2201      	movlt	r2, #1
 8013d9a:	f8c8 2000 	strlt.w	r2, [r8]
 8013d9e:	43ab      	bics	r3, r5
 8013da0:	d11b      	bne.n	8013dda <_dtoa_r+0xa2>
 8013da2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013da4:	f242 730f 	movw	r3, #9999	; 0x270f
 8013da8:	6013      	str	r3, [r2, #0]
 8013daa:	9b02      	ldr	r3, [sp, #8]
 8013dac:	b923      	cbnz	r3, 8013db8 <_dtoa_r+0x80>
 8013dae:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8013db2:	2d00      	cmp	r5, #0
 8013db4:	f000 84dd 	beq.w	8014772 <_dtoa_r+0xa3a>
 8013db8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013dba:	b953      	cbnz	r3, 8013dd2 <_dtoa_r+0x9a>
 8013dbc:	4ba3      	ldr	r3, [pc, #652]	; (801404c <_dtoa_r+0x314>)
 8013dbe:	e020      	b.n	8013e02 <_dtoa_r+0xca>
 8013dc0:	4ba3      	ldr	r3, [pc, #652]	; (8014050 <_dtoa_r+0x318>)
 8013dc2:	9304      	str	r3, [sp, #16]
 8013dc4:	3308      	adds	r3, #8
 8013dc6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8013dc8:	6013      	str	r3, [r2, #0]
 8013dca:	9804      	ldr	r0, [sp, #16]
 8013dcc:	b015      	add	sp, #84	; 0x54
 8013dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013dd2:	4b9e      	ldr	r3, [pc, #632]	; (801404c <_dtoa_r+0x314>)
 8013dd4:	9304      	str	r3, [sp, #16]
 8013dd6:	3303      	adds	r3, #3
 8013dd8:	e7f5      	b.n	8013dc6 <_dtoa_r+0x8e>
 8013dda:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013dde:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013de6:	ed8d 7b04 	vstr	d7, [sp, #16]
 8013dea:	d10c      	bne.n	8013e06 <_dtoa_r+0xce>
 8013dec:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013dee:	2301      	movs	r3, #1
 8013df0:	6013      	str	r3, [r2, #0]
 8013df2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013df4:	2b00      	cmp	r3, #0
 8013df6:	f000 84b9 	beq.w	801476c <_dtoa_r+0xa34>
 8013dfa:	4b96      	ldr	r3, [pc, #600]	; (8014054 <_dtoa_r+0x31c>)
 8013dfc:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8013dfe:	6013      	str	r3, [r2, #0]
 8013e00:	3b01      	subs	r3, #1
 8013e02:	9304      	str	r3, [sp, #16]
 8013e04:	e7e1      	b.n	8013dca <_dtoa_r+0x92>
 8013e06:	a913      	add	r1, sp, #76	; 0x4c
 8013e08:	aa12      	add	r2, sp, #72	; 0x48
 8013e0a:	ed9d 0b04 	vldr	d0, [sp, #16]
 8013e0e:	4620      	mov	r0, r4
 8013e10:	f001 fb6a 	bl	80154e8 <__d2b>
 8013e14:	f3c5 560a 	ubfx	r6, r5, #20, #11
 8013e18:	9001      	str	r0, [sp, #4]
 8013e1a:	9912      	ldr	r1, [sp, #72]	; 0x48
 8013e1c:	2e00      	cmp	r6, #0
 8013e1e:	d046      	beq.n	8013eae <_dtoa_r+0x176>
 8013e20:	9805      	ldr	r0, [sp, #20]
 8013e22:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8013e26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013e2a:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 8013e2e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8013e32:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 8013e36:	2700      	movs	r7, #0
 8013e38:	ee07 aa90 	vmov	s15, sl
 8013e3c:	ec43 2b16 	vmov	d6, r2, r3
 8013e40:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8013e44:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 8014030 <_dtoa_r+0x2f8>
 8013e48:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8013e4c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8013e50:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8014038 <_dtoa_r+0x300>
 8013e54:	eea7 6b04 	vfma.f64	d6, d7, d4
 8013e58:	eeb0 7b46 	vmov.f64	d7, d6
 8013e5c:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8014040 <_dtoa_r+0x308>
 8013e60:	eea5 7b06 	vfma.f64	d7, d5, d6
 8013e64:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8013e68:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8013e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e70:	ee16 ba90 	vmov	fp, s13
 8013e74:	d508      	bpl.n	8013e88 <_dtoa_r+0x150>
 8013e76:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8013e7a:	eeb4 6b47 	vcmp.f64	d6, d7
 8013e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e82:	bf18      	it	ne
 8013e84:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8013e88:	f1bb 0f16 	cmp.w	fp, #22
 8013e8c:	d834      	bhi.n	8013ef8 <_dtoa_r+0x1c0>
 8013e8e:	4b72      	ldr	r3, [pc, #456]	; (8014058 <_dtoa_r+0x320>)
 8013e90:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8013e94:	ed93 7b00 	vldr	d7, [r3]
 8013e98:	ed9d 6b02 	vldr	d6, [sp, #8]
 8013e9c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8013ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ea4:	dd01      	ble.n	8013eaa <_dtoa_r+0x172>
 8013ea6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013eaa:	2300      	movs	r3, #0
 8013eac:	e025      	b.n	8013efa <_dtoa_r+0x1c2>
 8013eae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013eb0:	eb01 0a03 	add.w	sl, r1, r3
 8013eb4:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 8013eb8:	2b20      	cmp	r3, #32
 8013eba:	dd17      	ble.n	8013eec <_dtoa_r+0x1b4>
 8013ebc:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8013ec0:	9a02      	ldr	r2, [sp, #8]
 8013ec2:	409d      	lsls	r5, r3
 8013ec4:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 8013ec8:	fa22 f303 	lsr.w	r3, r2, r3
 8013ecc:	432b      	orrs	r3, r5
 8013ece:	ee07 3a90 	vmov	s15, r3
 8013ed2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8013ed6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013eda:	ed8d 7b04 	vstr	d7, [sp, #16]
 8013ede:	9805      	ldr	r0, [sp, #20]
 8013ee0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013ee4:	2701      	movs	r7, #1
 8013ee6:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 8013eea:	e7a5      	b.n	8013e38 <_dtoa_r+0x100>
 8013eec:	9a02      	ldr	r2, [sp, #8]
 8013eee:	f1c3 0320 	rsb	r3, r3, #32
 8013ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8013ef6:	e7ea      	b.n	8013ece <_dtoa_r+0x196>
 8013ef8:	2301      	movs	r3, #1
 8013efa:	eba1 0a0a 	sub.w	sl, r1, sl
 8013efe:	9310      	str	r3, [sp, #64]	; 0x40
 8013f00:	f1ba 0301 	subs.w	r3, sl, #1
 8013f04:	9307      	str	r3, [sp, #28]
 8013f06:	bf43      	ittte	mi
 8013f08:	2300      	movmi	r3, #0
 8013f0a:	f1ca 0a01 	rsbmi	sl, sl, #1
 8013f0e:	9307      	strmi	r3, [sp, #28]
 8013f10:	f04f 0a00 	movpl.w	sl, #0
 8013f14:	f1bb 0f00 	cmp.w	fp, #0
 8013f18:	db19      	blt.n	8013f4e <_dtoa_r+0x216>
 8013f1a:	9b07      	ldr	r3, [sp, #28]
 8013f1c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8013f20:	445b      	add	r3, fp
 8013f22:	9307      	str	r3, [sp, #28]
 8013f24:	f04f 0800 	mov.w	r8, #0
 8013f28:	9b08      	ldr	r3, [sp, #32]
 8013f2a:	2b09      	cmp	r3, #9
 8013f2c:	d866      	bhi.n	8013ffc <_dtoa_r+0x2c4>
 8013f2e:	2b05      	cmp	r3, #5
 8013f30:	bfc4      	itt	gt
 8013f32:	3b04      	subgt	r3, #4
 8013f34:	9308      	strgt	r3, [sp, #32]
 8013f36:	9b08      	ldr	r3, [sp, #32]
 8013f38:	f1a3 0302 	sub.w	r3, r3, #2
 8013f3c:	bfcc      	ite	gt
 8013f3e:	2500      	movgt	r5, #0
 8013f40:	2501      	movle	r5, #1
 8013f42:	2b03      	cmp	r3, #3
 8013f44:	d866      	bhi.n	8014014 <_dtoa_r+0x2dc>
 8013f46:	e8df f003 	tbb	[pc, r3]
 8013f4a:	5755      	.short	0x5755
 8013f4c:	4909      	.short	0x4909
 8013f4e:	2300      	movs	r3, #0
 8013f50:	ebaa 0a0b 	sub.w	sl, sl, fp
 8013f54:	f1cb 0800 	rsb	r8, fp, #0
 8013f58:	930b      	str	r3, [sp, #44]	; 0x2c
 8013f5a:	e7e5      	b.n	8013f28 <_dtoa_r+0x1f0>
 8013f5c:	2301      	movs	r3, #1
 8013f5e:	9309      	str	r3, [sp, #36]	; 0x24
 8013f60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013f62:	2b00      	cmp	r3, #0
 8013f64:	dd59      	ble.n	801401a <_dtoa_r+0x2e2>
 8013f66:	9306      	str	r3, [sp, #24]
 8013f68:	4699      	mov	r9, r3
 8013f6a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8013f6c:	2200      	movs	r2, #0
 8013f6e:	6072      	str	r2, [r6, #4]
 8013f70:	2204      	movs	r2, #4
 8013f72:	f102 0014 	add.w	r0, r2, #20
 8013f76:	4298      	cmp	r0, r3
 8013f78:	6871      	ldr	r1, [r6, #4]
 8013f7a:	d953      	bls.n	8014024 <_dtoa_r+0x2ec>
 8013f7c:	4620      	mov	r0, r4
 8013f7e:	f000 ff71 	bl	8014e64 <_Balloc>
 8013f82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013f84:	6030      	str	r0, [r6, #0]
 8013f86:	681b      	ldr	r3, [r3, #0]
 8013f88:	9304      	str	r3, [sp, #16]
 8013f8a:	f1b9 0f0e 	cmp.w	r9, #14
 8013f8e:	f200 80c2 	bhi.w	8014116 <_dtoa_r+0x3de>
 8013f92:	2d00      	cmp	r5, #0
 8013f94:	f000 80bf 	beq.w	8014116 <_dtoa_r+0x3de>
 8013f98:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013f9c:	f1bb 0f00 	cmp.w	fp, #0
 8013fa0:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8013fa4:	f340 80e6 	ble.w	8014174 <_dtoa_r+0x43c>
 8013fa8:	4a2b      	ldr	r2, [pc, #172]	; (8014058 <_dtoa_r+0x320>)
 8013faa:	f00b 030f 	and.w	r3, fp, #15
 8013fae:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8013fb2:	ed93 7b00 	vldr	d7, [r3]
 8013fb6:	ea4f 132b 	mov.w	r3, fp, asr #4
 8013fba:	06da      	lsls	r2, r3, #27
 8013fbc:	f140 80d8 	bpl.w	8014170 <_dtoa_r+0x438>
 8013fc0:	4a26      	ldr	r2, [pc, #152]	; (801405c <_dtoa_r+0x324>)
 8013fc2:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 8013fc6:	ed92 6b08 	vldr	d6, [r2, #32]
 8013fca:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8013fce:	ed8d 6b02 	vstr	d6, [sp, #8]
 8013fd2:	f003 030f 	and.w	r3, r3, #15
 8013fd6:	2203      	movs	r2, #3
 8013fd8:	4920      	ldr	r1, [pc, #128]	; (801405c <_dtoa_r+0x324>)
 8013fda:	e04a      	b.n	8014072 <_dtoa_r+0x33a>
 8013fdc:	2301      	movs	r3, #1
 8013fde:	9309      	str	r3, [sp, #36]	; 0x24
 8013fe0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013fe2:	445b      	add	r3, fp
 8013fe4:	f103 0901 	add.w	r9, r3, #1
 8013fe8:	9306      	str	r3, [sp, #24]
 8013fea:	464b      	mov	r3, r9
 8013fec:	2b01      	cmp	r3, #1
 8013fee:	bfb8      	it	lt
 8013ff0:	2301      	movlt	r3, #1
 8013ff2:	e7ba      	b.n	8013f6a <_dtoa_r+0x232>
 8013ff4:	2300      	movs	r3, #0
 8013ff6:	e7b2      	b.n	8013f5e <_dtoa_r+0x226>
 8013ff8:	2300      	movs	r3, #0
 8013ffa:	e7f0      	b.n	8013fde <_dtoa_r+0x2a6>
 8013ffc:	2501      	movs	r5, #1
 8013ffe:	2300      	movs	r3, #0
 8014000:	e9cd 3508 	strd	r3, r5, [sp, #32]
 8014004:	f04f 33ff 	mov.w	r3, #4294967295
 8014008:	9306      	str	r3, [sp, #24]
 801400a:	4699      	mov	r9, r3
 801400c:	2200      	movs	r2, #0
 801400e:	2312      	movs	r3, #18
 8014010:	920a      	str	r2, [sp, #40]	; 0x28
 8014012:	e7aa      	b.n	8013f6a <_dtoa_r+0x232>
 8014014:	2301      	movs	r3, #1
 8014016:	9309      	str	r3, [sp, #36]	; 0x24
 8014018:	e7f4      	b.n	8014004 <_dtoa_r+0x2cc>
 801401a:	2301      	movs	r3, #1
 801401c:	9306      	str	r3, [sp, #24]
 801401e:	4699      	mov	r9, r3
 8014020:	461a      	mov	r2, r3
 8014022:	e7f5      	b.n	8014010 <_dtoa_r+0x2d8>
 8014024:	3101      	adds	r1, #1
 8014026:	6071      	str	r1, [r6, #4]
 8014028:	0052      	lsls	r2, r2, #1
 801402a:	e7a2      	b.n	8013f72 <_dtoa_r+0x23a>
 801402c:	f3af 8000 	nop.w
 8014030:	636f4361 	.word	0x636f4361
 8014034:	3fd287a7 	.word	0x3fd287a7
 8014038:	8b60c8b3 	.word	0x8b60c8b3
 801403c:	3fc68a28 	.word	0x3fc68a28
 8014040:	509f79fb 	.word	0x509f79fb
 8014044:	3fd34413 	.word	0x3fd34413
 8014048:	7ff00000 	.word	0x7ff00000
 801404c:	080158e9 	.word	0x080158e9
 8014050:	080158e0 	.word	0x080158e0
 8014054:	08015889 	.word	0x08015889
 8014058:	08015920 	.word	0x08015920
 801405c:	080158f8 	.word	0x080158f8
 8014060:	07de      	lsls	r6, r3, #31
 8014062:	d504      	bpl.n	801406e <_dtoa_r+0x336>
 8014064:	ed91 6b00 	vldr	d6, [r1]
 8014068:	3201      	adds	r2, #1
 801406a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801406e:	105b      	asrs	r3, r3, #1
 8014070:	3108      	adds	r1, #8
 8014072:	2b00      	cmp	r3, #0
 8014074:	d1f4      	bne.n	8014060 <_dtoa_r+0x328>
 8014076:	ed9d 6b02 	vldr	d6, [sp, #8]
 801407a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801407e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014082:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014084:	2b00      	cmp	r3, #0
 8014086:	f000 80a7 	beq.w	80141d8 <_dtoa_r+0x4a0>
 801408a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801408e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014092:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8014096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801409a:	f140 809d 	bpl.w	80141d8 <_dtoa_r+0x4a0>
 801409e:	f1b9 0f00 	cmp.w	r9, #0
 80140a2:	f000 8099 	beq.w	80141d8 <_dtoa_r+0x4a0>
 80140a6:	9b06      	ldr	r3, [sp, #24]
 80140a8:	2b00      	cmp	r3, #0
 80140aa:	dd30      	ble.n	801410e <_dtoa_r+0x3d6>
 80140ac:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80140b0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80140b4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80140b8:	9d06      	ldr	r5, [sp, #24]
 80140ba:	f10b 33ff 	add.w	r3, fp, #4294967295
 80140be:	3201      	adds	r2, #1
 80140c0:	ed9d 6b02 	vldr	d6, [sp, #8]
 80140c4:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80140c8:	ee07 2a90 	vmov	s15, r2
 80140cc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80140d0:	eea7 5b06 	vfma.f64	d5, d7, d6
 80140d4:	ed8d 5b02 	vstr	d5, [sp, #8]
 80140d8:	9a03      	ldr	r2, [sp, #12]
 80140da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80140de:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 80140e2:	2d00      	cmp	r5, #0
 80140e4:	d17b      	bne.n	80141de <_dtoa_r+0x4a6>
 80140e6:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80140ea:	ee36 6b47 	vsub.f64	d6, d6, d7
 80140ee:	ec41 0b17 	vmov	d7, r0, r1
 80140f2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80140f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140fa:	f300 8253 	bgt.w	80145a4 <_dtoa_r+0x86c>
 80140fe:	eeb1 7b47 	vneg.f64	d7, d7
 8014102:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8014106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801410a:	f100 8249 	bmi.w	80145a0 <_dtoa_r+0x868>
 801410e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8014112:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8014116:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014118:	2b00      	cmp	r3, #0
 801411a:	f2c0 8119 	blt.w	8014350 <_dtoa_r+0x618>
 801411e:	f1bb 0f0e 	cmp.w	fp, #14
 8014122:	f300 8115 	bgt.w	8014350 <_dtoa_r+0x618>
 8014126:	4bc3      	ldr	r3, [pc, #780]	; (8014434 <_dtoa_r+0x6fc>)
 8014128:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801412c:	ed93 6b00 	vldr	d6, [r3]
 8014130:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014132:	2b00      	cmp	r3, #0
 8014134:	f280 80ba 	bge.w	80142ac <_dtoa_r+0x574>
 8014138:	f1b9 0f00 	cmp.w	r9, #0
 801413c:	f300 80b6 	bgt.w	80142ac <_dtoa_r+0x574>
 8014140:	f040 822d 	bne.w	801459e <_dtoa_r+0x866>
 8014144:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8014148:	ee26 6b07 	vmul.f64	d6, d6, d7
 801414c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014150:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8014154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014158:	464d      	mov	r5, r9
 801415a:	464f      	mov	r7, r9
 801415c:	f280 8204 	bge.w	8014568 <_dtoa_r+0x830>
 8014160:	9b04      	ldr	r3, [sp, #16]
 8014162:	9a04      	ldr	r2, [sp, #16]
 8014164:	1c5e      	adds	r6, r3, #1
 8014166:	2331      	movs	r3, #49	; 0x31
 8014168:	7013      	strb	r3, [r2, #0]
 801416a:	f10b 0b01 	add.w	fp, fp, #1
 801416e:	e1ff      	b.n	8014570 <_dtoa_r+0x838>
 8014170:	2202      	movs	r2, #2
 8014172:	e731      	b.n	8013fd8 <_dtoa_r+0x2a0>
 8014174:	d02e      	beq.n	80141d4 <_dtoa_r+0x49c>
 8014176:	f1cb 0300 	rsb	r3, fp, #0
 801417a:	4aae      	ldr	r2, [pc, #696]	; (8014434 <_dtoa_r+0x6fc>)
 801417c:	f003 010f 	and.w	r1, r3, #15
 8014180:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8014184:	ed92 7b00 	vldr	d7, [r2]
 8014188:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 801418c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8014190:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8014194:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8014198:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801419c:	49a6      	ldr	r1, [pc, #664]	; (8014438 <_dtoa_r+0x700>)
 801419e:	111b      	asrs	r3, r3, #4
 80141a0:	2000      	movs	r0, #0
 80141a2:	2202      	movs	r2, #2
 80141a4:	b93b      	cbnz	r3, 80141b6 <_dtoa_r+0x47e>
 80141a6:	2800      	cmp	r0, #0
 80141a8:	f43f af6b 	beq.w	8014082 <_dtoa_r+0x34a>
 80141ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80141b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80141b4:	e765      	b.n	8014082 <_dtoa_r+0x34a>
 80141b6:	07dd      	lsls	r5, r3, #31
 80141b8:	d509      	bpl.n	80141ce <_dtoa_r+0x496>
 80141ba:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 80141be:	ed91 7b00 	vldr	d7, [r1]
 80141c2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80141c6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80141ca:	3201      	adds	r2, #1
 80141cc:	2001      	movs	r0, #1
 80141ce:	105b      	asrs	r3, r3, #1
 80141d0:	3108      	adds	r1, #8
 80141d2:	e7e7      	b.n	80141a4 <_dtoa_r+0x46c>
 80141d4:	2202      	movs	r2, #2
 80141d6:	e754      	b.n	8014082 <_dtoa_r+0x34a>
 80141d8:	465b      	mov	r3, fp
 80141da:	464d      	mov	r5, r9
 80141dc:	e770      	b.n	80140c0 <_dtoa_r+0x388>
 80141de:	4a95      	ldr	r2, [pc, #596]	; (8014434 <_dtoa_r+0x6fc>)
 80141e0:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 80141e4:	ed12 4b02 	vldr	d4, [r2, #-8]
 80141e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80141ea:	ec41 0b17 	vmov	d7, r0, r1
 80141ee:	b35a      	cbz	r2, 8014248 <_dtoa_r+0x510>
 80141f0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80141f4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80141f8:	9e04      	ldr	r6, [sp, #16]
 80141fa:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80141fe:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8014202:	ee35 7b47 	vsub.f64	d7, d5, d7
 8014206:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801420a:	ee14 2a90 	vmov	r2, s9
 801420e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8014212:	3230      	adds	r2, #48	; 0x30
 8014214:	ee36 6b45 	vsub.f64	d6, d6, d5
 8014218:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801421c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014220:	f806 2b01 	strb.w	r2, [r6], #1
 8014224:	d43b      	bmi.n	801429e <_dtoa_r+0x566>
 8014226:	ee32 5b46 	vsub.f64	d5, d2, d6
 801422a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801422e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014232:	d472      	bmi.n	801431a <_dtoa_r+0x5e2>
 8014234:	9a04      	ldr	r2, [sp, #16]
 8014236:	1ab2      	subs	r2, r6, r2
 8014238:	4295      	cmp	r5, r2
 801423a:	f77f af68 	ble.w	801410e <_dtoa_r+0x3d6>
 801423e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8014242:	ee26 6b03 	vmul.f64	d6, d6, d3
 8014246:	e7de      	b.n	8014206 <_dtoa_r+0x4ce>
 8014248:	9a04      	ldr	r2, [sp, #16]
 801424a:	ee24 7b07 	vmul.f64	d7, d4, d7
 801424e:	1956      	adds	r6, r2, r5
 8014250:	4611      	mov	r1, r2
 8014252:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8014256:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801425a:	ee14 2a90 	vmov	r2, s9
 801425e:	3230      	adds	r2, #48	; 0x30
 8014260:	f801 2b01 	strb.w	r2, [r1], #1
 8014264:	42b1      	cmp	r1, r6
 8014266:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801426a:	ee36 6b45 	vsub.f64	d6, d6, d5
 801426e:	d11a      	bne.n	80142a6 <_dtoa_r+0x56e>
 8014270:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8014274:	ee37 4b05 	vadd.f64	d4, d7, d5
 8014278:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801427c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014280:	dc4b      	bgt.n	801431a <_dtoa_r+0x5e2>
 8014282:	ee35 7b47 	vsub.f64	d7, d5, d7
 8014286:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801428a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801428e:	f57f af3e 	bpl.w	801410e <_dtoa_r+0x3d6>
 8014292:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8014296:	2a30      	cmp	r2, #48	; 0x30
 8014298:	f106 31ff 	add.w	r1, r6, #4294967295
 801429c:	d001      	beq.n	80142a2 <_dtoa_r+0x56a>
 801429e:	469b      	mov	fp, r3
 80142a0:	e02a      	b.n	80142f8 <_dtoa_r+0x5c0>
 80142a2:	460e      	mov	r6, r1
 80142a4:	e7f5      	b.n	8014292 <_dtoa_r+0x55a>
 80142a6:	ee26 6b03 	vmul.f64	d6, d6, d3
 80142aa:	e7d4      	b.n	8014256 <_dtoa_r+0x51e>
 80142ac:	ed9d 7b02 	vldr	d7, [sp, #8]
 80142b0:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80142b4:	9e04      	ldr	r6, [sp, #16]
 80142b6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80142ba:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80142be:	ee15 3a10 	vmov	r3, s10
 80142c2:	3330      	adds	r3, #48	; 0x30
 80142c4:	f806 3b01 	strb.w	r3, [r6], #1
 80142c8:	9b04      	ldr	r3, [sp, #16]
 80142ca:	1af3      	subs	r3, r6, r3
 80142cc:	4599      	cmp	r9, r3
 80142ce:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80142d2:	eea3 7b46 	vfms.f64	d7, d3, d6
 80142d6:	d133      	bne.n	8014340 <_dtoa_r+0x608>
 80142d8:	ee37 7b07 	vadd.f64	d7, d7, d7
 80142dc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80142e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142e4:	dc18      	bgt.n	8014318 <_dtoa_r+0x5e0>
 80142e6:	eeb4 7b46 	vcmp.f64	d7, d6
 80142ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142ee:	d103      	bne.n	80142f8 <_dtoa_r+0x5c0>
 80142f0:	ee15 3a10 	vmov	r3, s10
 80142f4:	07db      	lsls	r3, r3, #31
 80142f6:	d40f      	bmi.n	8014318 <_dtoa_r+0x5e0>
 80142f8:	9901      	ldr	r1, [sp, #4]
 80142fa:	4620      	mov	r0, r4
 80142fc:	f000 fde6 	bl	8014ecc <_Bfree>
 8014300:	2300      	movs	r3, #0
 8014302:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014304:	7033      	strb	r3, [r6, #0]
 8014306:	f10b 0301 	add.w	r3, fp, #1
 801430a:	6013      	str	r3, [r2, #0]
 801430c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801430e:	2b00      	cmp	r3, #0
 8014310:	f43f ad5b 	beq.w	8013dca <_dtoa_r+0x92>
 8014314:	601e      	str	r6, [r3, #0]
 8014316:	e558      	b.n	8013dca <_dtoa_r+0x92>
 8014318:	465b      	mov	r3, fp
 801431a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801431e:	2939      	cmp	r1, #57	; 0x39
 8014320:	f106 32ff 	add.w	r2, r6, #4294967295
 8014324:	d106      	bne.n	8014334 <_dtoa_r+0x5fc>
 8014326:	9904      	ldr	r1, [sp, #16]
 8014328:	4291      	cmp	r1, r2
 801432a:	d107      	bne.n	801433c <_dtoa_r+0x604>
 801432c:	2230      	movs	r2, #48	; 0x30
 801432e:	700a      	strb	r2, [r1, #0]
 8014330:	3301      	adds	r3, #1
 8014332:	460a      	mov	r2, r1
 8014334:	7811      	ldrb	r1, [r2, #0]
 8014336:	3101      	adds	r1, #1
 8014338:	7011      	strb	r1, [r2, #0]
 801433a:	e7b0      	b.n	801429e <_dtoa_r+0x566>
 801433c:	4616      	mov	r6, r2
 801433e:	e7ec      	b.n	801431a <_dtoa_r+0x5e2>
 8014340:	ee27 7b04 	vmul.f64	d7, d7, d4
 8014344:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8014348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801434c:	d1b3      	bne.n	80142b6 <_dtoa_r+0x57e>
 801434e:	e7d3      	b.n	80142f8 <_dtoa_r+0x5c0>
 8014350:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014352:	2a00      	cmp	r2, #0
 8014354:	f000 808d 	beq.w	8014472 <_dtoa_r+0x73a>
 8014358:	9a08      	ldr	r2, [sp, #32]
 801435a:	2a01      	cmp	r2, #1
 801435c:	dc72      	bgt.n	8014444 <_dtoa_r+0x70c>
 801435e:	2f00      	cmp	r7, #0
 8014360:	d06c      	beq.n	801443c <_dtoa_r+0x704>
 8014362:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8014366:	4645      	mov	r5, r8
 8014368:	4656      	mov	r6, sl
 801436a:	9a07      	ldr	r2, [sp, #28]
 801436c:	2101      	movs	r1, #1
 801436e:	441a      	add	r2, r3
 8014370:	4620      	mov	r0, r4
 8014372:	449a      	add	sl, r3
 8014374:	9207      	str	r2, [sp, #28]
 8014376:	f000 fe87 	bl	8015088 <__i2b>
 801437a:	4607      	mov	r7, r0
 801437c:	2e00      	cmp	r6, #0
 801437e:	dd0b      	ble.n	8014398 <_dtoa_r+0x660>
 8014380:	9b07      	ldr	r3, [sp, #28]
 8014382:	2b00      	cmp	r3, #0
 8014384:	dd08      	ble.n	8014398 <_dtoa_r+0x660>
 8014386:	42b3      	cmp	r3, r6
 8014388:	9a07      	ldr	r2, [sp, #28]
 801438a:	bfa8      	it	ge
 801438c:	4633      	movge	r3, r6
 801438e:	ebaa 0a03 	sub.w	sl, sl, r3
 8014392:	1af6      	subs	r6, r6, r3
 8014394:	1ad3      	subs	r3, r2, r3
 8014396:	9307      	str	r3, [sp, #28]
 8014398:	f1b8 0f00 	cmp.w	r8, #0
 801439c:	d01d      	beq.n	80143da <_dtoa_r+0x6a2>
 801439e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80143a0:	2b00      	cmp	r3, #0
 80143a2:	d06a      	beq.n	801447a <_dtoa_r+0x742>
 80143a4:	b18d      	cbz	r5, 80143ca <_dtoa_r+0x692>
 80143a6:	4639      	mov	r1, r7
 80143a8:	462a      	mov	r2, r5
 80143aa:	4620      	mov	r0, r4
 80143ac:	f000 ff0c 	bl	80151c8 <__pow5mult>
 80143b0:	9a01      	ldr	r2, [sp, #4]
 80143b2:	4601      	mov	r1, r0
 80143b4:	4607      	mov	r7, r0
 80143b6:	4620      	mov	r0, r4
 80143b8:	f000 fe6f 	bl	801509a <__multiply>
 80143bc:	9901      	ldr	r1, [sp, #4]
 80143be:	900c      	str	r0, [sp, #48]	; 0x30
 80143c0:	4620      	mov	r0, r4
 80143c2:	f000 fd83 	bl	8014ecc <_Bfree>
 80143c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80143c8:	9301      	str	r3, [sp, #4]
 80143ca:	ebb8 0205 	subs.w	r2, r8, r5
 80143ce:	d004      	beq.n	80143da <_dtoa_r+0x6a2>
 80143d0:	9901      	ldr	r1, [sp, #4]
 80143d2:	4620      	mov	r0, r4
 80143d4:	f000 fef8 	bl	80151c8 <__pow5mult>
 80143d8:	9001      	str	r0, [sp, #4]
 80143da:	2101      	movs	r1, #1
 80143dc:	4620      	mov	r0, r4
 80143de:	f000 fe53 	bl	8015088 <__i2b>
 80143e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80143e4:	4605      	mov	r5, r0
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	f000 81ca 	beq.w	8014780 <_dtoa_r+0xa48>
 80143ec:	461a      	mov	r2, r3
 80143ee:	4601      	mov	r1, r0
 80143f0:	4620      	mov	r0, r4
 80143f2:	f000 fee9 	bl	80151c8 <__pow5mult>
 80143f6:	9b08      	ldr	r3, [sp, #32]
 80143f8:	2b01      	cmp	r3, #1
 80143fa:	4605      	mov	r5, r0
 80143fc:	dc44      	bgt.n	8014488 <_dtoa_r+0x750>
 80143fe:	9b02      	ldr	r3, [sp, #8]
 8014400:	2b00      	cmp	r3, #0
 8014402:	d13c      	bne.n	801447e <_dtoa_r+0x746>
 8014404:	9b03      	ldr	r3, [sp, #12]
 8014406:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801440a:	2b00      	cmp	r3, #0
 801440c:	d137      	bne.n	801447e <_dtoa_r+0x746>
 801440e:	9b03      	ldr	r3, [sp, #12]
 8014410:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014414:	0d1b      	lsrs	r3, r3, #20
 8014416:	051b      	lsls	r3, r3, #20
 8014418:	2b00      	cmp	r3, #0
 801441a:	d033      	beq.n	8014484 <_dtoa_r+0x74c>
 801441c:	9b07      	ldr	r3, [sp, #28]
 801441e:	3301      	adds	r3, #1
 8014420:	f10a 0a01 	add.w	sl, sl, #1
 8014424:	9307      	str	r3, [sp, #28]
 8014426:	f04f 0801 	mov.w	r8, #1
 801442a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801442c:	bb73      	cbnz	r3, 801448c <_dtoa_r+0x754>
 801442e:	2001      	movs	r0, #1
 8014430:	e034      	b.n	801449c <_dtoa_r+0x764>
 8014432:	bf00      	nop
 8014434:	08015920 	.word	0x08015920
 8014438:	080158f8 	.word	0x080158f8
 801443c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801443e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8014442:	e790      	b.n	8014366 <_dtoa_r+0x62e>
 8014444:	f109 35ff 	add.w	r5, r9, #4294967295
 8014448:	45a8      	cmp	r8, r5
 801444a:	bfbf      	itttt	lt
 801444c:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 801444e:	eba5 0808 	sublt.w	r8, r5, r8
 8014452:	4443      	addlt	r3, r8
 8014454:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8014456:	bfb6      	itet	lt
 8014458:	46a8      	movlt	r8, r5
 801445a:	eba8 0505 	subge.w	r5, r8, r5
 801445e:	2500      	movlt	r5, #0
 8014460:	f1b9 0f00 	cmp.w	r9, #0
 8014464:	bfb9      	ittee	lt
 8014466:	ebaa 0609 	sublt.w	r6, sl, r9
 801446a:	2300      	movlt	r3, #0
 801446c:	4656      	movge	r6, sl
 801446e:	464b      	movge	r3, r9
 8014470:	e77b      	b.n	801436a <_dtoa_r+0x632>
 8014472:	4645      	mov	r5, r8
 8014474:	4656      	mov	r6, sl
 8014476:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8014478:	e780      	b.n	801437c <_dtoa_r+0x644>
 801447a:	4642      	mov	r2, r8
 801447c:	e7a8      	b.n	80143d0 <_dtoa_r+0x698>
 801447e:	f04f 0800 	mov.w	r8, #0
 8014482:	e7d2      	b.n	801442a <_dtoa_r+0x6f2>
 8014484:	4698      	mov	r8, r3
 8014486:	e7d0      	b.n	801442a <_dtoa_r+0x6f2>
 8014488:	f04f 0800 	mov.w	r8, #0
 801448c:	692b      	ldr	r3, [r5, #16]
 801448e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8014492:	6918      	ldr	r0, [r3, #16]
 8014494:	f000 fdaa 	bl	8014fec <__hi0bits>
 8014498:	f1c0 0020 	rsb	r0, r0, #32
 801449c:	9b07      	ldr	r3, [sp, #28]
 801449e:	4418      	add	r0, r3
 80144a0:	f010 001f 	ands.w	r0, r0, #31
 80144a4:	d047      	beq.n	8014536 <_dtoa_r+0x7fe>
 80144a6:	f1c0 0320 	rsb	r3, r0, #32
 80144aa:	2b04      	cmp	r3, #4
 80144ac:	dd3b      	ble.n	8014526 <_dtoa_r+0x7ee>
 80144ae:	9b07      	ldr	r3, [sp, #28]
 80144b0:	f1c0 001c 	rsb	r0, r0, #28
 80144b4:	4482      	add	sl, r0
 80144b6:	4406      	add	r6, r0
 80144b8:	4403      	add	r3, r0
 80144ba:	9307      	str	r3, [sp, #28]
 80144bc:	f1ba 0f00 	cmp.w	sl, #0
 80144c0:	dd05      	ble.n	80144ce <_dtoa_r+0x796>
 80144c2:	4652      	mov	r2, sl
 80144c4:	9901      	ldr	r1, [sp, #4]
 80144c6:	4620      	mov	r0, r4
 80144c8:	f000 fecc 	bl	8015264 <__lshift>
 80144cc:	9001      	str	r0, [sp, #4]
 80144ce:	9b07      	ldr	r3, [sp, #28]
 80144d0:	2b00      	cmp	r3, #0
 80144d2:	dd05      	ble.n	80144e0 <_dtoa_r+0x7a8>
 80144d4:	4629      	mov	r1, r5
 80144d6:	461a      	mov	r2, r3
 80144d8:	4620      	mov	r0, r4
 80144da:	f000 fec3 	bl	8015264 <__lshift>
 80144de:	4605      	mov	r5, r0
 80144e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80144e2:	b353      	cbz	r3, 801453a <_dtoa_r+0x802>
 80144e4:	4629      	mov	r1, r5
 80144e6:	9801      	ldr	r0, [sp, #4]
 80144e8:	f000 ff10 	bl	801530c <__mcmp>
 80144ec:	2800      	cmp	r0, #0
 80144ee:	da24      	bge.n	801453a <_dtoa_r+0x802>
 80144f0:	2300      	movs	r3, #0
 80144f2:	220a      	movs	r2, #10
 80144f4:	9901      	ldr	r1, [sp, #4]
 80144f6:	4620      	mov	r0, r4
 80144f8:	f000 fcff 	bl	8014efa <__multadd>
 80144fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80144fe:	9001      	str	r0, [sp, #4]
 8014500:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014504:	2b00      	cmp	r3, #0
 8014506:	f000 8142 	beq.w	801478e <_dtoa_r+0xa56>
 801450a:	2300      	movs	r3, #0
 801450c:	4639      	mov	r1, r7
 801450e:	220a      	movs	r2, #10
 8014510:	4620      	mov	r0, r4
 8014512:	f000 fcf2 	bl	8014efa <__multadd>
 8014516:	9b06      	ldr	r3, [sp, #24]
 8014518:	2b00      	cmp	r3, #0
 801451a:	4607      	mov	r7, r0
 801451c:	dc4b      	bgt.n	80145b6 <_dtoa_r+0x87e>
 801451e:	9b08      	ldr	r3, [sp, #32]
 8014520:	2b02      	cmp	r3, #2
 8014522:	dd48      	ble.n	80145b6 <_dtoa_r+0x87e>
 8014524:	e011      	b.n	801454a <_dtoa_r+0x812>
 8014526:	d0c9      	beq.n	80144bc <_dtoa_r+0x784>
 8014528:	9a07      	ldr	r2, [sp, #28]
 801452a:	331c      	adds	r3, #28
 801452c:	441a      	add	r2, r3
 801452e:	449a      	add	sl, r3
 8014530:	441e      	add	r6, r3
 8014532:	4613      	mov	r3, r2
 8014534:	e7c1      	b.n	80144ba <_dtoa_r+0x782>
 8014536:	4603      	mov	r3, r0
 8014538:	e7f6      	b.n	8014528 <_dtoa_r+0x7f0>
 801453a:	f1b9 0f00 	cmp.w	r9, #0
 801453e:	dc34      	bgt.n	80145aa <_dtoa_r+0x872>
 8014540:	9b08      	ldr	r3, [sp, #32]
 8014542:	2b02      	cmp	r3, #2
 8014544:	dd31      	ble.n	80145aa <_dtoa_r+0x872>
 8014546:	f8cd 9018 	str.w	r9, [sp, #24]
 801454a:	9b06      	ldr	r3, [sp, #24]
 801454c:	b963      	cbnz	r3, 8014568 <_dtoa_r+0x830>
 801454e:	4629      	mov	r1, r5
 8014550:	2205      	movs	r2, #5
 8014552:	4620      	mov	r0, r4
 8014554:	f000 fcd1 	bl	8014efa <__multadd>
 8014558:	4601      	mov	r1, r0
 801455a:	4605      	mov	r5, r0
 801455c:	9801      	ldr	r0, [sp, #4]
 801455e:	f000 fed5 	bl	801530c <__mcmp>
 8014562:	2800      	cmp	r0, #0
 8014564:	f73f adfc 	bgt.w	8014160 <_dtoa_r+0x428>
 8014568:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801456a:	9e04      	ldr	r6, [sp, #16]
 801456c:	ea6f 0b03 	mvn.w	fp, r3
 8014570:	f04f 0900 	mov.w	r9, #0
 8014574:	4629      	mov	r1, r5
 8014576:	4620      	mov	r0, r4
 8014578:	f000 fca8 	bl	8014ecc <_Bfree>
 801457c:	2f00      	cmp	r7, #0
 801457e:	f43f aebb 	beq.w	80142f8 <_dtoa_r+0x5c0>
 8014582:	f1b9 0f00 	cmp.w	r9, #0
 8014586:	d005      	beq.n	8014594 <_dtoa_r+0x85c>
 8014588:	45b9      	cmp	r9, r7
 801458a:	d003      	beq.n	8014594 <_dtoa_r+0x85c>
 801458c:	4649      	mov	r1, r9
 801458e:	4620      	mov	r0, r4
 8014590:	f000 fc9c 	bl	8014ecc <_Bfree>
 8014594:	4639      	mov	r1, r7
 8014596:	4620      	mov	r0, r4
 8014598:	f000 fc98 	bl	8014ecc <_Bfree>
 801459c:	e6ac      	b.n	80142f8 <_dtoa_r+0x5c0>
 801459e:	2500      	movs	r5, #0
 80145a0:	462f      	mov	r7, r5
 80145a2:	e7e1      	b.n	8014568 <_dtoa_r+0x830>
 80145a4:	469b      	mov	fp, r3
 80145a6:	462f      	mov	r7, r5
 80145a8:	e5da      	b.n	8014160 <_dtoa_r+0x428>
 80145aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80145ac:	f8cd 9018 	str.w	r9, [sp, #24]
 80145b0:	2b00      	cmp	r3, #0
 80145b2:	f000 80f3 	beq.w	801479c <_dtoa_r+0xa64>
 80145b6:	2e00      	cmp	r6, #0
 80145b8:	dd05      	ble.n	80145c6 <_dtoa_r+0x88e>
 80145ba:	4639      	mov	r1, r7
 80145bc:	4632      	mov	r2, r6
 80145be:	4620      	mov	r0, r4
 80145c0:	f000 fe50 	bl	8015264 <__lshift>
 80145c4:	4607      	mov	r7, r0
 80145c6:	f1b8 0f00 	cmp.w	r8, #0
 80145ca:	d04c      	beq.n	8014666 <_dtoa_r+0x92e>
 80145cc:	6879      	ldr	r1, [r7, #4]
 80145ce:	4620      	mov	r0, r4
 80145d0:	f000 fc48 	bl	8014e64 <_Balloc>
 80145d4:	693a      	ldr	r2, [r7, #16]
 80145d6:	3202      	adds	r2, #2
 80145d8:	4606      	mov	r6, r0
 80145da:	0092      	lsls	r2, r2, #2
 80145dc:	f107 010c 	add.w	r1, r7, #12
 80145e0:	300c      	adds	r0, #12
 80145e2:	f7fe f933 	bl	801284c <memcpy>
 80145e6:	2201      	movs	r2, #1
 80145e8:	4631      	mov	r1, r6
 80145ea:	4620      	mov	r0, r4
 80145ec:	f000 fe3a 	bl	8015264 <__lshift>
 80145f0:	9b02      	ldr	r3, [sp, #8]
 80145f2:	f8dd a010 	ldr.w	sl, [sp, #16]
 80145f6:	f003 0301 	and.w	r3, r3, #1
 80145fa:	46b9      	mov	r9, r7
 80145fc:	9307      	str	r3, [sp, #28]
 80145fe:	4607      	mov	r7, r0
 8014600:	4629      	mov	r1, r5
 8014602:	9801      	ldr	r0, [sp, #4]
 8014604:	f7ff fb0c 	bl	8013c20 <quorem>
 8014608:	4649      	mov	r1, r9
 801460a:	4606      	mov	r6, r0
 801460c:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8014610:	9801      	ldr	r0, [sp, #4]
 8014612:	f000 fe7b 	bl	801530c <__mcmp>
 8014616:	463a      	mov	r2, r7
 8014618:	9002      	str	r0, [sp, #8]
 801461a:	4629      	mov	r1, r5
 801461c:	4620      	mov	r0, r4
 801461e:	f000 fe8f 	bl	8015340 <__mdiff>
 8014622:	68c3      	ldr	r3, [r0, #12]
 8014624:	4602      	mov	r2, r0
 8014626:	bb03      	cbnz	r3, 801466a <_dtoa_r+0x932>
 8014628:	4601      	mov	r1, r0
 801462a:	9009      	str	r0, [sp, #36]	; 0x24
 801462c:	9801      	ldr	r0, [sp, #4]
 801462e:	f000 fe6d 	bl	801530c <__mcmp>
 8014632:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014634:	4603      	mov	r3, r0
 8014636:	4611      	mov	r1, r2
 8014638:	4620      	mov	r0, r4
 801463a:	9309      	str	r3, [sp, #36]	; 0x24
 801463c:	f000 fc46 	bl	8014ecc <_Bfree>
 8014640:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014642:	b9a3      	cbnz	r3, 801466e <_dtoa_r+0x936>
 8014644:	9a08      	ldr	r2, [sp, #32]
 8014646:	b992      	cbnz	r2, 801466e <_dtoa_r+0x936>
 8014648:	9a07      	ldr	r2, [sp, #28]
 801464a:	b982      	cbnz	r2, 801466e <_dtoa_r+0x936>
 801464c:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8014650:	d029      	beq.n	80146a6 <_dtoa_r+0x96e>
 8014652:	9b02      	ldr	r3, [sp, #8]
 8014654:	2b00      	cmp	r3, #0
 8014656:	dd01      	ble.n	801465c <_dtoa_r+0x924>
 8014658:	f106 0831 	add.w	r8, r6, #49	; 0x31
 801465c:	f10a 0601 	add.w	r6, sl, #1
 8014660:	f88a 8000 	strb.w	r8, [sl]
 8014664:	e786      	b.n	8014574 <_dtoa_r+0x83c>
 8014666:	4638      	mov	r0, r7
 8014668:	e7c2      	b.n	80145f0 <_dtoa_r+0x8b8>
 801466a:	2301      	movs	r3, #1
 801466c:	e7e3      	b.n	8014636 <_dtoa_r+0x8fe>
 801466e:	9a02      	ldr	r2, [sp, #8]
 8014670:	2a00      	cmp	r2, #0
 8014672:	db04      	blt.n	801467e <_dtoa_r+0x946>
 8014674:	d124      	bne.n	80146c0 <_dtoa_r+0x988>
 8014676:	9a08      	ldr	r2, [sp, #32]
 8014678:	bb12      	cbnz	r2, 80146c0 <_dtoa_r+0x988>
 801467a:	9a07      	ldr	r2, [sp, #28]
 801467c:	bb02      	cbnz	r2, 80146c0 <_dtoa_r+0x988>
 801467e:	2b00      	cmp	r3, #0
 8014680:	ddec      	ble.n	801465c <_dtoa_r+0x924>
 8014682:	2201      	movs	r2, #1
 8014684:	9901      	ldr	r1, [sp, #4]
 8014686:	4620      	mov	r0, r4
 8014688:	f000 fdec 	bl	8015264 <__lshift>
 801468c:	4629      	mov	r1, r5
 801468e:	9001      	str	r0, [sp, #4]
 8014690:	f000 fe3c 	bl	801530c <__mcmp>
 8014694:	2800      	cmp	r0, #0
 8014696:	dc03      	bgt.n	80146a0 <_dtoa_r+0x968>
 8014698:	d1e0      	bne.n	801465c <_dtoa_r+0x924>
 801469a:	f018 0f01 	tst.w	r8, #1
 801469e:	d0dd      	beq.n	801465c <_dtoa_r+0x924>
 80146a0:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80146a4:	d1d8      	bne.n	8014658 <_dtoa_r+0x920>
 80146a6:	2339      	movs	r3, #57	; 0x39
 80146a8:	f10a 0601 	add.w	r6, sl, #1
 80146ac:	f88a 3000 	strb.w	r3, [sl]
 80146b0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80146b4:	2b39      	cmp	r3, #57	; 0x39
 80146b6:	f106 32ff 	add.w	r2, r6, #4294967295
 80146ba:	d04c      	beq.n	8014756 <_dtoa_r+0xa1e>
 80146bc:	3301      	adds	r3, #1
 80146be:	e051      	b.n	8014764 <_dtoa_r+0xa2c>
 80146c0:	2b00      	cmp	r3, #0
 80146c2:	f10a 0601 	add.w	r6, sl, #1
 80146c6:	dd05      	ble.n	80146d4 <_dtoa_r+0x99c>
 80146c8:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80146cc:	d0eb      	beq.n	80146a6 <_dtoa_r+0x96e>
 80146ce:	f108 0801 	add.w	r8, r8, #1
 80146d2:	e7c5      	b.n	8014660 <_dtoa_r+0x928>
 80146d4:	9b04      	ldr	r3, [sp, #16]
 80146d6:	9a06      	ldr	r2, [sp, #24]
 80146d8:	f806 8c01 	strb.w	r8, [r6, #-1]
 80146dc:	1af3      	subs	r3, r6, r3
 80146de:	4293      	cmp	r3, r2
 80146e0:	d021      	beq.n	8014726 <_dtoa_r+0x9ee>
 80146e2:	2300      	movs	r3, #0
 80146e4:	220a      	movs	r2, #10
 80146e6:	9901      	ldr	r1, [sp, #4]
 80146e8:	4620      	mov	r0, r4
 80146ea:	f000 fc06 	bl	8014efa <__multadd>
 80146ee:	45b9      	cmp	r9, r7
 80146f0:	9001      	str	r0, [sp, #4]
 80146f2:	f04f 0300 	mov.w	r3, #0
 80146f6:	f04f 020a 	mov.w	r2, #10
 80146fa:	4649      	mov	r1, r9
 80146fc:	4620      	mov	r0, r4
 80146fe:	d105      	bne.n	801470c <_dtoa_r+0x9d4>
 8014700:	f000 fbfb 	bl	8014efa <__multadd>
 8014704:	4681      	mov	r9, r0
 8014706:	4607      	mov	r7, r0
 8014708:	46b2      	mov	sl, r6
 801470a:	e779      	b.n	8014600 <_dtoa_r+0x8c8>
 801470c:	f000 fbf5 	bl	8014efa <__multadd>
 8014710:	4639      	mov	r1, r7
 8014712:	4681      	mov	r9, r0
 8014714:	2300      	movs	r3, #0
 8014716:	220a      	movs	r2, #10
 8014718:	4620      	mov	r0, r4
 801471a:	f000 fbee 	bl	8014efa <__multadd>
 801471e:	4607      	mov	r7, r0
 8014720:	e7f2      	b.n	8014708 <_dtoa_r+0x9d0>
 8014722:	f04f 0900 	mov.w	r9, #0
 8014726:	2201      	movs	r2, #1
 8014728:	9901      	ldr	r1, [sp, #4]
 801472a:	4620      	mov	r0, r4
 801472c:	f000 fd9a 	bl	8015264 <__lshift>
 8014730:	4629      	mov	r1, r5
 8014732:	9001      	str	r0, [sp, #4]
 8014734:	f000 fdea 	bl	801530c <__mcmp>
 8014738:	2800      	cmp	r0, #0
 801473a:	dcb9      	bgt.n	80146b0 <_dtoa_r+0x978>
 801473c:	d102      	bne.n	8014744 <_dtoa_r+0xa0c>
 801473e:	f018 0f01 	tst.w	r8, #1
 8014742:	d1b5      	bne.n	80146b0 <_dtoa_r+0x978>
 8014744:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8014748:	2b30      	cmp	r3, #48	; 0x30
 801474a:	f106 32ff 	add.w	r2, r6, #4294967295
 801474e:	f47f af11 	bne.w	8014574 <_dtoa_r+0x83c>
 8014752:	4616      	mov	r6, r2
 8014754:	e7f6      	b.n	8014744 <_dtoa_r+0xa0c>
 8014756:	9b04      	ldr	r3, [sp, #16]
 8014758:	4293      	cmp	r3, r2
 801475a:	d105      	bne.n	8014768 <_dtoa_r+0xa30>
 801475c:	9a04      	ldr	r2, [sp, #16]
 801475e:	f10b 0b01 	add.w	fp, fp, #1
 8014762:	2331      	movs	r3, #49	; 0x31
 8014764:	7013      	strb	r3, [r2, #0]
 8014766:	e705      	b.n	8014574 <_dtoa_r+0x83c>
 8014768:	4616      	mov	r6, r2
 801476a:	e7a1      	b.n	80146b0 <_dtoa_r+0x978>
 801476c:	4b16      	ldr	r3, [pc, #88]	; (80147c8 <_dtoa_r+0xa90>)
 801476e:	f7ff bb48 	b.w	8013e02 <_dtoa_r+0xca>
 8014772:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014774:	2b00      	cmp	r3, #0
 8014776:	f47f ab23 	bne.w	8013dc0 <_dtoa_r+0x88>
 801477a:	4b14      	ldr	r3, [pc, #80]	; (80147cc <_dtoa_r+0xa94>)
 801477c:	f7ff bb41 	b.w	8013e02 <_dtoa_r+0xca>
 8014780:	9b08      	ldr	r3, [sp, #32]
 8014782:	2b01      	cmp	r3, #1
 8014784:	f77f ae3b 	ble.w	80143fe <_dtoa_r+0x6c6>
 8014788:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 801478c:	e64f      	b.n	801442e <_dtoa_r+0x6f6>
 801478e:	9b06      	ldr	r3, [sp, #24]
 8014790:	2b00      	cmp	r3, #0
 8014792:	dc03      	bgt.n	801479c <_dtoa_r+0xa64>
 8014794:	9b08      	ldr	r3, [sp, #32]
 8014796:	2b02      	cmp	r3, #2
 8014798:	f73f aed7 	bgt.w	801454a <_dtoa_r+0x812>
 801479c:	9e04      	ldr	r6, [sp, #16]
 801479e:	9801      	ldr	r0, [sp, #4]
 80147a0:	4629      	mov	r1, r5
 80147a2:	f7ff fa3d 	bl	8013c20 <quorem>
 80147a6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80147aa:	f806 8b01 	strb.w	r8, [r6], #1
 80147ae:	9b04      	ldr	r3, [sp, #16]
 80147b0:	9a06      	ldr	r2, [sp, #24]
 80147b2:	1af3      	subs	r3, r6, r3
 80147b4:	429a      	cmp	r2, r3
 80147b6:	ddb4      	ble.n	8014722 <_dtoa_r+0x9ea>
 80147b8:	2300      	movs	r3, #0
 80147ba:	220a      	movs	r2, #10
 80147bc:	9901      	ldr	r1, [sp, #4]
 80147be:	4620      	mov	r0, r4
 80147c0:	f000 fb9b 	bl	8014efa <__multadd>
 80147c4:	9001      	str	r0, [sp, #4]
 80147c6:	e7ea      	b.n	801479e <_dtoa_r+0xa66>
 80147c8:	08015888 	.word	0x08015888
 80147cc:	080158e0 	.word	0x080158e0

080147d0 <rshift>:
 80147d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80147d2:	6906      	ldr	r6, [r0, #16]
 80147d4:	114b      	asrs	r3, r1, #5
 80147d6:	429e      	cmp	r6, r3
 80147d8:	f100 0414 	add.w	r4, r0, #20
 80147dc:	dd30      	ble.n	8014840 <rshift+0x70>
 80147de:	f011 011f 	ands.w	r1, r1, #31
 80147e2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80147e6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80147ea:	d108      	bne.n	80147fe <rshift+0x2e>
 80147ec:	4621      	mov	r1, r4
 80147ee:	42b2      	cmp	r2, r6
 80147f0:	460b      	mov	r3, r1
 80147f2:	d211      	bcs.n	8014818 <rshift+0x48>
 80147f4:	f852 3b04 	ldr.w	r3, [r2], #4
 80147f8:	f841 3b04 	str.w	r3, [r1], #4
 80147fc:	e7f7      	b.n	80147ee <rshift+0x1e>
 80147fe:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8014802:	f1c1 0c20 	rsb	ip, r1, #32
 8014806:	40cd      	lsrs	r5, r1
 8014808:	3204      	adds	r2, #4
 801480a:	4623      	mov	r3, r4
 801480c:	42b2      	cmp	r2, r6
 801480e:	4617      	mov	r7, r2
 8014810:	d30c      	bcc.n	801482c <rshift+0x5c>
 8014812:	601d      	str	r5, [r3, #0]
 8014814:	b105      	cbz	r5, 8014818 <rshift+0x48>
 8014816:	3304      	adds	r3, #4
 8014818:	1b1a      	subs	r2, r3, r4
 801481a:	42a3      	cmp	r3, r4
 801481c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8014820:	bf08      	it	eq
 8014822:	2300      	moveq	r3, #0
 8014824:	6102      	str	r2, [r0, #16]
 8014826:	bf08      	it	eq
 8014828:	6143      	streq	r3, [r0, #20]
 801482a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801482c:	683f      	ldr	r7, [r7, #0]
 801482e:	fa07 f70c 	lsl.w	r7, r7, ip
 8014832:	433d      	orrs	r5, r7
 8014834:	f843 5b04 	str.w	r5, [r3], #4
 8014838:	f852 5b04 	ldr.w	r5, [r2], #4
 801483c:	40cd      	lsrs	r5, r1
 801483e:	e7e5      	b.n	801480c <rshift+0x3c>
 8014840:	4623      	mov	r3, r4
 8014842:	e7e9      	b.n	8014818 <rshift+0x48>

08014844 <__hexdig_fun>:
 8014844:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8014848:	2b09      	cmp	r3, #9
 801484a:	d802      	bhi.n	8014852 <__hexdig_fun+0xe>
 801484c:	3820      	subs	r0, #32
 801484e:	b2c0      	uxtb	r0, r0
 8014850:	4770      	bx	lr
 8014852:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8014856:	2b05      	cmp	r3, #5
 8014858:	d801      	bhi.n	801485e <__hexdig_fun+0x1a>
 801485a:	3847      	subs	r0, #71	; 0x47
 801485c:	e7f7      	b.n	801484e <__hexdig_fun+0xa>
 801485e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8014862:	2b05      	cmp	r3, #5
 8014864:	d801      	bhi.n	801486a <__hexdig_fun+0x26>
 8014866:	3827      	subs	r0, #39	; 0x27
 8014868:	e7f1      	b.n	801484e <__hexdig_fun+0xa>
 801486a:	2000      	movs	r0, #0
 801486c:	4770      	bx	lr

0801486e <__gethex>:
 801486e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014872:	b08b      	sub	sp, #44	; 0x2c
 8014874:	468a      	mov	sl, r1
 8014876:	9002      	str	r0, [sp, #8]
 8014878:	9816      	ldr	r0, [sp, #88]	; 0x58
 801487a:	9306      	str	r3, [sp, #24]
 801487c:	4690      	mov	r8, r2
 801487e:	f000 facd 	bl	8014e1c <__localeconv_l>
 8014882:	6803      	ldr	r3, [r0, #0]
 8014884:	9303      	str	r3, [sp, #12]
 8014886:	4618      	mov	r0, r3
 8014888:	f7eb fd26 	bl	80002d8 <strlen>
 801488c:	9b03      	ldr	r3, [sp, #12]
 801488e:	9001      	str	r0, [sp, #4]
 8014890:	4403      	add	r3, r0
 8014892:	f04f 0b00 	mov.w	fp, #0
 8014896:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801489a:	9307      	str	r3, [sp, #28]
 801489c:	f8da 3000 	ldr.w	r3, [sl]
 80148a0:	3302      	adds	r3, #2
 80148a2:	461f      	mov	r7, r3
 80148a4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80148a8:	2830      	cmp	r0, #48	; 0x30
 80148aa:	d06c      	beq.n	8014986 <__gethex+0x118>
 80148ac:	f7ff ffca 	bl	8014844 <__hexdig_fun>
 80148b0:	4604      	mov	r4, r0
 80148b2:	2800      	cmp	r0, #0
 80148b4:	d16a      	bne.n	801498c <__gethex+0x11e>
 80148b6:	9a01      	ldr	r2, [sp, #4]
 80148b8:	9903      	ldr	r1, [sp, #12]
 80148ba:	4638      	mov	r0, r7
 80148bc:	f000 fee0 	bl	8015680 <strncmp>
 80148c0:	2800      	cmp	r0, #0
 80148c2:	d166      	bne.n	8014992 <__gethex+0x124>
 80148c4:	9b01      	ldr	r3, [sp, #4]
 80148c6:	5cf8      	ldrb	r0, [r7, r3]
 80148c8:	18fe      	adds	r6, r7, r3
 80148ca:	f7ff ffbb 	bl	8014844 <__hexdig_fun>
 80148ce:	2800      	cmp	r0, #0
 80148d0:	d062      	beq.n	8014998 <__gethex+0x12a>
 80148d2:	4633      	mov	r3, r6
 80148d4:	7818      	ldrb	r0, [r3, #0]
 80148d6:	2830      	cmp	r0, #48	; 0x30
 80148d8:	461f      	mov	r7, r3
 80148da:	f103 0301 	add.w	r3, r3, #1
 80148de:	d0f9      	beq.n	80148d4 <__gethex+0x66>
 80148e0:	f7ff ffb0 	bl	8014844 <__hexdig_fun>
 80148e4:	fab0 f580 	clz	r5, r0
 80148e8:	096d      	lsrs	r5, r5, #5
 80148ea:	4634      	mov	r4, r6
 80148ec:	f04f 0b01 	mov.w	fp, #1
 80148f0:	463a      	mov	r2, r7
 80148f2:	4616      	mov	r6, r2
 80148f4:	3201      	adds	r2, #1
 80148f6:	7830      	ldrb	r0, [r6, #0]
 80148f8:	f7ff ffa4 	bl	8014844 <__hexdig_fun>
 80148fc:	2800      	cmp	r0, #0
 80148fe:	d1f8      	bne.n	80148f2 <__gethex+0x84>
 8014900:	9a01      	ldr	r2, [sp, #4]
 8014902:	9903      	ldr	r1, [sp, #12]
 8014904:	4630      	mov	r0, r6
 8014906:	f000 febb 	bl	8015680 <strncmp>
 801490a:	b950      	cbnz	r0, 8014922 <__gethex+0xb4>
 801490c:	b954      	cbnz	r4, 8014924 <__gethex+0xb6>
 801490e:	9b01      	ldr	r3, [sp, #4]
 8014910:	18f4      	adds	r4, r6, r3
 8014912:	4622      	mov	r2, r4
 8014914:	4616      	mov	r6, r2
 8014916:	3201      	adds	r2, #1
 8014918:	7830      	ldrb	r0, [r6, #0]
 801491a:	f7ff ff93 	bl	8014844 <__hexdig_fun>
 801491e:	2800      	cmp	r0, #0
 8014920:	d1f8      	bne.n	8014914 <__gethex+0xa6>
 8014922:	b10c      	cbz	r4, 8014928 <__gethex+0xba>
 8014924:	1ba4      	subs	r4, r4, r6
 8014926:	00a4      	lsls	r4, r4, #2
 8014928:	7833      	ldrb	r3, [r6, #0]
 801492a:	2b50      	cmp	r3, #80	; 0x50
 801492c:	d001      	beq.n	8014932 <__gethex+0xc4>
 801492e:	2b70      	cmp	r3, #112	; 0x70
 8014930:	d140      	bne.n	80149b4 <__gethex+0x146>
 8014932:	7873      	ldrb	r3, [r6, #1]
 8014934:	2b2b      	cmp	r3, #43	; 0x2b
 8014936:	d031      	beq.n	801499c <__gethex+0x12e>
 8014938:	2b2d      	cmp	r3, #45	; 0x2d
 801493a:	d033      	beq.n	80149a4 <__gethex+0x136>
 801493c:	1c71      	adds	r1, r6, #1
 801493e:	f04f 0900 	mov.w	r9, #0
 8014942:	7808      	ldrb	r0, [r1, #0]
 8014944:	f7ff ff7e 	bl	8014844 <__hexdig_fun>
 8014948:	1e43      	subs	r3, r0, #1
 801494a:	b2db      	uxtb	r3, r3
 801494c:	2b18      	cmp	r3, #24
 801494e:	d831      	bhi.n	80149b4 <__gethex+0x146>
 8014950:	f1a0 0210 	sub.w	r2, r0, #16
 8014954:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8014958:	f7ff ff74 	bl	8014844 <__hexdig_fun>
 801495c:	1e43      	subs	r3, r0, #1
 801495e:	b2db      	uxtb	r3, r3
 8014960:	2b18      	cmp	r3, #24
 8014962:	d922      	bls.n	80149aa <__gethex+0x13c>
 8014964:	f1b9 0f00 	cmp.w	r9, #0
 8014968:	d000      	beq.n	801496c <__gethex+0xfe>
 801496a:	4252      	negs	r2, r2
 801496c:	4414      	add	r4, r2
 801496e:	f8ca 1000 	str.w	r1, [sl]
 8014972:	b30d      	cbz	r5, 80149b8 <__gethex+0x14a>
 8014974:	f1bb 0f00 	cmp.w	fp, #0
 8014978:	bf0c      	ite	eq
 801497a:	2706      	moveq	r7, #6
 801497c:	2700      	movne	r7, #0
 801497e:	4638      	mov	r0, r7
 8014980:	b00b      	add	sp, #44	; 0x2c
 8014982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014986:	f10b 0b01 	add.w	fp, fp, #1
 801498a:	e78a      	b.n	80148a2 <__gethex+0x34>
 801498c:	2500      	movs	r5, #0
 801498e:	462c      	mov	r4, r5
 8014990:	e7ae      	b.n	80148f0 <__gethex+0x82>
 8014992:	463e      	mov	r6, r7
 8014994:	2501      	movs	r5, #1
 8014996:	e7c7      	b.n	8014928 <__gethex+0xba>
 8014998:	4604      	mov	r4, r0
 801499a:	e7fb      	b.n	8014994 <__gethex+0x126>
 801499c:	f04f 0900 	mov.w	r9, #0
 80149a0:	1cb1      	adds	r1, r6, #2
 80149a2:	e7ce      	b.n	8014942 <__gethex+0xd4>
 80149a4:	f04f 0901 	mov.w	r9, #1
 80149a8:	e7fa      	b.n	80149a0 <__gethex+0x132>
 80149aa:	230a      	movs	r3, #10
 80149ac:	fb03 0202 	mla	r2, r3, r2, r0
 80149b0:	3a10      	subs	r2, #16
 80149b2:	e7cf      	b.n	8014954 <__gethex+0xe6>
 80149b4:	4631      	mov	r1, r6
 80149b6:	e7da      	b.n	801496e <__gethex+0x100>
 80149b8:	1bf3      	subs	r3, r6, r7
 80149ba:	3b01      	subs	r3, #1
 80149bc:	4629      	mov	r1, r5
 80149be:	2b07      	cmp	r3, #7
 80149c0:	dc49      	bgt.n	8014a56 <__gethex+0x1e8>
 80149c2:	9802      	ldr	r0, [sp, #8]
 80149c4:	f000 fa4e 	bl	8014e64 <_Balloc>
 80149c8:	9b01      	ldr	r3, [sp, #4]
 80149ca:	f100 0914 	add.w	r9, r0, #20
 80149ce:	f04f 0b00 	mov.w	fp, #0
 80149d2:	f1c3 0301 	rsb	r3, r3, #1
 80149d6:	4605      	mov	r5, r0
 80149d8:	f8cd 9010 	str.w	r9, [sp, #16]
 80149dc:	46da      	mov	sl, fp
 80149de:	9308      	str	r3, [sp, #32]
 80149e0:	42b7      	cmp	r7, r6
 80149e2:	d33b      	bcc.n	8014a5c <__gethex+0x1ee>
 80149e4:	9804      	ldr	r0, [sp, #16]
 80149e6:	f840 ab04 	str.w	sl, [r0], #4
 80149ea:	eba0 0009 	sub.w	r0, r0, r9
 80149ee:	1080      	asrs	r0, r0, #2
 80149f0:	6128      	str	r0, [r5, #16]
 80149f2:	0147      	lsls	r7, r0, #5
 80149f4:	4650      	mov	r0, sl
 80149f6:	f000 faf9 	bl	8014fec <__hi0bits>
 80149fa:	f8d8 6000 	ldr.w	r6, [r8]
 80149fe:	1a3f      	subs	r7, r7, r0
 8014a00:	42b7      	cmp	r7, r6
 8014a02:	dd64      	ble.n	8014ace <__gethex+0x260>
 8014a04:	1bbf      	subs	r7, r7, r6
 8014a06:	4639      	mov	r1, r7
 8014a08:	4628      	mov	r0, r5
 8014a0a:	f000 fe0a 	bl	8015622 <__any_on>
 8014a0e:	4682      	mov	sl, r0
 8014a10:	b178      	cbz	r0, 8014a32 <__gethex+0x1c4>
 8014a12:	1e7b      	subs	r3, r7, #1
 8014a14:	1159      	asrs	r1, r3, #5
 8014a16:	f003 021f 	and.w	r2, r3, #31
 8014a1a:	f04f 0a01 	mov.w	sl, #1
 8014a1e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8014a22:	fa0a f202 	lsl.w	r2, sl, r2
 8014a26:	420a      	tst	r2, r1
 8014a28:	d003      	beq.n	8014a32 <__gethex+0x1c4>
 8014a2a:	4553      	cmp	r3, sl
 8014a2c:	dc46      	bgt.n	8014abc <__gethex+0x24e>
 8014a2e:	f04f 0a02 	mov.w	sl, #2
 8014a32:	4639      	mov	r1, r7
 8014a34:	4628      	mov	r0, r5
 8014a36:	f7ff fecb 	bl	80147d0 <rshift>
 8014a3a:	443c      	add	r4, r7
 8014a3c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014a40:	42a3      	cmp	r3, r4
 8014a42:	da52      	bge.n	8014aea <__gethex+0x27c>
 8014a44:	4629      	mov	r1, r5
 8014a46:	9802      	ldr	r0, [sp, #8]
 8014a48:	f000 fa40 	bl	8014ecc <_Bfree>
 8014a4c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014a4e:	2300      	movs	r3, #0
 8014a50:	6013      	str	r3, [r2, #0]
 8014a52:	27a3      	movs	r7, #163	; 0xa3
 8014a54:	e793      	b.n	801497e <__gethex+0x110>
 8014a56:	3101      	adds	r1, #1
 8014a58:	105b      	asrs	r3, r3, #1
 8014a5a:	e7b0      	b.n	80149be <__gethex+0x150>
 8014a5c:	1e73      	subs	r3, r6, #1
 8014a5e:	9305      	str	r3, [sp, #20]
 8014a60:	9a07      	ldr	r2, [sp, #28]
 8014a62:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8014a66:	4293      	cmp	r3, r2
 8014a68:	d018      	beq.n	8014a9c <__gethex+0x22e>
 8014a6a:	f1bb 0f20 	cmp.w	fp, #32
 8014a6e:	d107      	bne.n	8014a80 <__gethex+0x212>
 8014a70:	9b04      	ldr	r3, [sp, #16]
 8014a72:	f8c3 a000 	str.w	sl, [r3]
 8014a76:	3304      	adds	r3, #4
 8014a78:	f04f 0a00 	mov.w	sl, #0
 8014a7c:	9304      	str	r3, [sp, #16]
 8014a7e:	46d3      	mov	fp, sl
 8014a80:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8014a84:	f7ff fede 	bl	8014844 <__hexdig_fun>
 8014a88:	f000 000f 	and.w	r0, r0, #15
 8014a8c:	fa00 f00b 	lsl.w	r0, r0, fp
 8014a90:	ea4a 0a00 	orr.w	sl, sl, r0
 8014a94:	f10b 0b04 	add.w	fp, fp, #4
 8014a98:	9b05      	ldr	r3, [sp, #20]
 8014a9a:	e00d      	b.n	8014ab8 <__gethex+0x24a>
 8014a9c:	9b05      	ldr	r3, [sp, #20]
 8014a9e:	9a08      	ldr	r2, [sp, #32]
 8014aa0:	4413      	add	r3, r2
 8014aa2:	42bb      	cmp	r3, r7
 8014aa4:	d3e1      	bcc.n	8014a6a <__gethex+0x1fc>
 8014aa6:	4618      	mov	r0, r3
 8014aa8:	9a01      	ldr	r2, [sp, #4]
 8014aaa:	9903      	ldr	r1, [sp, #12]
 8014aac:	9309      	str	r3, [sp, #36]	; 0x24
 8014aae:	f000 fde7 	bl	8015680 <strncmp>
 8014ab2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014ab4:	2800      	cmp	r0, #0
 8014ab6:	d1d8      	bne.n	8014a6a <__gethex+0x1fc>
 8014ab8:	461e      	mov	r6, r3
 8014aba:	e791      	b.n	80149e0 <__gethex+0x172>
 8014abc:	1eb9      	subs	r1, r7, #2
 8014abe:	4628      	mov	r0, r5
 8014ac0:	f000 fdaf 	bl	8015622 <__any_on>
 8014ac4:	2800      	cmp	r0, #0
 8014ac6:	d0b2      	beq.n	8014a2e <__gethex+0x1c0>
 8014ac8:	f04f 0a03 	mov.w	sl, #3
 8014acc:	e7b1      	b.n	8014a32 <__gethex+0x1c4>
 8014ace:	da09      	bge.n	8014ae4 <__gethex+0x276>
 8014ad0:	1bf7      	subs	r7, r6, r7
 8014ad2:	4629      	mov	r1, r5
 8014ad4:	463a      	mov	r2, r7
 8014ad6:	9802      	ldr	r0, [sp, #8]
 8014ad8:	f000 fbc4 	bl	8015264 <__lshift>
 8014adc:	1be4      	subs	r4, r4, r7
 8014ade:	4605      	mov	r5, r0
 8014ae0:	f100 0914 	add.w	r9, r0, #20
 8014ae4:	f04f 0a00 	mov.w	sl, #0
 8014ae8:	e7a8      	b.n	8014a3c <__gethex+0x1ce>
 8014aea:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8014aee:	42a0      	cmp	r0, r4
 8014af0:	dd6a      	ble.n	8014bc8 <__gethex+0x35a>
 8014af2:	1b04      	subs	r4, r0, r4
 8014af4:	42a6      	cmp	r6, r4
 8014af6:	dc2e      	bgt.n	8014b56 <__gethex+0x2e8>
 8014af8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014afc:	2b02      	cmp	r3, #2
 8014afe:	d022      	beq.n	8014b46 <__gethex+0x2d8>
 8014b00:	2b03      	cmp	r3, #3
 8014b02:	d024      	beq.n	8014b4e <__gethex+0x2e0>
 8014b04:	2b01      	cmp	r3, #1
 8014b06:	d115      	bne.n	8014b34 <__gethex+0x2c6>
 8014b08:	42a6      	cmp	r6, r4
 8014b0a:	d113      	bne.n	8014b34 <__gethex+0x2c6>
 8014b0c:	2e01      	cmp	r6, #1
 8014b0e:	dc0b      	bgt.n	8014b28 <__gethex+0x2ba>
 8014b10:	9a06      	ldr	r2, [sp, #24]
 8014b12:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014b16:	6013      	str	r3, [r2, #0]
 8014b18:	2301      	movs	r3, #1
 8014b1a:	612b      	str	r3, [r5, #16]
 8014b1c:	f8c9 3000 	str.w	r3, [r9]
 8014b20:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014b22:	2762      	movs	r7, #98	; 0x62
 8014b24:	601d      	str	r5, [r3, #0]
 8014b26:	e72a      	b.n	801497e <__gethex+0x110>
 8014b28:	1e71      	subs	r1, r6, #1
 8014b2a:	4628      	mov	r0, r5
 8014b2c:	f000 fd79 	bl	8015622 <__any_on>
 8014b30:	2800      	cmp	r0, #0
 8014b32:	d1ed      	bne.n	8014b10 <__gethex+0x2a2>
 8014b34:	4629      	mov	r1, r5
 8014b36:	9802      	ldr	r0, [sp, #8]
 8014b38:	f000 f9c8 	bl	8014ecc <_Bfree>
 8014b3c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014b3e:	2300      	movs	r3, #0
 8014b40:	6013      	str	r3, [r2, #0]
 8014b42:	2750      	movs	r7, #80	; 0x50
 8014b44:	e71b      	b.n	801497e <__gethex+0x110>
 8014b46:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014b48:	2b00      	cmp	r3, #0
 8014b4a:	d0e1      	beq.n	8014b10 <__gethex+0x2a2>
 8014b4c:	e7f2      	b.n	8014b34 <__gethex+0x2c6>
 8014b4e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014b50:	2b00      	cmp	r3, #0
 8014b52:	d1dd      	bne.n	8014b10 <__gethex+0x2a2>
 8014b54:	e7ee      	b.n	8014b34 <__gethex+0x2c6>
 8014b56:	1e67      	subs	r7, r4, #1
 8014b58:	f1ba 0f00 	cmp.w	sl, #0
 8014b5c:	d131      	bne.n	8014bc2 <__gethex+0x354>
 8014b5e:	b127      	cbz	r7, 8014b6a <__gethex+0x2fc>
 8014b60:	4639      	mov	r1, r7
 8014b62:	4628      	mov	r0, r5
 8014b64:	f000 fd5d 	bl	8015622 <__any_on>
 8014b68:	4682      	mov	sl, r0
 8014b6a:	117a      	asrs	r2, r7, #5
 8014b6c:	2301      	movs	r3, #1
 8014b6e:	f007 071f 	and.w	r7, r7, #31
 8014b72:	fa03 f707 	lsl.w	r7, r3, r7
 8014b76:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8014b7a:	4621      	mov	r1, r4
 8014b7c:	421f      	tst	r7, r3
 8014b7e:	4628      	mov	r0, r5
 8014b80:	bf18      	it	ne
 8014b82:	f04a 0a02 	orrne.w	sl, sl, #2
 8014b86:	1b36      	subs	r6, r6, r4
 8014b88:	f7ff fe22 	bl	80147d0 <rshift>
 8014b8c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8014b90:	2702      	movs	r7, #2
 8014b92:	f1ba 0f00 	cmp.w	sl, #0
 8014b96:	d048      	beq.n	8014c2a <__gethex+0x3bc>
 8014b98:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014b9c:	2b02      	cmp	r3, #2
 8014b9e:	d015      	beq.n	8014bcc <__gethex+0x35e>
 8014ba0:	2b03      	cmp	r3, #3
 8014ba2:	d017      	beq.n	8014bd4 <__gethex+0x366>
 8014ba4:	2b01      	cmp	r3, #1
 8014ba6:	d109      	bne.n	8014bbc <__gethex+0x34e>
 8014ba8:	f01a 0f02 	tst.w	sl, #2
 8014bac:	d006      	beq.n	8014bbc <__gethex+0x34e>
 8014bae:	f8d9 3000 	ldr.w	r3, [r9]
 8014bb2:	ea4a 0a03 	orr.w	sl, sl, r3
 8014bb6:	f01a 0f01 	tst.w	sl, #1
 8014bba:	d10e      	bne.n	8014bda <__gethex+0x36c>
 8014bbc:	f047 0710 	orr.w	r7, r7, #16
 8014bc0:	e033      	b.n	8014c2a <__gethex+0x3bc>
 8014bc2:	f04f 0a01 	mov.w	sl, #1
 8014bc6:	e7d0      	b.n	8014b6a <__gethex+0x2fc>
 8014bc8:	2701      	movs	r7, #1
 8014bca:	e7e2      	b.n	8014b92 <__gethex+0x324>
 8014bcc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014bce:	f1c3 0301 	rsb	r3, r3, #1
 8014bd2:	9315      	str	r3, [sp, #84]	; 0x54
 8014bd4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014bd6:	2b00      	cmp	r3, #0
 8014bd8:	d0f0      	beq.n	8014bbc <__gethex+0x34e>
 8014bda:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8014bde:	f105 0314 	add.w	r3, r5, #20
 8014be2:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8014be6:	eb03 010a 	add.w	r1, r3, sl
 8014bea:	f04f 0c00 	mov.w	ip, #0
 8014bee:	4618      	mov	r0, r3
 8014bf0:	f853 2b04 	ldr.w	r2, [r3], #4
 8014bf4:	f1b2 3fff 	cmp.w	r2, #4294967295
 8014bf8:	d01c      	beq.n	8014c34 <__gethex+0x3c6>
 8014bfa:	3201      	adds	r2, #1
 8014bfc:	6002      	str	r2, [r0, #0]
 8014bfe:	2f02      	cmp	r7, #2
 8014c00:	f105 0314 	add.w	r3, r5, #20
 8014c04:	d138      	bne.n	8014c78 <__gethex+0x40a>
 8014c06:	f8d8 2000 	ldr.w	r2, [r8]
 8014c0a:	3a01      	subs	r2, #1
 8014c0c:	42b2      	cmp	r2, r6
 8014c0e:	d10a      	bne.n	8014c26 <__gethex+0x3b8>
 8014c10:	1171      	asrs	r1, r6, #5
 8014c12:	2201      	movs	r2, #1
 8014c14:	f006 061f 	and.w	r6, r6, #31
 8014c18:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014c1c:	fa02 f606 	lsl.w	r6, r2, r6
 8014c20:	421e      	tst	r6, r3
 8014c22:	bf18      	it	ne
 8014c24:	4617      	movne	r7, r2
 8014c26:	f047 0720 	orr.w	r7, r7, #32
 8014c2a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014c2c:	601d      	str	r5, [r3, #0]
 8014c2e:	9b06      	ldr	r3, [sp, #24]
 8014c30:	601c      	str	r4, [r3, #0]
 8014c32:	e6a4      	b.n	801497e <__gethex+0x110>
 8014c34:	4299      	cmp	r1, r3
 8014c36:	f843 cc04 	str.w	ip, [r3, #-4]
 8014c3a:	d8d8      	bhi.n	8014bee <__gethex+0x380>
 8014c3c:	68ab      	ldr	r3, [r5, #8]
 8014c3e:	4599      	cmp	r9, r3
 8014c40:	db12      	blt.n	8014c68 <__gethex+0x3fa>
 8014c42:	6869      	ldr	r1, [r5, #4]
 8014c44:	9802      	ldr	r0, [sp, #8]
 8014c46:	3101      	adds	r1, #1
 8014c48:	f000 f90c 	bl	8014e64 <_Balloc>
 8014c4c:	692a      	ldr	r2, [r5, #16]
 8014c4e:	3202      	adds	r2, #2
 8014c50:	f105 010c 	add.w	r1, r5, #12
 8014c54:	4683      	mov	fp, r0
 8014c56:	0092      	lsls	r2, r2, #2
 8014c58:	300c      	adds	r0, #12
 8014c5a:	f7fd fdf7 	bl	801284c <memcpy>
 8014c5e:	4629      	mov	r1, r5
 8014c60:	9802      	ldr	r0, [sp, #8]
 8014c62:	f000 f933 	bl	8014ecc <_Bfree>
 8014c66:	465d      	mov	r5, fp
 8014c68:	692b      	ldr	r3, [r5, #16]
 8014c6a:	1c5a      	adds	r2, r3, #1
 8014c6c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8014c70:	612a      	str	r2, [r5, #16]
 8014c72:	2201      	movs	r2, #1
 8014c74:	615a      	str	r2, [r3, #20]
 8014c76:	e7c2      	b.n	8014bfe <__gethex+0x390>
 8014c78:	692a      	ldr	r2, [r5, #16]
 8014c7a:	454a      	cmp	r2, r9
 8014c7c:	dd0b      	ble.n	8014c96 <__gethex+0x428>
 8014c7e:	2101      	movs	r1, #1
 8014c80:	4628      	mov	r0, r5
 8014c82:	f7ff fda5 	bl	80147d0 <rshift>
 8014c86:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014c8a:	3401      	adds	r4, #1
 8014c8c:	42a3      	cmp	r3, r4
 8014c8e:	f6ff aed9 	blt.w	8014a44 <__gethex+0x1d6>
 8014c92:	2701      	movs	r7, #1
 8014c94:	e7c7      	b.n	8014c26 <__gethex+0x3b8>
 8014c96:	f016 061f 	ands.w	r6, r6, #31
 8014c9a:	d0fa      	beq.n	8014c92 <__gethex+0x424>
 8014c9c:	449a      	add	sl, r3
 8014c9e:	f1c6 0620 	rsb	r6, r6, #32
 8014ca2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8014ca6:	f000 f9a1 	bl	8014fec <__hi0bits>
 8014caa:	42b0      	cmp	r0, r6
 8014cac:	dbe7      	blt.n	8014c7e <__gethex+0x410>
 8014cae:	e7f0      	b.n	8014c92 <__gethex+0x424>

08014cb0 <L_shift>:
 8014cb0:	f1c2 0208 	rsb	r2, r2, #8
 8014cb4:	0092      	lsls	r2, r2, #2
 8014cb6:	b570      	push	{r4, r5, r6, lr}
 8014cb8:	f1c2 0620 	rsb	r6, r2, #32
 8014cbc:	6843      	ldr	r3, [r0, #4]
 8014cbe:	6804      	ldr	r4, [r0, #0]
 8014cc0:	fa03 f506 	lsl.w	r5, r3, r6
 8014cc4:	432c      	orrs	r4, r5
 8014cc6:	40d3      	lsrs	r3, r2
 8014cc8:	6004      	str	r4, [r0, #0]
 8014cca:	f840 3f04 	str.w	r3, [r0, #4]!
 8014cce:	4288      	cmp	r0, r1
 8014cd0:	d3f4      	bcc.n	8014cbc <L_shift+0xc>
 8014cd2:	bd70      	pop	{r4, r5, r6, pc}

08014cd4 <__match>:
 8014cd4:	b530      	push	{r4, r5, lr}
 8014cd6:	6803      	ldr	r3, [r0, #0]
 8014cd8:	3301      	adds	r3, #1
 8014cda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014cde:	b914      	cbnz	r4, 8014ce6 <__match+0x12>
 8014ce0:	6003      	str	r3, [r0, #0]
 8014ce2:	2001      	movs	r0, #1
 8014ce4:	bd30      	pop	{r4, r5, pc}
 8014ce6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014cea:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8014cee:	2d19      	cmp	r5, #25
 8014cf0:	bf98      	it	ls
 8014cf2:	3220      	addls	r2, #32
 8014cf4:	42a2      	cmp	r2, r4
 8014cf6:	d0f0      	beq.n	8014cda <__match+0x6>
 8014cf8:	2000      	movs	r0, #0
 8014cfa:	e7f3      	b.n	8014ce4 <__match+0x10>

08014cfc <__hexnan>:
 8014cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d00:	680b      	ldr	r3, [r1, #0]
 8014d02:	6801      	ldr	r1, [r0, #0]
 8014d04:	115f      	asrs	r7, r3, #5
 8014d06:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8014d0a:	f013 031f 	ands.w	r3, r3, #31
 8014d0e:	b087      	sub	sp, #28
 8014d10:	bf18      	it	ne
 8014d12:	3704      	addne	r7, #4
 8014d14:	2500      	movs	r5, #0
 8014d16:	1f3e      	subs	r6, r7, #4
 8014d18:	4682      	mov	sl, r0
 8014d1a:	4690      	mov	r8, r2
 8014d1c:	9301      	str	r3, [sp, #4]
 8014d1e:	f847 5c04 	str.w	r5, [r7, #-4]
 8014d22:	46b1      	mov	r9, r6
 8014d24:	4634      	mov	r4, r6
 8014d26:	9502      	str	r5, [sp, #8]
 8014d28:	46ab      	mov	fp, r5
 8014d2a:	784a      	ldrb	r2, [r1, #1]
 8014d2c:	1c4b      	adds	r3, r1, #1
 8014d2e:	9303      	str	r3, [sp, #12]
 8014d30:	b342      	cbz	r2, 8014d84 <__hexnan+0x88>
 8014d32:	4610      	mov	r0, r2
 8014d34:	9105      	str	r1, [sp, #20]
 8014d36:	9204      	str	r2, [sp, #16]
 8014d38:	f7ff fd84 	bl	8014844 <__hexdig_fun>
 8014d3c:	2800      	cmp	r0, #0
 8014d3e:	d143      	bne.n	8014dc8 <__hexnan+0xcc>
 8014d40:	9a04      	ldr	r2, [sp, #16]
 8014d42:	9905      	ldr	r1, [sp, #20]
 8014d44:	2a20      	cmp	r2, #32
 8014d46:	d818      	bhi.n	8014d7a <__hexnan+0x7e>
 8014d48:	9b02      	ldr	r3, [sp, #8]
 8014d4a:	459b      	cmp	fp, r3
 8014d4c:	dd13      	ble.n	8014d76 <__hexnan+0x7a>
 8014d4e:	454c      	cmp	r4, r9
 8014d50:	d206      	bcs.n	8014d60 <__hexnan+0x64>
 8014d52:	2d07      	cmp	r5, #7
 8014d54:	dc04      	bgt.n	8014d60 <__hexnan+0x64>
 8014d56:	462a      	mov	r2, r5
 8014d58:	4649      	mov	r1, r9
 8014d5a:	4620      	mov	r0, r4
 8014d5c:	f7ff ffa8 	bl	8014cb0 <L_shift>
 8014d60:	4544      	cmp	r4, r8
 8014d62:	d944      	bls.n	8014dee <__hexnan+0xf2>
 8014d64:	2300      	movs	r3, #0
 8014d66:	f1a4 0904 	sub.w	r9, r4, #4
 8014d6a:	f844 3c04 	str.w	r3, [r4, #-4]
 8014d6e:	f8cd b008 	str.w	fp, [sp, #8]
 8014d72:	464c      	mov	r4, r9
 8014d74:	461d      	mov	r5, r3
 8014d76:	9903      	ldr	r1, [sp, #12]
 8014d78:	e7d7      	b.n	8014d2a <__hexnan+0x2e>
 8014d7a:	2a29      	cmp	r2, #41	; 0x29
 8014d7c:	d14a      	bne.n	8014e14 <__hexnan+0x118>
 8014d7e:	3102      	adds	r1, #2
 8014d80:	f8ca 1000 	str.w	r1, [sl]
 8014d84:	f1bb 0f00 	cmp.w	fp, #0
 8014d88:	d044      	beq.n	8014e14 <__hexnan+0x118>
 8014d8a:	454c      	cmp	r4, r9
 8014d8c:	d206      	bcs.n	8014d9c <__hexnan+0xa0>
 8014d8e:	2d07      	cmp	r5, #7
 8014d90:	dc04      	bgt.n	8014d9c <__hexnan+0xa0>
 8014d92:	462a      	mov	r2, r5
 8014d94:	4649      	mov	r1, r9
 8014d96:	4620      	mov	r0, r4
 8014d98:	f7ff ff8a 	bl	8014cb0 <L_shift>
 8014d9c:	4544      	cmp	r4, r8
 8014d9e:	d928      	bls.n	8014df2 <__hexnan+0xf6>
 8014da0:	4643      	mov	r3, r8
 8014da2:	f854 2b04 	ldr.w	r2, [r4], #4
 8014da6:	f843 2b04 	str.w	r2, [r3], #4
 8014daa:	42a6      	cmp	r6, r4
 8014dac:	d2f9      	bcs.n	8014da2 <__hexnan+0xa6>
 8014dae:	2200      	movs	r2, #0
 8014db0:	f843 2b04 	str.w	r2, [r3], #4
 8014db4:	429e      	cmp	r6, r3
 8014db6:	d2fb      	bcs.n	8014db0 <__hexnan+0xb4>
 8014db8:	6833      	ldr	r3, [r6, #0]
 8014dba:	b91b      	cbnz	r3, 8014dc4 <__hexnan+0xc8>
 8014dbc:	4546      	cmp	r6, r8
 8014dbe:	d127      	bne.n	8014e10 <__hexnan+0x114>
 8014dc0:	2301      	movs	r3, #1
 8014dc2:	6033      	str	r3, [r6, #0]
 8014dc4:	2005      	movs	r0, #5
 8014dc6:	e026      	b.n	8014e16 <__hexnan+0x11a>
 8014dc8:	3501      	adds	r5, #1
 8014dca:	2d08      	cmp	r5, #8
 8014dcc:	f10b 0b01 	add.w	fp, fp, #1
 8014dd0:	dd06      	ble.n	8014de0 <__hexnan+0xe4>
 8014dd2:	4544      	cmp	r4, r8
 8014dd4:	d9cf      	bls.n	8014d76 <__hexnan+0x7a>
 8014dd6:	2300      	movs	r3, #0
 8014dd8:	f844 3c04 	str.w	r3, [r4, #-4]
 8014ddc:	2501      	movs	r5, #1
 8014dde:	3c04      	subs	r4, #4
 8014de0:	6822      	ldr	r2, [r4, #0]
 8014de2:	f000 000f 	and.w	r0, r0, #15
 8014de6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8014dea:	6020      	str	r0, [r4, #0]
 8014dec:	e7c3      	b.n	8014d76 <__hexnan+0x7a>
 8014dee:	2508      	movs	r5, #8
 8014df0:	e7c1      	b.n	8014d76 <__hexnan+0x7a>
 8014df2:	9b01      	ldr	r3, [sp, #4]
 8014df4:	2b00      	cmp	r3, #0
 8014df6:	d0df      	beq.n	8014db8 <__hexnan+0xbc>
 8014df8:	f04f 32ff 	mov.w	r2, #4294967295
 8014dfc:	f1c3 0320 	rsb	r3, r3, #32
 8014e00:	fa22 f303 	lsr.w	r3, r2, r3
 8014e04:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8014e08:	401a      	ands	r2, r3
 8014e0a:	f847 2c04 	str.w	r2, [r7, #-4]
 8014e0e:	e7d3      	b.n	8014db8 <__hexnan+0xbc>
 8014e10:	3e04      	subs	r6, #4
 8014e12:	e7d1      	b.n	8014db8 <__hexnan+0xbc>
 8014e14:	2004      	movs	r0, #4
 8014e16:	b007      	add	sp, #28
 8014e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014e1c <__localeconv_l>:
 8014e1c:	30f0      	adds	r0, #240	; 0xf0
 8014e1e:	4770      	bx	lr

08014e20 <_localeconv_r>:
 8014e20:	4b04      	ldr	r3, [pc, #16]	; (8014e34 <_localeconv_r+0x14>)
 8014e22:	681b      	ldr	r3, [r3, #0]
 8014e24:	6a18      	ldr	r0, [r3, #32]
 8014e26:	4b04      	ldr	r3, [pc, #16]	; (8014e38 <_localeconv_r+0x18>)
 8014e28:	2800      	cmp	r0, #0
 8014e2a:	bf08      	it	eq
 8014e2c:	4618      	moveq	r0, r3
 8014e2e:	30f0      	adds	r0, #240	; 0xf0
 8014e30:	4770      	bx	lr
 8014e32:	bf00      	nop
 8014e34:	24000030 	.word	0x24000030
 8014e38:	24000094 	.word	0x24000094

08014e3c <__ascii_mbtowc>:
 8014e3c:	b082      	sub	sp, #8
 8014e3e:	b901      	cbnz	r1, 8014e42 <__ascii_mbtowc+0x6>
 8014e40:	a901      	add	r1, sp, #4
 8014e42:	b142      	cbz	r2, 8014e56 <__ascii_mbtowc+0x1a>
 8014e44:	b14b      	cbz	r3, 8014e5a <__ascii_mbtowc+0x1e>
 8014e46:	7813      	ldrb	r3, [r2, #0]
 8014e48:	600b      	str	r3, [r1, #0]
 8014e4a:	7812      	ldrb	r2, [r2, #0]
 8014e4c:	1c10      	adds	r0, r2, #0
 8014e4e:	bf18      	it	ne
 8014e50:	2001      	movne	r0, #1
 8014e52:	b002      	add	sp, #8
 8014e54:	4770      	bx	lr
 8014e56:	4610      	mov	r0, r2
 8014e58:	e7fb      	b.n	8014e52 <__ascii_mbtowc+0x16>
 8014e5a:	f06f 0001 	mvn.w	r0, #1
 8014e5e:	e7f8      	b.n	8014e52 <__ascii_mbtowc+0x16>

08014e60 <__malloc_lock>:
 8014e60:	4770      	bx	lr

08014e62 <__malloc_unlock>:
 8014e62:	4770      	bx	lr

08014e64 <_Balloc>:
 8014e64:	b570      	push	{r4, r5, r6, lr}
 8014e66:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014e68:	4604      	mov	r4, r0
 8014e6a:	460e      	mov	r6, r1
 8014e6c:	b93d      	cbnz	r5, 8014e7e <_Balloc+0x1a>
 8014e6e:	2010      	movs	r0, #16
 8014e70:	f7fd fcdc 	bl	801282c <malloc>
 8014e74:	6260      	str	r0, [r4, #36]	; 0x24
 8014e76:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014e7a:	6005      	str	r5, [r0, #0]
 8014e7c:	60c5      	str	r5, [r0, #12]
 8014e7e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8014e80:	68eb      	ldr	r3, [r5, #12]
 8014e82:	b183      	cbz	r3, 8014ea6 <_Balloc+0x42>
 8014e84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014e86:	68db      	ldr	r3, [r3, #12]
 8014e88:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8014e8c:	b9b8      	cbnz	r0, 8014ebe <_Balloc+0x5a>
 8014e8e:	2101      	movs	r1, #1
 8014e90:	fa01 f506 	lsl.w	r5, r1, r6
 8014e94:	1d6a      	adds	r2, r5, #5
 8014e96:	0092      	lsls	r2, r2, #2
 8014e98:	4620      	mov	r0, r4
 8014e9a:	f000 fbe3 	bl	8015664 <_calloc_r>
 8014e9e:	b160      	cbz	r0, 8014eba <_Balloc+0x56>
 8014ea0:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8014ea4:	e00e      	b.n	8014ec4 <_Balloc+0x60>
 8014ea6:	2221      	movs	r2, #33	; 0x21
 8014ea8:	2104      	movs	r1, #4
 8014eaa:	4620      	mov	r0, r4
 8014eac:	f000 fbda 	bl	8015664 <_calloc_r>
 8014eb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014eb2:	60e8      	str	r0, [r5, #12]
 8014eb4:	68db      	ldr	r3, [r3, #12]
 8014eb6:	2b00      	cmp	r3, #0
 8014eb8:	d1e4      	bne.n	8014e84 <_Balloc+0x20>
 8014eba:	2000      	movs	r0, #0
 8014ebc:	bd70      	pop	{r4, r5, r6, pc}
 8014ebe:	6802      	ldr	r2, [r0, #0]
 8014ec0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8014ec4:	2300      	movs	r3, #0
 8014ec6:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014eca:	e7f7      	b.n	8014ebc <_Balloc+0x58>

08014ecc <_Bfree>:
 8014ecc:	b570      	push	{r4, r5, r6, lr}
 8014ece:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8014ed0:	4606      	mov	r6, r0
 8014ed2:	460d      	mov	r5, r1
 8014ed4:	b93c      	cbnz	r4, 8014ee6 <_Bfree+0x1a>
 8014ed6:	2010      	movs	r0, #16
 8014ed8:	f7fd fca8 	bl	801282c <malloc>
 8014edc:	6270      	str	r0, [r6, #36]	; 0x24
 8014ede:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014ee2:	6004      	str	r4, [r0, #0]
 8014ee4:	60c4      	str	r4, [r0, #12]
 8014ee6:	b13d      	cbz	r5, 8014ef8 <_Bfree+0x2c>
 8014ee8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8014eea:	686a      	ldr	r2, [r5, #4]
 8014eec:	68db      	ldr	r3, [r3, #12]
 8014eee:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014ef2:	6029      	str	r1, [r5, #0]
 8014ef4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8014ef8:	bd70      	pop	{r4, r5, r6, pc}

08014efa <__multadd>:
 8014efa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014efe:	690d      	ldr	r5, [r1, #16]
 8014f00:	461f      	mov	r7, r3
 8014f02:	4606      	mov	r6, r0
 8014f04:	460c      	mov	r4, r1
 8014f06:	f101 0c14 	add.w	ip, r1, #20
 8014f0a:	2300      	movs	r3, #0
 8014f0c:	f8dc 0000 	ldr.w	r0, [ip]
 8014f10:	b281      	uxth	r1, r0
 8014f12:	fb02 7101 	mla	r1, r2, r1, r7
 8014f16:	0c0f      	lsrs	r7, r1, #16
 8014f18:	0c00      	lsrs	r0, r0, #16
 8014f1a:	fb02 7000 	mla	r0, r2, r0, r7
 8014f1e:	b289      	uxth	r1, r1
 8014f20:	3301      	adds	r3, #1
 8014f22:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8014f26:	429d      	cmp	r5, r3
 8014f28:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8014f2c:	f84c 1b04 	str.w	r1, [ip], #4
 8014f30:	dcec      	bgt.n	8014f0c <__multadd+0x12>
 8014f32:	b1d7      	cbz	r7, 8014f6a <__multadd+0x70>
 8014f34:	68a3      	ldr	r3, [r4, #8]
 8014f36:	42ab      	cmp	r3, r5
 8014f38:	dc12      	bgt.n	8014f60 <__multadd+0x66>
 8014f3a:	6861      	ldr	r1, [r4, #4]
 8014f3c:	4630      	mov	r0, r6
 8014f3e:	3101      	adds	r1, #1
 8014f40:	f7ff ff90 	bl	8014e64 <_Balloc>
 8014f44:	6922      	ldr	r2, [r4, #16]
 8014f46:	3202      	adds	r2, #2
 8014f48:	f104 010c 	add.w	r1, r4, #12
 8014f4c:	4680      	mov	r8, r0
 8014f4e:	0092      	lsls	r2, r2, #2
 8014f50:	300c      	adds	r0, #12
 8014f52:	f7fd fc7b 	bl	801284c <memcpy>
 8014f56:	4621      	mov	r1, r4
 8014f58:	4630      	mov	r0, r6
 8014f5a:	f7ff ffb7 	bl	8014ecc <_Bfree>
 8014f5e:	4644      	mov	r4, r8
 8014f60:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014f64:	3501      	adds	r5, #1
 8014f66:	615f      	str	r7, [r3, #20]
 8014f68:	6125      	str	r5, [r4, #16]
 8014f6a:	4620      	mov	r0, r4
 8014f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014f70 <__s2b>:
 8014f70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014f74:	460c      	mov	r4, r1
 8014f76:	4615      	mov	r5, r2
 8014f78:	461f      	mov	r7, r3
 8014f7a:	2209      	movs	r2, #9
 8014f7c:	3308      	adds	r3, #8
 8014f7e:	4606      	mov	r6, r0
 8014f80:	fb93 f3f2 	sdiv	r3, r3, r2
 8014f84:	2100      	movs	r1, #0
 8014f86:	2201      	movs	r2, #1
 8014f88:	429a      	cmp	r2, r3
 8014f8a:	db20      	blt.n	8014fce <__s2b+0x5e>
 8014f8c:	4630      	mov	r0, r6
 8014f8e:	f7ff ff69 	bl	8014e64 <_Balloc>
 8014f92:	9b08      	ldr	r3, [sp, #32]
 8014f94:	6143      	str	r3, [r0, #20]
 8014f96:	2d09      	cmp	r5, #9
 8014f98:	f04f 0301 	mov.w	r3, #1
 8014f9c:	6103      	str	r3, [r0, #16]
 8014f9e:	dd19      	ble.n	8014fd4 <__s2b+0x64>
 8014fa0:	f104 0809 	add.w	r8, r4, #9
 8014fa4:	46c1      	mov	r9, r8
 8014fa6:	442c      	add	r4, r5
 8014fa8:	f819 3b01 	ldrb.w	r3, [r9], #1
 8014fac:	4601      	mov	r1, r0
 8014fae:	3b30      	subs	r3, #48	; 0x30
 8014fb0:	220a      	movs	r2, #10
 8014fb2:	4630      	mov	r0, r6
 8014fb4:	f7ff ffa1 	bl	8014efa <__multadd>
 8014fb8:	45a1      	cmp	r9, r4
 8014fba:	d1f5      	bne.n	8014fa8 <__s2b+0x38>
 8014fbc:	eb08 0405 	add.w	r4, r8, r5
 8014fc0:	3c08      	subs	r4, #8
 8014fc2:	1b2d      	subs	r5, r5, r4
 8014fc4:	1963      	adds	r3, r4, r5
 8014fc6:	42bb      	cmp	r3, r7
 8014fc8:	db07      	blt.n	8014fda <__s2b+0x6a>
 8014fca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014fce:	0052      	lsls	r2, r2, #1
 8014fd0:	3101      	adds	r1, #1
 8014fd2:	e7d9      	b.n	8014f88 <__s2b+0x18>
 8014fd4:	340a      	adds	r4, #10
 8014fd6:	2509      	movs	r5, #9
 8014fd8:	e7f3      	b.n	8014fc2 <__s2b+0x52>
 8014fda:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014fde:	4601      	mov	r1, r0
 8014fe0:	3b30      	subs	r3, #48	; 0x30
 8014fe2:	220a      	movs	r2, #10
 8014fe4:	4630      	mov	r0, r6
 8014fe6:	f7ff ff88 	bl	8014efa <__multadd>
 8014fea:	e7eb      	b.n	8014fc4 <__s2b+0x54>

08014fec <__hi0bits>:
 8014fec:	0c02      	lsrs	r2, r0, #16
 8014fee:	0412      	lsls	r2, r2, #16
 8014ff0:	4603      	mov	r3, r0
 8014ff2:	b9b2      	cbnz	r2, 8015022 <__hi0bits+0x36>
 8014ff4:	0403      	lsls	r3, r0, #16
 8014ff6:	2010      	movs	r0, #16
 8014ff8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8014ffc:	bf04      	itt	eq
 8014ffe:	021b      	lsleq	r3, r3, #8
 8015000:	3008      	addeq	r0, #8
 8015002:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8015006:	bf04      	itt	eq
 8015008:	011b      	lsleq	r3, r3, #4
 801500a:	3004      	addeq	r0, #4
 801500c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8015010:	bf04      	itt	eq
 8015012:	009b      	lsleq	r3, r3, #2
 8015014:	3002      	addeq	r0, #2
 8015016:	2b00      	cmp	r3, #0
 8015018:	db06      	blt.n	8015028 <__hi0bits+0x3c>
 801501a:	005b      	lsls	r3, r3, #1
 801501c:	d503      	bpl.n	8015026 <__hi0bits+0x3a>
 801501e:	3001      	adds	r0, #1
 8015020:	4770      	bx	lr
 8015022:	2000      	movs	r0, #0
 8015024:	e7e8      	b.n	8014ff8 <__hi0bits+0xc>
 8015026:	2020      	movs	r0, #32
 8015028:	4770      	bx	lr

0801502a <__lo0bits>:
 801502a:	6803      	ldr	r3, [r0, #0]
 801502c:	f013 0207 	ands.w	r2, r3, #7
 8015030:	4601      	mov	r1, r0
 8015032:	d00b      	beq.n	801504c <__lo0bits+0x22>
 8015034:	07da      	lsls	r2, r3, #31
 8015036:	d423      	bmi.n	8015080 <__lo0bits+0x56>
 8015038:	0798      	lsls	r0, r3, #30
 801503a:	bf49      	itett	mi
 801503c:	085b      	lsrmi	r3, r3, #1
 801503e:	089b      	lsrpl	r3, r3, #2
 8015040:	2001      	movmi	r0, #1
 8015042:	600b      	strmi	r3, [r1, #0]
 8015044:	bf5c      	itt	pl
 8015046:	600b      	strpl	r3, [r1, #0]
 8015048:	2002      	movpl	r0, #2
 801504a:	4770      	bx	lr
 801504c:	b298      	uxth	r0, r3
 801504e:	b9a8      	cbnz	r0, 801507c <__lo0bits+0x52>
 8015050:	0c1b      	lsrs	r3, r3, #16
 8015052:	2010      	movs	r0, #16
 8015054:	f013 0fff 	tst.w	r3, #255	; 0xff
 8015058:	bf04      	itt	eq
 801505a:	0a1b      	lsreq	r3, r3, #8
 801505c:	3008      	addeq	r0, #8
 801505e:	071a      	lsls	r2, r3, #28
 8015060:	bf04      	itt	eq
 8015062:	091b      	lsreq	r3, r3, #4
 8015064:	3004      	addeq	r0, #4
 8015066:	079a      	lsls	r2, r3, #30
 8015068:	bf04      	itt	eq
 801506a:	089b      	lsreq	r3, r3, #2
 801506c:	3002      	addeq	r0, #2
 801506e:	07da      	lsls	r2, r3, #31
 8015070:	d402      	bmi.n	8015078 <__lo0bits+0x4e>
 8015072:	085b      	lsrs	r3, r3, #1
 8015074:	d006      	beq.n	8015084 <__lo0bits+0x5a>
 8015076:	3001      	adds	r0, #1
 8015078:	600b      	str	r3, [r1, #0]
 801507a:	4770      	bx	lr
 801507c:	4610      	mov	r0, r2
 801507e:	e7e9      	b.n	8015054 <__lo0bits+0x2a>
 8015080:	2000      	movs	r0, #0
 8015082:	4770      	bx	lr
 8015084:	2020      	movs	r0, #32
 8015086:	4770      	bx	lr

08015088 <__i2b>:
 8015088:	b510      	push	{r4, lr}
 801508a:	460c      	mov	r4, r1
 801508c:	2101      	movs	r1, #1
 801508e:	f7ff fee9 	bl	8014e64 <_Balloc>
 8015092:	2201      	movs	r2, #1
 8015094:	6144      	str	r4, [r0, #20]
 8015096:	6102      	str	r2, [r0, #16]
 8015098:	bd10      	pop	{r4, pc}

0801509a <__multiply>:
 801509a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801509e:	4614      	mov	r4, r2
 80150a0:	690a      	ldr	r2, [r1, #16]
 80150a2:	6923      	ldr	r3, [r4, #16]
 80150a4:	429a      	cmp	r2, r3
 80150a6:	bfb8      	it	lt
 80150a8:	460b      	movlt	r3, r1
 80150aa:	4688      	mov	r8, r1
 80150ac:	bfbc      	itt	lt
 80150ae:	46a0      	movlt	r8, r4
 80150b0:	461c      	movlt	r4, r3
 80150b2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80150b6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80150ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80150be:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80150c2:	eb07 0609 	add.w	r6, r7, r9
 80150c6:	42b3      	cmp	r3, r6
 80150c8:	bfb8      	it	lt
 80150ca:	3101      	addlt	r1, #1
 80150cc:	f7ff feca 	bl	8014e64 <_Balloc>
 80150d0:	f100 0514 	add.w	r5, r0, #20
 80150d4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80150d8:	462b      	mov	r3, r5
 80150da:	2200      	movs	r2, #0
 80150dc:	4573      	cmp	r3, lr
 80150de:	d316      	bcc.n	801510e <__multiply+0x74>
 80150e0:	f104 0214 	add.w	r2, r4, #20
 80150e4:	f108 0114 	add.w	r1, r8, #20
 80150e8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80150ec:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80150f0:	9300      	str	r3, [sp, #0]
 80150f2:	9b00      	ldr	r3, [sp, #0]
 80150f4:	9201      	str	r2, [sp, #4]
 80150f6:	4293      	cmp	r3, r2
 80150f8:	d80c      	bhi.n	8015114 <__multiply+0x7a>
 80150fa:	2e00      	cmp	r6, #0
 80150fc:	dd03      	ble.n	8015106 <__multiply+0x6c>
 80150fe:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8015102:	2b00      	cmp	r3, #0
 8015104:	d05d      	beq.n	80151c2 <__multiply+0x128>
 8015106:	6106      	str	r6, [r0, #16]
 8015108:	b003      	add	sp, #12
 801510a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801510e:	f843 2b04 	str.w	r2, [r3], #4
 8015112:	e7e3      	b.n	80150dc <__multiply+0x42>
 8015114:	f8b2 b000 	ldrh.w	fp, [r2]
 8015118:	f1bb 0f00 	cmp.w	fp, #0
 801511c:	d023      	beq.n	8015166 <__multiply+0xcc>
 801511e:	4689      	mov	r9, r1
 8015120:	46ac      	mov	ip, r5
 8015122:	f04f 0800 	mov.w	r8, #0
 8015126:	f859 4b04 	ldr.w	r4, [r9], #4
 801512a:	f8dc a000 	ldr.w	sl, [ip]
 801512e:	b2a3      	uxth	r3, r4
 8015130:	fa1f fa8a 	uxth.w	sl, sl
 8015134:	fb0b a303 	mla	r3, fp, r3, sl
 8015138:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801513c:	f8dc 4000 	ldr.w	r4, [ip]
 8015140:	4443      	add	r3, r8
 8015142:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8015146:	fb0b 840a 	mla	r4, fp, sl, r8
 801514a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801514e:	46e2      	mov	sl, ip
 8015150:	b29b      	uxth	r3, r3
 8015152:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8015156:	454f      	cmp	r7, r9
 8015158:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801515c:	f84a 3b04 	str.w	r3, [sl], #4
 8015160:	d82b      	bhi.n	80151ba <__multiply+0x120>
 8015162:	f8cc 8004 	str.w	r8, [ip, #4]
 8015166:	9b01      	ldr	r3, [sp, #4]
 8015168:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801516c:	3204      	adds	r2, #4
 801516e:	f1ba 0f00 	cmp.w	sl, #0
 8015172:	d020      	beq.n	80151b6 <__multiply+0x11c>
 8015174:	682b      	ldr	r3, [r5, #0]
 8015176:	4689      	mov	r9, r1
 8015178:	46a8      	mov	r8, r5
 801517a:	f04f 0b00 	mov.w	fp, #0
 801517e:	f8b9 c000 	ldrh.w	ip, [r9]
 8015182:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8015186:	fb0a 440c 	mla	r4, sl, ip, r4
 801518a:	445c      	add	r4, fp
 801518c:	46c4      	mov	ip, r8
 801518e:	b29b      	uxth	r3, r3
 8015190:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8015194:	f84c 3b04 	str.w	r3, [ip], #4
 8015198:	f859 3b04 	ldr.w	r3, [r9], #4
 801519c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80151a0:	0c1b      	lsrs	r3, r3, #16
 80151a2:	fb0a b303 	mla	r3, sl, r3, fp
 80151a6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80151aa:	454f      	cmp	r7, r9
 80151ac:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80151b0:	d805      	bhi.n	80151be <__multiply+0x124>
 80151b2:	f8c8 3004 	str.w	r3, [r8, #4]
 80151b6:	3504      	adds	r5, #4
 80151b8:	e79b      	b.n	80150f2 <__multiply+0x58>
 80151ba:	46d4      	mov	ip, sl
 80151bc:	e7b3      	b.n	8015126 <__multiply+0x8c>
 80151be:	46e0      	mov	r8, ip
 80151c0:	e7dd      	b.n	801517e <__multiply+0xe4>
 80151c2:	3e01      	subs	r6, #1
 80151c4:	e799      	b.n	80150fa <__multiply+0x60>
	...

080151c8 <__pow5mult>:
 80151c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80151cc:	4615      	mov	r5, r2
 80151ce:	f012 0203 	ands.w	r2, r2, #3
 80151d2:	4606      	mov	r6, r0
 80151d4:	460f      	mov	r7, r1
 80151d6:	d007      	beq.n	80151e8 <__pow5mult+0x20>
 80151d8:	3a01      	subs	r2, #1
 80151da:	4c21      	ldr	r4, [pc, #132]	; (8015260 <__pow5mult+0x98>)
 80151dc:	2300      	movs	r3, #0
 80151de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80151e2:	f7ff fe8a 	bl	8014efa <__multadd>
 80151e6:	4607      	mov	r7, r0
 80151e8:	10ad      	asrs	r5, r5, #2
 80151ea:	d035      	beq.n	8015258 <__pow5mult+0x90>
 80151ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80151ee:	b93c      	cbnz	r4, 8015200 <__pow5mult+0x38>
 80151f0:	2010      	movs	r0, #16
 80151f2:	f7fd fb1b 	bl	801282c <malloc>
 80151f6:	6270      	str	r0, [r6, #36]	; 0x24
 80151f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80151fc:	6004      	str	r4, [r0, #0]
 80151fe:	60c4      	str	r4, [r0, #12]
 8015200:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8015204:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015208:	b94c      	cbnz	r4, 801521e <__pow5mult+0x56>
 801520a:	f240 2171 	movw	r1, #625	; 0x271
 801520e:	4630      	mov	r0, r6
 8015210:	f7ff ff3a 	bl	8015088 <__i2b>
 8015214:	2300      	movs	r3, #0
 8015216:	f8c8 0008 	str.w	r0, [r8, #8]
 801521a:	4604      	mov	r4, r0
 801521c:	6003      	str	r3, [r0, #0]
 801521e:	f04f 0800 	mov.w	r8, #0
 8015222:	07eb      	lsls	r3, r5, #31
 8015224:	d50a      	bpl.n	801523c <__pow5mult+0x74>
 8015226:	4639      	mov	r1, r7
 8015228:	4622      	mov	r2, r4
 801522a:	4630      	mov	r0, r6
 801522c:	f7ff ff35 	bl	801509a <__multiply>
 8015230:	4639      	mov	r1, r7
 8015232:	4681      	mov	r9, r0
 8015234:	4630      	mov	r0, r6
 8015236:	f7ff fe49 	bl	8014ecc <_Bfree>
 801523a:	464f      	mov	r7, r9
 801523c:	106d      	asrs	r5, r5, #1
 801523e:	d00b      	beq.n	8015258 <__pow5mult+0x90>
 8015240:	6820      	ldr	r0, [r4, #0]
 8015242:	b938      	cbnz	r0, 8015254 <__pow5mult+0x8c>
 8015244:	4622      	mov	r2, r4
 8015246:	4621      	mov	r1, r4
 8015248:	4630      	mov	r0, r6
 801524a:	f7ff ff26 	bl	801509a <__multiply>
 801524e:	6020      	str	r0, [r4, #0]
 8015250:	f8c0 8000 	str.w	r8, [r0]
 8015254:	4604      	mov	r4, r0
 8015256:	e7e4      	b.n	8015222 <__pow5mult+0x5a>
 8015258:	4638      	mov	r0, r7
 801525a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801525e:	bf00      	nop
 8015260:	080159e8 	.word	0x080159e8

08015264 <__lshift>:
 8015264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015268:	460c      	mov	r4, r1
 801526a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801526e:	6923      	ldr	r3, [r4, #16]
 8015270:	6849      	ldr	r1, [r1, #4]
 8015272:	eb0a 0903 	add.w	r9, sl, r3
 8015276:	68a3      	ldr	r3, [r4, #8]
 8015278:	4607      	mov	r7, r0
 801527a:	4616      	mov	r6, r2
 801527c:	f109 0501 	add.w	r5, r9, #1
 8015280:	42ab      	cmp	r3, r5
 8015282:	db32      	blt.n	80152ea <__lshift+0x86>
 8015284:	4638      	mov	r0, r7
 8015286:	f7ff fded 	bl	8014e64 <_Balloc>
 801528a:	2300      	movs	r3, #0
 801528c:	4680      	mov	r8, r0
 801528e:	f100 0114 	add.w	r1, r0, #20
 8015292:	461a      	mov	r2, r3
 8015294:	4553      	cmp	r3, sl
 8015296:	db2b      	blt.n	80152f0 <__lshift+0x8c>
 8015298:	6920      	ldr	r0, [r4, #16]
 801529a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801529e:	f104 0314 	add.w	r3, r4, #20
 80152a2:	f016 021f 	ands.w	r2, r6, #31
 80152a6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80152aa:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80152ae:	d025      	beq.n	80152fc <__lshift+0x98>
 80152b0:	f1c2 0e20 	rsb	lr, r2, #32
 80152b4:	2000      	movs	r0, #0
 80152b6:	681e      	ldr	r6, [r3, #0]
 80152b8:	468a      	mov	sl, r1
 80152ba:	4096      	lsls	r6, r2
 80152bc:	4330      	orrs	r0, r6
 80152be:	f84a 0b04 	str.w	r0, [sl], #4
 80152c2:	f853 0b04 	ldr.w	r0, [r3], #4
 80152c6:	459c      	cmp	ip, r3
 80152c8:	fa20 f00e 	lsr.w	r0, r0, lr
 80152cc:	d814      	bhi.n	80152f8 <__lshift+0x94>
 80152ce:	6048      	str	r0, [r1, #4]
 80152d0:	b108      	cbz	r0, 80152d6 <__lshift+0x72>
 80152d2:	f109 0502 	add.w	r5, r9, #2
 80152d6:	3d01      	subs	r5, #1
 80152d8:	4638      	mov	r0, r7
 80152da:	f8c8 5010 	str.w	r5, [r8, #16]
 80152de:	4621      	mov	r1, r4
 80152e0:	f7ff fdf4 	bl	8014ecc <_Bfree>
 80152e4:	4640      	mov	r0, r8
 80152e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80152ea:	3101      	adds	r1, #1
 80152ec:	005b      	lsls	r3, r3, #1
 80152ee:	e7c7      	b.n	8015280 <__lshift+0x1c>
 80152f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80152f4:	3301      	adds	r3, #1
 80152f6:	e7cd      	b.n	8015294 <__lshift+0x30>
 80152f8:	4651      	mov	r1, sl
 80152fa:	e7dc      	b.n	80152b6 <__lshift+0x52>
 80152fc:	3904      	subs	r1, #4
 80152fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8015302:	f841 2f04 	str.w	r2, [r1, #4]!
 8015306:	459c      	cmp	ip, r3
 8015308:	d8f9      	bhi.n	80152fe <__lshift+0x9a>
 801530a:	e7e4      	b.n	80152d6 <__lshift+0x72>

0801530c <__mcmp>:
 801530c:	6903      	ldr	r3, [r0, #16]
 801530e:	690a      	ldr	r2, [r1, #16]
 8015310:	1a9b      	subs	r3, r3, r2
 8015312:	b530      	push	{r4, r5, lr}
 8015314:	d10c      	bne.n	8015330 <__mcmp+0x24>
 8015316:	0092      	lsls	r2, r2, #2
 8015318:	3014      	adds	r0, #20
 801531a:	3114      	adds	r1, #20
 801531c:	1884      	adds	r4, r0, r2
 801531e:	4411      	add	r1, r2
 8015320:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8015324:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8015328:	4295      	cmp	r5, r2
 801532a:	d003      	beq.n	8015334 <__mcmp+0x28>
 801532c:	d305      	bcc.n	801533a <__mcmp+0x2e>
 801532e:	2301      	movs	r3, #1
 8015330:	4618      	mov	r0, r3
 8015332:	bd30      	pop	{r4, r5, pc}
 8015334:	42a0      	cmp	r0, r4
 8015336:	d3f3      	bcc.n	8015320 <__mcmp+0x14>
 8015338:	e7fa      	b.n	8015330 <__mcmp+0x24>
 801533a:	f04f 33ff 	mov.w	r3, #4294967295
 801533e:	e7f7      	b.n	8015330 <__mcmp+0x24>

08015340 <__mdiff>:
 8015340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015344:	460d      	mov	r5, r1
 8015346:	4607      	mov	r7, r0
 8015348:	4611      	mov	r1, r2
 801534a:	4628      	mov	r0, r5
 801534c:	4614      	mov	r4, r2
 801534e:	f7ff ffdd 	bl	801530c <__mcmp>
 8015352:	1e06      	subs	r6, r0, #0
 8015354:	d108      	bne.n	8015368 <__mdiff+0x28>
 8015356:	4631      	mov	r1, r6
 8015358:	4638      	mov	r0, r7
 801535a:	f7ff fd83 	bl	8014e64 <_Balloc>
 801535e:	2301      	movs	r3, #1
 8015360:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8015364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015368:	bfa4      	itt	ge
 801536a:	4623      	movge	r3, r4
 801536c:	462c      	movge	r4, r5
 801536e:	4638      	mov	r0, r7
 8015370:	6861      	ldr	r1, [r4, #4]
 8015372:	bfa6      	itte	ge
 8015374:	461d      	movge	r5, r3
 8015376:	2600      	movge	r6, #0
 8015378:	2601      	movlt	r6, #1
 801537a:	f7ff fd73 	bl	8014e64 <_Balloc>
 801537e:	692b      	ldr	r3, [r5, #16]
 8015380:	60c6      	str	r6, [r0, #12]
 8015382:	6926      	ldr	r6, [r4, #16]
 8015384:	f105 0914 	add.w	r9, r5, #20
 8015388:	f104 0214 	add.w	r2, r4, #20
 801538c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8015390:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8015394:	f100 0514 	add.w	r5, r0, #20
 8015398:	f04f 0e00 	mov.w	lr, #0
 801539c:	f852 ab04 	ldr.w	sl, [r2], #4
 80153a0:	f859 4b04 	ldr.w	r4, [r9], #4
 80153a4:	fa1e f18a 	uxtah	r1, lr, sl
 80153a8:	b2a3      	uxth	r3, r4
 80153aa:	1ac9      	subs	r1, r1, r3
 80153ac:	0c23      	lsrs	r3, r4, #16
 80153ae:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80153b2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80153b6:	b289      	uxth	r1, r1
 80153b8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80153bc:	45c8      	cmp	r8, r9
 80153be:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80153c2:	4694      	mov	ip, r2
 80153c4:	f845 3b04 	str.w	r3, [r5], #4
 80153c8:	d8e8      	bhi.n	801539c <__mdiff+0x5c>
 80153ca:	45bc      	cmp	ip, r7
 80153cc:	d304      	bcc.n	80153d8 <__mdiff+0x98>
 80153ce:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80153d2:	b183      	cbz	r3, 80153f6 <__mdiff+0xb6>
 80153d4:	6106      	str	r6, [r0, #16]
 80153d6:	e7c5      	b.n	8015364 <__mdiff+0x24>
 80153d8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80153dc:	fa1e f381 	uxtah	r3, lr, r1
 80153e0:	141a      	asrs	r2, r3, #16
 80153e2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80153e6:	b29b      	uxth	r3, r3
 80153e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80153ec:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80153f0:	f845 3b04 	str.w	r3, [r5], #4
 80153f4:	e7e9      	b.n	80153ca <__mdiff+0x8a>
 80153f6:	3e01      	subs	r6, #1
 80153f8:	e7e9      	b.n	80153ce <__mdiff+0x8e>
	...

080153fc <__ulp>:
 80153fc:	4b12      	ldr	r3, [pc, #72]	; (8015448 <__ulp+0x4c>)
 80153fe:	ee10 2a90 	vmov	r2, s1
 8015402:	401a      	ands	r2, r3
 8015404:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8015408:	2b00      	cmp	r3, #0
 801540a:	dd04      	ble.n	8015416 <__ulp+0x1a>
 801540c:	2000      	movs	r0, #0
 801540e:	4619      	mov	r1, r3
 8015410:	ec41 0b10 	vmov	d0, r0, r1
 8015414:	4770      	bx	lr
 8015416:	425b      	negs	r3, r3
 8015418:	151b      	asrs	r3, r3, #20
 801541a:	2b13      	cmp	r3, #19
 801541c:	f04f 0000 	mov.w	r0, #0
 8015420:	f04f 0100 	mov.w	r1, #0
 8015424:	dc04      	bgt.n	8015430 <__ulp+0x34>
 8015426:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801542a:	fa42 f103 	asr.w	r1, r2, r3
 801542e:	e7ef      	b.n	8015410 <__ulp+0x14>
 8015430:	3b14      	subs	r3, #20
 8015432:	2b1e      	cmp	r3, #30
 8015434:	f04f 0201 	mov.w	r2, #1
 8015438:	bfda      	itte	le
 801543a:	f1c3 031f 	rsble	r3, r3, #31
 801543e:	fa02 f303 	lslle.w	r3, r2, r3
 8015442:	4613      	movgt	r3, r2
 8015444:	4618      	mov	r0, r3
 8015446:	e7e3      	b.n	8015410 <__ulp+0x14>
 8015448:	7ff00000 	.word	0x7ff00000

0801544c <__b2d>:
 801544c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801544e:	6905      	ldr	r5, [r0, #16]
 8015450:	f100 0714 	add.w	r7, r0, #20
 8015454:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8015458:	1f2e      	subs	r6, r5, #4
 801545a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801545e:	4620      	mov	r0, r4
 8015460:	f7ff fdc4 	bl	8014fec <__hi0bits>
 8015464:	f1c0 0320 	rsb	r3, r0, #32
 8015468:	280a      	cmp	r0, #10
 801546a:	600b      	str	r3, [r1, #0]
 801546c:	f8df c074 	ldr.w	ip, [pc, #116]	; 80154e4 <__b2d+0x98>
 8015470:	dc14      	bgt.n	801549c <__b2d+0x50>
 8015472:	f1c0 0e0b 	rsb	lr, r0, #11
 8015476:	fa24 f10e 	lsr.w	r1, r4, lr
 801547a:	42b7      	cmp	r7, r6
 801547c:	ea41 030c 	orr.w	r3, r1, ip
 8015480:	bf34      	ite	cc
 8015482:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8015486:	2100      	movcs	r1, #0
 8015488:	3015      	adds	r0, #21
 801548a:	fa04 f000 	lsl.w	r0, r4, r0
 801548e:	fa21 f10e 	lsr.w	r1, r1, lr
 8015492:	ea40 0201 	orr.w	r2, r0, r1
 8015496:	ec43 2b10 	vmov	d0, r2, r3
 801549a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801549c:	42b7      	cmp	r7, r6
 801549e:	bf3a      	itte	cc
 80154a0:	f1a5 0608 	subcc.w	r6, r5, #8
 80154a4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80154a8:	2100      	movcs	r1, #0
 80154aa:	380b      	subs	r0, #11
 80154ac:	d015      	beq.n	80154da <__b2d+0x8e>
 80154ae:	4084      	lsls	r4, r0
 80154b0:	f1c0 0520 	rsb	r5, r0, #32
 80154b4:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80154b8:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80154bc:	42be      	cmp	r6, r7
 80154be:	fa21 fc05 	lsr.w	ip, r1, r5
 80154c2:	ea44 030c 	orr.w	r3, r4, ip
 80154c6:	bf8c      	ite	hi
 80154c8:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80154cc:	2400      	movls	r4, #0
 80154ce:	fa01 f000 	lsl.w	r0, r1, r0
 80154d2:	40ec      	lsrs	r4, r5
 80154d4:	ea40 0204 	orr.w	r2, r0, r4
 80154d8:	e7dd      	b.n	8015496 <__b2d+0x4a>
 80154da:	ea44 030c 	orr.w	r3, r4, ip
 80154de:	460a      	mov	r2, r1
 80154e0:	e7d9      	b.n	8015496 <__b2d+0x4a>
 80154e2:	bf00      	nop
 80154e4:	3ff00000 	.word	0x3ff00000

080154e8 <__d2b>:
 80154e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80154ec:	460e      	mov	r6, r1
 80154ee:	2101      	movs	r1, #1
 80154f0:	ec59 8b10 	vmov	r8, r9, d0
 80154f4:	4615      	mov	r5, r2
 80154f6:	f7ff fcb5 	bl	8014e64 <_Balloc>
 80154fa:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80154fe:	4607      	mov	r7, r0
 8015500:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015504:	bb34      	cbnz	r4, 8015554 <__d2b+0x6c>
 8015506:	9301      	str	r3, [sp, #4]
 8015508:	f1b8 0300 	subs.w	r3, r8, #0
 801550c:	d027      	beq.n	801555e <__d2b+0x76>
 801550e:	a802      	add	r0, sp, #8
 8015510:	f840 3d08 	str.w	r3, [r0, #-8]!
 8015514:	f7ff fd89 	bl	801502a <__lo0bits>
 8015518:	9900      	ldr	r1, [sp, #0]
 801551a:	b1f0      	cbz	r0, 801555a <__d2b+0x72>
 801551c:	9a01      	ldr	r2, [sp, #4]
 801551e:	f1c0 0320 	rsb	r3, r0, #32
 8015522:	fa02 f303 	lsl.w	r3, r2, r3
 8015526:	430b      	orrs	r3, r1
 8015528:	40c2      	lsrs	r2, r0
 801552a:	617b      	str	r3, [r7, #20]
 801552c:	9201      	str	r2, [sp, #4]
 801552e:	9b01      	ldr	r3, [sp, #4]
 8015530:	61bb      	str	r3, [r7, #24]
 8015532:	2b00      	cmp	r3, #0
 8015534:	bf14      	ite	ne
 8015536:	2102      	movne	r1, #2
 8015538:	2101      	moveq	r1, #1
 801553a:	6139      	str	r1, [r7, #16]
 801553c:	b1c4      	cbz	r4, 8015570 <__d2b+0x88>
 801553e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8015542:	4404      	add	r4, r0
 8015544:	6034      	str	r4, [r6, #0]
 8015546:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801554a:	6028      	str	r0, [r5, #0]
 801554c:	4638      	mov	r0, r7
 801554e:	b003      	add	sp, #12
 8015550:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015554:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015558:	e7d5      	b.n	8015506 <__d2b+0x1e>
 801555a:	6179      	str	r1, [r7, #20]
 801555c:	e7e7      	b.n	801552e <__d2b+0x46>
 801555e:	a801      	add	r0, sp, #4
 8015560:	f7ff fd63 	bl	801502a <__lo0bits>
 8015564:	9b01      	ldr	r3, [sp, #4]
 8015566:	617b      	str	r3, [r7, #20]
 8015568:	2101      	movs	r1, #1
 801556a:	6139      	str	r1, [r7, #16]
 801556c:	3020      	adds	r0, #32
 801556e:	e7e5      	b.n	801553c <__d2b+0x54>
 8015570:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8015574:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8015578:	6030      	str	r0, [r6, #0]
 801557a:	6918      	ldr	r0, [r3, #16]
 801557c:	f7ff fd36 	bl	8014fec <__hi0bits>
 8015580:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8015584:	e7e1      	b.n	801554a <__d2b+0x62>

08015586 <__ratio>:
 8015586:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801558a:	4688      	mov	r8, r1
 801558c:	4669      	mov	r1, sp
 801558e:	4681      	mov	r9, r0
 8015590:	f7ff ff5c 	bl	801544c <__b2d>
 8015594:	a901      	add	r1, sp, #4
 8015596:	4640      	mov	r0, r8
 8015598:	ec57 6b10 	vmov	r6, r7, d0
 801559c:	ee10 4a10 	vmov	r4, s0
 80155a0:	f7ff ff54 	bl	801544c <__b2d>
 80155a4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80155a8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80155ac:	eba3 0c02 	sub.w	ip, r3, r2
 80155b0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80155b4:	1a9b      	subs	r3, r3, r2
 80155b6:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80155ba:	ec51 0b10 	vmov	r0, r1, d0
 80155be:	2b00      	cmp	r3, #0
 80155c0:	ee10 aa10 	vmov	sl, s0
 80155c4:	bfce      	itee	gt
 80155c6:	463a      	movgt	r2, r7
 80155c8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80155cc:	460a      	movle	r2, r1
 80155ce:	463d      	mov	r5, r7
 80155d0:	468b      	mov	fp, r1
 80155d2:	bfcc      	ite	gt
 80155d4:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 80155d8:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80155dc:	ec45 4b17 	vmov	d7, r4, r5
 80155e0:	ec4b ab16 	vmov	d6, sl, fp
 80155e4:	ee87 0b06 	vdiv.f64	d0, d7, d6
 80155e8:	b003      	add	sp, #12
 80155ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080155ee <__copybits>:
 80155ee:	3901      	subs	r1, #1
 80155f0:	b510      	push	{r4, lr}
 80155f2:	1149      	asrs	r1, r1, #5
 80155f4:	6914      	ldr	r4, [r2, #16]
 80155f6:	3101      	adds	r1, #1
 80155f8:	f102 0314 	add.w	r3, r2, #20
 80155fc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8015600:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8015604:	42a3      	cmp	r3, r4
 8015606:	4602      	mov	r2, r0
 8015608:	d303      	bcc.n	8015612 <__copybits+0x24>
 801560a:	2300      	movs	r3, #0
 801560c:	428a      	cmp	r2, r1
 801560e:	d305      	bcc.n	801561c <__copybits+0x2e>
 8015610:	bd10      	pop	{r4, pc}
 8015612:	f853 2b04 	ldr.w	r2, [r3], #4
 8015616:	f840 2b04 	str.w	r2, [r0], #4
 801561a:	e7f3      	b.n	8015604 <__copybits+0x16>
 801561c:	f842 3b04 	str.w	r3, [r2], #4
 8015620:	e7f4      	b.n	801560c <__copybits+0x1e>

08015622 <__any_on>:
 8015622:	f100 0214 	add.w	r2, r0, #20
 8015626:	6900      	ldr	r0, [r0, #16]
 8015628:	114b      	asrs	r3, r1, #5
 801562a:	4298      	cmp	r0, r3
 801562c:	b510      	push	{r4, lr}
 801562e:	db11      	blt.n	8015654 <__any_on+0x32>
 8015630:	dd0a      	ble.n	8015648 <__any_on+0x26>
 8015632:	f011 011f 	ands.w	r1, r1, #31
 8015636:	d007      	beq.n	8015648 <__any_on+0x26>
 8015638:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801563c:	fa24 f001 	lsr.w	r0, r4, r1
 8015640:	fa00 f101 	lsl.w	r1, r0, r1
 8015644:	428c      	cmp	r4, r1
 8015646:	d10b      	bne.n	8015660 <__any_on+0x3e>
 8015648:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801564c:	4293      	cmp	r3, r2
 801564e:	d803      	bhi.n	8015658 <__any_on+0x36>
 8015650:	2000      	movs	r0, #0
 8015652:	bd10      	pop	{r4, pc}
 8015654:	4603      	mov	r3, r0
 8015656:	e7f7      	b.n	8015648 <__any_on+0x26>
 8015658:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801565c:	2900      	cmp	r1, #0
 801565e:	d0f5      	beq.n	801564c <__any_on+0x2a>
 8015660:	2001      	movs	r0, #1
 8015662:	e7f6      	b.n	8015652 <__any_on+0x30>

08015664 <_calloc_r>:
 8015664:	b538      	push	{r3, r4, r5, lr}
 8015666:	fb02 f401 	mul.w	r4, r2, r1
 801566a:	4621      	mov	r1, r4
 801566c:	f7fd f950 	bl	8012910 <_malloc_r>
 8015670:	4605      	mov	r5, r0
 8015672:	b118      	cbz	r0, 801567c <_calloc_r+0x18>
 8015674:	4622      	mov	r2, r4
 8015676:	2100      	movs	r1, #0
 8015678:	f7fd f8f3 	bl	8012862 <memset>
 801567c:	4628      	mov	r0, r5
 801567e:	bd38      	pop	{r3, r4, r5, pc}

08015680 <strncmp>:
 8015680:	b510      	push	{r4, lr}
 8015682:	b16a      	cbz	r2, 80156a0 <strncmp+0x20>
 8015684:	3901      	subs	r1, #1
 8015686:	1884      	adds	r4, r0, r2
 8015688:	f810 3b01 	ldrb.w	r3, [r0], #1
 801568c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8015690:	4293      	cmp	r3, r2
 8015692:	d103      	bne.n	801569c <strncmp+0x1c>
 8015694:	42a0      	cmp	r0, r4
 8015696:	d001      	beq.n	801569c <strncmp+0x1c>
 8015698:	2b00      	cmp	r3, #0
 801569a:	d1f5      	bne.n	8015688 <strncmp+0x8>
 801569c:	1a98      	subs	r0, r3, r2
 801569e:	bd10      	pop	{r4, pc}
 80156a0:	4610      	mov	r0, r2
 80156a2:	e7fc      	b.n	801569e <strncmp+0x1e>

080156a4 <__ascii_wctomb>:
 80156a4:	b149      	cbz	r1, 80156ba <__ascii_wctomb+0x16>
 80156a6:	2aff      	cmp	r2, #255	; 0xff
 80156a8:	bf85      	ittet	hi
 80156aa:	238a      	movhi	r3, #138	; 0x8a
 80156ac:	6003      	strhi	r3, [r0, #0]
 80156ae:	700a      	strbls	r2, [r1, #0]
 80156b0:	f04f 30ff 	movhi.w	r0, #4294967295
 80156b4:	bf98      	it	ls
 80156b6:	2001      	movls	r0, #1
 80156b8:	4770      	bx	lr
 80156ba:	4608      	mov	r0, r1
 80156bc:	4770      	bx	lr
	...

080156c0 <_init>:
 80156c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80156c2:	bf00      	nop
 80156c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80156c6:	bc08      	pop	{r3}
 80156c8:	469e      	mov	lr, r3
 80156ca:	4770      	bx	lr

080156cc <_fini>:
 80156cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80156ce:	bf00      	nop
 80156d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80156d2:	bc08      	pop	{r3}
 80156d4:	469e      	mov	lr, r3
 80156d6:	4770      	bx	lr
